/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareAdapterNvmeInfo struct for VcenterVmHardwareAdapterNvmeInfo
type VcenterVmHardwareAdapterNvmeInfo struct {
	// Device label.
	Label string `json:"label"`
	// NVMe bus number.
	Bus int64 `json:"bus"`
	// Address of the NVMe adapter on the PCI bus. May be unset if the virtual machine has never been powered on since the adapter was created.
	PciSlotNumber *int64 `json:"pci_slot_number,omitempty"`
}

// NewVcenterVmHardwareAdapterNvmeInfo instantiates a new VcenterVmHardwareAdapterNvmeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareAdapterNvmeInfo(label string, bus int64) *VcenterVmHardwareAdapterNvmeInfo {
	this := VcenterVmHardwareAdapterNvmeInfo{}
	this.Label = label
	this.Bus = bus
	return &this
}

// NewVcenterVmHardwareAdapterNvmeInfoWithDefaults instantiates a new VcenterVmHardwareAdapterNvmeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareAdapterNvmeInfoWithDefaults() *VcenterVmHardwareAdapterNvmeInfo {
	this := VcenterVmHardwareAdapterNvmeInfo{}
	return &this
}

// GetLabel returns the Label field value
func (o *VcenterVmHardwareAdapterNvmeInfo) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareAdapterNvmeInfo) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *VcenterVmHardwareAdapterNvmeInfo) SetLabel(v string) {
	o.Label = v
}

// GetBus returns the Bus field value
func (o *VcenterVmHardwareAdapterNvmeInfo) GetBus() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Bus
}

// GetBusOk returns a tuple with the Bus field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareAdapterNvmeInfo) GetBusOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Bus, true
}

// SetBus sets field value
func (o *VcenterVmHardwareAdapterNvmeInfo) SetBus(v int64) {
	o.Bus = v
}

// GetPciSlotNumber returns the PciSlotNumber field value if set, zero value otherwise.
func (o *VcenterVmHardwareAdapterNvmeInfo) GetPciSlotNumber() int64 {
	if o == nil || o.PciSlotNumber == nil {
		var ret int64
		return ret
	}
	return *o.PciSlotNumber
}

// GetPciSlotNumberOk returns a tuple with the PciSlotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareAdapterNvmeInfo) GetPciSlotNumberOk() (*int64, bool) {
	if o == nil || o.PciSlotNumber == nil {
		return nil, false
	}
	return o.PciSlotNumber, true
}

// HasPciSlotNumber returns a boolean if a field has been set.
func (o *VcenterVmHardwareAdapterNvmeInfo) HasPciSlotNumber() bool {
	if o != nil && o.PciSlotNumber != nil {
		return true
	}

	return false
}

// SetPciSlotNumber gets a reference to the given int64 and assigns it to the PciSlotNumber field.
func (o *VcenterVmHardwareAdapterNvmeInfo) SetPciSlotNumber(v int64) {
	o.PciSlotNumber = &v
}

func (o VcenterVmHardwareAdapterNvmeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["bus"] = o.Bus
	}
	if o.PciSlotNumber != nil {
		toSerialize["pci_slot_number"] = o.PciSlotNumber
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareAdapterNvmeInfo struct {
	value *VcenterVmHardwareAdapterNvmeInfo
	isSet bool
}

func (v NullableVcenterVmHardwareAdapterNvmeInfo) Get() *VcenterVmHardwareAdapterNvmeInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareAdapterNvmeInfo) Set(val *VcenterVmHardwareAdapterNvmeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareAdapterNvmeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareAdapterNvmeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareAdapterNvmeInfo(val *VcenterVmHardwareAdapterNvmeInfo) *NullableVcenterVmHardwareAdapterNvmeInfo {
	return &NullableVcenterVmHardwareAdapterNvmeInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareAdapterNvmeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareAdapterNvmeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


