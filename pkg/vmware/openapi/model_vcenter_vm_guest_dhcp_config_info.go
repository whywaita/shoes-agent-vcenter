/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestDhcpConfigInfo struct for VcenterVmGuestDhcpConfigInfo
type VcenterVmGuestDhcpConfigInfo struct {
	// True if IPv4 DHCP is enabled, false otherwise.
	Ipv4Enabled bool `json:"ipv4_enabled"`
	// True if IPv6 DHCP is enabled, false otherwise.
	Ipv6Enabled bool `json:"ipv6_enabled"`
}

// NewVcenterVmGuestDhcpConfigInfo instantiates a new VcenterVmGuestDhcpConfigInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestDhcpConfigInfo(ipv4Enabled bool, ipv6Enabled bool) *VcenterVmGuestDhcpConfigInfo {
	this := VcenterVmGuestDhcpConfigInfo{}
	this.Ipv4Enabled = ipv4Enabled
	this.Ipv6Enabled = ipv6Enabled
	return &this
}

// NewVcenterVmGuestDhcpConfigInfoWithDefaults instantiates a new VcenterVmGuestDhcpConfigInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestDhcpConfigInfoWithDefaults() *VcenterVmGuestDhcpConfigInfo {
	this := VcenterVmGuestDhcpConfigInfo{}
	return &this
}

// GetIpv4Enabled returns the Ipv4Enabled field value
func (o *VcenterVmGuestDhcpConfigInfo) GetIpv4Enabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ipv4Enabled
}

// GetIpv4EnabledOk returns a tuple with the Ipv4Enabled field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestDhcpConfigInfo) GetIpv4EnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ipv4Enabled, true
}

// SetIpv4Enabled sets field value
func (o *VcenterVmGuestDhcpConfigInfo) SetIpv4Enabled(v bool) {
	o.Ipv4Enabled = v
}

// GetIpv6Enabled returns the Ipv6Enabled field value
func (o *VcenterVmGuestDhcpConfigInfo) GetIpv6Enabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ipv6Enabled
}

// GetIpv6EnabledOk returns a tuple with the Ipv6Enabled field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestDhcpConfigInfo) GetIpv6EnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ipv6Enabled, true
}

// SetIpv6Enabled sets field value
func (o *VcenterVmGuestDhcpConfigInfo) SetIpv6Enabled(v bool) {
	o.Ipv6Enabled = v
}

func (o VcenterVmGuestDhcpConfigInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ipv4_enabled"] = o.Ipv4Enabled
	}
	if true {
		toSerialize["ipv6_enabled"] = o.Ipv6Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestDhcpConfigInfo struct {
	value *VcenterVmGuestDhcpConfigInfo
	isSet bool
}

func (v NullableVcenterVmGuestDhcpConfigInfo) Get() *VcenterVmGuestDhcpConfigInfo {
	return v.value
}

func (v *NullableVcenterVmGuestDhcpConfigInfo) Set(val *VcenterVmGuestDhcpConfigInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestDhcpConfigInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestDhcpConfigInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestDhcpConfigInfo(val *VcenterVmGuestDhcpConfigInfo) *NullableVcenterVmGuestDhcpConfigInfo {
	return &NullableVcenterVmGuestDhcpConfigInfo{value: val, isSet: true}
}

func (v NullableVcenterVmGuestDhcpConfigInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestDhcpConfigInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


