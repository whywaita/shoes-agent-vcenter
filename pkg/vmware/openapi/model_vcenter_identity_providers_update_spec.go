/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterIdentityProvidersUpdateSpec struct for VcenterIdentityProvidersUpdateSpec
type VcenterIdentityProvidersUpdateSpec struct {
	ConfigTag VcenterIdentityProvidersConfigType `json:"config_tag"`
	Oauth2 *VcenterIdentityProvidersOauth2UpdateSpec `json:"oauth2,omitempty"`
	Oidc *VcenterIdentityProvidersOidcUpdateSpec `json:"oidc,omitempty"`
	// The set orgIds as part of SDDC creation which provides the basis for tenancy If unset, leaves value unchanged.
	OrgIds *[]string `json:"org_ids,omitempty"`
	// Specifies whether to make this the default provider. If Providers.UpdateSpec.make-default is set to true, this provider will be flagged as the default provider and any other providers that had previously been flagged as the default will be made non-default. If Providers.UpdateSpec.make-default is set to false, this provider's default flag will not be modified. If unset, leaves value unchanged.
	MakeDefault *bool `json:"make_default,omitempty"`
	// The user friendly name for the provider. This name can be used for human-readable identification purposes, but it does not have to be unique, as the system will use internal UUIDs to differentiate providers. If unset, leaves value unchanged.
	Name *string `json:"name,omitempty"`
	// Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains. If unset, leaves value unchanged. If domainNames is an empty set, domain validation behavior at login with this identity provider will be as follows: the user's domain will be parsed from the User Principal Name (UPN) value that is found in the tokens returned by the identity provider. This domain will then be implicitly trusted and used to filter any groups that are also provided in the tokens.
	DomainNames *[]string `json:"domain_names,omitempty"`
	// key/value pairs that are to be appended to the authEndpoint request. How to append to authEndpoint request: If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details: If the value contains only one string, then the key is added with \"k=v\". If the value is an empty list, then the key is added without a \"=v\". If the value contains multiple strings, then the key is repeated in the query-string for each string in the value. If the map is empty, deletes all params. If unset, leaves value unchanged.
	AuthQueryParams *[]VcenterIdentityProvidersCreateSpecAuthQueryParams `json:"auth_query_params,omitempty"`
	IdmProtocol *VcenterIdentityProvidersIdmProtocol `json:"idm_protocol,omitempty"`
	// Identity management endpoints. When specified, at least one endpoint must be provided. This field is optional and it is only relevant when the value of Providers.UpdateSpec.idm-protocol is one of REST, SCIM, or SCIM2_0.
	IdmEndpoints *[]string `json:"idm_endpoints,omitempty"`
	ActiveDirectoryOverLdap *VcenterIdentityProvidersActiveDirectoryOverLdap `json:"active_directory_over_ldap,omitempty"`
	// Specifies which claim provides the user principal name (UPN) for the subject of the token. If unset, leaves value unchanged.
	UpnClaim *string `json:"upn_claim,omitempty"`
	// Flag indicating whether the user principal name (UPN) claim should be set back to its default value. If this field is set to true, the user principal name (UPN) claim will be set to 'acct', which is used for backwards compatibility with CSP. If this field is set to false, the existing user principal name (UPN) claim will be changed to the value specified in Providers.UpdateSpec.upn-claim, if any. If unset, the existing user principal name (UPN) claim will be changed to the value specified in Providers.UpdateSpec.upn-claim, if any.
	ResetUpnClaim *bool `json:"reset_upn_claim,omitempty"`
	// Specifies which claim provides the group membership for the token subject. If unset, leaves value unchanged.
	GroupsClaim *string `json:"groups_claim,omitempty"`
	// Flag indicating whether any existing groups claim value should be removed. If this field is set to true, the existing groups claim value is removed which defaults to backwards compatibility with CSP. In this case, the groups for the subject will be comprised of the groups in 'group_names' and 'group_ids' claims. If this field is set to false, the existing groups claim will be changed to the value specified in Providers.UpdateSpec.groups-claim, if any. If unset, the existing groups claim will be changed to the value specified in Providers.UpdateSpec.groups-claim, if any.
	ResetGroupsClaim *bool `json:"reset_groups_claim,omitempty"`
}

// NewVcenterIdentityProvidersUpdateSpec instantiates a new VcenterIdentityProvidersUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterIdentityProvidersUpdateSpec(configTag VcenterIdentityProvidersConfigType) *VcenterIdentityProvidersUpdateSpec {
	this := VcenterIdentityProvidersUpdateSpec{}
	this.ConfigTag = configTag
	return &this
}

// NewVcenterIdentityProvidersUpdateSpecWithDefaults instantiates a new VcenterIdentityProvidersUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterIdentityProvidersUpdateSpecWithDefaults() *VcenterIdentityProvidersUpdateSpec {
	this := VcenterIdentityProvidersUpdateSpec{}
	return &this
}

// GetConfigTag returns the ConfigTag field value
func (o *VcenterIdentityProvidersUpdateSpec) GetConfigTag() VcenterIdentityProvidersConfigType {
	if o == nil {
		var ret VcenterIdentityProvidersConfigType
		return ret
	}

	return o.ConfigTag
}

// GetConfigTagOk returns a tuple with the ConfigTag field value
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetConfigTagOk() (*VcenterIdentityProvidersConfigType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigTag, true
}

// SetConfigTag sets field value
func (o *VcenterIdentityProvidersUpdateSpec) SetConfigTag(v VcenterIdentityProvidersConfigType) {
	o.ConfigTag = v
}

// GetOauth2 returns the Oauth2 field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetOauth2() VcenterIdentityProvidersOauth2UpdateSpec {
	if o == nil || o.Oauth2 == nil {
		var ret VcenterIdentityProvidersOauth2UpdateSpec
		return ret
	}
	return *o.Oauth2
}

// GetOauth2Ok returns a tuple with the Oauth2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetOauth2Ok() (*VcenterIdentityProvidersOauth2UpdateSpec, bool) {
	if o == nil || o.Oauth2 == nil {
		return nil, false
	}
	return o.Oauth2, true
}

// HasOauth2 returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasOauth2() bool {
	if o != nil && o.Oauth2 != nil {
		return true
	}

	return false
}

// SetOauth2 gets a reference to the given VcenterIdentityProvidersOauth2UpdateSpec and assigns it to the Oauth2 field.
func (o *VcenterIdentityProvidersUpdateSpec) SetOauth2(v VcenterIdentityProvidersOauth2UpdateSpec) {
	o.Oauth2 = &v
}

// GetOidc returns the Oidc field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetOidc() VcenterIdentityProvidersOidcUpdateSpec {
	if o == nil || o.Oidc == nil {
		var ret VcenterIdentityProvidersOidcUpdateSpec
		return ret
	}
	return *o.Oidc
}

// GetOidcOk returns a tuple with the Oidc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetOidcOk() (*VcenterIdentityProvidersOidcUpdateSpec, bool) {
	if o == nil || o.Oidc == nil {
		return nil, false
	}
	return o.Oidc, true
}

// HasOidc returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasOidc() bool {
	if o != nil && o.Oidc != nil {
		return true
	}

	return false
}

// SetOidc gets a reference to the given VcenterIdentityProvidersOidcUpdateSpec and assigns it to the Oidc field.
func (o *VcenterIdentityProvidersUpdateSpec) SetOidc(v VcenterIdentityProvidersOidcUpdateSpec) {
	o.Oidc = &v
}

// GetOrgIds returns the OrgIds field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetOrgIds() []string {
	if o == nil || o.OrgIds == nil {
		var ret []string
		return ret
	}
	return *o.OrgIds
}

// GetOrgIdsOk returns a tuple with the OrgIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetOrgIdsOk() (*[]string, bool) {
	if o == nil || o.OrgIds == nil {
		return nil, false
	}
	return o.OrgIds, true
}

// HasOrgIds returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasOrgIds() bool {
	if o != nil && o.OrgIds != nil {
		return true
	}

	return false
}

// SetOrgIds gets a reference to the given []string and assigns it to the OrgIds field.
func (o *VcenterIdentityProvidersUpdateSpec) SetOrgIds(v []string) {
	o.OrgIds = &v
}

// GetMakeDefault returns the MakeDefault field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetMakeDefault() bool {
	if o == nil || o.MakeDefault == nil {
		var ret bool
		return ret
	}
	return *o.MakeDefault
}

// GetMakeDefaultOk returns a tuple with the MakeDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetMakeDefaultOk() (*bool, bool) {
	if o == nil || o.MakeDefault == nil {
		return nil, false
	}
	return o.MakeDefault, true
}

// HasMakeDefault returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasMakeDefault() bool {
	if o != nil && o.MakeDefault != nil {
		return true
	}

	return false
}

// SetMakeDefault gets a reference to the given bool and assigns it to the MakeDefault field.
func (o *VcenterIdentityProvidersUpdateSpec) SetMakeDefault(v bool) {
	o.MakeDefault = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VcenterIdentityProvidersUpdateSpec) SetName(v string) {
	o.Name = &v
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetDomainNames() []string {
	if o == nil || o.DomainNames == nil {
		var ret []string
		return ret
	}
	return *o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetDomainNamesOk() (*[]string, bool) {
	if o == nil || o.DomainNames == nil {
		return nil, false
	}
	return o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasDomainNames() bool {
	if o != nil && o.DomainNames != nil {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *VcenterIdentityProvidersUpdateSpec) SetDomainNames(v []string) {
	o.DomainNames = &v
}

// GetAuthQueryParams returns the AuthQueryParams field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetAuthQueryParams() []VcenterIdentityProvidersCreateSpecAuthQueryParams {
	if o == nil || o.AuthQueryParams == nil {
		var ret []VcenterIdentityProvidersCreateSpecAuthQueryParams
		return ret
	}
	return *o.AuthQueryParams
}

// GetAuthQueryParamsOk returns a tuple with the AuthQueryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetAuthQueryParamsOk() (*[]VcenterIdentityProvidersCreateSpecAuthQueryParams, bool) {
	if o == nil || o.AuthQueryParams == nil {
		return nil, false
	}
	return o.AuthQueryParams, true
}

// HasAuthQueryParams returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasAuthQueryParams() bool {
	if o != nil && o.AuthQueryParams != nil {
		return true
	}

	return false
}

// SetAuthQueryParams gets a reference to the given []VcenterIdentityProvidersCreateSpecAuthQueryParams and assigns it to the AuthQueryParams field.
func (o *VcenterIdentityProvidersUpdateSpec) SetAuthQueryParams(v []VcenterIdentityProvidersCreateSpecAuthQueryParams) {
	o.AuthQueryParams = &v
}

// GetIdmProtocol returns the IdmProtocol field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetIdmProtocol() VcenterIdentityProvidersIdmProtocol {
	if o == nil || o.IdmProtocol == nil {
		var ret VcenterIdentityProvidersIdmProtocol
		return ret
	}
	return *o.IdmProtocol
}

// GetIdmProtocolOk returns a tuple with the IdmProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetIdmProtocolOk() (*VcenterIdentityProvidersIdmProtocol, bool) {
	if o == nil || o.IdmProtocol == nil {
		return nil, false
	}
	return o.IdmProtocol, true
}

// HasIdmProtocol returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasIdmProtocol() bool {
	if o != nil && o.IdmProtocol != nil {
		return true
	}

	return false
}

// SetIdmProtocol gets a reference to the given VcenterIdentityProvidersIdmProtocol and assigns it to the IdmProtocol field.
func (o *VcenterIdentityProvidersUpdateSpec) SetIdmProtocol(v VcenterIdentityProvidersIdmProtocol) {
	o.IdmProtocol = &v
}

// GetIdmEndpoints returns the IdmEndpoints field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetIdmEndpoints() []string {
	if o == nil || o.IdmEndpoints == nil {
		var ret []string
		return ret
	}
	return *o.IdmEndpoints
}

// GetIdmEndpointsOk returns a tuple with the IdmEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetIdmEndpointsOk() (*[]string, bool) {
	if o == nil || o.IdmEndpoints == nil {
		return nil, false
	}
	return o.IdmEndpoints, true
}

// HasIdmEndpoints returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasIdmEndpoints() bool {
	if o != nil && o.IdmEndpoints != nil {
		return true
	}

	return false
}

// SetIdmEndpoints gets a reference to the given []string and assigns it to the IdmEndpoints field.
func (o *VcenterIdentityProvidersUpdateSpec) SetIdmEndpoints(v []string) {
	o.IdmEndpoints = &v
}

// GetActiveDirectoryOverLdap returns the ActiveDirectoryOverLdap field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetActiveDirectoryOverLdap() VcenterIdentityProvidersActiveDirectoryOverLdap {
	if o == nil || o.ActiveDirectoryOverLdap == nil {
		var ret VcenterIdentityProvidersActiveDirectoryOverLdap
		return ret
	}
	return *o.ActiveDirectoryOverLdap
}

// GetActiveDirectoryOverLdapOk returns a tuple with the ActiveDirectoryOverLdap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetActiveDirectoryOverLdapOk() (*VcenterIdentityProvidersActiveDirectoryOverLdap, bool) {
	if o == nil || o.ActiveDirectoryOverLdap == nil {
		return nil, false
	}
	return o.ActiveDirectoryOverLdap, true
}

// HasActiveDirectoryOverLdap returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasActiveDirectoryOverLdap() bool {
	if o != nil && o.ActiveDirectoryOverLdap != nil {
		return true
	}

	return false
}

// SetActiveDirectoryOverLdap gets a reference to the given VcenterIdentityProvidersActiveDirectoryOverLdap and assigns it to the ActiveDirectoryOverLdap field.
func (o *VcenterIdentityProvidersUpdateSpec) SetActiveDirectoryOverLdap(v VcenterIdentityProvidersActiveDirectoryOverLdap) {
	o.ActiveDirectoryOverLdap = &v
}

// GetUpnClaim returns the UpnClaim field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetUpnClaim() string {
	if o == nil || o.UpnClaim == nil {
		var ret string
		return ret
	}
	return *o.UpnClaim
}

// GetUpnClaimOk returns a tuple with the UpnClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetUpnClaimOk() (*string, bool) {
	if o == nil || o.UpnClaim == nil {
		return nil, false
	}
	return o.UpnClaim, true
}

// HasUpnClaim returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasUpnClaim() bool {
	if o != nil && o.UpnClaim != nil {
		return true
	}

	return false
}

// SetUpnClaim gets a reference to the given string and assigns it to the UpnClaim field.
func (o *VcenterIdentityProvidersUpdateSpec) SetUpnClaim(v string) {
	o.UpnClaim = &v
}

// GetResetUpnClaim returns the ResetUpnClaim field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetResetUpnClaim() bool {
	if o == nil || o.ResetUpnClaim == nil {
		var ret bool
		return ret
	}
	return *o.ResetUpnClaim
}

// GetResetUpnClaimOk returns a tuple with the ResetUpnClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetResetUpnClaimOk() (*bool, bool) {
	if o == nil || o.ResetUpnClaim == nil {
		return nil, false
	}
	return o.ResetUpnClaim, true
}

// HasResetUpnClaim returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasResetUpnClaim() bool {
	if o != nil && o.ResetUpnClaim != nil {
		return true
	}

	return false
}

// SetResetUpnClaim gets a reference to the given bool and assigns it to the ResetUpnClaim field.
func (o *VcenterIdentityProvidersUpdateSpec) SetResetUpnClaim(v bool) {
	o.ResetUpnClaim = &v
}

// GetGroupsClaim returns the GroupsClaim field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetGroupsClaim() string {
	if o == nil || o.GroupsClaim == nil {
		var ret string
		return ret
	}
	return *o.GroupsClaim
}

// GetGroupsClaimOk returns a tuple with the GroupsClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetGroupsClaimOk() (*string, bool) {
	if o == nil || o.GroupsClaim == nil {
		return nil, false
	}
	return o.GroupsClaim, true
}

// HasGroupsClaim returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasGroupsClaim() bool {
	if o != nil && o.GroupsClaim != nil {
		return true
	}

	return false
}

// SetGroupsClaim gets a reference to the given string and assigns it to the GroupsClaim field.
func (o *VcenterIdentityProvidersUpdateSpec) SetGroupsClaim(v string) {
	o.GroupsClaim = &v
}

// GetResetGroupsClaim returns the ResetGroupsClaim field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersUpdateSpec) GetResetGroupsClaim() bool {
	if o == nil || o.ResetGroupsClaim == nil {
		var ret bool
		return ret
	}
	return *o.ResetGroupsClaim
}

// GetResetGroupsClaimOk returns a tuple with the ResetGroupsClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersUpdateSpec) GetResetGroupsClaimOk() (*bool, bool) {
	if o == nil || o.ResetGroupsClaim == nil {
		return nil, false
	}
	return o.ResetGroupsClaim, true
}

// HasResetGroupsClaim returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersUpdateSpec) HasResetGroupsClaim() bool {
	if o != nil && o.ResetGroupsClaim != nil {
		return true
	}

	return false
}

// SetResetGroupsClaim gets a reference to the given bool and assigns it to the ResetGroupsClaim field.
func (o *VcenterIdentityProvidersUpdateSpec) SetResetGroupsClaim(v bool) {
	o.ResetGroupsClaim = &v
}

func (o VcenterIdentityProvidersUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["config_tag"] = o.ConfigTag
	}
	if o.Oauth2 != nil {
		toSerialize["oauth2"] = o.Oauth2
	}
	if o.Oidc != nil {
		toSerialize["oidc"] = o.Oidc
	}
	if o.OrgIds != nil {
		toSerialize["org_ids"] = o.OrgIds
	}
	if o.MakeDefault != nil {
		toSerialize["make_default"] = o.MakeDefault
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DomainNames != nil {
		toSerialize["domain_names"] = o.DomainNames
	}
	if o.AuthQueryParams != nil {
		toSerialize["auth_query_params"] = o.AuthQueryParams
	}
	if o.IdmProtocol != nil {
		toSerialize["idm_protocol"] = o.IdmProtocol
	}
	if o.IdmEndpoints != nil {
		toSerialize["idm_endpoints"] = o.IdmEndpoints
	}
	if o.ActiveDirectoryOverLdap != nil {
		toSerialize["active_directory_over_ldap"] = o.ActiveDirectoryOverLdap
	}
	if o.UpnClaim != nil {
		toSerialize["upn_claim"] = o.UpnClaim
	}
	if o.ResetUpnClaim != nil {
		toSerialize["reset_upn_claim"] = o.ResetUpnClaim
	}
	if o.GroupsClaim != nil {
		toSerialize["groups_claim"] = o.GroupsClaim
	}
	if o.ResetGroupsClaim != nil {
		toSerialize["reset_groups_claim"] = o.ResetGroupsClaim
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterIdentityProvidersUpdateSpec struct {
	value *VcenterIdentityProvidersUpdateSpec
	isSet bool
}

func (v NullableVcenterIdentityProvidersUpdateSpec) Get() *VcenterIdentityProvidersUpdateSpec {
	return v.value
}

func (v *NullableVcenterIdentityProvidersUpdateSpec) Set(val *VcenterIdentityProvidersUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterIdentityProvidersUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterIdentityProvidersUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterIdentityProvidersUpdateSpec(val *VcenterIdentityProvidersUpdateSpec) *NullableVcenterIdentityProvidersUpdateSpec {
	return &NullableVcenterIdentityProvidersUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterIdentityProvidersUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterIdentityProvidersUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


