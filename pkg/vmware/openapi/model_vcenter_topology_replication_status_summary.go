/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterTopologyReplicationStatusSummary struct for VcenterTopologyReplicationStatusSummary
type VcenterTopologyReplicationStatusSummary struct {
	// Identifier for the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name.
	Node string `json:"node"`
	// Identifier for the vCenter or Platform Services Controller replication partner. Identifier can be either IP address or DNS resolvable name of the replication partner. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name.
	ReplicationPartner string `json:"replication_partner"`
	// Indicates if the VMware Directory Service on partner is reachable or not.
	PartnerAvailable bool `json:"partner_available"`
	// Indicates if the replication status for the node with respect to replication partner can be retrieved or not.
	StatusAvailable bool `json:"status_available"`
	// Indicates if node is processing replication changes from the replication partner. This field will be unset if the partner host or replication status is not available, i.e, if ReplicationStatus.Summary.partner-available or ReplicationStatus.Summary.status-available is false.
	Replicating *bool `json:"replicating,omitempty"`
	// Number of replication changes node is behind the replication partner. This field will be unset if the partner host or replication status is not available, i.e, if ReplicationStatus.Summary.partner-available or ReplicationStatus.Summary.status-available is false.
	ChangeLag *int64 `json:"change_lag,omitempty"`
}

// NewVcenterTopologyReplicationStatusSummary instantiates a new VcenterTopologyReplicationStatusSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterTopologyReplicationStatusSummary(node string, replicationPartner string, partnerAvailable bool, statusAvailable bool) *VcenterTopologyReplicationStatusSummary {
	this := VcenterTopologyReplicationStatusSummary{}
	this.Node = node
	this.ReplicationPartner = replicationPartner
	this.PartnerAvailable = partnerAvailable
	this.StatusAvailable = statusAvailable
	return &this
}

// NewVcenterTopologyReplicationStatusSummaryWithDefaults instantiates a new VcenterTopologyReplicationStatusSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterTopologyReplicationStatusSummaryWithDefaults() *VcenterTopologyReplicationStatusSummary {
	this := VcenterTopologyReplicationStatusSummary{}
	return &this
}

// GetNode returns the Node field value
func (o *VcenterTopologyReplicationStatusSummary) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *VcenterTopologyReplicationStatusSummary) GetNodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *VcenterTopologyReplicationStatusSummary) SetNode(v string) {
	o.Node = v
}

// GetReplicationPartner returns the ReplicationPartner field value
func (o *VcenterTopologyReplicationStatusSummary) GetReplicationPartner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReplicationPartner
}

// GetReplicationPartnerOk returns a tuple with the ReplicationPartner field value
// and a boolean to check if the value has been set.
func (o *VcenterTopologyReplicationStatusSummary) GetReplicationPartnerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ReplicationPartner, true
}

// SetReplicationPartner sets field value
func (o *VcenterTopologyReplicationStatusSummary) SetReplicationPartner(v string) {
	o.ReplicationPartner = v
}

// GetPartnerAvailable returns the PartnerAvailable field value
func (o *VcenterTopologyReplicationStatusSummary) GetPartnerAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PartnerAvailable
}

// GetPartnerAvailableOk returns a tuple with the PartnerAvailable field value
// and a boolean to check if the value has been set.
func (o *VcenterTopologyReplicationStatusSummary) GetPartnerAvailableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PartnerAvailable, true
}

// SetPartnerAvailable sets field value
func (o *VcenterTopologyReplicationStatusSummary) SetPartnerAvailable(v bool) {
	o.PartnerAvailable = v
}

// GetStatusAvailable returns the StatusAvailable field value
func (o *VcenterTopologyReplicationStatusSummary) GetStatusAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StatusAvailable
}

// GetStatusAvailableOk returns a tuple with the StatusAvailable field value
// and a boolean to check if the value has been set.
func (o *VcenterTopologyReplicationStatusSummary) GetStatusAvailableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StatusAvailable, true
}

// SetStatusAvailable sets field value
func (o *VcenterTopologyReplicationStatusSummary) SetStatusAvailable(v bool) {
	o.StatusAvailable = v
}

// GetReplicating returns the Replicating field value if set, zero value otherwise.
func (o *VcenterTopologyReplicationStatusSummary) GetReplicating() bool {
	if o == nil || o.Replicating == nil {
		var ret bool
		return ret
	}
	return *o.Replicating
}

// GetReplicatingOk returns a tuple with the Replicating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTopologyReplicationStatusSummary) GetReplicatingOk() (*bool, bool) {
	if o == nil || o.Replicating == nil {
		return nil, false
	}
	return o.Replicating, true
}

// HasReplicating returns a boolean if a field has been set.
func (o *VcenterTopologyReplicationStatusSummary) HasReplicating() bool {
	if o != nil && o.Replicating != nil {
		return true
	}

	return false
}

// SetReplicating gets a reference to the given bool and assigns it to the Replicating field.
func (o *VcenterTopologyReplicationStatusSummary) SetReplicating(v bool) {
	o.Replicating = &v
}

// GetChangeLag returns the ChangeLag field value if set, zero value otherwise.
func (o *VcenterTopologyReplicationStatusSummary) GetChangeLag() int64 {
	if o == nil || o.ChangeLag == nil {
		var ret int64
		return ret
	}
	return *o.ChangeLag
}

// GetChangeLagOk returns a tuple with the ChangeLag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTopologyReplicationStatusSummary) GetChangeLagOk() (*int64, bool) {
	if o == nil || o.ChangeLag == nil {
		return nil, false
	}
	return o.ChangeLag, true
}

// HasChangeLag returns a boolean if a field has been set.
func (o *VcenterTopologyReplicationStatusSummary) HasChangeLag() bool {
	if o != nil && o.ChangeLag != nil {
		return true
	}

	return false
}

// SetChangeLag gets a reference to the given int64 and assigns it to the ChangeLag field.
func (o *VcenterTopologyReplicationStatusSummary) SetChangeLag(v int64) {
	o.ChangeLag = &v
}

func (o VcenterTopologyReplicationStatusSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["node"] = o.Node
	}
	if true {
		toSerialize["replication_partner"] = o.ReplicationPartner
	}
	if true {
		toSerialize["partner_available"] = o.PartnerAvailable
	}
	if true {
		toSerialize["status_available"] = o.StatusAvailable
	}
	if o.Replicating != nil {
		toSerialize["replicating"] = o.Replicating
	}
	if o.ChangeLag != nil {
		toSerialize["change_lag"] = o.ChangeLag
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterTopologyReplicationStatusSummary struct {
	value *VcenterTopologyReplicationStatusSummary
	isSet bool
}

func (v NullableVcenterTopologyReplicationStatusSummary) Get() *VcenterTopologyReplicationStatusSummary {
	return v.value
}

func (v *NullableVcenterTopologyReplicationStatusSummary) Set(val *VcenterTopologyReplicationStatusSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterTopologyReplicationStatusSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterTopologyReplicationStatusSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterTopologyReplicationStatusSummary(val *VcenterTopologyReplicationStatusSummary) *NullableVcenterTopologyReplicationStatusSummary {
	return &NullableVcenterTopologyReplicationStatusSummary{value: val, isSet: true}
}

func (v NullableVcenterTopologyReplicationStatusSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterTopologyReplicationStatusSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


