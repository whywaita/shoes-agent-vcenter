/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec struct for VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec
type VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec struct {
	// CIDR blocks from which Kubernetes allocates pod IP addresses. This range should not overlap with those in vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkEnableSpec.ingress-cidrs, Clusters.NCPClusterNetworkEnableSpec.egress-cidrs, or other services running in the datacenter. All Pod CIDR blocks must be of at least subnet size /23.
	PodCidrs []VcenterNamespaceManagementIpv4Cidr `json:"pod_cidrs"`
	// CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer. These ranges should not overlap with those in Clusters.NCPClusterNetworkEnableSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkEnableSpec.egress-cidrs, or other services running in the datacenter.
	IngressCidrs []VcenterNamespaceManagementIpv4Cidr `json:"ingress_cidrs"`
	// CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs. These ranges should not overlap with those in Clusters.NCPClusterNetworkEnableSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkEnableSpec.ingress-cidrs, or other services running in the datacenter.
	EgressCidrs []VcenterNamespaceManagementIpv4Cidr `json:"egress_cidrs"`
	// vSphere Distributed Switch used to connect this cluster. This field is required when configuring a cluster that uses NSX-T. If unset and using NSXe, the system will choose a suitable vSphere Distributed Switch. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vSphereDistributedSwitch. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vSphereDistributedSwitch.
	ClusterDistributedSwitch *string `json:"cluster_distributed_switch,omitempty"`
	// NSX Edge Cluster to be used for Kubernetes Services of type LoadBalancer, Kubernetes Ingresses, and NSX SNAT. This field is required when configuring a cluster that uses NSX-T. If unset and using NSXe, the system will choose a suitable NSX Edge Cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: NSXEdgeCluster. When operations return a value of this structure as a result, the field will be an identifier for the resource type: NSXEdgeCluster.
	NsxEdgeCluster *string `json:"nsx_edge_cluster,omitempty"`
}

// NewVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec instantiates a new VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec(podCidrs []VcenterNamespaceManagementIpv4Cidr, ingressCidrs []VcenterNamespaceManagementIpv4Cidr, egressCidrs []VcenterNamespaceManagementIpv4Cidr) *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec {
	this := VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec{}
	this.PodCidrs = podCidrs
	this.IngressCidrs = ingressCidrs
	this.EgressCidrs = egressCidrs
	return &this
}

// NewVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpecWithDefaults instantiates a new VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpecWithDefaults() *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec {
	this := VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec{}
	return &this
}

// GetPodCidrs returns the PodCidrs field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) GetPodCidrs() []VcenterNamespaceManagementIpv4Cidr {
	if o == nil {
		var ret []VcenterNamespaceManagementIpv4Cidr
		return ret
	}

	return o.PodCidrs
}

// GetPodCidrsOk returns a tuple with the PodCidrs field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) GetPodCidrsOk() (*[]VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PodCidrs, true
}

// SetPodCidrs sets field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) SetPodCidrs(v []VcenterNamespaceManagementIpv4Cidr) {
	o.PodCidrs = v
}

// GetIngressCidrs returns the IngressCidrs field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) GetIngressCidrs() []VcenterNamespaceManagementIpv4Cidr {
	if o == nil {
		var ret []VcenterNamespaceManagementIpv4Cidr
		return ret
	}

	return o.IngressCidrs
}

// GetIngressCidrsOk returns a tuple with the IngressCidrs field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) GetIngressCidrsOk() (*[]VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IngressCidrs, true
}

// SetIngressCidrs sets field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) SetIngressCidrs(v []VcenterNamespaceManagementIpv4Cidr) {
	o.IngressCidrs = v
}

// GetEgressCidrs returns the EgressCidrs field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) GetEgressCidrs() []VcenterNamespaceManagementIpv4Cidr {
	if o == nil {
		var ret []VcenterNamespaceManagementIpv4Cidr
		return ret
	}

	return o.EgressCidrs
}

// GetEgressCidrsOk returns a tuple with the EgressCidrs field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) GetEgressCidrsOk() (*[]VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EgressCidrs, true
}

// SetEgressCidrs sets field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) SetEgressCidrs(v []VcenterNamespaceManagementIpv4Cidr) {
	o.EgressCidrs = v
}

// GetClusterDistributedSwitch returns the ClusterDistributedSwitch field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) GetClusterDistributedSwitch() string {
	if o == nil || o.ClusterDistributedSwitch == nil {
		var ret string
		return ret
	}
	return *o.ClusterDistributedSwitch
}

// GetClusterDistributedSwitchOk returns a tuple with the ClusterDistributedSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) GetClusterDistributedSwitchOk() (*string, bool) {
	if o == nil || o.ClusterDistributedSwitch == nil {
		return nil, false
	}
	return o.ClusterDistributedSwitch, true
}

// HasClusterDistributedSwitch returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) HasClusterDistributedSwitch() bool {
	if o != nil && o.ClusterDistributedSwitch != nil {
		return true
	}

	return false
}

// SetClusterDistributedSwitch gets a reference to the given string and assigns it to the ClusterDistributedSwitch field.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) SetClusterDistributedSwitch(v string) {
	o.ClusterDistributedSwitch = &v
}

// GetNsxEdgeCluster returns the NsxEdgeCluster field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) GetNsxEdgeCluster() string {
	if o == nil || o.NsxEdgeCluster == nil {
		var ret string
		return ret
	}
	return *o.NsxEdgeCluster
}

// GetNsxEdgeClusterOk returns a tuple with the NsxEdgeCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) GetNsxEdgeClusterOk() (*string, bool) {
	if o == nil || o.NsxEdgeCluster == nil {
		return nil, false
	}
	return o.NsxEdgeCluster, true
}

// HasNsxEdgeCluster returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) HasNsxEdgeCluster() bool {
	if o != nil && o.NsxEdgeCluster != nil {
		return true
	}

	return false
}

// SetNsxEdgeCluster gets a reference to the given string and assigns it to the NsxEdgeCluster field.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) SetNsxEdgeCluster(v string) {
	o.NsxEdgeCluster = &v
}

func (o VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pod_cidrs"] = o.PodCidrs
	}
	if true {
		toSerialize["ingress_cidrs"] = o.IngressCidrs
	}
	if true {
		toSerialize["egress_cidrs"] = o.EgressCidrs
	}
	if o.ClusterDistributedSwitch != nil {
		toSerialize["cluster_distributed_switch"] = o.ClusterDistributedSwitch
	}
	if o.NsxEdgeCluster != nil {
		toSerialize["nsx_edge_cluster"] = o.NsxEdgeCluster
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec struct {
	value *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) Get() *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) Set(val *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec(val *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) *NullableVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec {
	return &NullableVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


