/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterFolderSummary struct for VcenterFolderSummary
type VcenterFolderSummary struct {
	// Identifier of the folder. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.
	Folder string `json:"folder"`
	// Name of the vCenter Server folder.
	Name string `json:"name"`
	Type VcenterFolderType `json:"type"`
}

// NewVcenterFolderSummary instantiates a new VcenterFolderSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterFolderSummary(folder string, name string, type_ VcenterFolderType) *VcenterFolderSummary {
	this := VcenterFolderSummary{}
	this.Folder = folder
	this.Name = name
	this.Type = type_
	return &this
}

// NewVcenterFolderSummaryWithDefaults instantiates a new VcenterFolderSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterFolderSummaryWithDefaults() *VcenterFolderSummary {
	this := VcenterFolderSummary{}
	return &this
}

// GetFolder returns the Folder field value
func (o *VcenterFolderSummary) GetFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Folder
}

// GetFolderOk returns a tuple with the Folder field value
// and a boolean to check if the value has been set.
func (o *VcenterFolderSummary) GetFolderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Folder, true
}

// SetFolder sets field value
func (o *VcenterFolderSummary) SetFolder(v string) {
	o.Folder = v
}

// GetName returns the Name field value
func (o *VcenterFolderSummary) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterFolderSummary) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterFolderSummary) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *VcenterFolderSummary) GetType() VcenterFolderType {
	if o == nil {
		var ret VcenterFolderType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterFolderSummary) GetTypeOk() (*VcenterFolderType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterFolderSummary) SetType(v VcenterFolderType) {
	o.Type = v
}

func (o VcenterFolderSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["folder"] = o.Folder
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterFolderSummary struct {
	value *VcenterFolderSummary
	isSet bool
}

func (v NullableVcenterFolderSummary) Get() *VcenterFolderSummary {
	return v.value
}

func (v *NullableVcenterFolderSummary) Set(val *VcenterFolderSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterFolderSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterFolderSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterFolderSummary(val *VcenterFolderSummary) *NullableVcenterFolderSummary {
	return &NullableVcenterFolderSummary{value: val, isSet: true}
}

func (v NullableVcenterFolderSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterFolderSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


