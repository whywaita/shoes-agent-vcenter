/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementClustersNetworkSpecIpv4Mode The Clusters.NetworkSpec.Ipv4Mode enumerated type defines various IPv4 address assignment modes.
type VcenterNamespaceManagementClustersNetworkSpecIpv4Mode string

// List of VcenterNamespaceManagementClustersNetworkSpecIpv4Mode
const (
	VCENTERNAMESPACEMANAGEMENTCLUSTERSNETWORKSPECIPV4MODE_DHCP VcenterNamespaceManagementClustersNetworkSpecIpv4Mode = "DHCP"
	VCENTERNAMESPACEMANAGEMENTCLUSTERSNETWORKSPECIPV4MODE_STATICRANGE VcenterNamespaceManagementClustersNetworkSpecIpv4Mode = "STATICRANGE"
)

// All allowed values of VcenterNamespaceManagementClustersNetworkSpecIpv4Mode enum
var AllowedVcenterNamespaceManagementClustersNetworkSpecIpv4ModeEnumValues = []VcenterNamespaceManagementClustersNetworkSpecIpv4Mode{
	"DHCP",
	"STATICRANGE",
}

func (v *VcenterNamespaceManagementClustersNetworkSpecIpv4Mode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementClustersNetworkSpecIpv4Mode(value)
	for _, existing := range AllowedVcenterNamespaceManagementClustersNetworkSpecIpv4ModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementClustersNetworkSpecIpv4Mode", value)
}

// NewVcenterNamespaceManagementClustersNetworkSpecIpv4ModeFromValue returns a pointer to a valid VcenterNamespaceManagementClustersNetworkSpecIpv4Mode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementClustersNetworkSpecIpv4ModeFromValue(v string) (*VcenterNamespaceManagementClustersNetworkSpecIpv4Mode, error) {
	ev := VcenterNamespaceManagementClustersNetworkSpecIpv4Mode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementClustersNetworkSpecIpv4Mode: valid values are %v", v, AllowedVcenterNamespaceManagementClustersNetworkSpecIpv4ModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementClustersNetworkSpecIpv4Mode) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementClustersNetworkSpecIpv4ModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementClustersNetworkSpecIpv4Mode value
func (v VcenterNamespaceManagementClustersNetworkSpecIpv4Mode) Ptr() *VcenterNamespaceManagementClustersNetworkSpecIpv4Mode {
	return &v
}

type NullableVcenterNamespaceManagementClustersNetworkSpecIpv4Mode struct {
	value *VcenterNamespaceManagementClustersNetworkSpecIpv4Mode
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersNetworkSpecIpv4Mode) Get() *VcenterNamespaceManagementClustersNetworkSpecIpv4Mode {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersNetworkSpecIpv4Mode) Set(val *VcenterNamespaceManagementClustersNetworkSpecIpv4Mode) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersNetworkSpecIpv4Mode) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersNetworkSpecIpv4Mode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersNetworkSpecIpv4Mode(val *VcenterNamespaceManagementClustersNetworkSpecIpv4Mode) *NullableVcenterNamespaceManagementClustersNetworkSpecIpv4Mode {
	return &NullableVcenterNamespaceManagementClustersNetworkSpecIpv4Mode{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersNetworkSpecIpv4Mode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersNetworkSpecIpv4Mode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

