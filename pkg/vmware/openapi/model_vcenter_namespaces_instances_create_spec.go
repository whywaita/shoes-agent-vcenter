/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespacesInstancesCreateSpec struct for VcenterNamespacesInstancesCreateSpec
type VcenterNamespacesInstancesCreateSpec struct {
	// Identifier of the namespace. This has DNS_LABEL restrictions as specified in . This must be an alphanumeric (a-z and 0-9) string and with maximum length of 63 characters and with the '-' character allowed anywhere except the first or last character. This name is unique across all Namespaces in this vCenter server. In this version, this maps to the name of a Kubernetes namespace. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.
	Namespace string `json:"namespace"`
	// Identifier of the cluster on which the namespace is being created. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.
	Cluster string `json:"cluster"`
	// Description for the namespace. If unset, no description is added to the namespace.
	Description *string `json:"description,omitempty"`
	// Resource quota on the namespace. Refer to vcenter.namespace_management.NamespaceResourceOptions.Info#createResourceQuotaType and use vcenter.namespace_management.NamespaceResourceOptions#get for retrieving the type for the value for this field. For an example of this, see ResourceQuotaOptionsV1. If unset, no resource limits will be set on the namespace.
	ResourceSpec *map[string]interface{} `json:"resource_spec,omitempty"`
	// Access controls associated with the namespace. If unset, only users with Administrator role can access the namespace.
	AccessList *[]VcenterNamespacesInstancesAccess `json:"access_list,omitempty"`
	// Storage associated with the namespace. If unset, storage policies will not be associated with the namespace which will prevent users from being able to provision pods with persistent storage on the namespace. Users will be able to provision pods which use local storage.
	StorageSpecs *[]VcenterNamespacesInstancesStorageSpec `json:"storage_specs,omitempty"`
	// vSphere Namespaces network objects to be associated with the namespace. The values of this list need to reference names of pre-existing Networks.Info structures. The field must be left unset if the cluster hosting the namespace uses NSXT_CONTAINER_PLUGIN as the network provider, since the network(s) for this namespace will be managed by NSX-T Container Plugin. If field is unset when the cluster hosting the namespace uses VSPHERE_NETWORK as its network provider, the namespace will automatically be associated with the cluster's Supervisor Primary Workload Network. The field currently accepts at most only 1 vSphere Namespaces network object reference. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.namespaces.Instance.
	Networks *[]string `json:"networks,omitempty"`
	VmServiceSpec *VcenterNamespacesInstancesVMServiceSpec `json:"vm_service_spec,omitempty"`
	Creator *VcenterNamespacesInstancesPrincipal `json:"creator,omitempty"`
}

// NewVcenterNamespacesInstancesCreateSpec instantiates a new VcenterNamespacesInstancesCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespacesInstancesCreateSpec(namespace string, cluster string) *VcenterNamespacesInstancesCreateSpec {
	this := VcenterNamespacesInstancesCreateSpec{}
	this.Namespace = namespace
	this.Cluster = cluster
	return &this
}

// NewVcenterNamespacesInstancesCreateSpecWithDefaults instantiates a new VcenterNamespacesInstancesCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespacesInstancesCreateSpecWithDefaults() *VcenterNamespacesInstancesCreateSpec {
	this := VcenterNamespacesInstancesCreateSpec{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *VcenterNamespacesInstancesCreateSpec) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesCreateSpec) GetNamespaceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *VcenterNamespacesInstancesCreateSpec) SetNamespace(v string) {
	o.Namespace = v
}

// GetCluster returns the Cluster field value
func (o *VcenterNamespacesInstancesCreateSpec) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesCreateSpec) GetClusterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *VcenterNamespacesInstancesCreateSpec) SetCluster(v string) {
	o.Cluster = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesCreateSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesCreateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesCreateSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VcenterNamespacesInstancesCreateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetResourceSpec returns the ResourceSpec field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesCreateSpec) GetResourceSpec() map[string]interface{} {
	if o == nil || o.ResourceSpec == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ResourceSpec
}

// GetResourceSpecOk returns a tuple with the ResourceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesCreateSpec) GetResourceSpecOk() (*map[string]interface{}, bool) {
	if o == nil || o.ResourceSpec == nil {
		return nil, false
	}
	return o.ResourceSpec, true
}

// HasResourceSpec returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesCreateSpec) HasResourceSpec() bool {
	if o != nil && o.ResourceSpec != nil {
		return true
	}

	return false
}

// SetResourceSpec gets a reference to the given map[string]interface{} and assigns it to the ResourceSpec field.
func (o *VcenterNamespacesInstancesCreateSpec) SetResourceSpec(v map[string]interface{}) {
	o.ResourceSpec = &v
}

// GetAccessList returns the AccessList field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesCreateSpec) GetAccessList() []VcenterNamespacesInstancesAccess {
	if o == nil || o.AccessList == nil {
		var ret []VcenterNamespacesInstancesAccess
		return ret
	}
	return *o.AccessList
}

// GetAccessListOk returns a tuple with the AccessList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesCreateSpec) GetAccessListOk() (*[]VcenterNamespacesInstancesAccess, bool) {
	if o == nil || o.AccessList == nil {
		return nil, false
	}
	return o.AccessList, true
}

// HasAccessList returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesCreateSpec) HasAccessList() bool {
	if o != nil && o.AccessList != nil {
		return true
	}

	return false
}

// SetAccessList gets a reference to the given []VcenterNamespacesInstancesAccess and assigns it to the AccessList field.
func (o *VcenterNamespacesInstancesCreateSpec) SetAccessList(v []VcenterNamespacesInstancesAccess) {
	o.AccessList = &v
}

// GetStorageSpecs returns the StorageSpecs field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesCreateSpec) GetStorageSpecs() []VcenterNamespacesInstancesStorageSpec {
	if o == nil || o.StorageSpecs == nil {
		var ret []VcenterNamespacesInstancesStorageSpec
		return ret
	}
	return *o.StorageSpecs
}

// GetStorageSpecsOk returns a tuple with the StorageSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesCreateSpec) GetStorageSpecsOk() (*[]VcenterNamespacesInstancesStorageSpec, bool) {
	if o == nil || o.StorageSpecs == nil {
		return nil, false
	}
	return o.StorageSpecs, true
}

// HasStorageSpecs returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesCreateSpec) HasStorageSpecs() bool {
	if o != nil && o.StorageSpecs != nil {
		return true
	}

	return false
}

// SetStorageSpecs gets a reference to the given []VcenterNamespacesInstancesStorageSpec and assigns it to the StorageSpecs field.
func (o *VcenterNamespacesInstancesCreateSpec) SetStorageSpecs(v []VcenterNamespacesInstancesStorageSpec) {
	o.StorageSpecs = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesCreateSpec) GetNetworks() []string {
	if o == nil || o.Networks == nil {
		var ret []string
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesCreateSpec) GetNetworksOk() (*[]string, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesCreateSpec) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *VcenterNamespacesInstancesCreateSpec) SetNetworks(v []string) {
	o.Networks = &v
}

// GetVmServiceSpec returns the VmServiceSpec field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesCreateSpec) GetVmServiceSpec() VcenterNamespacesInstancesVMServiceSpec {
	if o == nil || o.VmServiceSpec == nil {
		var ret VcenterNamespacesInstancesVMServiceSpec
		return ret
	}
	return *o.VmServiceSpec
}

// GetVmServiceSpecOk returns a tuple with the VmServiceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesCreateSpec) GetVmServiceSpecOk() (*VcenterNamespacesInstancesVMServiceSpec, bool) {
	if o == nil || o.VmServiceSpec == nil {
		return nil, false
	}
	return o.VmServiceSpec, true
}

// HasVmServiceSpec returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesCreateSpec) HasVmServiceSpec() bool {
	if o != nil && o.VmServiceSpec != nil {
		return true
	}

	return false
}

// SetVmServiceSpec gets a reference to the given VcenterNamespacesInstancesVMServiceSpec and assigns it to the VmServiceSpec field.
func (o *VcenterNamespacesInstancesCreateSpec) SetVmServiceSpec(v VcenterNamespacesInstancesVMServiceSpec) {
	o.VmServiceSpec = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesCreateSpec) GetCreator() VcenterNamespacesInstancesPrincipal {
	if o == nil || o.Creator == nil {
		var ret VcenterNamespacesInstancesPrincipal
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesCreateSpec) GetCreatorOk() (*VcenterNamespacesInstancesPrincipal, bool) {
	if o == nil || o.Creator == nil {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesCreateSpec) HasCreator() bool {
	if o != nil && o.Creator != nil {
		return true
	}

	return false
}

// SetCreator gets a reference to the given VcenterNamespacesInstancesPrincipal and assigns it to the Creator field.
func (o *VcenterNamespacesInstancesCreateSpec) SetCreator(v VcenterNamespacesInstancesPrincipal) {
	o.Creator = &v
}

func (o VcenterNamespacesInstancesCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["namespace"] = o.Namespace
	}
	if true {
		toSerialize["cluster"] = o.Cluster
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ResourceSpec != nil {
		toSerialize["resource_spec"] = o.ResourceSpec
	}
	if o.AccessList != nil {
		toSerialize["access_list"] = o.AccessList
	}
	if o.StorageSpecs != nil {
		toSerialize["storage_specs"] = o.StorageSpecs
	}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	if o.VmServiceSpec != nil {
		toSerialize["vm_service_spec"] = o.VmServiceSpec
	}
	if o.Creator != nil {
		toSerialize["creator"] = o.Creator
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespacesInstancesCreateSpec struct {
	value *VcenterNamespacesInstancesCreateSpec
	isSet bool
}

func (v NullableVcenterNamespacesInstancesCreateSpec) Get() *VcenterNamespacesInstancesCreateSpec {
	return v.value
}

func (v *NullableVcenterNamespacesInstancesCreateSpec) Set(val *VcenterNamespacesInstancesCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesInstancesCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesInstancesCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesInstancesCreateSpec(val *VcenterNamespacesInstancesCreateSpec) *NullableVcenterNamespacesInstancesCreateSpec {
	return &NullableVcenterNamespacesInstancesCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespacesInstancesCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesInstancesCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


