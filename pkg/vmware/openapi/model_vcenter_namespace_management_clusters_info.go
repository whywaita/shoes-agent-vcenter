/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClustersInfo struct for VcenterNamespaceManagementClustersInfo
type VcenterNamespaceManagementClustersInfo struct {
	SizeHint *VcenterNamespaceManagementSizingHint `json:"size_hint,omitempty"`
	StatSummary VcenterNamespaceManagementClustersStats `json:"stat_summary"`
	ConfigStatus VcenterNamespaceManagementClustersConfigStatus `json:"config_status"`
	// Current set of messages associated with the object.
	Messages []VcenterNamespaceManagementClustersMessage `json:"messages"`
	KubernetesStatus VcenterNamespaceManagementClustersKubernetesStatus `json:"kubernetes_status"`
	// Current set of messages associated with the object.
	KubernetesStatusMessages []VcenterNamespaceManagementClustersMessage `json:"kubernetes_status_messages"`
	// Kubernetes API Server IP address on the management network. This is a floating IP and assigned to one of the control plane VMs on the management network. This endpoint is used by vSphere components.
	ApiServerManagementEndpoint string `json:"api_server_management_endpoint"`
	// Kubernetes API Server IP address via cluster network. This is the IP address of the Kubernetes LoadBalancer type service fronting the apiservers. This endpoint is the one configured in kubeconfig after login, and used for most human and application interaction with Kubernetes.
	ApiServerClusterEndpoint string `json:"api_server_cluster_endpoint"`
	// Identifier of the Kubernetes API servers. These are the IP addresses of the VM instances for the Kubernetes control plane on the management network.
	ApiServers []string `json:"api_servers"`
	// PEM-encoded x509 certificate used by TLS endpoint on Kubernetes API servers when accessed from the management network, e.g. from ESX servers or VCSA. This certificate is only valid for use with the apiServerManagementEndpoint.
	TlsManagementEndpointCertificate *string `json:"tls_management_endpoint_certificate,omitempty"`
	// PEM-encoded x509 certificate used by TLS endpoint on Kubernetes API servers when accessed via the load balancer, e.g. devops user on corporate network. This certificate is only valid for use with the apiServerClusterEndpoint.
	TlsEndpointCertificate *string `json:"tls_endpoint_certificate,omitempty"`
	NetworkProvider VcenterNamespaceManagementClustersNetworkProvider `json:"network_provider"`
	NcpClusterNetworkInfo *VcenterNamespaceManagementClustersNCPClusterNetworkInfo `json:"ncp_cluster_network_info,omitempty"`
	WorkloadNetworks *VcenterNamespaceManagementClustersWorkloadNetworksInfo `json:"workload_networks,omitempty"`
	// Information about NTP server DNS names or IP addresses to use for workloads such as Tanzu Kubernetes Grid VMs, specified in order of preference. This field is optional because it was added in a newer version than its parent node.
	WorkloadNtpServers *[]string `json:"workload_ntp_servers,omitempty"`
	// Information related to the Load balancer used for provisioning virtual servers in the namespace. This field is optional and it is only relevant when the value of Clusters.Info.network-provider is VSPHERE_NETWORK.
	LoadBalancers *[]VcenterNamespaceManagementLoadBalancersInfo `json:"load_balancers,omitempty"`
	ServiceCidr VcenterNamespaceManagementIpv4Cidr `json:"service_cidr"`
	MasterManagementNetwork *VcenterNamespaceManagementClustersNetworkSpec `json:"master_management_network,omitempty"`
	// List of DNS server IP addresses to use on Kubernetes API server, specified in order of preference.
	MasterDNS *[]string `json:"master_DNS,omitempty"`
	// List of DNS server IP addresses to use for pods that execute on the worker nodes (which are native pods on ESXi hosts in the vSphere Namespaces Supervisor).
	WorkerDNS *[]string `json:"worker_DNS,omitempty"`
	// Identifier of storage policy associated with Kubernetes API server. This field is optional because it was added in a newer version than its parent node. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.
	MasterStoragePolicy *string `json:"master_storage_policy,omitempty"`
	// Identifier of storage policy associated with ephemeral disks of all the Kubernetes Pods in the cluster. This field is optional because it was added in a newer version than its parent node. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.
	EphemeralStoragePolicy *string `json:"ephemeral_storage_policy,omitempty"`
	CnsFileConfig *VcenterNamespaceManagementCNSFileConfig `json:"cns_file_config,omitempty"`
	// Disclaimer to be displayed prior to login via the Kubectl plugin. If unset, just skip it.
	LoginBanner *string `json:"login_banner,omitempty"`
	// List of additional DNS names to associate with the Kubernetes API server. These DNS names are embedded in the TLS certificate presented by the API server. If unset, no additional DNS names are embedded in the TLS certificate.
	MasterDNSNames *[]string `json:"Master_DNS_names,omitempty"`
	ImageStorage *VcenterNamespaceManagementClustersImageStorageSpec `json:"image_storage,omitempty"`
	DefaultImageRegistry *VcenterNamespaceManagementClustersImageRegistry `json:"default_image_registry,omitempty"`
	// Default image repository to use when Kubernetes Pod container specification does not specify it as part of the container image name. If unset, defaults to Docker Hub official repository in case of Docker Hub image registry, otherwise defaults to empty string.
	DefaultImageRepository *string `json:"default_image_repository,omitempty"`
	// List of domains (for example \"vmware.com\") to be searched when trying to lookup a host name on Kubernetes API server, specified in order of preference.
	MasterDNSSearchDomains *[]string `json:"master_DNS_search_domains,omitempty"`
	// List of NTP server DNS names or IP addresses to use on Kubernetes API server, specified in order of preference. If unset, VMware Tools based time synchronization is enabled.
	MasterNTPServers *[]string `json:"master_NTP_servers,omitempty"`
	// Identifier of the Content Library which holds the VM Images for vSphere Kubernetes Service. This Content Library should be subscribed to VMware's hosted vSphere Kubernetes Service Repository. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.Library. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.Library.
	DefaultKubernetesServiceContentLibrary *string `json:"default_kubernetes_service_content_library,omitempty"`
}

// NewVcenterNamespaceManagementClustersInfo instantiates a new VcenterNamespaceManagementClustersInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClustersInfo(statSummary VcenterNamespaceManagementClustersStats, configStatus VcenterNamespaceManagementClustersConfigStatus, messages []VcenterNamespaceManagementClustersMessage, kubernetesStatus VcenterNamespaceManagementClustersKubernetesStatus, kubernetesStatusMessages []VcenterNamespaceManagementClustersMessage, apiServerManagementEndpoint string, apiServerClusterEndpoint string, apiServers []string, networkProvider VcenterNamespaceManagementClustersNetworkProvider, serviceCidr VcenterNamespaceManagementIpv4Cidr) *VcenterNamespaceManagementClustersInfo {
	this := VcenterNamespaceManagementClustersInfo{}
	this.StatSummary = statSummary
	this.ConfigStatus = configStatus
	this.Messages = messages
	this.KubernetesStatus = kubernetesStatus
	this.KubernetesStatusMessages = kubernetesStatusMessages
	this.ApiServerManagementEndpoint = apiServerManagementEndpoint
	this.ApiServerClusterEndpoint = apiServerClusterEndpoint
	this.ApiServers = apiServers
	this.NetworkProvider = networkProvider
	this.ServiceCidr = serviceCidr
	return &this
}

// NewVcenterNamespaceManagementClustersInfoWithDefaults instantiates a new VcenterNamespaceManagementClustersInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClustersInfoWithDefaults() *VcenterNamespaceManagementClustersInfo {
	this := VcenterNamespaceManagementClustersInfo{}
	return &this
}

// GetSizeHint returns the SizeHint field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetSizeHint() VcenterNamespaceManagementSizingHint {
	if o == nil || o.SizeHint == nil {
		var ret VcenterNamespaceManagementSizingHint
		return ret
	}
	return *o.SizeHint
}

// GetSizeHintOk returns a tuple with the SizeHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetSizeHintOk() (*VcenterNamespaceManagementSizingHint, bool) {
	if o == nil || o.SizeHint == nil {
		return nil, false
	}
	return o.SizeHint, true
}

// HasSizeHint returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasSizeHint() bool {
	if o != nil && o.SizeHint != nil {
		return true
	}

	return false
}

// SetSizeHint gets a reference to the given VcenterNamespaceManagementSizingHint and assigns it to the SizeHint field.
func (o *VcenterNamespaceManagementClustersInfo) SetSizeHint(v VcenterNamespaceManagementSizingHint) {
	o.SizeHint = &v
}

// GetStatSummary returns the StatSummary field value
func (o *VcenterNamespaceManagementClustersInfo) GetStatSummary() VcenterNamespaceManagementClustersStats {
	if o == nil {
		var ret VcenterNamespaceManagementClustersStats
		return ret
	}

	return o.StatSummary
}

// GetStatSummaryOk returns a tuple with the StatSummary field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetStatSummaryOk() (*VcenterNamespaceManagementClustersStats, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StatSummary, true
}

// SetStatSummary sets field value
func (o *VcenterNamespaceManagementClustersInfo) SetStatSummary(v VcenterNamespaceManagementClustersStats) {
	o.StatSummary = v
}

// GetConfigStatus returns the ConfigStatus field value
func (o *VcenterNamespaceManagementClustersInfo) GetConfigStatus() VcenterNamespaceManagementClustersConfigStatus {
	if o == nil {
		var ret VcenterNamespaceManagementClustersConfigStatus
		return ret
	}

	return o.ConfigStatus
}

// GetConfigStatusOk returns a tuple with the ConfigStatus field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetConfigStatusOk() (*VcenterNamespaceManagementClustersConfigStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigStatus, true
}

// SetConfigStatus sets field value
func (o *VcenterNamespaceManagementClustersInfo) SetConfigStatus(v VcenterNamespaceManagementClustersConfigStatus) {
	o.ConfigStatus = v
}

// GetMessages returns the Messages field value
func (o *VcenterNamespaceManagementClustersInfo) GetMessages() []VcenterNamespaceManagementClustersMessage {
	if o == nil {
		var ret []VcenterNamespaceManagementClustersMessage
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetMessagesOk() (*[]VcenterNamespaceManagementClustersMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Messages, true
}

// SetMessages sets field value
func (o *VcenterNamespaceManagementClustersInfo) SetMessages(v []VcenterNamespaceManagementClustersMessage) {
	o.Messages = v
}

// GetKubernetesStatus returns the KubernetesStatus field value
func (o *VcenterNamespaceManagementClustersInfo) GetKubernetesStatus() VcenterNamespaceManagementClustersKubernetesStatus {
	if o == nil {
		var ret VcenterNamespaceManagementClustersKubernetesStatus
		return ret
	}

	return o.KubernetesStatus
}

// GetKubernetesStatusOk returns a tuple with the KubernetesStatus field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetKubernetesStatusOk() (*VcenterNamespaceManagementClustersKubernetesStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KubernetesStatus, true
}

// SetKubernetesStatus sets field value
func (o *VcenterNamespaceManagementClustersInfo) SetKubernetesStatus(v VcenterNamespaceManagementClustersKubernetesStatus) {
	o.KubernetesStatus = v
}

// GetKubernetesStatusMessages returns the KubernetesStatusMessages field value
func (o *VcenterNamespaceManagementClustersInfo) GetKubernetesStatusMessages() []VcenterNamespaceManagementClustersMessage {
	if o == nil {
		var ret []VcenterNamespaceManagementClustersMessage
		return ret
	}

	return o.KubernetesStatusMessages
}

// GetKubernetesStatusMessagesOk returns a tuple with the KubernetesStatusMessages field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetKubernetesStatusMessagesOk() (*[]VcenterNamespaceManagementClustersMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KubernetesStatusMessages, true
}

// SetKubernetesStatusMessages sets field value
func (o *VcenterNamespaceManagementClustersInfo) SetKubernetesStatusMessages(v []VcenterNamespaceManagementClustersMessage) {
	o.KubernetesStatusMessages = v
}

// GetApiServerManagementEndpoint returns the ApiServerManagementEndpoint field value
func (o *VcenterNamespaceManagementClustersInfo) GetApiServerManagementEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiServerManagementEndpoint
}

// GetApiServerManagementEndpointOk returns a tuple with the ApiServerManagementEndpoint field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetApiServerManagementEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiServerManagementEndpoint, true
}

// SetApiServerManagementEndpoint sets field value
func (o *VcenterNamespaceManagementClustersInfo) SetApiServerManagementEndpoint(v string) {
	o.ApiServerManagementEndpoint = v
}

// GetApiServerClusterEndpoint returns the ApiServerClusterEndpoint field value
func (o *VcenterNamespaceManagementClustersInfo) GetApiServerClusterEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiServerClusterEndpoint
}

// GetApiServerClusterEndpointOk returns a tuple with the ApiServerClusterEndpoint field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetApiServerClusterEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiServerClusterEndpoint, true
}

// SetApiServerClusterEndpoint sets field value
func (o *VcenterNamespaceManagementClustersInfo) SetApiServerClusterEndpoint(v string) {
	o.ApiServerClusterEndpoint = v
}

// GetApiServers returns the ApiServers field value
func (o *VcenterNamespaceManagementClustersInfo) GetApiServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ApiServers
}

// GetApiServersOk returns a tuple with the ApiServers field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetApiServersOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiServers, true
}

// SetApiServers sets field value
func (o *VcenterNamespaceManagementClustersInfo) SetApiServers(v []string) {
	o.ApiServers = v
}

// GetTlsManagementEndpointCertificate returns the TlsManagementEndpointCertificate field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetTlsManagementEndpointCertificate() string {
	if o == nil || o.TlsManagementEndpointCertificate == nil {
		var ret string
		return ret
	}
	return *o.TlsManagementEndpointCertificate
}

// GetTlsManagementEndpointCertificateOk returns a tuple with the TlsManagementEndpointCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetTlsManagementEndpointCertificateOk() (*string, bool) {
	if o == nil || o.TlsManagementEndpointCertificate == nil {
		return nil, false
	}
	return o.TlsManagementEndpointCertificate, true
}

// HasTlsManagementEndpointCertificate returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasTlsManagementEndpointCertificate() bool {
	if o != nil && o.TlsManagementEndpointCertificate != nil {
		return true
	}

	return false
}

// SetTlsManagementEndpointCertificate gets a reference to the given string and assigns it to the TlsManagementEndpointCertificate field.
func (o *VcenterNamespaceManagementClustersInfo) SetTlsManagementEndpointCertificate(v string) {
	o.TlsManagementEndpointCertificate = &v
}

// GetTlsEndpointCertificate returns the TlsEndpointCertificate field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetTlsEndpointCertificate() string {
	if o == nil || o.TlsEndpointCertificate == nil {
		var ret string
		return ret
	}
	return *o.TlsEndpointCertificate
}

// GetTlsEndpointCertificateOk returns a tuple with the TlsEndpointCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetTlsEndpointCertificateOk() (*string, bool) {
	if o == nil || o.TlsEndpointCertificate == nil {
		return nil, false
	}
	return o.TlsEndpointCertificate, true
}

// HasTlsEndpointCertificate returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasTlsEndpointCertificate() bool {
	if o != nil && o.TlsEndpointCertificate != nil {
		return true
	}

	return false
}

// SetTlsEndpointCertificate gets a reference to the given string and assigns it to the TlsEndpointCertificate field.
func (o *VcenterNamespaceManagementClustersInfo) SetTlsEndpointCertificate(v string) {
	o.TlsEndpointCertificate = &v
}

// GetNetworkProvider returns the NetworkProvider field value
func (o *VcenterNamespaceManagementClustersInfo) GetNetworkProvider() VcenterNamespaceManagementClustersNetworkProvider {
	if o == nil {
		var ret VcenterNamespaceManagementClustersNetworkProvider
		return ret
	}

	return o.NetworkProvider
}

// GetNetworkProviderOk returns a tuple with the NetworkProvider field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetNetworkProviderOk() (*VcenterNamespaceManagementClustersNetworkProvider, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NetworkProvider, true
}

// SetNetworkProvider sets field value
func (o *VcenterNamespaceManagementClustersInfo) SetNetworkProvider(v VcenterNamespaceManagementClustersNetworkProvider) {
	o.NetworkProvider = v
}

// GetNcpClusterNetworkInfo returns the NcpClusterNetworkInfo field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetNcpClusterNetworkInfo() VcenterNamespaceManagementClustersNCPClusterNetworkInfo {
	if o == nil || o.NcpClusterNetworkInfo == nil {
		var ret VcenterNamespaceManagementClustersNCPClusterNetworkInfo
		return ret
	}
	return *o.NcpClusterNetworkInfo
}

// GetNcpClusterNetworkInfoOk returns a tuple with the NcpClusterNetworkInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetNcpClusterNetworkInfoOk() (*VcenterNamespaceManagementClustersNCPClusterNetworkInfo, bool) {
	if o == nil || o.NcpClusterNetworkInfo == nil {
		return nil, false
	}
	return o.NcpClusterNetworkInfo, true
}

// HasNcpClusterNetworkInfo returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasNcpClusterNetworkInfo() bool {
	if o != nil && o.NcpClusterNetworkInfo != nil {
		return true
	}

	return false
}

// SetNcpClusterNetworkInfo gets a reference to the given VcenterNamespaceManagementClustersNCPClusterNetworkInfo and assigns it to the NcpClusterNetworkInfo field.
func (o *VcenterNamespaceManagementClustersInfo) SetNcpClusterNetworkInfo(v VcenterNamespaceManagementClustersNCPClusterNetworkInfo) {
	o.NcpClusterNetworkInfo = &v
}

// GetWorkloadNetworks returns the WorkloadNetworks field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetWorkloadNetworks() VcenterNamespaceManagementClustersWorkloadNetworksInfo {
	if o == nil || o.WorkloadNetworks == nil {
		var ret VcenterNamespaceManagementClustersWorkloadNetworksInfo
		return ret
	}
	return *o.WorkloadNetworks
}

// GetWorkloadNetworksOk returns a tuple with the WorkloadNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetWorkloadNetworksOk() (*VcenterNamespaceManagementClustersWorkloadNetworksInfo, bool) {
	if o == nil || o.WorkloadNetworks == nil {
		return nil, false
	}
	return o.WorkloadNetworks, true
}

// HasWorkloadNetworks returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasWorkloadNetworks() bool {
	if o != nil && o.WorkloadNetworks != nil {
		return true
	}

	return false
}

// SetWorkloadNetworks gets a reference to the given VcenterNamespaceManagementClustersWorkloadNetworksInfo and assigns it to the WorkloadNetworks field.
func (o *VcenterNamespaceManagementClustersInfo) SetWorkloadNetworks(v VcenterNamespaceManagementClustersWorkloadNetworksInfo) {
	o.WorkloadNetworks = &v
}

// GetWorkloadNtpServers returns the WorkloadNtpServers field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetWorkloadNtpServers() []string {
	if o == nil || o.WorkloadNtpServers == nil {
		var ret []string
		return ret
	}
	return *o.WorkloadNtpServers
}

// GetWorkloadNtpServersOk returns a tuple with the WorkloadNtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetWorkloadNtpServersOk() (*[]string, bool) {
	if o == nil || o.WorkloadNtpServers == nil {
		return nil, false
	}
	return o.WorkloadNtpServers, true
}

// HasWorkloadNtpServers returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasWorkloadNtpServers() bool {
	if o != nil && o.WorkloadNtpServers != nil {
		return true
	}

	return false
}

// SetWorkloadNtpServers gets a reference to the given []string and assigns it to the WorkloadNtpServers field.
func (o *VcenterNamespaceManagementClustersInfo) SetWorkloadNtpServers(v []string) {
	o.WorkloadNtpServers = &v
}

// GetLoadBalancers returns the LoadBalancers field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetLoadBalancers() []VcenterNamespaceManagementLoadBalancersInfo {
	if o == nil || o.LoadBalancers == nil {
		var ret []VcenterNamespaceManagementLoadBalancersInfo
		return ret
	}
	return *o.LoadBalancers
}

// GetLoadBalancersOk returns a tuple with the LoadBalancers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetLoadBalancersOk() (*[]VcenterNamespaceManagementLoadBalancersInfo, bool) {
	if o == nil || o.LoadBalancers == nil {
		return nil, false
	}
	return o.LoadBalancers, true
}

// HasLoadBalancers returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasLoadBalancers() bool {
	if o != nil && o.LoadBalancers != nil {
		return true
	}

	return false
}

// SetLoadBalancers gets a reference to the given []VcenterNamespaceManagementLoadBalancersInfo and assigns it to the LoadBalancers field.
func (o *VcenterNamespaceManagementClustersInfo) SetLoadBalancers(v []VcenterNamespaceManagementLoadBalancersInfo) {
	o.LoadBalancers = &v
}

// GetServiceCidr returns the ServiceCidr field value
func (o *VcenterNamespaceManagementClustersInfo) GetServiceCidr() VcenterNamespaceManagementIpv4Cidr {
	if o == nil {
		var ret VcenterNamespaceManagementIpv4Cidr
		return ret
	}

	return o.ServiceCidr
}

// GetServiceCidrOk returns a tuple with the ServiceCidr field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetServiceCidrOk() (*VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServiceCidr, true
}

// SetServiceCidr sets field value
func (o *VcenterNamespaceManagementClustersInfo) SetServiceCidr(v VcenterNamespaceManagementIpv4Cidr) {
	o.ServiceCidr = v
}

// GetMasterManagementNetwork returns the MasterManagementNetwork field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterManagementNetwork() VcenterNamespaceManagementClustersNetworkSpec {
	if o == nil || o.MasterManagementNetwork == nil {
		var ret VcenterNamespaceManagementClustersNetworkSpec
		return ret
	}
	return *o.MasterManagementNetwork
}

// GetMasterManagementNetworkOk returns a tuple with the MasterManagementNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterManagementNetworkOk() (*VcenterNamespaceManagementClustersNetworkSpec, bool) {
	if o == nil || o.MasterManagementNetwork == nil {
		return nil, false
	}
	return o.MasterManagementNetwork, true
}

// HasMasterManagementNetwork returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasMasterManagementNetwork() bool {
	if o != nil && o.MasterManagementNetwork != nil {
		return true
	}

	return false
}

// SetMasterManagementNetwork gets a reference to the given VcenterNamespaceManagementClustersNetworkSpec and assigns it to the MasterManagementNetwork field.
func (o *VcenterNamespaceManagementClustersInfo) SetMasterManagementNetwork(v VcenterNamespaceManagementClustersNetworkSpec) {
	o.MasterManagementNetwork = &v
}

// GetMasterDNS returns the MasterDNS field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterDNS() []string {
	if o == nil || o.MasterDNS == nil {
		var ret []string
		return ret
	}
	return *o.MasterDNS
}

// GetMasterDNSOk returns a tuple with the MasterDNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterDNSOk() (*[]string, bool) {
	if o == nil || o.MasterDNS == nil {
		return nil, false
	}
	return o.MasterDNS, true
}

// HasMasterDNS returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasMasterDNS() bool {
	if o != nil && o.MasterDNS != nil {
		return true
	}

	return false
}

// SetMasterDNS gets a reference to the given []string and assigns it to the MasterDNS field.
func (o *VcenterNamespaceManagementClustersInfo) SetMasterDNS(v []string) {
	o.MasterDNS = &v
}

// GetWorkerDNS returns the WorkerDNS field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetWorkerDNS() []string {
	if o == nil || o.WorkerDNS == nil {
		var ret []string
		return ret
	}
	return *o.WorkerDNS
}

// GetWorkerDNSOk returns a tuple with the WorkerDNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetWorkerDNSOk() (*[]string, bool) {
	if o == nil || o.WorkerDNS == nil {
		return nil, false
	}
	return o.WorkerDNS, true
}

// HasWorkerDNS returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasWorkerDNS() bool {
	if o != nil && o.WorkerDNS != nil {
		return true
	}

	return false
}

// SetWorkerDNS gets a reference to the given []string and assigns it to the WorkerDNS field.
func (o *VcenterNamespaceManagementClustersInfo) SetWorkerDNS(v []string) {
	o.WorkerDNS = &v
}

// GetMasterStoragePolicy returns the MasterStoragePolicy field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterStoragePolicy() string {
	if o == nil || o.MasterStoragePolicy == nil {
		var ret string
		return ret
	}
	return *o.MasterStoragePolicy
}

// GetMasterStoragePolicyOk returns a tuple with the MasterStoragePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterStoragePolicyOk() (*string, bool) {
	if o == nil || o.MasterStoragePolicy == nil {
		return nil, false
	}
	return o.MasterStoragePolicy, true
}

// HasMasterStoragePolicy returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasMasterStoragePolicy() bool {
	if o != nil && o.MasterStoragePolicy != nil {
		return true
	}

	return false
}

// SetMasterStoragePolicy gets a reference to the given string and assigns it to the MasterStoragePolicy field.
func (o *VcenterNamespaceManagementClustersInfo) SetMasterStoragePolicy(v string) {
	o.MasterStoragePolicy = &v
}

// GetEphemeralStoragePolicy returns the EphemeralStoragePolicy field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetEphemeralStoragePolicy() string {
	if o == nil || o.EphemeralStoragePolicy == nil {
		var ret string
		return ret
	}
	return *o.EphemeralStoragePolicy
}

// GetEphemeralStoragePolicyOk returns a tuple with the EphemeralStoragePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetEphemeralStoragePolicyOk() (*string, bool) {
	if o == nil || o.EphemeralStoragePolicy == nil {
		return nil, false
	}
	return o.EphemeralStoragePolicy, true
}

// HasEphemeralStoragePolicy returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasEphemeralStoragePolicy() bool {
	if o != nil && o.EphemeralStoragePolicy != nil {
		return true
	}

	return false
}

// SetEphemeralStoragePolicy gets a reference to the given string and assigns it to the EphemeralStoragePolicy field.
func (o *VcenterNamespaceManagementClustersInfo) SetEphemeralStoragePolicy(v string) {
	o.EphemeralStoragePolicy = &v
}

// GetCnsFileConfig returns the CnsFileConfig field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetCnsFileConfig() VcenterNamespaceManagementCNSFileConfig {
	if o == nil || o.CnsFileConfig == nil {
		var ret VcenterNamespaceManagementCNSFileConfig
		return ret
	}
	return *o.CnsFileConfig
}

// GetCnsFileConfigOk returns a tuple with the CnsFileConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetCnsFileConfigOk() (*VcenterNamespaceManagementCNSFileConfig, bool) {
	if o == nil || o.CnsFileConfig == nil {
		return nil, false
	}
	return o.CnsFileConfig, true
}

// HasCnsFileConfig returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasCnsFileConfig() bool {
	if o != nil && o.CnsFileConfig != nil {
		return true
	}

	return false
}

// SetCnsFileConfig gets a reference to the given VcenterNamespaceManagementCNSFileConfig and assigns it to the CnsFileConfig field.
func (o *VcenterNamespaceManagementClustersInfo) SetCnsFileConfig(v VcenterNamespaceManagementCNSFileConfig) {
	o.CnsFileConfig = &v
}

// GetLoginBanner returns the LoginBanner field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetLoginBanner() string {
	if o == nil || o.LoginBanner == nil {
		var ret string
		return ret
	}
	return *o.LoginBanner
}

// GetLoginBannerOk returns a tuple with the LoginBanner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetLoginBannerOk() (*string, bool) {
	if o == nil || o.LoginBanner == nil {
		return nil, false
	}
	return o.LoginBanner, true
}

// HasLoginBanner returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasLoginBanner() bool {
	if o != nil && o.LoginBanner != nil {
		return true
	}

	return false
}

// SetLoginBanner gets a reference to the given string and assigns it to the LoginBanner field.
func (o *VcenterNamespaceManagementClustersInfo) SetLoginBanner(v string) {
	o.LoginBanner = &v
}

// GetMasterDNSNames returns the MasterDNSNames field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterDNSNames() []string {
	if o == nil || o.MasterDNSNames == nil {
		var ret []string
		return ret
	}
	return *o.MasterDNSNames
}

// GetMasterDNSNamesOk returns a tuple with the MasterDNSNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterDNSNamesOk() (*[]string, bool) {
	if o == nil || o.MasterDNSNames == nil {
		return nil, false
	}
	return o.MasterDNSNames, true
}

// HasMasterDNSNames returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasMasterDNSNames() bool {
	if o != nil && o.MasterDNSNames != nil {
		return true
	}

	return false
}

// SetMasterDNSNames gets a reference to the given []string and assigns it to the MasterDNSNames field.
func (o *VcenterNamespaceManagementClustersInfo) SetMasterDNSNames(v []string) {
	o.MasterDNSNames = &v
}

// GetImageStorage returns the ImageStorage field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetImageStorage() VcenterNamespaceManagementClustersImageStorageSpec {
	if o == nil || o.ImageStorage == nil {
		var ret VcenterNamespaceManagementClustersImageStorageSpec
		return ret
	}
	return *o.ImageStorage
}

// GetImageStorageOk returns a tuple with the ImageStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetImageStorageOk() (*VcenterNamespaceManagementClustersImageStorageSpec, bool) {
	if o == nil || o.ImageStorage == nil {
		return nil, false
	}
	return o.ImageStorage, true
}

// HasImageStorage returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasImageStorage() bool {
	if o != nil && o.ImageStorage != nil {
		return true
	}

	return false
}

// SetImageStorage gets a reference to the given VcenterNamespaceManagementClustersImageStorageSpec and assigns it to the ImageStorage field.
func (o *VcenterNamespaceManagementClustersInfo) SetImageStorage(v VcenterNamespaceManagementClustersImageStorageSpec) {
	o.ImageStorage = &v
}

// GetDefaultImageRegistry returns the DefaultImageRegistry field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetDefaultImageRegistry() VcenterNamespaceManagementClustersImageRegistry {
	if o == nil || o.DefaultImageRegistry == nil {
		var ret VcenterNamespaceManagementClustersImageRegistry
		return ret
	}
	return *o.DefaultImageRegistry
}

// GetDefaultImageRegistryOk returns a tuple with the DefaultImageRegistry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetDefaultImageRegistryOk() (*VcenterNamespaceManagementClustersImageRegistry, bool) {
	if o == nil || o.DefaultImageRegistry == nil {
		return nil, false
	}
	return o.DefaultImageRegistry, true
}

// HasDefaultImageRegistry returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasDefaultImageRegistry() bool {
	if o != nil && o.DefaultImageRegistry != nil {
		return true
	}

	return false
}

// SetDefaultImageRegistry gets a reference to the given VcenterNamespaceManagementClustersImageRegistry and assigns it to the DefaultImageRegistry field.
func (o *VcenterNamespaceManagementClustersInfo) SetDefaultImageRegistry(v VcenterNamespaceManagementClustersImageRegistry) {
	o.DefaultImageRegistry = &v
}

// GetDefaultImageRepository returns the DefaultImageRepository field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetDefaultImageRepository() string {
	if o == nil || o.DefaultImageRepository == nil {
		var ret string
		return ret
	}
	return *o.DefaultImageRepository
}

// GetDefaultImageRepositoryOk returns a tuple with the DefaultImageRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetDefaultImageRepositoryOk() (*string, bool) {
	if o == nil || o.DefaultImageRepository == nil {
		return nil, false
	}
	return o.DefaultImageRepository, true
}

// HasDefaultImageRepository returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasDefaultImageRepository() bool {
	if o != nil && o.DefaultImageRepository != nil {
		return true
	}

	return false
}

// SetDefaultImageRepository gets a reference to the given string and assigns it to the DefaultImageRepository field.
func (o *VcenterNamespaceManagementClustersInfo) SetDefaultImageRepository(v string) {
	o.DefaultImageRepository = &v
}

// GetMasterDNSSearchDomains returns the MasterDNSSearchDomains field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterDNSSearchDomains() []string {
	if o == nil || o.MasterDNSSearchDomains == nil {
		var ret []string
		return ret
	}
	return *o.MasterDNSSearchDomains
}

// GetMasterDNSSearchDomainsOk returns a tuple with the MasterDNSSearchDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterDNSSearchDomainsOk() (*[]string, bool) {
	if o == nil || o.MasterDNSSearchDomains == nil {
		return nil, false
	}
	return o.MasterDNSSearchDomains, true
}

// HasMasterDNSSearchDomains returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasMasterDNSSearchDomains() bool {
	if o != nil && o.MasterDNSSearchDomains != nil {
		return true
	}

	return false
}

// SetMasterDNSSearchDomains gets a reference to the given []string and assigns it to the MasterDNSSearchDomains field.
func (o *VcenterNamespaceManagementClustersInfo) SetMasterDNSSearchDomains(v []string) {
	o.MasterDNSSearchDomains = &v
}

// GetMasterNTPServers returns the MasterNTPServers field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterNTPServers() []string {
	if o == nil || o.MasterNTPServers == nil {
		var ret []string
		return ret
	}
	return *o.MasterNTPServers
}

// GetMasterNTPServersOk returns a tuple with the MasterNTPServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetMasterNTPServersOk() (*[]string, bool) {
	if o == nil || o.MasterNTPServers == nil {
		return nil, false
	}
	return o.MasterNTPServers, true
}

// HasMasterNTPServers returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasMasterNTPServers() bool {
	if o != nil && o.MasterNTPServers != nil {
		return true
	}

	return false
}

// SetMasterNTPServers gets a reference to the given []string and assigns it to the MasterNTPServers field.
func (o *VcenterNamespaceManagementClustersInfo) SetMasterNTPServers(v []string) {
	o.MasterNTPServers = &v
}

// GetDefaultKubernetesServiceContentLibrary returns the DefaultKubernetesServiceContentLibrary field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersInfo) GetDefaultKubernetesServiceContentLibrary() string {
	if o == nil || o.DefaultKubernetesServiceContentLibrary == nil {
		var ret string
		return ret
	}
	return *o.DefaultKubernetesServiceContentLibrary
}

// GetDefaultKubernetesServiceContentLibraryOk returns a tuple with the DefaultKubernetesServiceContentLibrary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersInfo) GetDefaultKubernetesServiceContentLibraryOk() (*string, bool) {
	if o == nil || o.DefaultKubernetesServiceContentLibrary == nil {
		return nil, false
	}
	return o.DefaultKubernetesServiceContentLibrary, true
}

// HasDefaultKubernetesServiceContentLibrary returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersInfo) HasDefaultKubernetesServiceContentLibrary() bool {
	if o != nil && o.DefaultKubernetesServiceContentLibrary != nil {
		return true
	}

	return false
}

// SetDefaultKubernetesServiceContentLibrary gets a reference to the given string and assigns it to the DefaultKubernetesServiceContentLibrary field.
func (o *VcenterNamespaceManagementClustersInfo) SetDefaultKubernetesServiceContentLibrary(v string) {
	o.DefaultKubernetesServiceContentLibrary = &v
}

func (o VcenterNamespaceManagementClustersInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SizeHint != nil {
		toSerialize["size_hint"] = o.SizeHint
	}
	if true {
		toSerialize["stat_summary"] = o.StatSummary
	}
	if true {
		toSerialize["config_status"] = o.ConfigStatus
	}
	if true {
		toSerialize["messages"] = o.Messages
	}
	if true {
		toSerialize["kubernetes_status"] = o.KubernetesStatus
	}
	if true {
		toSerialize["kubernetes_status_messages"] = o.KubernetesStatusMessages
	}
	if true {
		toSerialize["api_server_management_endpoint"] = o.ApiServerManagementEndpoint
	}
	if true {
		toSerialize["api_server_cluster_endpoint"] = o.ApiServerClusterEndpoint
	}
	if true {
		toSerialize["api_servers"] = o.ApiServers
	}
	if o.TlsManagementEndpointCertificate != nil {
		toSerialize["tls_management_endpoint_certificate"] = o.TlsManagementEndpointCertificate
	}
	if o.TlsEndpointCertificate != nil {
		toSerialize["tls_endpoint_certificate"] = o.TlsEndpointCertificate
	}
	if true {
		toSerialize["network_provider"] = o.NetworkProvider
	}
	if o.NcpClusterNetworkInfo != nil {
		toSerialize["ncp_cluster_network_info"] = o.NcpClusterNetworkInfo
	}
	if o.WorkloadNetworks != nil {
		toSerialize["workload_networks"] = o.WorkloadNetworks
	}
	if o.WorkloadNtpServers != nil {
		toSerialize["workload_ntp_servers"] = o.WorkloadNtpServers
	}
	if o.LoadBalancers != nil {
		toSerialize["load_balancers"] = o.LoadBalancers
	}
	if true {
		toSerialize["service_cidr"] = o.ServiceCidr
	}
	if o.MasterManagementNetwork != nil {
		toSerialize["master_management_network"] = o.MasterManagementNetwork
	}
	if o.MasterDNS != nil {
		toSerialize["master_DNS"] = o.MasterDNS
	}
	if o.WorkerDNS != nil {
		toSerialize["worker_DNS"] = o.WorkerDNS
	}
	if o.MasterStoragePolicy != nil {
		toSerialize["master_storage_policy"] = o.MasterStoragePolicy
	}
	if o.EphemeralStoragePolicy != nil {
		toSerialize["ephemeral_storage_policy"] = o.EphemeralStoragePolicy
	}
	if o.CnsFileConfig != nil {
		toSerialize["cns_file_config"] = o.CnsFileConfig
	}
	if o.LoginBanner != nil {
		toSerialize["login_banner"] = o.LoginBanner
	}
	if o.MasterDNSNames != nil {
		toSerialize["Master_DNS_names"] = o.MasterDNSNames
	}
	if o.ImageStorage != nil {
		toSerialize["image_storage"] = o.ImageStorage
	}
	if o.DefaultImageRegistry != nil {
		toSerialize["default_image_registry"] = o.DefaultImageRegistry
	}
	if o.DefaultImageRepository != nil {
		toSerialize["default_image_repository"] = o.DefaultImageRepository
	}
	if o.MasterDNSSearchDomains != nil {
		toSerialize["master_DNS_search_domains"] = o.MasterDNSSearchDomains
	}
	if o.MasterNTPServers != nil {
		toSerialize["master_NTP_servers"] = o.MasterNTPServers
	}
	if o.DefaultKubernetesServiceContentLibrary != nil {
		toSerialize["default_kubernetes_service_content_library"] = o.DefaultKubernetesServiceContentLibrary
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClustersInfo struct {
	value *VcenterNamespaceManagementClustersInfo
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersInfo) Get() *VcenterNamespaceManagementClustersInfo {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersInfo) Set(val *VcenterNamespaceManagementClustersInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersInfo(val *VcenterNamespaceManagementClustersInfo) *NullableVcenterNamespaceManagementClustersInfo {
	return &NullableVcenterNamespaceManagementClustersInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


