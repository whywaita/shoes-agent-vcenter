/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareParallelSummary struct for VcenterVmHardwareParallelSummary
type VcenterVmHardwareParallelSummary struct {
	// Identifier of the virtual parallel port. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.
	Port string `json:"port"`
}

// NewVcenterVmHardwareParallelSummary instantiates a new VcenterVmHardwareParallelSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareParallelSummary(port string) *VcenterVmHardwareParallelSummary {
	this := VcenterVmHardwareParallelSummary{}
	this.Port = port
	return &this
}

// NewVcenterVmHardwareParallelSummaryWithDefaults instantiates a new VcenterVmHardwareParallelSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareParallelSummaryWithDefaults() *VcenterVmHardwareParallelSummary {
	this := VcenterVmHardwareParallelSummary{}
	return &this
}

// GetPort returns the Port field value
func (o *VcenterVmHardwareParallelSummary) GetPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelSummary) GetPortOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *VcenterVmHardwareParallelSummary) SetPort(v string) {
	o.Port = v
}

func (o VcenterVmHardwareParallelSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["port"] = o.Port
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareParallelSummary struct {
	value *VcenterVmHardwareParallelSummary
	isSet bool
}

func (v NullableVcenterVmHardwareParallelSummary) Get() *VcenterVmHardwareParallelSummary {
	return v.value
}

func (v *NullableVcenterVmHardwareParallelSummary) Set(val *VcenterVmHardwareParallelSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareParallelSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareParallelSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareParallelSummary(val *VcenterVmHardwareParallelSummary) *NullableVcenterVmHardwareParallelSummary {
	return &NullableVcenterVmHardwareParallelSummary{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareParallelSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareParallelSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


