/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClustersStats struct for VcenterNamespaceManagementClustersStats
type VcenterNamespaceManagementClustersStats struct {
	// Overall CPU usage of the cluster, in MHz. This is the sum of CPU usage across all worker nodes in the cluster.
	CpuUsed int64 `json:"cpu_used"`
	// Total CPU capacity in the cluster available for vSphere Namespaces, in MHz. This is the sum of CPU capacities from all worker nodes in the cluster.
	CpuCapacity int64 `json:"cpu_capacity"`
	// Overall memory usage of the cluster, in mebibytes. This is the sum of memory usage across all worker nodes in the cluster.
	MemoryUsed int64 `json:"memory_used"`
	// Total memory capacity of the cluster available for vSphere Namespaces, in mebibytes. This is the sum of memory capacities from all worker nodesin the cluster.
	MemoryCapacity int64 `json:"memory_capacity"`
	// Overall storage used by the cluster, in mebibytes. This is the sum of storage used across all worker nodes in the cluster.
	StorageUsed int64 `json:"storage_used"`
	// Overall storage capacity of the cluster available for vSphere Namespaces, in mebibytes. This is the sum of total storage available from all worker nodes in the cluster.
	StorageCapacity int64 `json:"storage_capacity"`
}

// NewVcenterNamespaceManagementClustersStats instantiates a new VcenterNamespaceManagementClustersStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClustersStats(cpuUsed int64, cpuCapacity int64, memoryUsed int64, memoryCapacity int64, storageUsed int64, storageCapacity int64) *VcenterNamespaceManagementClustersStats {
	this := VcenterNamespaceManagementClustersStats{}
	this.CpuUsed = cpuUsed
	this.CpuCapacity = cpuCapacity
	this.MemoryUsed = memoryUsed
	this.MemoryCapacity = memoryCapacity
	this.StorageUsed = storageUsed
	this.StorageCapacity = storageCapacity
	return &this
}

// NewVcenterNamespaceManagementClustersStatsWithDefaults instantiates a new VcenterNamespaceManagementClustersStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClustersStatsWithDefaults() *VcenterNamespaceManagementClustersStats {
	this := VcenterNamespaceManagementClustersStats{}
	return &this
}

// GetCpuUsed returns the CpuUsed field value
func (o *VcenterNamespaceManagementClustersStats) GetCpuUsed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CpuUsed
}

// GetCpuUsedOk returns a tuple with the CpuUsed field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersStats) GetCpuUsedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CpuUsed, true
}

// SetCpuUsed sets field value
func (o *VcenterNamespaceManagementClustersStats) SetCpuUsed(v int64) {
	o.CpuUsed = v
}

// GetCpuCapacity returns the CpuCapacity field value
func (o *VcenterNamespaceManagementClustersStats) GetCpuCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CpuCapacity
}

// GetCpuCapacityOk returns a tuple with the CpuCapacity field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersStats) GetCpuCapacityOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CpuCapacity, true
}

// SetCpuCapacity sets field value
func (o *VcenterNamespaceManagementClustersStats) SetCpuCapacity(v int64) {
	o.CpuCapacity = v
}

// GetMemoryUsed returns the MemoryUsed field value
func (o *VcenterNamespaceManagementClustersStats) GetMemoryUsed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MemoryUsed
}

// GetMemoryUsedOk returns a tuple with the MemoryUsed field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersStats) GetMemoryUsedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MemoryUsed, true
}

// SetMemoryUsed sets field value
func (o *VcenterNamespaceManagementClustersStats) SetMemoryUsed(v int64) {
	o.MemoryUsed = v
}

// GetMemoryCapacity returns the MemoryCapacity field value
func (o *VcenterNamespaceManagementClustersStats) GetMemoryCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MemoryCapacity
}

// GetMemoryCapacityOk returns a tuple with the MemoryCapacity field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersStats) GetMemoryCapacityOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MemoryCapacity, true
}

// SetMemoryCapacity sets field value
func (o *VcenterNamespaceManagementClustersStats) SetMemoryCapacity(v int64) {
	o.MemoryCapacity = v
}

// GetStorageUsed returns the StorageUsed field value
func (o *VcenterNamespaceManagementClustersStats) GetStorageUsed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StorageUsed
}

// GetStorageUsedOk returns a tuple with the StorageUsed field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersStats) GetStorageUsedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StorageUsed, true
}

// SetStorageUsed sets field value
func (o *VcenterNamespaceManagementClustersStats) SetStorageUsed(v int64) {
	o.StorageUsed = v
}

// GetStorageCapacity returns the StorageCapacity field value
func (o *VcenterNamespaceManagementClustersStats) GetStorageCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StorageCapacity
}

// GetStorageCapacityOk returns a tuple with the StorageCapacity field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersStats) GetStorageCapacityOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StorageCapacity, true
}

// SetStorageCapacity sets field value
func (o *VcenterNamespaceManagementClustersStats) SetStorageCapacity(v int64) {
	o.StorageCapacity = v
}

func (o VcenterNamespaceManagementClustersStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cpu_used"] = o.CpuUsed
	}
	if true {
		toSerialize["cpu_capacity"] = o.CpuCapacity
	}
	if true {
		toSerialize["memory_used"] = o.MemoryUsed
	}
	if true {
		toSerialize["memory_capacity"] = o.MemoryCapacity
	}
	if true {
		toSerialize["storage_used"] = o.StorageUsed
	}
	if true {
		toSerialize["storage_capacity"] = o.StorageCapacity
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClustersStats struct {
	value *VcenterNamespaceManagementClustersStats
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersStats) Get() *VcenterNamespaceManagementClustersStats {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersStats) Set(val *VcenterNamespaceManagementClustersStats) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersStats) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersStats(val *VcenterNamespaceManagementClustersStats) *NullableVcenterNamespaceManagementClustersStats {
	return &NullableVcenterNamespaceManagementClustersStats{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


