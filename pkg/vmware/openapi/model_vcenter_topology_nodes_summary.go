/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterTopologyNodesSummary struct for VcenterTopologyNodesSummary
type VcenterTopologyNodesSummary struct {
	// Identifier for the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name.
	Node string `json:"node"`
	Type VcenterTopologyNodesApplianceType `json:"type"`
	// List of replication partners' node identifiers. Identifiers can be either IP address or DNS resolvable name of the partner node. This field is optional and it is only relevant when the value of Nodes.Summary.type is one of VCSA_EMBEDDED or PSC_EXTERNAL. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.VCenter.name.
	ReplicationPartners *[]string `json:"replication_partners,omitempty"`
	// Identifier of the affinitized Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the affinitized node. This field is optional and it is only relevant when the value of Nodes.Summary.type is VCSA_EXTERNAL. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name.
	ClientAffinity *string `json:"client_affinity,omitempty"`
}

// NewVcenterTopologyNodesSummary instantiates a new VcenterTopologyNodesSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterTopologyNodesSummary(node string, type_ VcenterTopologyNodesApplianceType) *VcenterTopologyNodesSummary {
	this := VcenterTopologyNodesSummary{}
	this.Node = node
	this.Type = type_
	return &this
}

// NewVcenterTopologyNodesSummaryWithDefaults instantiates a new VcenterTopologyNodesSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterTopologyNodesSummaryWithDefaults() *VcenterTopologyNodesSummary {
	this := VcenterTopologyNodesSummary{}
	return &this
}

// GetNode returns the Node field value
func (o *VcenterTopologyNodesSummary) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *VcenterTopologyNodesSummary) GetNodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *VcenterTopologyNodesSummary) SetNode(v string) {
	o.Node = v
}

// GetType returns the Type field value
func (o *VcenterTopologyNodesSummary) GetType() VcenterTopologyNodesApplianceType {
	if o == nil {
		var ret VcenterTopologyNodesApplianceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterTopologyNodesSummary) GetTypeOk() (*VcenterTopologyNodesApplianceType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterTopologyNodesSummary) SetType(v VcenterTopologyNodesApplianceType) {
	o.Type = v
}

// GetReplicationPartners returns the ReplicationPartners field value if set, zero value otherwise.
func (o *VcenterTopologyNodesSummary) GetReplicationPartners() []string {
	if o == nil || o.ReplicationPartners == nil {
		var ret []string
		return ret
	}
	return *o.ReplicationPartners
}

// GetReplicationPartnersOk returns a tuple with the ReplicationPartners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTopologyNodesSummary) GetReplicationPartnersOk() (*[]string, bool) {
	if o == nil || o.ReplicationPartners == nil {
		return nil, false
	}
	return o.ReplicationPartners, true
}

// HasReplicationPartners returns a boolean if a field has been set.
func (o *VcenterTopologyNodesSummary) HasReplicationPartners() bool {
	if o != nil && o.ReplicationPartners != nil {
		return true
	}

	return false
}

// SetReplicationPartners gets a reference to the given []string and assigns it to the ReplicationPartners field.
func (o *VcenterTopologyNodesSummary) SetReplicationPartners(v []string) {
	o.ReplicationPartners = &v
}

// GetClientAffinity returns the ClientAffinity field value if set, zero value otherwise.
func (o *VcenterTopologyNodesSummary) GetClientAffinity() string {
	if o == nil || o.ClientAffinity == nil {
		var ret string
		return ret
	}
	return *o.ClientAffinity
}

// GetClientAffinityOk returns a tuple with the ClientAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTopologyNodesSummary) GetClientAffinityOk() (*string, bool) {
	if o == nil || o.ClientAffinity == nil {
		return nil, false
	}
	return o.ClientAffinity, true
}

// HasClientAffinity returns a boolean if a field has been set.
func (o *VcenterTopologyNodesSummary) HasClientAffinity() bool {
	if o != nil && o.ClientAffinity != nil {
		return true
	}

	return false
}

// SetClientAffinity gets a reference to the given string and assigns it to the ClientAffinity field.
func (o *VcenterTopologyNodesSummary) SetClientAffinity(v string) {
	o.ClientAffinity = &v
}

func (o VcenterTopologyNodesSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["node"] = o.Node
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.ReplicationPartners != nil {
		toSerialize["replication_partners"] = o.ReplicationPartners
	}
	if o.ClientAffinity != nil {
		toSerialize["client_affinity"] = o.ClientAffinity
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterTopologyNodesSummary struct {
	value *VcenterTopologyNodesSummary
	isSet bool
}

func (v NullableVcenterTopologyNodesSummary) Get() *VcenterTopologyNodesSummary {
	return v.value
}

func (v *NullableVcenterTopologyNodesSummary) Set(val *VcenterTopologyNodesSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterTopologyNodesSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterTopologyNodesSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterTopologyNodesSummary(val *VcenterTopologyNodesSummary) *NullableVcenterTopologyNodesSummary {
	return &NullableVcenterTopologyNodesSummary{value: val, isSet: true}
}

func (v NullableVcenterTopologyNodesSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterTopologyNodesSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


