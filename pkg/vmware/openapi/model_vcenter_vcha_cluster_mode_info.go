/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterModeInfo struct for VcenterVchaClusterModeInfo
type VcenterVchaClusterModeInfo struct {
	Mode VcenterVchaClusterModeClusterMode `json:"mode"`
}

// NewVcenterVchaClusterModeInfo instantiates a new VcenterVchaClusterModeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterModeInfo(mode VcenterVchaClusterModeClusterMode) *VcenterVchaClusterModeInfo {
	this := VcenterVchaClusterModeInfo{}
	this.Mode = mode
	return &this
}

// NewVcenterVchaClusterModeInfoWithDefaults instantiates a new VcenterVchaClusterModeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterModeInfoWithDefaults() *VcenterVchaClusterModeInfo {
	this := VcenterVchaClusterModeInfo{}
	return &this
}

// GetMode returns the Mode field value
func (o *VcenterVchaClusterModeInfo) GetMode() VcenterVchaClusterModeClusterMode {
	if o == nil {
		var ret VcenterVchaClusterModeClusterMode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterModeInfo) GetModeOk() (*VcenterVchaClusterModeClusterMode, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *VcenterVchaClusterModeInfo) SetMode(v VcenterVchaClusterModeClusterMode) {
	o.Mode = v
}

func (o VcenterVchaClusterModeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mode"] = o.Mode
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterModeInfo struct {
	value *VcenterVchaClusterModeInfo
	isSet bool
}

func (v NullableVcenterVchaClusterModeInfo) Get() *VcenterVchaClusterModeInfo {
	return v.value
}

func (v *NullableVcenterVchaClusterModeInfo) Set(val *VcenterVchaClusterModeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterModeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterModeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterModeInfo(val *VcenterVchaClusterModeInfo) *NullableVcenterVchaClusterModeInfo {
	return &NullableVcenterVchaClusterModeInfo{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterModeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterModeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


