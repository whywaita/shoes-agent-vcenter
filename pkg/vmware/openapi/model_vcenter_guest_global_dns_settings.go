/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestGlobalDNSSettings struct for VcenterGuestGlobalDNSSettings
type VcenterGuestGlobalDNSSettings struct {
	// List of name resolution suffixes for the virtual network adapter. This list applies to both Windows and Linux guest customization. For Linux, this setting is global, whereas in Windows, this setting is listed on a per-adapter basis. If unset, no DNS suffixes are set.
	DnsSuffixList *[]string `json:"dns_suffix_list,omitempty"`
	// List of DNS servers, for a virtual network adapter with a static IP address. If this list is empty, then the guest operating system is expected to use a DHCP server to get its DNS server settings. These settings configure the virtual machine to use the specified DNS servers. These DNS server settings are listed in the order of preference. If unset, no DNS servers are set.
	DnsServers *[]string `json:"dns_servers,omitempty"`
}

// NewVcenterGuestGlobalDNSSettings instantiates a new VcenterGuestGlobalDNSSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestGlobalDNSSettings() *VcenterGuestGlobalDNSSettings {
	this := VcenterGuestGlobalDNSSettings{}
	return &this
}

// NewVcenterGuestGlobalDNSSettingsWithDefaults instantiates a new VcenterGuestGlobalDNSSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestGlobalDNSSettingsWithDefaults() *VcenterGuestGlobalDNSSettings {
	this := VcenterGuestGlobalDNSSettings{}
	return &this
}

// GetDnsSuffixList returns the DnsSuffixList field value if set, zero value otherwise.
func (o *VcenterGuestGlobalDNSSettings) GetDnsSuffixList() []string {
	if o == nil || o.DnsSuffixList == nil {
		var ret []string
		return ret
	}
	return *o.DnsSuffixList
}

// GetDnsSuffixListOk returns a tuple with the DnsSuffixList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestGlobalDNSSettings) GetDnsSuffixListOk() (*[]string, bool) {
	if o == nil || o.DnsSuffixList == nil {
		return nil, false
	}
	return o.DnsSuffixList, true
}

// HasDnsSuffixList returns a boolean if a field has been set.
func (o *VcenterGuestGlobalDNSSettings) HasDnsSuffixList() bool {
	if o != nil && o.DnsSuffixList != nil {
		return true
	}

	return false
}

// SetDnsSuffixList gets a reference to the given []string and assigns it to the DnsSuffixList field.
func (o *VcenterGuestGlobalDNSSettings) SetDnsSuffixList(v []string) {
	o.DnsSuffixList = &v
}

// GetDnsServers returns the DnsServers field value if set, zero value otherwise.
func (o *VcenterGuestGlobalDNSSettings) GetDnsServers() []string {
	if o == nil || o.DnsServers == nil {
		var ret []string
		return ret
	}
	return *o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestGlobalDNSSettings) GetDnsServersOk() (*[]string, bool) {
	if o == nil || o.DnsServers == nil {
		return nil, false
	}
	return o.DnsServers, true
}

// HasDnsServers returns a boolean if a field has been set.
func (o *VcenterGuestGlobalDNSSettings) HasDnsServers() bool {
	if o != nil && o.DnsServers != nil {
		return true
	}

	return false
}

// SetDnsServers gets a reference to the given []string and assigns it to the DnsServers field.
func (o *VcenterGuestGlobalDNSSettings) SetDnsServers(v []string) {
	o.DnsServers = &v
}

func (o VcenterGuestGlobalDNSSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DnsSuffixList != nil {
		toSerialize["dns_suffix_list"] = o.DnsSuffixList
	}
	if o.DnsServers != nil {
		toSerialize["dns_servers"] = o.DnsServers
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestGlobalDNSSettings struct {
	value *VcenterGuestGlobalDNSSettings
	isSet bool
}

func (v NullableVcenterGuestGlobalDNSSettings) Get() *VcenterGuestGlobalDNSSettings {
	return v.value
}

func (v *NullableVcenterGuestGlobalDNSSettings) Set(val *VcenterGuestGlobalDNSSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestGlobalDNSSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestGlobalDNSSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestGlobalDNSSettings(val *VcenterGuestGlobalDNSSettings) *NullableVcenterGuestGlobalDNSSettings {
	return &NullableVcenterGuestGlobalDNSSettings{value: val, isSet: true}
}

func (v NullableVcenterGuestGlobalDNSSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestGlobalDNSSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


