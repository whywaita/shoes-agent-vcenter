/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsEthernetInfo struct for VcenterVmTemplateLibraryItemsEthernetInfo
type VcenterVmTemplateLibraryItemsEthernetInfo struct {
	BackingType VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType `json:"backing_type"`
	MacType VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType `json:"mac_type"`
	// Identifier of the network backing the virtual Ethernet adapter.
	Network *string `json:"network,omitempty"`
}

// NewVcenterVmTemplateLibraryItemsEthernetInfo instantiates a new VcenterVmTemplateLibraryItemsEthernetInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsEthernetInfo(backingType VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType, macType VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) *VcenterVmTemplateLibraryItemsEthernetInfo {
	this := VcenterVmTemplateLibraryItemsEthernetInfo{}
	this.BackingType = backingType
	this.MacType = macType
	return &this
}

// NewVcenterVmTemplateLibraryItemsEthernetInfoWithDefaults instantiates a new VcenterVmTemplateLibraryItemsEthernetInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsEthernetInfoWithDefaults() *VcenterVmTemplateLibraryItemsEthernetInfo {
	this := VcenterVmTemplateLibraryItemsEthernetInfo{}
	return &this
}

// GetBackingType returns the BackingType field value
func (o *VcenterVmTemplateLibraryItemsEthernetInfo) GetBackingType() VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType {
	if o == nil {
		var ret VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType
		return ret
	}

	return o.BackingType
}

// GetBackingTypeOk returns a tuple with the BackingType field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsEthernetInfo) GetBackingTypeOk() (*VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BackingType, true
}

// SetBackingType sets field value
func (o *VcenterVmTemplateLibraryItemsEthernetInfo) SetBackingType(v VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) {
	o.BackingType = v
}

// GetMacType returns the MacType field value
func (o *VcenterVmTemplateLibraryItemsEthernetInfo) GetMacType() VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType {
	if o == nil {
		var ret VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType
		return ret
	}

	return o.MacType
}

// GetMacTypeOk returns a tuple with the MacType field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsEthernetInfo) GetMacTypeOk() (*VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MacType, true
}

// SetMacType sets field value
func (o *VcenterVmTemplateLibraryItemsEthernetInfo) SetMacType(v VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) {
	o.MacType = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsEthernetInfo) GetNetwork() string {
	if o == nil || o.Network == nil {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsEthernetInfo) GetNetworkOk() (*string, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsEthernetInfo) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *VcenterVmTemplateLibraryItemsEthernetInfo) SetNetwork(v string) {
	o.Network = &v
}

func (o VcenterVmTemplateLibraryItemsEthernetInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["backing_type"] = o.BackingType
	}
	if true {
		toSerialize["mac_type"] = o.MacType
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsEthernetInfo struct {
	value *VcenterVmTemplateLibraryItemsEthernetInfo
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsEthernetInfo) Get() *VcenterVmTemplateLibraryItemsEthernetInfo {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsEthernetInfo) Set(val *VcenterVmTemplateLibraryItemsEthernetInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsEthernetInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsEthernetInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsEthernetInfo(val *VcenterVmTemplateLibraryItemsEthernetInfo) *NullableVcenterVmTemplateLibraryItemsEthernetInfo {
	return &NullableVcenterVmTemplateLibraryItemsEthernetInfo{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsEthernetInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsEthernetInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


