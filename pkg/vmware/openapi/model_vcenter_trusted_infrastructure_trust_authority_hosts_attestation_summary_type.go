/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType The connection information could include the certificates or be a shorter summary.
type VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType string

// List of VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType
const (
	VCENTERTRUSTEDINFRASTRUCTURETRUSTAUTHORITYHOSTSATTESTATIONSUMMARYTYPE_FULL VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType = "FULL"
	VCENTERTRUSTEDINFRASTRUCTURETRUSTAUTHORITYHOSTSATTESTATIONSUMMARYTYPE_NORMAL VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType = "NORMAL"
	VCENTERTRUSTEDINFRASTRUCTURETRUSTAUTHORITYHOSTSATTESTATIONSUMMARYTYPE_BRIEF VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType = "BRIEF"
)

// All allowed values of VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType enum
var AllowedVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryTypeEnumValues = []VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType{
	"FULL",
	"NORMAL",
	"BRIEF",
}

func (v *VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType(value)
	for _, existing := range AllowedVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType", value)
}

// NewVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryTypeFromValue returns a pointer to a valid VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryTypeFromValue(v string) (*VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType, error) {
	ev := VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType: valid values are %v", v, AllowedVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) IsValid() bool {
	for _, existing := range AllowedVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType value
func (v VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) Ptr() *VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType {
	return &v
}

type NullableVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType struct {
	value *VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType
	isSet bool
}

func (v NullableVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) Get() *VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType {
	return v.value
}

func (v *NullableVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) Set(val *VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType(val *VcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) *NullableVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType {
	return &NullableVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType{value: val, isSet: true}
}

func (v NullableVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterTrustedInfrastructureTrustAuthorityHostsAttestationSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

