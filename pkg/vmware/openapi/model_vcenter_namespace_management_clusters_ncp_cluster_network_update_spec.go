/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec struct for VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec
type VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec struct {
	// CIDR blocks from which Kubernetes allocates pod IP addresses. This range should not overlap with those in vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkUpdateSpec.ingress-cidrs, Clusters.NCPClusterNetworkUpdateSpec.egress-cidrs, or other services running in the datacenter. An update operation only allows for addition of new CIDR blocks to the existing list. All Pod CIDR blocks must be of at least subnet size /23. If unset, CIDRs from which Kubernetes allocates pod IP addresses will not be modified.
	PodCidrs *[]VcenterNamespaceManagementIpv4Cidr `json:"pod_cidrs,omitempty"`
	// CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer. These ranges should not overlap with those in Clusters.NCPClusterNetworkUpdateSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkUpdateSpec.egress-cidrs, or other services running in the datacenter. An update operation only allows for addition of new CIDR blocks to the existing list. If unset, CIDRs from which Kubernetes allocates ingress IP addresses will not be modified.
	IngressCidrs *[]VcenterNamespaceManagementIpv4Cidr `json:"ingress_cidrs,omitempty"`
	// CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs. These ranges should not overlap with those in Clusters.NCPClusterNetworkUpdateSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkUpdateSpec.ingress-cidrs, or other services running in the datacenter. An update operation only allows for addition of new CIDR blocks to the existing list. If unset, CIDR from which Kubernetes allocates egress IP addresses will not be modified.
	EgressCidrs *[]VcenterNamespaceManagementIpv4Cidr `json:"egress_cidrs,omitempty"`
	// PEM-encoded x509 certificate used by NSX as a default fallback certificate for Kubernetes Ingress services.
	DefaultIngressTlsCertificate *string `json:"default_ingress_tls_certificate,omitempty"`
}

// NewVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec instantiates a new VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec() *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec {
	this := VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec{}
	return &this
}

// NewVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpecWithDefaults instantiates a new VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpecWithDefaults() *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec {
	this := VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec{}
	return &this
}

// GetPodCidrs returns the PodCidrs field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) GetPodCidrs() []VcenterNamespaceManagementIpv4Cidr {
	if o == nil || o.PodCidrs == nil {
		var ret []VcenterNamespaceManagementIpv4Cidr
		return ret
	}
	return *o.PodCidrs
}

// GetPodCidrsOk returns a tuple with the PodCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) GetPodCidrsOk() (*[]VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil || o.PodCidrs == nil {
		return nil, false
	}
	return o.PodCidrs, true
}

// HasPodCidrs returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) HasPodCidrs() bool {
	if o != nil && o.PodCidrs != nil {
		return true
	}

	return false
}

// SetPodCidrs gets a reference to the given []VcenterNamespaceManagementIpv4Cidr and assigns it to the PodCidrs field.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) SetPodCidrs(v []VcenterNamespaceManagementIpv4Cidr) {
	o.PodCidrs = &v
}

// GetIngressCidrs returns the IngressCidrs field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) GetIngressCidrs() []VcenterNamespaceManagementIpv4Cidr {
	if o == nil || o.IngressCidrs == nil {
		var ret []VcenterNamespaceManagementIpv4Cidr
		return ret
	}
	return *o.IngressCidrs
}

// GetIngressCidrsOk returns a tuple with the IngressCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) GetIngressCidrsOk() (*[]VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil || o.IngressCidrs == nil {
		return nil, false
	}
	return o.IngressCidrs, true
}

// HasIngressCidrs returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) HasIngressCidrs() bool {
	if o != nil && o.IngressCidrs != nil {
		return true
	}

	return false
}

// SetIngressCidrs gets a reference to the given []VcenterNamespaceManagementIpv4Cidr and assigns it to the IngressCidrs field.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) SetIngressCidrs(v []VcenterNamespaceManagementIpv4Cidr) {
	o.IngressCidrs = &v
}

// GetEgressCidrs returns the EgressCidrs field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) GetEgressCidrs() []VcenterNamespaceManagementIpv4Cidr {
	if o == nil || o.EgressCidrs == nil {
		var ret []VcenterNamespaceManagementIpv4Cidr
		return ret
	}
	return *o.EgressCidrs
}

// GetEgressCidrsOk returns a tuple with the EgressCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) GetEgressCidrsOk() (*[]VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil || o.EgressCidrs == nil {
		return nil, false
	}
	return o.EgressCidrs, true
}

// HasEgressCidrs returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) HasEgressCidrs() bool {
	if o != nil && o.EgressCidrs != nil {
		return true
	}

	return false
}

// SetEgressCidrs gets a reference to the given []VcenterNamespaceManagementIpv4Cidr and assigns it to the EgressCidrs field.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) SetEgressCidrs(v []VcenterNamespaceManagementIpv4Cidr) {
	o.EgressCidrs = &v
}

// GetDefaultIngressTlsCertificate returns the DefaultIngressTlsCertificate field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) GetDefaultIngressTlsCertificate() string {
	if o == nil || o.DefaultIngressTlsCertificate == nil {
		var ret string
		return ret
	}
	return *o.DefaultIngressTlsCertificate
}

// GetDefaultIngressTlsCertificateOk returns a tuple with the DefaultIngressTlsCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) GetDefaultIngressTlsCertificateOk() (*string, bool) {
	if o == nil || o.DefaultIngressTlsCertificate == nil {
		return nil, false
	}
	return o.DefaultIngressTlsCertificate, true
}

// HasDefaultIngressTlsCertificate returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) HasDefaultIngressTlsCertificate() bool {
	if o != nil && o.DefaultIngressTlsCertificate != nil {
		return true
	}

	return false
}

// SetDefaultIngressTlsCertificate gets a reference to the given string and assigns it to the DefaultIngressTlsCertificate field.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) SetDefaultIngressTlsCertificate(v string) {
	o.DefaultIngressTlsCertificate = &v
}

func (o VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PodCidrs != nil {
		toSerialize["pod_cidrs"] = o.PodCidrs
	}
	if o.IngressCidrs != nil {
		toSerialize["ingress_cidrs"] = o.IngressCidrs
	}
	if o.EgressCidrs != nil {
		toSerialize["egress_cidrs"] = o.EgressCidrs
	}
	if o.DefaultIngressTlsCertificate != nil {
		toSerialize["default_ingress_tls_certificate"] = o.DefaultIngressTlsCertificate
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec struct {
	value *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) Get() *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) Set(val *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec(val *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) *NullableVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec {
	return &NullableVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


