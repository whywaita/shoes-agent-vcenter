/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmToolsInfo struct for VcenterVmToolsInfo
type VcenterVmToolsInfo struct {
	// Set if the virtual machine supports auto-upgrading Tools via Tools.UpgradePolicy.
	AutoUpdateSupported bool `json:"auto_update_supported"`
	// Number of attempts that have been made to install or upgrade the version of Tools installed on this virtual machine. This field will be unset if there have been no Tools install or upgrade attempt.
	InstallAttemptCount *int64 `json:"install_attempt_count,omitempty"`
	// Error that happened, if any, during last attempt to upgrade or install Tools. This field will be unset if a the last Tools install or upgrade attempt succeeded.
	Error *string `json:"error,omitempty"`
	// Version of VMware Tools installed on the guest operating system. This field wil be unset if VMWare Tools is not installed. This is an integer constructed as follows: (((MJR) << 10) + ((MNR) << 5) + (REV)) Where MJR is tha major verson, MNR is the minor version and REV is the revision. Tools version = T Tools Version Major = MJR = (T / 1024) Tools Version Minor = MNR = ((T % 1024) / 32) Tools Version Revision = BASE = ((T % 1024) % 32) Tools actual version = MJR.MNR.REV
	VersionNumber *int64 `json:"version_number,omitempty"`
	// Version of VMware Tools installed on the guest operating system. This is a human-readable value that should not be parsed. This field wil be unset if VMWare Tools is not installed.
	Version *string `json:"version,omitempty"`
	UpgradePolicy VcenterVmToolsUpgradePolicy `json:"upgrade_policy"`
	VersionStatus *VcenterVmToolsVersionStatus `json:"version_status,omitempty"`
	InstallType *VcenterVmToolsToolsInstallType `json:"install_type,omitempty"`
	RunState VcenterVmToolsRunState `json:"run_state"`
}

// NewVcenterVmToolsInfo instantiates a new VcenterVmToolsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmToolsInfo(autoUpdateSupported bool, upgradePolicy VcenterVmToolsUpgradePolicy, runState VcenterVmToolsRunState) *VcenterVmToolsInfo {
	this := VcenterVmToolsInfo{}
	this.AutoUpdateSupported = autoUpdateSupported
	this.UpgradePolicy = upgradePolicy
	this.RunState = runState
	return &this
}

// NewVcenterVmToolsInfoWithDefaults instantiates a new VcenterVmToolsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmToolsInfoWithDefaults() *VcenterVmToolsInfo {
	this := VcenterVmToolsInfo{}
	return &this
}

// GetAutoUpdateSupported returns the AutoUpdateSupported field value
func (o *VcenterVmToolsInfo) GetAutoUpdateSupported() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoUpdateSupported
}

// GetAutoUpdateSupportedOk returns a tuple with the AutoUpdateSupported field value
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsInfo) GetAutoUpdateSupportedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AutoUpdateSupported, true
}

// SetAutoUpdateSupported sets field value
func (o *VcenterVmToolsInfo) SetAutoUpdateSupported(v bool) {
	o.AutoUpdateSupported = v
}

// GetInstallAttemptCount returns the InstallAttemptCount field value if set, zero value otherwise.
func (o *VcenterVmToolsInfo) GetInstallAttemptCount() int64 {
	if o == nil || o.InstallAttemptCount == nil {
		var ret int64
		return ret
	}
	return *o.InstallAttemptCount
}

// GetInstallAttemptCountOk returns a tuple with the InstallAttemptCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsInfo) GetInstallAttemptCountOk() (*int64, bool) {
	if o == nil || o.InstallAttemptCount == nil {
		return nil, false
	}
	return o.InstallAttemptCount, true
}

// HasInstallAttemptCount returns a boolean if a field has been set.
func (o *VcenterVmToolsInfo) HasInstallAttemptCount() bool {
	if o != nil && o.InstallAttemptCount != nil {
		return true
	}

	return false
}

// SetInstallAttemptCount gets a reference to the given int64 and assigns it to the InstallAttemptCount field.
func (o *VcenterVmToolsInfo) SetInstallAttemptCount(v int64) {
	o.InstallAttemptCount = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *VcenterVmToolsInfo) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsInfo) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *VcenterVmToolsInfo) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *VcenterVmToolsInfo) SetError(v string) {
	o.Error = &v
}

// GetVersionNumber returns the VersionNumber field value if set, zero value otherwise.
func (o *VcenterVmToolsInfo) GetVersionNumber() int64 {
	if o == nil || o.VersionNumber == nil {
		var ret int64
		return ret
	}
	return *o.VersionNumber
}

// GetVersionNumberOk returns a tuple with the VersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsInfo) GetVersionNumberOk() (*int64, bool) {
	if o == nil || o.VersionNumber == nil {
		return nil, false
	}
	return o.VersionNumber, true
}

// HasVersionNumber returns a boolean if a field has been set.
func (o *VcenterVmToolsInfo) HasVersionNumber() bool {
	if o != nil && o.VersionNumber != nil {
		return true
	}

	return false
}

// SetVersionNumber gets a reference to the given int64 and assigns it to the VersionNumber field.
func (o *VcenterVmToolsInfo) SetVersionNumber(v int64) {
	o.VersionNumber = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VcenterVmToolsInfo) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsInfo) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VcenterVmToolsInfo) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VcenterVmToolsInfo) SetVersion(v string) {
	o.Version = &v
}

// GetUpgradePolicy returns the UpgradePolicy field value
func (o *VcenterVmToolsInfo) GetUpgradePolicy() VcenterVmToolsUpgradePolicy {
	if o == nil {
		var ret VcenterVmToolsUpgradePolicy
		return ret
	}

	return o.UpgradePolicy
}

// GetUpgradePolicyOk returns a tuple with the UpgradePolicy field value
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsInfo) GetUpgradePolicyOk() (*VcenterVmToolsUpgradePolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpgradePolicy, true
}

// SetUpgradePolicy sets field value
func (o *VcenterVmToolsInfo) SetUpgradePolicy(v VcenterVmToolsUpgradePolicy) {
	o.UpgradePolicy = v
}

// GetVersionStatus returns the VersionStatus field value if set, zero value otherwise.
func (o *VcenterVmToolsInfo) GetVersionStatus() VcenterVmToolsVersionStatus {
	if o == nil || o.VersionStatus == nil {
		var ret VcenterVmToolsVersionStatus
		return ret
	}
	return *o.VersionStatus
}

// GetVersionStatusOk returns a tuple with the VersionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsInfo) GetVersionStatusOk() (*VcenterVmToolsVersionStatus, bool) {
	if o == nil || o.VersionStatus == nil {
		return nil, false
	}
	return o.VersionStatus, true
}

// HasVersionStatus returns a boolean if a field has been set.
func (o *VcenterVmToolsInfo) HasVersionStatus() bool {
	if o != nil && o.VersionStatus != nil {
		return true
	}

	return false
}

// SetVersionStatus gets a reference to the given VcenterVmToolsVersionStatus and assigns it to the VersionStatus field.
func (o *VcenterVmToolsInfo) SetVersionStatus(v VcenterVmToolsVersionStatus) {
	o.VersionStatus = &v
}

// GetInstallType returns the InstallType field value if set, zero value otherwise.
func (o *VcenterVmToolsInfo) GetInstallType() VcenterVmToolsToolsInstallType {
	if o == nil || o.InstallType == nil {
		var ret VcenterVmToolsToolsInstallType
		return ret
	}
	return *o.InstallType
}

// GetInstallTypeOk returns a tuple with the InstallType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsInfo) GetInstallTypeOk() (*VcenterVmToolsToolsInstallType, bool) {
	if o == nil || o.InstallType == nil {
		return nil, false
	}
	return o.InstallType, true
}

// HasInstallType returns a boolean if a field has been set.
func (o *VcenterVmToolsInfo) HasInstallType() bool {
	if o != nil && o.InstallType != nil {
		return true
	}

	return false
}

// SetInstallType gets a reference to the given VcenterVmToolsToolsInstallType and assigns it to the InstallType field.
func (o *VcenterVmToolsInfo) SetInstallType(v VcenterVmToolsToolsInstallType) {
	o.InstallType = &v
}

// GetRunState returns the RunState field value
func (o *VcenterVmToolsInfo) GetRunState() VcenterVmToolsRunState {
	if o == nil {
		var ret VcenterVmToolsRunState
		return ret
	}

	return o.RunState
}

// GetRunStateOk returns a tuple with the RunState field value
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsInfo) GetRunStateOk() (*VcenterVmToolsRunState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RunState, true
}

// SetRunState sets field value
func (o *VcenterVmToolsInfo) SetRunState(v VcenterVmToolsRunState) {
	o.RunState = v
}

func (o VcenterVmToolsInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["auto_update_supported"] = o.AutoUpdateSupported
	}
	if o.InstallAttemptCount != nil {
		toSerialize["install_attempt_count"] = o.InstallAttemptCount
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.VersionNumber != nil {
		toSerialize["version_number"] = o.VersionNumber
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["upgrade_policy"] = o.UpgradePolicy
	}
	if o.VersionStatus != nil {
		toSerialize["version_status"] = o.VersionStatus
	}
	if o.InstallType != nil {
		toSerialize["install_type"] = o.InstallType
	}
	if true {
		toSerialize["run_state"] = o.RunState
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmToolsInfo struct {
	value *VcenterVmToolsInfo
	isSet bool
}

func (v NullableVcenterVmToolsInfo) Get() *VcenterVmToolsInfo {
	return v.value
}

func (v *NullableVcenterVmToolsInfo) Set(val *VcenterVmToolsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmToolsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmToolsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmToolsInfo(val *VcenterVmToolsInfo) *NullableVcenterVmToolsInfo {
	return &NullableVcenterVmToolsInfo{value: val, isSet: true}
}

func (v NullableVcenterVmToolsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmToolsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


