/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterDeploymentApplianceSize The ApplianceSize enumerated type defines the vCenter Server Appliance sizes.
type VcenterDeploymentApplianceSize string

// List of vcenter.deployment.appliance_size
const (
	VCENTERDEPLOYMENTAPPLIANCESIZE_TINY VcenterDeploymentApplianceSize = "TINY"
	VCENTERDEPLOYMENTAPPLIANCESIZE_SMALL VcenterDeploymentApplianceSize = "SMALL"
	VCENTERDEPLOYMENTAPPLIANCESIZE_MEDIUM VcenterDeploymentApplianceSize = "MEDIUM"
	VCENTERDEPLOYMENTAPPLIANCESIZE_LARGE VcenterDeploymentApplianceSize = "LARGE"
	VCENTERDEPLOYMENTAPPLIANCESIZE_XLARGE VcenterDeploymentApplianceSize = "XLARGE"
)

// All allowed values of VcenterDeploymentApplianceSize enum
var AllowedVcenterDeploymentApplianceSizeEnumValues = []VcenterDeploymentApplianceSize{
	"TINY",
	"SMALL",
	"MEDIUM",
	"LARGE",
	"XLARGE",
}

func (v *VcenterDeploymentApplianceSize) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterDeploymentApplianceSize(value)
	for _, existing := range AllowedVcenterDeploymentApplianceSizeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterDeploymentApplianceSize", value)
}

// NewVcenterDeploymentApplianceSizeFromValue returns a pointer to a valid VcenterDeploymentApplianceSize
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterDeploymentApplianceSizeFromValue(v string) (*VcenterDeploymentApplianceSize, error) {
	ev := VcenterDeploymentApplianceSize(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterDeploymentApplianceSize: valid values are %v", v, AllowedVcenterDeploymentApplianceSizeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterDeploymentApplianceSize) IsValid() bool {
	for _, existing := range AllowedVcenterDeploymentApplianceSizeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.deployment.appliance_size value
func (v VcenterDeploymentApplianceSize) Ptr() *VcenterDeploymentApplianceSize {
	return &v
}

type NullableVcenterDeploymentApplianceSize struct {
	value *VcenterDeploymentApplianceSize
	isSet bool
}

func (v NullableVcenterDeploymentApplianceSize) Get() *VcenterDeploymentApplianceSize {
	return v.value
}

func (v *NullableVcenterDeploymentApplianceSize) Set(val *VcenterDeploymentApplianceSize) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentApplianceSize) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentApplianceSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentApplianceSize(val *VcenterDeploymentApplianceSize) *NullableVcenterDeploymentApplianceSize {
	return &NullableVcenterDeploymentApplianceSize{value: val, isSet: true}
}

func (v NullableVcenterDeploymentApplianceSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentApplianceSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

