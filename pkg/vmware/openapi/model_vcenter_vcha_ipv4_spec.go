/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaIpv4Spec struct for VcenterVchaIpv4Spec
type VcenterVchaIpv4Spec struct {
	// IPV4 address to be used to configure the interface.
	Address string `json:"address"`
	// The subnet mask for the interface. If unset and the Ipv4Spec.prefix field is unset, then an error will be reported.  If unset and the Ipv4Spec.prefix field is set, then the Ipv4Spec.prefix field will be used to create a subnet mask whose first prefix bits are 1 and the remaining bits 0.  If both the Ipv4Spec.subnet-mask field and the Ipv4Spec.prefix field are set and they do not represent the same value, then an error will be reported.
	SubnetMask *string `json:"subnet_mask,omitempty"`
	// The CIDR prefix for the interface. If unset and the Ipv4Spec.subnet-mask field is unset, this an error will be reported.  If unset and the Ipv4Spec.subnet-mask field is set, then the Ipv4Spec.subnet-mask field will be used.  If both the Ipv4Spec.subnet-mask field and the Ipv4Spec.prefix field are set and they do not represent the same value, then an error will be reported.
	Prefix *int64 `json:"prefix,omitempty"`
}

// NewVcenterVchaIpv4Spec instantiates a new VcenterVchaIpv4Spec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaIpv4Spec(address string) *VcenterVchaIpv4Spec {
	this := VcenterVchaIpv4Spec{}
	this.Address = address
	return &this
}

// NewVcenterVchaIpv4SpecWithDefaults instantiates a new VcenterVchaIpv4Spec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaIpv4SpecWithDefaults() *VcenterVchaIpv4Spec {
	this := VcenterVchaIpv4Spec{}
	return &this
}

// GetAddress returns the Address field value
func (o *VcenterVchaIpv4Spec) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaIpv4Spec) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *VcenterVchaIpv4Spec) SetAddress(v string) {
	o.Address = v
}

// GetSubnetMask returns the SubnetMask field value if set, zero value otherwise.
func (o *VcenterVchaIpv4Spec) GetSubnetMask() string {
	if o == nil || o.SubnetMask == nil {
		var ret string
		return ret
	}
	return *o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaIpv4Spec) GetSubnetMaskOk() (*string, bool) {
	if o == nil || o.SubnetMask == nil {
		return nil, false
	}
	return o.SubnetMask, true
}

// HasSubnetMask returns a boolean if a field has been set.
func (o *VcenterVchaIpv4Spec) HasSubnetMask() bool {
	if o != nil && o.SubnetMask != nil {
		return true
	}

	return false
}

// SetSubnetMask gets a reference to the given string and assigns it to the SubnetMask field.
func (o *VcenterVchaIpv4Spec) SetSubnetMask(v string) {
	o.SubnetMask = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *VcenterVchaIpv4Spec) GetPrefix() int64 {
	if o == nil || o.Prefix == nil {
		var ret int64
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaIpv4Spec) GetPrefixOk() (*int64, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *VcenterVchaIpv4Spec) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given int64 and assigns it to the Prefix field.
func (o *VcenterVchaIpv4Spec) SetPrefix(v int64) {
	o.Prefix = &v
}

func (o VcenterVchaIpv4Spec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if o.SubnetMask != nil {
		toSerialize["subnet_mask"] = o.SubnetMask
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaIpv4Spec struct {
	value *VcenterVchaIpv4Spec
	isSet bool
}

func (v NullableVcenterVchaIpv4Spec) Get() *VcenterVchaIpv4Spec {
	return v.value
}

func (v *NullableVcenterVchaIpv4Spec) Set(val *VcenterVchaIpv4Spec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaIpv4Spec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaIpv4Spec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaIpv4Spec(val *VcenterVchaIpv4Spec) *NullableVcenterVchaIpv4Spec {
	return &NullableVcenterVchaIpv4Spec{value: val, isSet: true}
}

func (v NullableVcenterVchaIpv4Spec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaIpv4Spec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


