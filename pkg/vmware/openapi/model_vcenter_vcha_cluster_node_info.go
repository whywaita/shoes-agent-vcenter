/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterNodeInfo struct for VcenterVchaClusterNodeInfo
type VcenterVchaClusterNodeInfo struct {
	FailoverIp *VcenterVchaClusterIpInfo `json:"failover_ip,omitempty"`
	HaIp VcenterVchaClusterIpInfo `json:"ha_ip"`
	Runtime *VcenterVchaClusterNodeRuntimeInfo `json:"runtime,omitempty"`
}

// NewVcenterVchaClusterNodeInfo instantiates a new VcenterVchaClusterNodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterNodeInfo(haIp VcenterVchaClusterIpInfo) *VcenterVchaClusterNodeInfo {
	this := VcenterVchaClusterNodeInfo{}
	this.HaIp = haIp
	return &this
}

// NewVcenterVchaClusterNodeInfoWithDefaults instantiates a new VcenterVchaClusterNodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterNodeInfoWithDefaults() *VcenterVchaClusterNodeInfo {
	this := VcenterVchaClusterNodeInfo{}
	return &this
}

// GetFailoverIp returns the FailoverIp field value if set, zero value otherwise.
func (o *VcenterVchaClusterNodeInfo) GetFailoverIp() VcenterVchaClusterIpInfo {
	if o == nil || o.FailoverIp == nil {
		var ret VcenterVchaClusterIpInfo
		return ret
	}
	return *o.FailoverIp
}

// GetFailoverIpOk returns a tuple with the FailoverIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterNodeInfo) GetFailoverIpOk() (*VcenterVchaClusterIpInfo, bool) {
	if o == nil || o.FailoverIp == nil {
		return nil, false
	}
	return o.FailoverIp, true
}

// HasFailoverIp returns a boolean if a field has been set.
func (o *VcenterVchaClusterNodeInfo) HasFailoverIp() bool {
	if o != nil && o.FailoverIp != nil {
		return true
	}

	return false
}

// SetFailoverIp gets a reference to the given VcenterVchaClusterIpInfo and assigns it to the FailoverIp field.
func (o *VcenterVchaClusterNodeInfo) SetFailoverIp(v VcenterVchaClusterIpInfo) {
	o.FailoverIp = &v
}

// GetHaIp returns the HaIp field value
func (o *VcenterVchaClusterNodeInfo) GetHaIp() VcenterVchaClusterIpInfo {
	if o == nil {
		var ret VcenterVchaClusterIpInfo
		return ret
	}

	return o.HaIp
}

// GetHaIpOk returns a tuple with the HaIp field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterNodeInfo) GetHaIpOk() (*VcenterVchaClusterIpInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HaIp, true
}

// SetHaIp sets field value
func (o *VcenterVchaClusterNodeInfo) SetHaIp(v VcenterVchaClusterIpInfo) {
	o.HaIp = v
}

// GetRuntime returns the Runtime field value if set, zero value otherwise.
func (o *VcenterVchaClusterNodeInfo) GetRuntime() VcenterVchaClusterNodeRuntimeInfo {
	if o == nil || o.Runtime == nil {
		var ret VcenterVchaClusterNodeRuntimeInfo
		return ret
	}
	return *o.Runtime
}

// GetRuntimeOk returns a tuple with the Runtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterNodeInfo) GetRuntimeOk() (*VcenterVchaClusterNodeRuntimeInfo, bool) {
	if o == nil || o.Runtime == nil {
		return nil, false
	}
	return o.Runtime, true
}

// HasRuntime returns a boolean if a field has been set.
func (o *VcenterVchaClusterNodeInfo) HasRuntime() bool {
	if o != nil && o.Runtime != nil {
		return true
	}

	return false
}

// SetRuntime gets a reference to the given VcenterVchaClusterNodeRuntimeInfo and assigns it to the Runtime field.
func (o *VcenterVchaClusterNodeInfo) SetRuntime(v VcenterVchaClusterNodeRuntimeInfo) {
	o.Runtime = &v
}

func (o VcenterVchaClusterNodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailoverIp != nil {
		toSerialize["failover_ip"] = o.FailoverIp
	}
	if true {
		toSerialize["ha_ip"] = o.HaIp
	}
	if o.Runtime != nil {
		toSerialize["runtime"] = o.Runtime
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterNodeInfo struct {
	value *VcenterVchaClusterNodeInfo
	isSet bool
}

func (v NullableVcenterVchaClusterNodeInfo) Get() *VcenterVchaClusterNodeInfo {
	return v.value
}

func (v *NullableVcenterVchaClusterNodeInfo) Set(val *VcenterVchaClusterNodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterNodeInfo(val *VcenterVchaClusterNodeInfo) *NullableVcenterVchaClusterNodeInfo {
	return &NullableVcenterVchaClusterNodeInfo{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


