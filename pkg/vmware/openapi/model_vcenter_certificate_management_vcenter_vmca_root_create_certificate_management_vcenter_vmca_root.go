/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot struct for VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot
type VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot struct {
	Spec *VcenterCertificateManagementVcenterVmcaRootCreateSpec `json:"spec,omitempty"`
}

// NewVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot instantiates a new VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot() *VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot {
	this := VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot{}
	return &this
}

// NewVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRootWithDefaults instantiates a new VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRootWithDefaults() *VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot {
	this := VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot{}
	return &this
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) GetSpec() VcenterCertificateManagementVcenterVmcaRootCreateSpec {
	if o == nil || o.Spec == nil {
		var ret VcenterCertificateManagementVcenterVmcaRootCreateSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) GetSpecOk() (*VcenterCertificateManagementVcenterVmcaRootCreateSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given VcenterCertificateManagementVcenterVmcaRootCreateSpec and assigns it to the Spec field.
func (o *VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) SetSpec(v VcenterCertificateManagementVcenterVmcaRootCreateSpec) {
	o.Spec = &v
}

func (o VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot struct {
	value *VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot
	isSet bool
}

func (v NullableVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) Get() *VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot {
	return v.value
}

func (v *NullableVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) Set(val *VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot(val *VcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) *NullableVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot {
	return &NullableVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot{value: val, isSet: true}
}

func (v NullableVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCertificateManagementVcenterVmcaRootCreateCertificateManagementVcenterVmcaRoot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


