/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentCheckInfo struct for VcenterDeploymentCheckInfo
type VcenterDeploymentCheckInfo struct {
	Status VcenterDeploymentCheckStatus `json:"status"`
	Result *VcenterDeploymentNotifications `json:"result,omitempty"`
	SourceInfo *VcenterDeploymentSourceInfo `json:"source_info,omitempty"`
}

// NewVcenterDeploymentCheckInfo instantiates a new VcenterDeploymentCheckInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentCheckInfo(status VcenterDeploymentCheckStatus) *VcenterDeploymentCheckInfo {
	this := VcenterDeploymentCheckInfo{}
	this.Status = status
	return &this
}

// NewVcenterDeploymentCheckInfoWithDefaults instantiates a new VcenterDeploymentCheckInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentCheckInfoWithDefaults() *VcenterDeploymentCheckInfo {
	this := VcenterDeploymentCheckInfo{}
	return &this
}

// GetStatus returns the Status field value
func (o *VcenterDeploymentCheckInfo) GetStatus() VcenterDeploymentCheckStatus {
	if o == nil {
		var ret VcenterDeploymentCheckStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentCheckInfo) GetStatusOk() (*VcenterDeploymentCheckStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VcenterDeploymentCheckInfo) SetStatus(v VcenterDeploymentCheckStatus) {
	o.Status = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *VcenterDeploymentCheckInfo) GetResult() VcenterDeploymentNotifications {
	if o == nil || o.Result == nil {
		var ret VcenterDeploymentNotifications
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentCheckInfo) GetResultOk() (*VcenterDeploymentNotifications, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *VcenterDeploymentCheckInfo) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given VcenterDeploymentNotifications and assigns it to the Result field.
func (o *VcenterDeploymentCheckInfo) SetResult(v VcenterDeploymentNotifications) {
	o.Result = &v
}

// GetSourceInfo returns the SourceInfo field value if set, zero value otherwise.
func (o *VcenterDeploymentCheckInfo) GetSourceInfo() VcenterDeploymentSourceInfo {
	if o == nil || o.SourceInfo == nil {
		var ret VcenterDeploymentSourceInfo
		return ret
	}
	return *o.SourceInfo
}

// GetSourceInfoOk returns a tuple with the SourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentCheckInfo) GetSourceInfoOk() (*VcenterDeploymentSourceInfo, bool) {
	if o == nil || o.SourceInfo == nil {
		return nil, false
	}
	return o.SourceInfo, true
}

// HasSourceInfo returns a boolean if a field has been set.
func (o *VcenterDeploymentCheckInfo) HasSourceInfo() bool {
	if o != nil && o.SourceInfo != nil {
		return true
	}

	return false
}

// SetSourceInfo gets a reference to the given VcenterDeploymentSourceInfo and assigns it to the SourceInfo field.
func (o *VcenterDeploymentCheckInfo) SetSourceInfo(v VcenterDeploymentSourceInfo) {
	o.SourceInfo = &v
}

func (o VcenterDeploymentCheckInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.SourceInfo != nil {
		toSerialize["source_info"] = o.SourceInfo
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentCheckInfo struct {
	value *VcenterDeploymentCheckInfo
	isSet bool
}

func (v NullableVcenterDeploymentCheckInfo) Get() *VcenterDeploymentCheckInfo {
	return v.value
}

func (v *NullableVcenterDeploymentCheckInfo) Set(val *VcenterDeploymentCheckInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentCheckInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentCheckInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentCheckInfo(val *VcenterDeploymentCheckInfo) *NullableVcenterDeploymentCheckInfo {
	return &NullableVcenterDeploymentCheckInfo{value: val, isSet: true}
}

func (v NullableVcenterDeploymentCheckInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentCheckInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


