/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterErrorCondition struct for VcenterVchaClusterErrorCondition
type VcenterVchaClusterErrorCondition struct {
	Error VapiStdLocalizableMessage `json:"error"`
	Recommendation *VapiStdLocalizableMessage `json:"recommendation,omitempty"`
}

// NewVcenterVchaClusterErrorCondition instantiates a new VcenterVchaClusterErrorCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterErrorCondition(error_ VapiStdLocalizableMessage) *VcenterVchaClusterErrorCondition {
	this := VcenterVchaClusterErrorCondition{}
	this.Error = error_
	return &this
}

// NewVcenterVchaClusterErrorConditionWithDefaults instantiates a new VcenterVchaClusterErrorCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterErrorConditionWithDefaults() *VcenterVchaClusterErrorCondition {
	this := VcenterVchaClusterErrorCondition{}
	return &this
}

// GetError returns the Error field value
func (o *VcenterVchaClusterErrorCondition) GetError() VapiStdLocalizableMessage {
	if o == nil {
		var ret VapiStdLocalizableMessage
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterErrorCondition) GetErrorOk() (*VapiStdLocalizableMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *VcenterVchaClusterErrorCondition) SetError(v VapiStdLocalizableMessage) {
	o.Error = v
}

// GetRecommendation returns the Recommendation field value if set, zero value otherwise.
func (o *VcenterVchaClusterErrorCondition) GetRecommendation() VapiStdLocalizableMessage {
	if o == nil || o.Recommendation == nil {
		var ret VapiStdLocalizableMessage
		return ret
	}
	return *o.Recommendation
}

// GetRecommendationOk returns a tuple with the Recommendation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterErrorCondition) GetRecommendationOk() (*VapiStdLocalizableMessage, bool) {
	if o == nil || o.Recommendation == nil {
		return nil, false
	}
	return o.Recommendation, true
}

// HasRecommendation returns a boolean if a field has been set.
func (o *VcenterVchaClusterErrorCondition) HasRecommendation() bool {
	if o != nil && o.Recommendation != nil {
		return true
	}

	return false
}

// SetRecommendation gets a reference to the given VapiStdLocalizableMessage and assigns it to the Recommendation field.
func (o *VcenterVchaClusterErrorCondition) SetRecommendation(v VapiStdLocalizableMessage) {
	o.Recommendation = &v
}

func (o VcenterVchaClusterErrorCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["error"] = o.Error
	}
	if o.Recommendation != nil {
		toSerialize["recommendation"] = o.Recommendation
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterErrorCondition struct {
	value *VcenterVchaClusterErrorCondition
	isSet bool
}

func (v NullableVcenterVchaClusterErrorCondition) Get() *VcenterVchaClusterErrorCondition {
	return v.value
}

func (v *NullableVcenterVchaClusterErrorCondition) Set(val *VcenterVchaClusterErrorCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterErrorCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterErrorCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterErrorCondition(val *VcenterVchaClusterErrorCondition) *NullableVcenterVchaClusterErrorCondition {
	return &NullableVcenterVchaClusterErrorCondition{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterErrorCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterErrorCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


