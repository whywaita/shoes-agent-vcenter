/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestFilesystemFilesIterationSpec struct for VcenterVmGuestFilesystemFilesIterationSpec
type VcenterVmGuestFilesystemFilesIterationSpec struct {
	// Specifies the maximum number of results to return. If unset information about at most 50 files will be returned.
	Size *int64 `json:"size,omitempty"`
	// Which result to start the list with. If this value exceeds the number of results, an empty list will be returned. If unset, the start of the list of files will be returned.
	Index *int64 `json:"index,omitempty"`
}

// NewVcenterVmGuestFilesystemFilesIterationSpec instantiates a new VcenterVmGuestFilesystemFilesIterationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestFilesystemFilesIterationSpec() *VcenterVmGuestFilesystemFilesIterationSpec {
	this := VcenterVmGuestFilesystemFilesIterationSpec{}
	return &this
}

// NewVcenterVmGuestFilesystemFilesIterationSpecWithDefaults instantiates a new VcenterVmGuestFilesystemFilesIterationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestFilesystemFilesIterationSpecWithDefaults() *VcenterVmGuestFilesystemFilesIterationSpec {
	this := VcenterVmGuestFilesystemFilesIterationSpec{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *VcenterVmGuestFilesystemFilesIterationSpec) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestFilesystemFilesIterationSpec) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *VcenterVmGuestFilesystemFilesIterationSpec) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *VcenterVmGuestFilesystemFilesIterationSpec) SetSize(v int64) {
	o.Size = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *VcenterVmGuestFilesystemFilesIterationSpec) GetIndex() int64 {
	if o == nil || o.Index == nil {
		var ret int64
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestFilesystemFilesIterationSpec) GetIndexOk() (*int64, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *VcenterVmGuestFilesystemFilesIterationSpec) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int64 and assigns it to the Index field.
func (o *VcenterVmGuestFilesystemFilesIterationSpec) SetIndex(v int64) {
	o.Index = &v
}

func (o VcenterVmGuestFilesystemFilesIterationSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestFilesystemFilesIterationSpec struct {
	value *VcenterVmGuestFilesystemFilesIterationSpec
	isSet bool
}

func (v NullableVcenterVmGuestFilesystemFilesIterationSpec) Get() *VcenterVmGuestFilesystemFilesIterationSpec {
	return v.value
}

func (v *NullableVcenterVmGuestFilesystemFilesIterationSpec) Set(val *VcenterVmGuestFilesystemFilesIterationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestFilesystemFilesIterationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestFilesystemFilesIterationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestFilesystemFilesIterationSpec(val *VcenterVmGuestFilesystemFilesIterationSpec) *NullableVcenterVmGuestFilesystemFilesIterationSpec {
	return &NullableVcenterVmGuestFilesystemFilesIterationSpec{value: val, isSet: true}
}

func (v NullableVcenterVmGuestFilesystemFilesIterationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestFilesystemFilesIterationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


