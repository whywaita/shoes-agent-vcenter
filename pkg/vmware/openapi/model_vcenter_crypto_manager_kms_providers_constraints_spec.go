/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCryptoManagerKmsProvidersConstraintsSpec struct for VcenterCryptoManagerKmsProvidersConstraintsSpec
type VcenterCryptoManagerKmsProvidersConstraintsSpec struct {
	// Determines if a provider is restricted to hosts with TPM 2.0 capability. If unset, the constraint does not apply to the provider.
	TpmRequired *bool `json:"tpm_required,omitempty"`
}

// NewVcenterCryptoManagerKmsProvidersConstraintsSpec instantiates a new VcenterCryptoManagerKmsProvidersConstraintsSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCryptoManagerKmsProvidersConstraintsSpec() *VcenterCryptoManagerKmsProvidersConstraintsSpec {
	this := VcenterCryptoManagerKmsProvidersConstraintsSpec{}
	return &this
}

// NewVcenterCryptoManagerKmsProvidersConstraintsSpecWithDefaults instantiates a new VcenterCryptoManagerKmsProvidersConstraintsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCryptoManagerKmsProvidersConstraintsSpecWithDefaults() *VcenterCryptoManagerKmsProvidersConstraintsSpec {
	this := VcenterCryptoManagerKmsProvidersConstraintsSpec{}
	return &this
}

// GetTpmRequired returns the TpmRequired field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersConstraintsSpec) GetTpmRequired() bool {
	if o == nil || o.TpmRequired == nil {
		var ret bool
		return ret
	}
	return *o.TpmRequired
}

// GetTpmRequiredOk returns a tuple with the TpmRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersConstraintsSpec) GetTpmRequiredOk() (*bool, bool) {
	if o == nil || o.TpmRequired == nil {
		return nil, false
	}
	return o.TpmRequired, true
}

// HasTpmRequired returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersConstraintsSpec) HasTpmRequired() bool {
	if o != nil && o.TpmRequired != nil {
		return true
	}

	return false
}

// SetTpmRequired gets a reference to the given bool and assigns it to the TpmRequired field.
func (o *VcenterCryptoManagerKmsProvidersConstraintsSpec) SetTpmRequired(v bool) {
	o.TpmRequired = &v
}

func (o VcenterCryptoManagerKmsProvidersConstraintsSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TpmRequired != nil {
		toSerialize["tpm_required"] = o.TpmRequired
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCryptoManagerKmsProvidersConstraintsSpec struct {
	value *VcenterCryptoManagerKmsProvidersConstraintsSpec
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersConstraintsSpec) Get() *VcenterCryptoManagerKmsProvidersConstraintsSpec {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersConstraintsSpec) Set(val *VcenterCryptoManagerKmsProvidersConstraintsSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersConstraintsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersConstraintsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersConstraintsSpec(val *VcenterCryptoManagerKmsProvidersConstraintsSpec) *NullableVcenterCryptoManagerKmsProvidersConstraintsSpec {
	return &NullableVcenterCryptoManagerKmsProvidersConstraintsSpec{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersConstraintsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersConstraintsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


