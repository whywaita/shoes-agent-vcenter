/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// VcenterLcmNotification struct for VcenterLcmNotification
type VcenterLcmNotification struct {
	// The notification id.
	Id string `json:"id"`
	// The time the notification was raised/found. Only if the time information is available.
	Time *time.Time `json:"time,omitempty"`
	Message VapiStdLocalizableMessage `json:"message"`
	Resolution *VapiStdLocalizableMessage `json:"resolution,omitempty"`
}

// NewVcenterLcmNotification instantiates a new VcenterLcmNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterLcmNotification(id string, message VapiStdLocalizableMessage) *VcenterLcmNotification {
	this := VcenterLcmNotification{}
	this.Id = id
	this.Message = message
	return &this
}

// NewVcenterLcmNotificationWithDefaults instantiates a new VcenterLcmNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterLcmNotificationWithDefaults() *VcenterLcmNotification {
	this := VcenterLcmNotification{}
	return &this
}

// GetId returns the Id field value
func (o *VcenterLcmNotification) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VcenterLcmNotification) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VcenterLcmNotification) SetId(v string) {
	o.Id = v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *VcenterLcmNotification) GetTime() time.Time {
	if o == nil || o.Time == nil {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterLcmNotification) GetTimeOk() (*time.Time, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *VcenterLcmNotification) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *VcenterLcmNotification) SetTime(v time.Time) {
	o.Time = &v
}

// GetMessage returns the Message field value
func (o *VcenterLcmNotification) GetMessage() VapiStdLocalizableMessage {
	if o == nil {
		var ret VapiStdLocalizableMessage
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *VcenterLcmNotification) GetMessageOk() (*VapiStdLocalizableMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *VcenterLcmNotification) SetMessage(v VapiStdLocalizableMessage) {
	o.Message = v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *VcenterLcmNotification) GetResolution() VapiStdLocalizableMessage {
	if o == nil || o.Resolution == nil {
		var ret VapiStdLocalizableMessage
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterLcmNotification) GetResolutionOk() (*VapiStdLocalizableMessage, bool) {
	if o == nil || o.Resolution == nil {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *VcenterLcmNotification) HasResolution() bool {
	if o != nil && o.Resolution != nil {
		return true
	}

	return false
}

// SetResolution gets a reference to the given VapiStdLocalizableMessage and assigns it to the Resolution field.
func (o *VcenterLcmNotification) SetResolution(v VapiStdLocalizableMessage) {
	o.Resolution = &v
}

func (o VcenterLcmNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.Resolution != nil {
		toSerialize["resolution"] = o.Resolution
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterLcmNotification struct {
	value *VcenterLcmNotification
	isSet bool
}

func (v NullableVcenterLcmNotification) Get() *VcenterLcmNotification {
	return v.value
}

func (v *NullableVcenterLcmNotification) Set(val *VcenterLcmNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterLcmNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterLcmNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterLcmNotification(val *VcenterLcmNotification) *NullableVcenterLcmNotification {
	return &NullableVcenterLcmNotification{value: val, isSet: true}
}

func (v NullableVcenterLcmNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterLcmNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


