/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareParallelInfo struct for VcenterVmHardwareParallelInfo
type VcenterVmHardwareParallelInfo struct {
	// Device label.
	Label string `json:"label"`
	Backing VcenterVmHardwareParallelBackingInfo `json:"backing"`
	State VcenterVmHardwareConnectionState `json:"state"`
	// Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.
	StartConnected bool `json:"start_connected"`
	// Flag indicating whether the guest can connect and disconnect the device.
	AllowGuestControl bool `json:"allow_guest_control"`
}

// NewVcenterVmHardwareParallelInfo instantiates a new VcenterVmHardwareParallelInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareParallelInfo(label string, backing VcenterVmHardwareParallelBackingInfo, state VcenterVmHardwareConnectionState, startConnected bool, allowGuestControl bool) *VcenterVmHardwareParallelInfo {
	this := VcenterVmHardwareParallelInfo{}
	this.Label = label
	this.Backing = backing
	this.State = state
	this.StartConnected = startConnected
	this.AllowGuestControl = allowGuestControl
	return &this
}

// NewVcenterVmHardwareParallelInfoWithDefaults instantiates a new VcenterVmHardwareParallelInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareParallelInfoWithDefaults() *VcenterVmHardwareParallelInfo {
	this := VcenterVmHardwareParallelInfo{}
	return &this
}

// GetLabel returns the Label field value
func (o *VcenterVmHardwareParallelInfo) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelInfo) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *VcenterVmHardwareParallelInfo) SetLabel(v string) {
	o.Label = v
}

// GetBacking returns the Backing field value
func (o *VcenterVmHardwareParallelInfo) GetBacking() VcenterVmHardwareParallelBackingInfo {
	if o == nil {
		var ret VcenterVmHardwareParallelBackingInfo
		return ret
	}

	return o.Backing
}

// GetBackingOk returns a tuple with the Backing field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelInfo) GetBackingOk() (*VcenterVmHardwareParallelBackingInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Backing, true
}

// SetBacking sets field value
func (o *VcenterVmHardwareParallelInfo) SetBacking(v VcenterVmHardwareParallelBackingInfo) {
	o.Backing = v
}

// GetState returns the State field value
func (o *VcenterVmHardwareParallelInfo) GetState() VcenterVmHardwareConnectionState {
	if o == nil {
		var ret VcenterVmHardwareConnectionState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelInfo) GetStateOk() (*VcenterVmHardwareConnectionState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VcenterVmHardwareParallelInfo) SetState(v VcenterVmHardwareConnectionState) {
	o.State = v
}

// GetStartConnected returns the StartConnected field value
func (o *VcenterVmHardwareParallelInfo) GetStartConnected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StartConnected
}

// GetStartConnectedOk returns a tuple with the StartConnected field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelInfo) GetStartConnectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartConnected, true
}

// SetStartConnected sets field value
func (o *VcenterVmHardwareParallelInfo) SetStartConnected(v bool) {
	o.StartConnected = v
}

// GetAllowGuestControl returns the AllowGuestControl field value
func (o *VcenterVmHardwareParallelInfo) GetAllowGuestControl() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowGuestControl
}

// GetAllowGuestControlOk returns a tuple with the AllowGuestControl field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelInfo) GetAllowGuestControlOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AllowGuestControl, true
}

// SetAllowGuestControl sets field value
func (o *VcenterVmHardwareParallelInfo) SetAllowGuestControl(v bool) {
	o.AllowGuestControl = v
}

func (o VcenterVmHardwareParallelInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["backing"] = o.Backing
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["start_connected"] = o.StartConnected
	}
	if true {
		toSerialize["allow_guest_control"] = o.AllowGuestControl
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareParallelInfo struct {
	value *VcenterVmHardwareParallelInfo
	isSet bool
}

func (v NullableVcenterVmHardwareParallelInfo) Get() *VcenterVmHardwareParallelInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareParallelInfo) Set(val *VcenterVmHardwareParallelInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareParallelInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareParallelInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareParallelInfo(val *VcenterVmHardwareParallelInfo) *NullableVcenterVmHardwareParallelInfo {
	return &NullableVcenterVmHardwareParallelInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareParallelInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareParallelInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


