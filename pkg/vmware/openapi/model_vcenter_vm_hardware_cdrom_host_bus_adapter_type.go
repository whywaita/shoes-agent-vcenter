/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareCdromHostBusAdapterType The Cdrom.HostBusAdapterType enumerated type defines the valid types of host bus adapters that may be used for attaching a Cdrom to a virtual machine.
type VcenterVmHardwareCdromHostBusAdapterType string

// List of vcenter.vm.hardware.cdrom.host_bus_adapter_type
const (
	VCENTERVMHARDWARECDROMHOSTBUSADAPTERTYPE_IDE VcenterVmHardwareCdromHostBusAdapterType = "IDE"
	VCENTERVMHARDWARECDROMHOSTBUSADAPTERTYPE_SATA VcenterVmHardwareCdromHostBusAdapterType = "SATA"
)

// All allowed values of VcenterVmHardwareCdromHostBusAdapterType enum
var AllowedVcenterVmHardwareCdromHostBusAdapterTypeEnumValues = []VcenterVmHardwareCdromHostBusAdapterType{
	"IDE",
	"SATA",
}

func (v *VcenterVmHardwareCdromHostBusAdapterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareCdromHostBusAdapterType(value)
	for _, existing := range AllowedVcenterVmHardwareCdromHostBusAdapterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareCdromHostBusAdapterType", value)
}

// NewVcenterVmHardwareCdromHostBusAdapterTypeFromValue returns a pointer to a valid VcenterVmHardwareCdromHostBusAdapterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareCdromHostBusAdapterTypeFromValue(v string) (*VcenterVmHardwareCdromHostBusAdapterType, error) {
	ev := VcenterVmHardwareCdromHostBusAdapterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareCdromHostBusAdapterType: valid values are %v", v, AllowedVcenterVmHardwareCdromHostBusAdapterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareCdromHostBusAdapterType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareCdromHostBusAdapterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.cdrom.host_bus_adapter_type value
func (v VcenterVmHardwareCdromHostBusAdapterType) Ptr() *VcenterVmHardwareCdromHostBusAdapterType {
	return &v
}

type NullableVcenterVmHardwareCdromHostBusAdapterType struct {
	value *VcenterVmHardwareCdromHostBusAdapterType
	isSet bool
}

func (v NullableVcenterVmHardwareCdromHostBusAdapterType) Get() *VcenterVmHardwareCdromHostBusAdapterType {
	return v.value
}

func (v *NullableVcenterVmHardwareCdromHostBusAdapterType) Set(val *VcenterVmHardwareCdromHostBusAdapterType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareCdromHostBusAdapterType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareCdromHostBusAdapterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareCdromHostBusAdapterType(val *VcenterVmHardwareCdromHostBusAdapterType) *NullableVcenterVmHardwareCdromHostBusAdapterType {
	return &NullableVcenterVmHardwareCdromHostBusAdapterType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareCdromHostBusAdapterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareCdromHostBusAdapterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

