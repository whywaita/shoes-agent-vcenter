/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentUpgradeSourceApplianceSpec struct for VcenterDeploymentUpgradeSourceApplianceSpec
type VcenterDeploymentUpgradeSourceApplianceSpec struct {
	// The IP address or DNS resolvable name of the source appliance.
	Hostname string `json:"hostname"`
	// The HTTPS port of the source appliance. If unset, port 443 will be used.
	HttpsPort *int64 `json:"https_port,omitempty"`
	// SHA1 thumbprint of the server SSL certificate will be used for verification. This field is only relevant if Upgrade.SourceApplianceSpec.ssl-verify is unset or has the value true.
	SslThumbprint *string `json:"ssl_thumbprint,omitempty"`
	// SSL verification should be enabled or disabled for the source appliance validations. By default it is enabled and will use SSL certificate for verification. If thumbprint is provided, will use thumbprint for the verification. If unset, ssl_verify true will be used.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// The SSO administrator account on the source appliance.
	SsoAdminUsername string `json:"sso_admin_username"`
	// The SSO administrator account password.
	SsoAdminPassword string `json:"sso_admin_password"`
	// The password of the root user on the source appliance.
	RootPassword string `json:"root_password"`
	// Appliance SSH verification should be enabled or disabled. By default it is disabled and will not use any verification. If thumbprint is provided, thumbprint verification will be performed. If unset, ssh_verify true will be used.
	SshVerify *bool `json:"ssh_verify,omitempty"`
	// MD5 thumbprint of the server SSH key will be used for verification. This field is only relevant if Upgrade.SourceApplianceSpec.ssh-verify is unset or has the value true.
	SshThumbprint *string `json:"ssh_thumbprint,omitempty"`
}

// NewVcenterDeploymentUpgradeSourceApplianceSpec instantiates a new VcenterDeploymentUpgradeSourceApplianceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentUpgradeSourceApplianceSpec(hostname string, ssoAdminUsername string, ssoAdminPassword string, rootPassword string) *VcenterDeploymentUpgradeSourceApplianceSpec {
	this := VcenterDeploymentUpgradeSourceApplianceSpec{}
	this.Hostname = hostname
	this.SsoAdminUsername = ssoAdminUsername
	this.SsoAdminPassword = ssoAdminPassword
	this.RootPassword = rootPassword
	return &this
}

// NewVcenterDeploymentUpgradeSourceApplianceSpecWithDefaults instantiates a new VcenterDeploymentUpgradeSourceApplianceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentUpgradeSourceApplianceSpecWithDefaults() *VcenterDeploymentUpgradeSourceApplianceSpec {
	this := VcenterDeploymentUpgradeSourceApplianceSpec{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) SetHostname(v string) {
	o.Hostname = v
}

// GetHttpsPort returns the HttpsPort field value if set, zero value otherwise.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetHttpsPort() int64 {
	if o == nil || o.HttpsPort == nil {
		var ret int64
		return ret
	}
	return *o.HttpsPort
}

// GetHttpsPortOk returns a tuple with the HttpsPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetHttpsPortOk() (*int64, bool) {
	if o == nil || o.HttpsPort == nil {
		return nil, false
	}
	return o.HttpsPort, true
}

// HasHttpsPort returns a boolean if a field has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) HasHttpsPort() bool {
	if o != nil && o.HttpsPort != nil {
		return true
	}

	return false
}

// SetHttpsPort gets a reference to the given int64 and assigns it to the HttpsPort field.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) SetHttpsPort(v int64) {
	o.HttpsPort = &v
}

// GetSslThumbprint returns the SslThumbprint field value if set, zero value otherwise.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSslThumbprint() string {
	if o == nil || o.SslThumbprint == nil {
		var ret string
		return ret
	}
	return *o.SslThumbprint
}

// GetSslThumbprintOk returns a tuple with the SslThumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSslThumbprintOk() (*string, bool) {
	if o == nil || o.SslThumbprint == nil {
		return nil, false
	}
	return o.SslThumbprint, true
}

// HasSslThumbprint returns a boolean if a field has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) HasSslThumbprint() bool {
	if o != nil && o.SslThumbprint != nil {
		return true
	}

	return false
}

// SetSslThumbprint gets a reference to the given string and assigns it to the SslThumbprint field.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) SetSslThumbprint(v string) {
	o.SslThumbprint = &v
}

// GetSslVerify returns the SslVerify field value if set, zero value otherwise.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSslVerify() bool {
	if o == nil || o.SslVerify == nil {
		var ret bool
		return ret
	}
	return *o.SslVerify
}

// GetSslVerifyOk returns a tuple with the SslVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSslVerifyOk() (*bool, bool) {
	if o == nil || o.SslVerify == nil {
		return nil, false
	}
	return o.SslVerify, true
}

// HasSslVerify returns a boolean if a field has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) HasSslVerify() bool {
	if o != nil && o.SslVerify != nil {
		return true
	}

	return false
}

// SetSslVerify gets a reference to the given bool and assigns it to the SslVerify field.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) SetSslVerify(v bool) {
	o.SslVerify = &v
}

// GetSsoAdminUsername returns the SsoAdminUsername field value
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSsoAdminUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SsoAdminUsername
}

// GetSsoAdminUsernameOk returns a tuple with the SsoAdminUsername field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSsoAdminUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SsoAdminUsername, true
}

// SetSsoAdminUsername sets field value
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) SetSsoAdminUsername(v string) {
	o.SsoAdminUsername = v
}

// GetSsoAdminPassword returns the SsoAdminPassword field value
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSsoAdminPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SsoAdminPassword
}

// GetSsoAdminPasswordOk returns a tuple with the SsoAdminPassword field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSsoAdminPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SsoAdminPassword, true
}

// SetSsoAdminPassword sets field value
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) SetSsoAdminPassword(v string) {
	o.SsoAdminPassword = v
}

// GetRootPassword returns the RootPassword field value
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetRootPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootPassword
}

// GetRootPasswordOk returns a tuple with the RootPassword field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetRootPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RootPassword, true
}

// SetRootPassword sets field value
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) SetRootPassword(v string) {
	o.RootPassword = v
}

// GetSshVerify returns the SshVerify field value if set, zero value otherwise.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSshVerify() bool {
	if o == nil || o.SshVerify == nil {
		var ret bool
		return ret
	}
	return *o.SshVerify
}

// GetSshVerifyOk returns a tuple with the SshVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSshVerifyOk() (*bool, bool) {
	if o == nil || o.SshVerify == nil {
		return nil, false
	}
	return o.SshVerify, true
}

// HasSshVerify returns a boolean if a field has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) HasSshVerify() bool {
	if o != nil && o.SshVerify != nil {
		return true
	}

	return false
}

// SetSshVerify gets a reference to the given bool and assigns it to the SshVerify field.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) SetSshVerify(v bool) {
	o.SshVerify = &v
}

// GetSshThumbprint returns the SshThumbprint field value if set, zero value otherwise.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSshThumbprint() string {
	if o == nil || o.SshThumbprint == nil {
		var ret string
		return ret
	}
	return *o.SshThumbprint
}

// GetSshThumbprintOk returns a tuple with the SshThumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) GetSshThumbprintOk() (*string, bool) {
	if o == nil || o.SshThumbprint == nil {
		return nil, false
	}
	return o.SshThumbprint, true
}

// HasSshThumbprint returns a boolean if a field has been set.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) HasSshThumbprint() bool {
	if o != nil && o.SshThumbprint != nil {
		return true
	}

	return false
}

// SetSshThumbprint gets a reference to the given string and assigns it to the SshThumbprint field.
func (o *VcenterDeploymentUpgradeSourceApplianceSpec) SetSshThumbprint(v string) {
	o.SshThumbprint = &v
}

func (o VcenterDeploymentUpgradeSourceApplianceSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if o.HttpsPort != nil {
		toSerialize["https_port"] = o.HttpsPort
	}
	if o.SslThumbprint != nil {
		toSerialize["ssl_thumbprint"] = o.SslThumbprint
	}
	if o.SslVerify != nil {
		toSerialize["ssl_verify"] = o.SslVerify
	}
	if true {
		toSerialize["sso_admin_username"] = o.SsoAdminUsername
	}
	if true {
		toSerialize["sso_admin_password"] = o.SsoAdminPassword
	}
	if true {
		toSerialize["root_password"] = o.RootPassword
	}
	if o.SshVerify != nil {
		toSerialize["ssh_verify"] = o.SshVerify
	}
	if o.SshThumbprint != nil {
		toSerialize["ssh_thumbprint"] = o.SshThumbprint
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentUpgradeSourceApplianceSpec struct {
	value *VcenterDeploymentUpgradeSourceApplianceSpec
	isSet bool
}

func (v NullableVcenterDeploymentUpgradeSourceApplianceSpec) Get() *VcenterDeploymentUpgradeSourceApplianceSpec {
	return v.value
}

func (v *NullableVcenterDeploymentUpgradeSourceApplianceSpec) Set(val *VcenterDeploymentUpgradeSourceApplianceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentUpgradeSourceApplianceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentUpgradeSourceApplianceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentUpgradeSourceApplianceSpec(val *VcenterDeploymentUpgradeSourceApplianceSpec) *NullableVcenterDeploymentUpgradeSourceApplianceSpec {
	return &NullableVcenterDeploymentUpgradeSourceApplianceSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentUpgradeSourceApplianceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentUpgradeSourceApplianceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


