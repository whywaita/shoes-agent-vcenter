/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec struct for VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec
type VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec struct {
	// The IP address or DNS resolvable name of the remote PSC.
	Address string `json:"address"`
	// The HTTPS port of the remote PSC. If unset, port 443 will be used.
	HttpsPort *int64 `json:"https_port,omitempty"`
}

// NewVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec instantiates a new VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec(address string) *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec {
	this := VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec{}
	this.Address = address
	return &this
}

// NewVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpecWithDefaults instantiates a new VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpecWithDefaults() *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec {
	this := VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec{}
	return &this
}

// GetAddress returns the Address field value
func (o *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) SetAddress(v string) {
	o.Address = v
}

// GetHttpsPort returns the HttpsPort field value if set, zero value otherwise.
func (o *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) GetHttpsPort() int64 {
	if o == nil || o.HttpsPort == nil {
		var ret int64
		return ret
	}
	return *o.HttpsPort
}

// GetHttpsPortOk returns a tuple with the HttpsPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) GetHttpsPortOk() (*int64, bool) {
	if o == nil || o.HttpsPort == nil {
		return nil, false
	}
	return o.HttpsPort, true
}

// HasHttpsPort returns a boolean if a field has been set.
func (o *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) HasHttpsPort() bool {
	if o != nil && o.HttpsPort != nil {
		return true
	}

	return false
}

// SetHttpsPort gets a reference to the given int64 and assigns it to the HttpsPort field.
func (o *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) SetHttpsPort(v int64) {
	o.HttpsPort = &v
}

func (o VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if o.HttpsPort != nil {
		toSerialize["https_port"] = o.HttpsPort
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec struct {
	value *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec
	isSet bool
}

func (v NullableVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) Get() *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec {
	return v.value
}

func (v *NullableVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) Set(val *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec(val *VcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) *NullableVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec {
	return &NullableVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentInstallInitialConfigRemotePscThumbprintRemoteSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


