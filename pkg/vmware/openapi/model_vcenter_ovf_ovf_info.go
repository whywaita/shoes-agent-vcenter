/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterOvfOvfInfo struct for VcenterOvfOvfInfo
type VcenterOvfOvfInfo struct {
	// A {@term list} of localizable messages (see {@link LocalizableMessage}).
	Messages []VapiStdLocalizableMessage `json:"messages"`
}

// NewVcenterOvfOvfInfo instantiates a new VcenterOvfOvfInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterOvfOvfInfo(messages []VapiStdLocalizableMessage) *VcenterOvfOvfInfo {
	this := VcenterOvfOvfInfo{}
	this.Messages = messages
	return &this
}

// NewVcenterOvfOvfInfoWithDefaults instantiates a new VcenterOvfOvfInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterOvfOvfInfoWithDefaults() *VcenterOvfOvfInfo {
	this := VcenterOvfOvfInfo{}
	return &this
}

// GetMessages returns the Messages field value
func (o *VcenterOvfOvfInfo) GetMessages() []VapiStdLocalizableMessage {
	if o == nil {
		var ret []VapiStdLocalizableMessage
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *VcenterOvfOvfInfo) GetMessagesOk() (*[]VapiStdLocalizableMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Messages, true
}

// SetMessages sets field value
func (o *VcenterOvfOvfInfo) SetMessages(v []VapiStdLocalizableMessage) {
	o.Messages = v
}

func (o VcenterOvfOvfInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["messages"] = o.Messages
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterOvfOvfInfo struct {
	value *VcenterOvfOvfInfo
	isSet bool
}

func (v NullableVcenterOvfOvfInfo) Get() *VcenterOvfOvfInfo {
	return v.value
}

func (v *NullableVcenterOvfOvfInfo) Set(val *VcenterOvfOvfInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterOvfOvfInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterOvfOvfInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterOvfOvfInfo(val *VcenterOvfOvfInfo) *NullableVcenterOvfOvfInfo {
	return &NullableVcenterOvfOvfInfo{value: val, isSet: true}
}

func (v NullableVcenterOvfOvfInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterOvfOvfInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


