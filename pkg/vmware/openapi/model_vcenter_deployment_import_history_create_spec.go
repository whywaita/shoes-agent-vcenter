/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentImportHistoryCreateSpec struct for VcenterDeploymentImportHistoryCreateSpec
type VcenterDeploymentImportHistoryCreateSpec struct {
	// Name of the vCenter history import task
	Name string `json:"name"`
	// Description of the vCenter history import task.
	Description string `json:"description"`
}

// NewVcenterDeploymentImportHistoryCreateSpec instantiates a new VcenterDeploymentImportHistoryCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentImportHistoryCreateSpec(name string, description string) *VcenterDeploymentImportHistoryCreateSpec {
	this := VcenterDeploymentImportHistoryCreateSpec{}
	this.Name = name
	this.Description = description
	return &this
}

// NewVcenterDeploymentImportHistoryCreateSpecWithDefaults instantiates a new VcenterDeploymentImportHistoryCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentImportHistoryCreateSpecWithDefaults() *VcenterDeploymentImportHistoryCreateSpec {
	this := VcenterDeploymentImportHistoryCreateSpec{}
	return &this
}

// GetName returns the Name field value
func (o *VcenterDeploymentImportHistoryCreateSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentImportHistoryCreateSpec) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterDeploymentImportHistoryCreateSpec) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *VcenterDeploymentImportHistoryCreateSpec) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentImportHistoryCreateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *VcenterDeploymentImportHistoryCreateSpec) SetDescription(v string) {
	o.Description = v
}

func (o VcenterDeploymentImportHistoryCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentImportHistoryCreateSpec struct {
	value *VcenterDeploymentImportHistoryCreateSpec
	isSet bool
}

func (v NullableVcenterDeploymentImportHistoryCreateSpec) Get() *VcenterDeploymentImportHistoryCreateSpec {
	return v.value
}

func (v *NullableVcenterDeploymentImportHistoryCreateSpec) Set(val *VcenterDeploymentImportHistoryCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentImportHistoryCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentImportHistoryCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentImportHistoryCreateSpec(val *VcenterDeploymentImportHistoryCreateSpec) *NullableVcenterDeploymentImportHistoryCreateSpec {
	return &NullableVcenterDeploymentImportHistoryCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentImportHistoryCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentImportHistoryCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


