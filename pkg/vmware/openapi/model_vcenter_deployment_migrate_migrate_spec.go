/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentMigrateMigrateSpec struct for VcenterDeploymentMigrateMigrateSpec
type VcenterDeploymentMigrateMigrateSpec struct {
	SourceVcWindows VcenterDeploymentMigrateSourceVcWindows `json:"source_vc_windows"`
	ExistingMigrationAssistant VcenterDeploymentMigrateMigrationAssistantSpec `json:"existing_migration_assistant"`
	History *VcenterDeploymentHistoryMigrationSpec `json:"history,omitempty"`
	VcsaEmbedded *VcenterDeploymentMigrateVcsaEmbeddedSpec `json:"vcsa_embedded,omitempty"`
	Psc *VcenterDeploymentMigratePscSpec `json:"psc,omitempty"`
	ActiveDirectory *VcenterDeploymentMigrateActiveDirectorySpec `json:"active_directory,omitempty"`
	// Use the default option for any questions that may come up during appliance configuration. If unset, will default to false.
	AutoAnswer *bool `json:"auto_answer,omitempty"`
}

// NewVcenterDeploymentMigrateMigrateSpec instantiates a new VcenterDeploymentMigrateMigrateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentMigrateMigrateSpec(sourceVcWindows VcenterDeploymentMigrateSourceVcWindows, existingMigrationAssistant VcenterDeploymentMigrateMigrationAssistantSpec) *VcenterDeploymentMigrateMigrateSpec {
	this := VcenterDeploymentMigrateMigrateSpec{}
	this.SourceVcWindows = sourceVcWindows
	this.ExistingMigrationAssistant = existingMigrationAssistant
	return &this
}

// NewVcenterDeploymentMigrateMigrateSpecWithDefaults instantiates a new VcenterDeploymentMigrateMigrateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentMigrateMigrateSpecWithDefaults() *VcenterDeploymentMigrateMigrateSpec {
	this := VcenterDeploymentMigrateMigrateSpec{}
	return &this
}

// GetSourceVcWindows returns the SourceVcWindows field value
func (o *VcenterDeploymentMigrateMigrateSpec) GetSourceVcWindows() VcenterDeploymentMigrateSourceVcWindows {
	if o == nil {
		var ret VcenterDeploymentMigrateSourceVcWindows
		return ret
	}

	return o.SourceVcWindows
}

// GetSourceVcWindowsOk returns a tuple with the SourceVcWindows field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) GetSourceVcWindowsOk() (*VcenterDeploymentMigrateSourceVcWindows, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceVcWindows, true
}

// SetSourceVcWindows sets field value
func (o *VcenterDeploymentMigrateMigrateSpec) SetSourceVcWindows(v VcenterDeploymentMigrateSourceVcWindows) {
	o.SourceVcWindows = v
}

// GetExistingMigrationAssistant returns the ExistingMigrationAssistant field value
func (o *VcenterDeploymentMigrateMigrateSpec) GetExistingMigrationAssistant() VcenterDeploymentMigrateMigrationAssistantSpec {
	if o == nil {
		var ret VcenterDeploymentMigrateMigrationAssistantSpec
		return ret
	}

	return o.ExistingMigrationAssistant
}

// GetExistingMigrationAssistantOk returns a tuple with the ExistingMigrationAssistant field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) GetExistingMigrationAssistantOk() (*VcenterDeploymentMigrateMigrationAssistantSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExistingMigrationAssistant, true
}

// SetExistingMigrationAssistant sets field value
func (o *VcenterDeploymentMigrateMigrateSpec) SetExistingMigrationAssistant(v VcenterDeploymentMigrateMigrationAssistantSpec) {
	o.ExistingMigrationAssistant = v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *VcenterDeploymentMigrateMigrateSpec) GetHistory() VcenterDeploymentHistoryMigrationSpec {
	if o == nil || o.History == nil {
		var ret VcenterDeploymentHistoryMigrationSpec
		return ret
	}
	return *o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) GetHistoryOk() (*VcenterDeploymentHistoryMigrationSpec, bool) {
	if o == nil || o.History == nil {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) HasHistory() bool {
	if o != nil && o.History != nil {
		return true
	}

	return false
}

// SetHistory gets a reference to the given VcenterDeploymentHistoryMigrationSpec and assigns it to the History field.
func (o *VcenterDeploymentMigrateMigrateSpec) SetHistory(v VcenterDeploymentHistoryMigrationSpec) {
	o.History = &v
}

// GetVcsaEmbedded returns the VcsaEmbedded field value if set, zero value otherwise.
func (o *VcenterDeploymentMigrateMigrateSpec) GetVcsaEmbedded() VcenterDeploymentMigrateVcsaEmbeddedSpec {
	if o == nil || o.VcsaEmbedded == nil {
		var ret VcenterDeploymentMigrateVcsaEmbeddedSpec
		return ret
	}
	return *o.VcsaEmbedded
}

// GetVcsaEmbeddedOk returns a tuple with the VcsaEmbedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) GetVcsaEmbeddedOk() (*VcenterDeploymentMigrateVcsaEmbeddedSpec, bool) {
	if o == nil || o.VcsaEmbedded == nil {
		return nil, false
	}
	return o.VcsaEmbedded, true
}

// HasVcsaEmbedded returns a boolean if a field has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) HasVcsaEmbedded() bool {
	if o != nil && o.VcsaEmbedded != nil {
		return true
	}

	return false
}

// SetVcsaEmbedded gets a reference to the given VcenterDeploymentMigrateVcsaEmbeddedSpec and assigns it to the VcsaEmbedded field.
func (o *VcenterDeploymentMigrateMigrateSpec) SetVcsaEmbedded(v VcenterDeploymentMigrateVcsaEmbeddedSpec) {
	o.VcsaEmbedded = &v
}

// GetPsc returns the Psc field value if set, zero value otherwise.
func (o *VcenterDeploymentMigrateMigrateSpec) GetPsc() VcenterDeploymentMigratePscSpec {
	if o == nil || o.Psc == nil {
		var ret VcenterDeploymentMigratePscSpec
		return ret
	}
	return *o.Psc
}

// GetPscOk returns a tuple with the Psc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) GetPscOk() (*VcenterDeploymentMigratePscSpec, bool) {
	if o == nil || o.Psc == nil {
		return nil, false
	}
	return o.Psc, true
}

// HasPsc returns a boolean if a field has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) HasPsc() bool {
	if o != nil && o.Psc != nil {
		return true
	}

	return false
}

// SetPsc gets a reference to the given VcenterDeploymentMigratePscSpec and assigns it to the Psc field.
func (o *VcenterDeploymentMigrateMigrateSpec) SetPsc(v VcenterDeploymentMigratePscSpec) {
	o.Psc = &v
}

// GetActiveDirectory returns the ActiveDirectory field value if set, zero value otherwise.
func (o *VcenterDeploymentMigrateMigrateSpec) GetActiveDirectory() VcenterDeploymentMigrateActiveDirectorySpec {
	if o == nil || o.ActiveDirectory == nil {
		var ret VcenterDeploymentMigrateActiveDirectorySpec
		return ret
	}
	return *o.ActiveDirectory
}

// GetActiveDirectoryOk returns a tuple with the ActiveDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) GetActiveDirectoryOk() (*VcenterDeploymentMigrateActiveDirectorySpec, bool) {
	if o == nil || o.ActiveDirectory == nil {
		return nil, false
	}
	return o.ActiveDirectory, true
}

// HasActiveDirectory returns a boolean if a field has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) HasActiveDirectory() bool {
	if o != nil && o.ActiveDirectory != nil {
		return true
	}

	return false
}

// SetActiveDirectory gets a reference to the given VcenterDeploymentMigrateActiveDirectorySpec and assigns it to the ActiveDirectory field.
func (o *VcenterDeploymentMigrateMigrateSpec) SetActiveDirectory(v VcenterDeploymentMigrateActiveDirectorySpec) {
	o.ActiveDirectory = &v
}

// GetAutoAnswer returns the AutoAnswer field value if set, zero value otherwise.
func (o *VcenterDeploymentMigrateMigrateSpec) GetAutoAnswer() bool {
	if o == nil || o.AutoAnswer == nil {
		var ret bool
		return ret
	}
	return *o.AutoAnswer
}

// GetAutoAnswerOk returns a tuple with the AutoAnswer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) GetAutoAnswerOk() (*bool, bool) {
	if o == nil || o.AutoAnswer == nil {
		return nil, false
	}
	return o.AutoAnswer, true
}

// HasAutoAnswer returns a boolean if a field has been set.
func (o *VcenterDeploymentMigrateMigrateSpec) HasAutoAnswer() bool {
	if o != nil && o.AutoAnswer != nil {
		return true
	}

	return false
}

// SetAutoAnswer gets a reference to the given bool and assigns it to the AutoAnswer field.
func (o *VcenterDeploymentMigrateMigrateSpec) SetAutoAnswer(v bool) {
	o.AutoAnswer = &v
}

func (o VcenterDeploymentMigrateMigrateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source_vc_windows"] = o.SourceVcWindows
	}
	if true {
		toSerialize["existing_migration_assistant"] = o.ExistingMigrationAssistant
	}
	if o.History != nil {
		toSerialize["history"] = o.History
	}
	if o.VcsaEmbedded != nil {
		toSerialize["vcsa_embedded"] = o.VcsaEmbedded
	}
	if o.Psc != nil {
		toSerialize["psc"] = o.Psc
	}
	if o.ActiveDirectory != nil {
		toSerialize["active_directory"] = o.ActiveDirectory
	}
	if o.AutoAnswer != nil {
		toSerialize["auto_answer"] = o.AutoAnswer
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentMigrateMigrateSpec struct {
	value *VcenterDeploymentMigrateMigrateSpec
	isSet bool
}

func (v NullableVcenterDeploymentMigrateMigrateSpec) Get() *VcenterDeploymentMigrateMigrateSpec {
	return v.value
}

func (v *NullableVcenterDeploymentMigrateMigrateSpec) Set(val *VcenterDeploymentMigrateMigrateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentMigrateMigrateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentMigrateMigrateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentMigrateMigrateSpec(val *VcenterDeploymentMigrateMigrateSpec) *NullableVcenterDeploymentMigrateMigrateSpec {
	return &NullableVcenterDeploymentMigrateMigrateSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentMigrateMigrateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentMigrateMigrateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


