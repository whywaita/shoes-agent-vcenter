/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmStoragePolicyComplianceStatus The Compliance.Status enumerated type defines the storage compliance status of a virtual machine and its applicable entities.
type VcenterVmStoragePolicyComplianceStatus string

// List of vcenter.vm.storage.policy.compliance.status
const (
	VCENTERVMSTORAGEPOLICYCOMPLIANCESTATUS_COMPLIANT VcenterVmStoragePolicyComplianceStatus = "COMPLIANT"
	VCENTERVMSTORAGEPOLICYCOMPLIANCESTATUS_NON_COMPLIANT VcenterVmStoragePolicyComplianceStatus = "NON_COMPLIANT"
	VCENTERVMSTORAGEPOLICYCOMPLIANCESTATUS_UNKNOWN_COMPLIANCE VcenterVmStoragePolicyComplianceStatus = "UNKNOWN_COMPLIANCE"
	VCENTERVMSTORAGEPOLICYCOMPLIANCESTATUS_NOT_APPLICABLE VcenterVmStoragePolicyComplianceStatus = "NOT_APPLICABLE"
	VCENTERVMSTORAGEPOLICYCOMPLIANCESTATUS_OUT_OF_DATE VcenterVmStoragePolicyComplianceStatus = "OUT_OF_DATE"
)

// All allowed values of VcenterVmStoragePolicyComplianceStatus enum
var AllowedVcenterVmStoragePolicyComplianceStatusEnumValues = []VcenterVmStoragePolicyComplianceStatus{
	"COMPLIANT",
	"NON_COMPLIANT",
	"UNKNOWN_COMPLIANCE",
	"NOT_APPLICABLE",
	"OUT_OF_DATE",
}

func (v *VcenterVmStoragePolicyComplianceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmStoragePolicyComplianceStatus(value)
	for _, existing := range AllowedVcenterVmStoragePolicyComplianceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmStoragePolicyComplianceStatus", value)
}

// NewVcenterVmStoragePolicyComplianceStatusFromValue returns a pointer to a valid VcenterVmStoragePolicyComplianceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmStoragePolicyComplianceStatusFromValue(v string) (*VcenterVmStoragePolicyComplianceStatus, error) {
	ev := VcenterVmStoragePolicyComplianceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmStoragePolicyComplianceStatus: valid values are %v", v, AllowedVcenterVmStoragePolicyComplianceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmStoragePolicyComplianceStatus) IsValid() bool {
	for _, existing := range AllowedVcenterVmStoragePolicyComplianceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.storage.policy.compliance.status value
func (v VcenterVmStoragePolicyComplianceStatus) Ptr() *VcenterVmStoragePolicyComplianceStatus {
	return &v
}

type NullableVcenterVmStoragePolicyComplianceStatus struct {
	value *VcenterVmStoragePolicyComplianceStatus
	isSet bool
}

func (v NullableVcenterVmStoragePolicyComplianceStatus) Get() *VcenterVmStoragePolicyComplianceStatus {
	return v.value
}

func (v *NullableVcenterVmStoragePolicyComplianceStatus) Set(val *VcenterVmStoragePolicyComplianceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmStoragePolicyComplianceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmStoragePolicyComplianceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmStoragePolicyComplianceStatus(val *VcenterVmStoragePolicyComplianceStatus) *NullableVcenterVmStoragePolicyComplianceStatus {
	return &NullableVcenterVmStoragePolicyComplianceStatus{value: val, isSet: true}
}

func (v NullableVcenterVmStoragePolicyComplianceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmStoragePolicyComplianceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

