/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaOperationsInfo struct for VcenterVchaOperationsInfo
type VcenterVchaOperationsInfo struct {
	// Identifiers of the operations that are current disabled. These operation strings are one of \"vcenter.vcha.cluster.deploy\", \"vcenter.vcha.cluster.failover\", \"vcenter.vcha.cluster.passive.redeploy\", \"vcenter.vcha.cluster.witness.redeploy\", \"vcenter.vcha.cluster.mode.set\", \"vcenter.vcha.cluster.undeploy\" and \"vcenter.vcha.cluster.get\". When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vapi.operation. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vapi.operation.
	Disabled []string `json:"disabled"`
	// Identifiers of the operations that are currently running. These operation strings are one of \"vcenter.vcha.cluster.deploy\", \"vcenter.vcha.cluster.failover\", \"vcenter.vcha.cluster.passive.redeploy\", \"vcenter.vcha.cluster.witness.redeploy\", \"vcenter.vcha.cluster.mode.set\", and \"vcenter.vcha.cluster.undeploy\". When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vapi.operation. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vapi.operation.
	Active []string `json:"active"`
}

// NewVcenterVchaOperationsInfo instantiates a new VcenterVchaOperationsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaOperationsInfo(disabled []string, active []string) *VcenterVchaOperationsInfo {
	this := VcenterVchaOperationsInfo{}
	this.Disabled = disabled
	this.Active = active
	return &this
}

// NewVcenterVchaOperationsInfoWithDefaults instantiates a new VcenterVchaOperationsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaOperationsInfoWithDefaults() *VcenterVchaOperationsInfo {
	this := VcenterVchaOperationsInfo{}
	return &this
}

// GetDisabled returns the Disabled field value
func (o *VcenterVchaOperationsInfo) GetDisabled() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaOperationsInfo) GetDisabledOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *VcenterVchaOperationsInfo) SetDisabled(v []string) {
	o.Disabled = v
}

// GetActive returns the Active field value
func (o *VcenterVchaOperationsInfo) GetActive() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaOperationsInfo) GetActiveOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *VcenterVchaOperationsInfo) SetActive(v []string) {
	o.Active = v
}

func (o VcenterVchaOperationsInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["disabled"] = o.Disabled
	}
	if true {
		toSerialize["active"] = o.Active
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaOperationsInfo struct {
	value *VcenterVchaOperationsInfo
	isSet bool
}

func (v NullableVcenterVchaOperationsInfo) Get() *VcenterVchaOperationsInfo {
	return v.value
}

func (v *NullableVcenterVchaOperationsInfo) Set(val *VcenterVchaOperationsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaOperationsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaOperationsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaOperationsInfo(val *VcenterVchaOperationsInfo) *NullableVcenterVchaOperationsInfo {
	return &NullableVcenterVchaOperationsInfo{value: val, isSet: true}
}

func (v NullableVcenterVchaOperationsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaOperationsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


