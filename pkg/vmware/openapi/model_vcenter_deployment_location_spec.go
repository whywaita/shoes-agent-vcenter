/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentLocationSpec struct for VcenterDeploymentLocationSpec
type VcenterDeploymentLocationSpec struct {
	// The IP address or DNS resolvable name of the container.
	Hostname string `json:"hostname"`
	// The HTTPS port of the container. If unset, port 443 will be used.
	HttpsPort *int64 `json:"https_port,omitempty"`
	// SHA1 thumbprint of the server SSL certificate will be used for verification. This field is only relevant if LocationSpec.ssl-verify is unset or has the value true.
	SslThumbprint *string `json:"ssl_thumbprint,omitempty"`
	// SSL verification should be enabled or disabled. If LocationSpec.ssl-verify is true and and LocationSpec.ssl-thumbprint is unset, the CA certificate will be used for verification. If LocationSpec.ssl-verify is true and LocationSpec.ssl-thumbprint is set then the thumbprint will be used for verification. No verification will be performed if LocationSpec.ssl-verify value is set to false. If unset, ssl_verify true will be used.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// The administrator account on the host.
	Username string `json:"username"`
	// The administrator account password.
	Password string `json:"password"`
}

// NewVcenterDeploymentLocationSpec instantiates a new VcenterDeploymentLocationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentLocationSpec(hostname string, username string, password string) *VcenterDeploymentLocationSpec {
	this := VcenterDeploymentLocationSpec{}
	this.Hostname = hostname
	this.Username = username
	this.Password = password
	return &this
}

// NewVcenterDeploymentLocationSpecWithDefaults instantiates a new VcenterDeploymentLocationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentLocationSpecWithDefaults() *VcenterDeploymentLocationSpec {
	this := VcenterDeploymentLocationSpec{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *VcenterDeploymentLocationSpec) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentLocationSpec) GetHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *VcenterDeploymentLocationSpec) SetHostname(v string) {
	o.Hostname = v
}

// GetHttpsPort returns the HttpsPort field value if set, zero value otherwise.
func (o *VcenterDeploymentLocationSpec) GetHttpsPort() int64 {
	if o == nil || o.HttpsPort == nil {
		var ret int64
		return ret
	}
	return *o.HttpsPort
}

// GetHttpsPortOk returns a tuple with the HttpsPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentLocationSpec) GetHttpsPortOk() (*int64, bool) {
	if o == nil || o.HttpsPort == nil {
		return nil, false
	}
	return o.HttpsPort, true
}

// HasHttpsPort returns a boolean if a field has been set.
func (o *VcenterDeploymentLocationSpec) HasHttpsPort() bool {
	if o != nil && o.HttpsPort != nil {
		return true
	}

	return false
}

// SetHttpsPort gets a reference to the given int64 and assigns it to the HttpsPort field.
func (o *VcenterDeploymentLocationSpec) SetHttpsPort(v int64) {
	o.HttpsPort = &v
}

// GetSslThumbprint returns the SslThumbprint field value if set, zero value otherwise.
func (o *VcenterDeploymentLocationSpec) GetSslThumbprint() string {
	if o == nil || o.SslThumbprint == nil {
		var ret string
		return ret
	}
	return *o.SslThumbprint
}

// GetSslThumbprintOk returns a tuple with the SslThumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentLocationSpec) GetSslThumbprintOk() (*string, bool) {
	if o == nil || o.SslThumbprint == nil {
		return nil, false
	}
	return o.SslThumbprint, true
}

// HasSslThumbprint returns a boolean if a field has been set.
func (o *VcenterDeploymentLocationSpec) HasSslThumbprint() bool {
	if o != nil && o.SslThumbprint != nil {
		return true
	}

	return false
}

// SetSslThumbprint gets a reference to the given string and assigns it to the SslThumbprint field.
func (o *VcenterDeploymentLocationSpec) SetSslThumbprint(v string) {
	o.SslThumbprint = &v
}

// GetSslVerify returns the SslVerify field value if set, zero value otherwise.
func (o *VcenterDeploymentLocationSpec) GetSslVerify() bool {
	if o == nil || o.SslVerify == nil {
		var ret bool
		return ret
	}
	return *o.SslVerify
}

// GetSslVerifyOk returns a tuple with the SslVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentLocationSpec) GetSslVerifyOk() (*bool, bool) {
	if o == nil || o.SslVerify == nil {
		return nil, false
	}
	return o.SslVerify, true
}

// HasSslVerify returns a boolean if a field has been set.
func (o *VcenterDeploymentLocationSpec) HasSslVerify() bool {
	if o != nil && o.SslVerify != nil {
		return true
	}

	return false
}

// SetSslVerify gets a reference to the given bool and assigns it to the SslVerify field.
func (o *VcenterDeploymentLocationSpec) SetSslVerify(v bool) {
	o.SslVerify = &v
}

// GetUsername returns the Username field value
func (o *VcenterDeploymentLocationSpec) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentLocationSpec) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *VcenterDeploymentLocationSpec) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *VcenterDeploymentLocationSpec) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentLocationSpec) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *VcenterDeploymentLocationSpec) SetPassword(v string) {
	o.Password = v
}

func (o VcenterDeploymentLocationSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if o.HttpsPort != nil {
		toSerialize["https_port"] = o.HttpsPort
	}
	if o.SslThumbprint != nil {
		toSerialize["ssl_thumbprint"] = o.SslThumbprint
	}
	if o.SslVerify != nil {
		toSerialize["ssl_verify"] = o.SslVerify
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentLocationSpec struct {
	value *VcenterDeploymentLocationSpec
	isSet bool
}

func (v NullableVcenterDeploymentLocationSpec) Get() *VcenterDeploymentLocationSpec {
	return v.value
}

func (v *NullableVcenterDeploymentLocationSpec) Set(val *VcenterDeploymentLocationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentLocationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentLocationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentLocationSpec(val *VcenterDeploymentLocationSpec) *NullableVcenterDeploymentLocationSpec {
	return &NullableVcenterDeploymentLocationSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentLocationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentLocationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


