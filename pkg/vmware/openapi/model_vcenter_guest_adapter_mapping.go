/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestAdapterMapping struct for VcenterGuestAdapterMapping
type VcenterGuestAdapterMapping struct {
	// The MAC address of a network adapter being customized. If unset, the customization process maps the the settings from the list of AdapterMappings.IPSettings in the CustomizationSpec.interfaces to the virtual machine's network adapters, in PCI slot order. The first virtual network adapter on the PCI bus is assigned interfaces[0].IPSettings, the second adapter is assigned interfaces[1].IPSettings, and so on.
	MacAddress *string `json:"mac_address,omitempty"`
	Adapter VcenterGuestIPSettings `json:"adapter"`
}

// NewVcenterGuestAdapterMapping instantiates a new VcenterGuestAdapterMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestAdapterMapping(adapter VcenterGuestIPSettings) *VcenterGuestAdapterMapping {
	this := VcenterGuestAdapterMapping{}
	this.Adapter = adapter
	return &this
}

// NewVcenterGuestAdapterMappingWithDefaults instantiates a new VcenterGuestAdapterMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestAdapterMappingWithDefaults() *VcenterGuestAdapterMapping {
	this := VcenterGuestAdapterMapping{}
	return &this
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *VcenterGuestAdapterMapping) GetMacAddress() string {
	if o == nil || o.MacAddress == nil {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestAdapterMapping) GetMacAddressOk() (*string, bool) {
	if o == nil || o.MacAddress == nil {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *VcenterGuestAdapterMapping) HasMacAddress() bool {
	if o != nil && o.MacAddress != nil {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *VcenterGuestAdapterMapping) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetAdapter returns the Adapter field value
func (o *VcenterGuestAdapterMapping) GetAdapter() VcenterGuestIPSettings {
	if o == nil {
		var ret VcenterGuestIPSettings
		return ret
	}

	return o.Adapter
}

// GetAdapterOk returns a tuple with the Adapter field value
// and a boolean to check if the value has been set.
func (o *VcenterGuestAdapterMapping) GetAdapterOk() (*VcenterGuestIPSettings, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Adapter, true
}

// SetAdapter sets field value
func (o *VcenterGuestAdapterMapping) SetAdapter(v VcenterGuestIPSettings) {
	o.Adapter = v
}

func (o VcenterGuestAdapterMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MacAddress != nil {
		toSerialize["mac_address"] = o.MacAddress
	}
	if true {
		toSerialize["adapter"] = o.Adapter
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestAdapterMapping struct {
	value *VcenterGuestAdapterMapping
	isSet bool
}

func (v NullableVcenterGuestAdapterMapping) Get() *VcenterGuestAdapterMapping {
	return v.value
}

func (v *NullableVcenterGuestAdapterMapping) Set(val *VcenterGuestAdapterMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestAdapterMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestAdapterMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestAdapterMapping(val *VcenterGuestAdapterMapping) *NullableVcenterGuestAdapterMapping {
	return &NullableVcenterGuestAdapterMapping{value: val, isSet: true}
}

func (v NullableVcenterGuestAdapterMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestAdapterMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


