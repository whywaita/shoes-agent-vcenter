/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterClusterInfo struct for VcenterClusterInfo
type VcenterClusterInfo struct {
	// The name of the cluster
	Name string `json:"name"`
	// Identifier of the root resource pool of the cluster When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool.
	ResourcePool string `json:"resource_pool"`
}

// NewVcenterClusterInfo instantiates a new VcenterClusterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterClusterInfo(name string, resourcePool string) *VcenterClusterInfo {
	this := VcenterClusterInfo{}
	this.Name = name
	this.ResourcePool = resourcePool
	return &this
}

// NewVcenterClusterInfoWithDefaults instantiates a new VcenterClusterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterClusterInfoWithDefaults() *VcenterClusterInfo {
	this := VcenterClusterInfo{}
	return &this
}

// GetName returns the Name field value
func (o *VcenterClusterInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterClusterInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterClusterInfo) SetName(v string) {
	o.Name = v
}

// GetResourcePool returns the ResourcePool field value
func (o *VcenterClusterInfo) GetResourcePool() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourcePool
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value
// and a boolean to check if the value has been set.
func (o *VcenterClusterInfo) GetResourcePoolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourcePool, true
}

// SetResourcePool sets field value
func (o *VcenterClusterInfo) SetResourcePool(v string) {
	o.ResourcePool = v
}

func (o VcenterClusterInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["resource_pool"] = o.ResourcePool
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterClusterInfo struct {
	value *VcenterClusterInfo
	isSet bool
}

func (v NullableVcenterClusterInfo) Get() *VcenterClusterInfo {
	return v.value
}

func (v *NullableVcenterClusterInfo) Set(val *VcenterClusterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterClusterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterClusterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterClusterInfo(val *VcenterClusterInfo) *NullableVcenterClusterInfo {
	return &NullableVcenterClusterInfo{value: val, isSet: true}
}

func (v NullableVcenterClusterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterClusterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


