/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementLoadBalancersSetSpec struct for VcenterNamespaceManagementLoadBalancersSetSpec
type VcenterNamespaceManagementLoadBalancersSetSpec struct {
	// List of address ranges that will be used to derive frontend IP addresses for L4 virtual servers. At least one range must be provided. A set operation only allows for addition of new IP ranges to the existing list of IP ranges.
	AddressRanges []VcenterNamespaceManagementIPRange `json:"address_ranges"`
	Provider VcenterNamespaceManagementLoadBalancersProvider `json:"provider"`
	HaProxyConfigSetSpec *VcenterNamespaceManagementLoadBalancersHAProxyConfigSetSpec `json:"ha_proxy_config_set_spec,omitempty"`
	AviConfigSetSpec *VcenterNamespaceManagementLoadBalancersAviConfigSetSpec `json:"avi_config_set_spec,omitempty"`
}

// NewVcenterNamespaceManagementLoadBalancersSetSpec instantiates a new VcenterNamespaceManagementLoadBalancersSetSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementLoadBalancersSetSpec(addressRanges []VcenterNamespaceManagementIPRange, provider VcenterNamespaceManagementLoadBalancersProvider) *VcenterNamespaceManagementLoadBalancersSetSpec {
	this := VcenterNamespaceManagementLoadBalancersSetSpec{}
	this.AddressRanges = addressRanges
	this.Provider = provider
	return &this
}

// NewVcenterNamespaceManagementLoadBalancersSetSpecWithDefaults instantiates a new VcenterNamespaceManagementLoadBalancersSetSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementLoadBalancersSetSpecWithDefaults() *VcenterNamespaceManagementLoadBalancersSetSpec {
	this := VcenterNamespaceManagementLoadBalancersSetSpec{}
	return &this
}

// GetAddressRanges returns the AddressRanges field value
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) GetAddressRanges() []VcenterNamespaceManagementIPRange {
	if o == nil {
		var ret []VcenterNamespaceManagementIPRange
		return ret
	}

	return o.AddressRanges
}

// GetAddressRangesOk returns a tuple with the AddressRanges field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) GetAddressRangesOk() (*[]VcenterNamespaceManagementIPRange, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AddressRanges, true
}

// SetAddressRanges sets field value
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) SetAddressRanges(v []VcenterNamespaceManagementIPRange) {
	o.AddressRanges = v
}

// GetProvider returns the Provider field value
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) GetProvider() VcenterNamespaceManagementLoadBalancersProvider {
	if o == nil {
		var ret VcenterNamespaceManagementLoadBalancersProvider
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) GetProviderOk() (*VcenterNamespaceManagementLoadBalancersProvider, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) SetProvider(v VcenterNamespaceManagementLoadBalancersProvider) {
	o.Provider = v
}

// GetHaProxyConfigSetSpec returns the HaProxyConfigSetSpec field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) GetHaProxyConfigSetSpec() VcenterNamespaceManagementLoadBalancersHAProxyConfigSetSpec {
	if o == nil || o.HaProxyConfigSetSpec == nil {
		var ret VcenterNamespaceManagementLoadBalancersHAProxyConfigSetSpec
		return ret
	}
	return *o.HaProxyConfigSetSpec
}

// GetHaProxyConfigSetSpecOk returns a tuple with the HaProxyConfigSetSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) GetHaProxyConfigSetSpecOk() (*VcenterNamespaceManagementLoadBalancersHAProxyConfigSetSpec, bool) {
	if o == nil || o.HaProxyConfigSetSpec == nil {
		return nil, false
	}
	return o.HaProxyConfigSetSpec, true
}

// HasHaProxyConfigSetSpec returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) HasHaProxyConfigSetSpec() bool {
	if o != nil && o.HaProxyConfigSetSpec != nil {
		return true
	}

	return false
}

// SetHaProxyConfigSetSpec gets a reference to the given VcenterNamespaceManagementLoadBalancersHAProxyConfigSetSpec and assigns it to the HaProxyConfigSetSpec field.
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) SetHaProxyConfigSetSpec(v VcenterNamespaceManagementLoadBalancersHAProxyConfigSetSpec) {
	o.HaProxyConfigSetSpec = &v
}

// GetAviConfigSetSpec returns the AviConfigSetSpec field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) GetAviConfigSetSpec() VcenterNamespaceManagementLoadBalancersAviConfigSetSpec {
	if o == nil || o.AviConfigSetSpec == nil {
		var ret VcenterNamespaceManagementLoadBalancersAviConfigSetSpec
		return ret
	}
	return *o.AviConfigSetSpec
}

// GetAviConfigSetSpecOk returns a tuple with the AviConfigSetSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) GetAviConfigSetSpecOk() (*VcenterNamespaceManagementLoadBalancersAviConfigSetSpec, bool) {
	if o == nil || o.AviConfigSetSpec == nil {
		return nil, false
	}
	return o.AviConfigSetSpec, true
}

// HasAviConfigSetSpec returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) HasAviConfigSetSpec() bool {
	if o != nil && o.AviConfigSetSpec != nil {
		return true
	}

	return false
}

// SetAviConfigSetSpec gets a reference to the given VcenterNamespaceManagementLoadBalancersAviConfigSetSpec and assigns it to the AviConfigSetSpec field.
func (o *VcenterNamespaceManagementLoadBalancersSetSpec) SetAviConfigSetSpec(v VcenterNamespaceManagementLoadBalancersAviConfigSetSpec) {
	o.AviConfigSetSpec = &v
}

func (o VcenterNamespaceManagementLoadBalancersSetSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address_ranges"] = o.AddressRanges
	}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if o.HaProxyConfigSetSpec != nil {
		toSerialize["ha_proxy_config_set_spec"] = o.HaProxyConfigSetSpec
	}
	if o.AviConfigSetSpec != nil {
		toSerialize["avi_config_set_spec"] = o.AviConfigSetSpec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementLoadBalancersSetSpec struct {
	value *VcenterNamespaceManagementLoadBalancersSetSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementLoadBalancersSetSpec) Get() *VcenterNamespaceManagementLoadBalancersSetSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementLoadBalancersSetSpec) Set(val *VcenterNamespaceManagementLoadBalancersSetSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementLoadBalancersSetSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementLoadBalancersSetSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementLoadBalancersSetSpec(val *VcenterNamespaceManagementLoadBalancersSetSpec) *NullableVcenterNamespaceManagementLoadBalancersSetSpec {
	return &NullableVcenterNamespaceManagementLoadBalancersSetSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementLoadBalancersSetSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementLoadBalancersSetSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


