/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementLoadBalancersProvider The LoadBalancers.Provider enumerates the kinds of load balancers supported by vSphere Namespaces.
type VcenterNamespaceManagementLoadBalancersProvider string

// List of VcenterNamespaceManagementLoadBalancersProvider
const (
	VCENTERNAMESPACEMANAGEMENTLOADBALANCERSPROVIDER_HA_PROXY VcenterNamespaceManagementLoadBalancersProvider = "HA_PROXY"
	VCENTERNAMESPACEMANAGEMENTLOADBALANCERSPROVIDER_AVI VcenterNamespaceManagementLoadBalancersProvider = "AVI"
)

// All allowed values of VcenterNamespaceManagementLoadBalancersProvider enum
var AllowedVcenterNamespaceManagementLoadBalancersProviderEnumValues = []VcenterNamespaceManagementLoadBalancersProvider{
	"HA_PROXY",
	"AVI",
}

func (v *VcenterNamespaceManagementLoadBalancersProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementLoadBalancersProvider(value)
	for _, existing := range AllowedVcenterNamespaceManagementLoadBalancersProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementLoadBalancersProvider", value)
}

// NewVcenterNamespaceManagementLoadBalancersProviderFromValue returns a pointer to a valid VcenterNamespaceManagementLoadBalancersProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementLoadBalancersProviderFromValue(v string) (*VcenterNamespaceManagementLoadBalancersProvider, error) {
	ev := VcenterNamespaceManagementLoadBalancersProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementLoadBalancersProvider: valid values are %v", v, AllowedVcenterNamespaceManagementLoadBalancersProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementLoadBalancersProvider) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementLoadBalancersProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementLoadBalancersProvider value
func (v VcenterNamespaceManagementLoadBalancersProvider) Ptr() *VcenterNamespaceManagementLoadBalancersProvider {
	return &v
}

type NullableVcenterNamespaceManagementLoadBalancersProvider struct {
	value *VcenterNamespaceManagementLoadBalancersProvider
	isSet bool
}

func (v NullableVcenterNamespaceManagementLoadBalancersProvider) Get() *VcenterNamespaceManagementLoadBalancersProvider {
	return v.value
}

func (v *NullableVcenterNamespaceManagementLoadBalancersProvider) Set(val *VcenterNamespaceManagementLoadBalancersProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementLoadBalancersProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementLoadBalancersProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementLoadBalancersProvider(val *VcenterNamespaceManagementLoadBalancersProvider) *NullableVcenterNamespaceManagementLoadBalancersProvider {
	return &NullableVcenterNamespaceManagementLoadBalancersProvider{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementLoadBalancersProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementLoadBalancersProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

