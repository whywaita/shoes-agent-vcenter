/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterGuestWindowsConfigurationRebootOption The WindowsConfiguration.RebootOption enumerated type specifies what should be done to the guest after the customization.
type VcenterGuestWindowsConfigurationRebootOption string

// List of vcenter.guest.windows_configuration.reboot_option
const (
	VCENTERGUESTWINDOWSCONFIGURATIONREBOOTOPTION_REBOOT VcenterGuestWindowsConfigurationRebootOption = "REBOOT"
	VCENTERGUESTWINDOWSCONFIGURATIONREBOOTOPTION_NO_REBOOT VcenterGuestWindowsConfigurationRebootOption = "NO_REBOOT"
	VCENTERGUESTWINDOWSCONFIGURATIONREBOOTOPTION_SHUTDOWN VcenterGuestWindowsConfigurationRebootOption = "SHUTDOWN"
)

// All allowed values of VcenterGuestWindowsConfigurationRebootOption enum
var AllowedVcenterGuestWindowsConfigurationRebootOptionEnumValues = []VcenterGuestWindowsConfigurationRebootOption{
	"REBOOT",
	"NO_REBOOT",
	"SHUTDOWN",
}

func (v *VcenterGuestWindowsConfigurationRebootOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterGuestWindowsConfigurationRebootOption(value)
	for _, existing := range AllowedVcenterGuestWindowsConfigurationRebootOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterGuestWindowsConfigurationRebootOption", value)
}

// NewVcenterGuestWindowsConfigurationRebootOptionFromValue returns a pointer to a valid VcenterGuestWindowsConfigurationRebootOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterGuestWindowsConfigurationRebootOptionFromValue(v string) (*VcenterGuestWindowsConfigurationRebootOption, error) {
	ev := VcenterGuestWindowsConfigurationRebootOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterGuestWindowsConfigurationRebootOption: valid values are %v", v, AllowedVcenterGuestWindowsConfigurationRebootOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterGuestWindowsConfigurationRebootOption) IsValid() bool {
	for _, existing := range AllowedVcenterGuestWindowsConfigurationRebootOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.guest.windows_configuration.reboot_option value
func (v VcenterGuestWindowsConfigurationRebootOption) Ptr() *VcenterGuestWindowsConfigurationRebootOption {
	return &v
}

type NullableVcenterGuestWindowsConfigurationRebootOption struct {
	value *VcenterGuestWindowsConfigurationRebootOption
	isSet bool
}

func (v NullableVcenterGuestWindowsConfigurationRebootOption) Get() *VcenterGuestWindowsConfigurationRebootOption {
	return v.value
}

func (v *NullableVcenterGuestWindowsConfigurationRebootOption) Set(val *VcenterGuestWindowsConfigurationRebootOption) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestWindowsConfigurationRebootOption) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestWindowsConfigurationRebootOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestWindowsConfigurationRebootOption(val *VcenterGuestWindowsConfigurationRebootOption) *NullableVcenterGuestWindowsConfigurationRebootOption {
	return &NullableVcenterGuestWindowsConfigurationRebootOption{value: val, isSet: true}
}

func (v NullableVcenterGuestWindowsConfigurationRebootOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestWindowsConfigurationRebootOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

