/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterStoragePoliciesCompatibleDatastoreInfo struct for VcenterStoragePoliciesCompatibleDatastoreInfo
type VcenterStoragePoliciesCompatibleDatastoreInfo struct {
	// Identifier of the datastore. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.
	Datastore string `json:"datastore"`
}

// NewVcenterStoragePoliciesCompatibleDatastoreInfo instantiates a new VcenterStoragePoliciesCompatibleDatastoreInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterStoragePoliciesCompatibleDatastoreInfo(datastore string) *VcenterStoragePoliciesCompatibleDatastoreInfo {
	this := VcenterStoragePoliciesCompatibleDatastoreInfo{}
	this.Datastore = datastore
	return &this
}

// NewVcenterStoragePoliciesCompatibleDatastoreInfoWithDefaults instantiates a new VcenterStoragePoliciesCompatibleDatastoreInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterStoragePoliciesCompatibleDatastoreInfoWithDefaults() *VcenterStoragePoliciesCompatibleDatastoreInfo {
	this := VcenterStoragePoliciesCompatibleDatastoreInfo{}
	return &this
}

// GetDatastore returns the Datastore field value
func (o *VcenterStoragePoliciesCompatibleDatastoreInfo) GetDatastore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value
// and a boolean to check if the value has been set.
func (o *VcenterStoragePoliciesCompatibleDatastoreInfo) GetDatastoreOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Datastore, true
}

// SetDatastore sets field value
func (o *VcenterStoragePoliciesCompatibleDatastoreInfo) SetDatastore(v string) {
	o.Datastore = v
}

func (o VcenterStoragePoliciesCompatibleDatastoreInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["datastore"] = o.Datastore
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterStoragePoliciesCompatibleDatastoreInfo struct {
	value *VcenterStoragePoliciesCompatibleDatastoreInfo
	isSet bool
}

func (v NullableVcenterStoragePoliciesCompatibleDatastoreInfo) Get() *VcenterStoragePoliciesCompatibleDatastoreInfo {
	return v.value
}

func (v *NullableVcenterStoragePoliciesCompatibleDatastoreInfo) Set(val *VcenterStoragePoliciesCompatibleDatastoreInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterStoragePoliciesCompatibleDatastoreInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterStoragePoliciesCompatibleDatastoreInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterStoragePoliciesCompatibleDatastoreInfo(val *VcenterStoragePoliciesCompatibleDatastoreInfo) *NullableVcenterStoragePoliciesCompatibleDatastoreInfo {
	return &NullableVcenterStoragePoliciesCompatibleDatastoreInfo{value: val, isSet: true}
}

func (v NullableVcenterStoragePoliciesCompatibleDatastoreInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterStoragePoliciesCompatibleDatastoreInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


