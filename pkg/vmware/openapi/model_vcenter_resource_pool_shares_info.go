/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterResourcePoolSharesInfo struct for VcenterResourcePoolSharesInfo
type VcenterResourcePoolSharesInfo struct {
	Level VcenterResourcePoolSharesInfoLevel `json:"level"`
	// When ResourcePool.SharesInfo.level is set to CUSTOM, it is the number of shares allocated. Otherwise, this value is ignored.   There is no unit for this value. It is a relative measure based on the settings for other resource pools.  This field is optional and it is only relevant when the value of ResourcePool.SharesInfo.level is CUSTOM.
	Shares *int64 `json:"shares,omitempty"`
}

// NewVcenterResourcePoolSharesInfo instantiates a new VcenterResourcePoolSharesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterResourcePoolSharesInfo(level VcenterResourcePoolSharesInfoLevel) *VcenterResourcePoolSharesInfo {
	this := VcenterResourcePoolSharesInfo{}
	this.Level = level
	return &this
}

// NewVcenterResourcePoolSharesInfoWithDefaults instantiates a new VcenterResourcePoolSharesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterResourcePoolSharesInfoWithDefaults() *VcenterResourcePoolSharesInfo {
	this := VcenterResourcePoolSharesInfo{}
	return &this
}

// GetLevel returns the Level field value
func (o *VcenterResourcePoolSharesInfo) GetLevel() VcenterResourcePoolSharesInfoLevel {
	if o == nil {
		var ret VcenterResourcePoolSharesInfoLevel
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *VcenterResourcePoolSharesInfo) GetLevelOk() (*VcenterResourcePoolSharesInfoLevel, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *VcenterResourcePoolSharesInfo) SetLevel(v VcenterResourcePoolSharesInfoLevel) {
	o.Level = v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *VcenterResourcePoolSharesInfo) GetShares() int64 {
	if o == nil || o.Shares == nil {
		var ret int64
		return ret
	}
	return *o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterResourcePoolSharesInfo) GetSharesOk() (*int64, bool) {
	if o == nil || o.Shares == nil {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *VcenterResourcePoolSharesInfo) HasShares() bool {
	if o != nil && o.Shares != nil {
		return true
	}

	return false
}

// SetShares gets a reference to the given int64 and assigns it to the Shares field.
func (o *VcenterResourcePoolSharesInfo) SetShares(v int64) {
	o.Shares = &v
}

func (o VcenterResourcePoolSharesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["level"] = o.Level
	}
	if o.Shares != nil {
		toSerialize["shares"] = o.Shares
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterResourcePoolSharesInfo struct {
	value *VcenterResourcePoolSharesInfo
	isSet bool
}

func (v NullableVcenterResourcePoolSharesInfo) Get() *VcenterResourcePoolSharesInfo {
	return v.value
}

func (v *NullableVcenterResourcePoolSharesInfo) Set(val *VcenterResourcePoolSharesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterResourcePoolSharesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterResourcePoolSharesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterResourcePoolSharesInfo(val *VcenterResourcePoolSharesInfo) *NullableVcenterResourcePoolSharesInfo {
	return &NullableVcenterResourcePoolSharesInfo{value: val, isSet: true}
}

func (v NullableVcenterResourcePoolSharesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterResourcePoolSharesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


