/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterLcmUpdatePendingCategory The Pending.Category enumerated type defines the type of payload this release has on top of previous release
type VcenterLcmUpdatePendingCategory string

// List of VcenterLcmUpdatePendingCategory
const (
	VCENTERLCMUPDATEPENDINGCATEGORY_SECURITY VcenterLcmUpdatePendingCategory = "SECURITY"
	VCENTERLCMUPDATEPENDINGCATEGORY_FIX VcenterLcmUpdatePendingCategory = "FIX"
	VCENTERLCMUPDATEPENDINGCATEGORY_UPDATE VcenterLcmUpdatePendingCategory = "UPDATE"
	VCENTERLCMUPDATEPENDINGCATEGORY_UPGRADE VcenterLcmUpdatePendingCategory = "UPGRADE"
)

// All allowed values of VcenterLcmUpdatePendingCategory enum
var AllowedVcenterLcmUpdatePendingCategoryEnumValues = []VcenterLcmUpdatePendingCategory{
	"SECURITY",
	"FIX",
	"UPDATE",
	"UPGRADE",
}

func (v *VcenterLcmUpdatePendingCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterLcmUpdatePendingCategory(value)
	for _, existing := range AllowedVcenterLcmUpdatePendingCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterLcmUpdatePendingCategory", value)
}

// NewVcenterLcmUpdatePendingCategoryFromValue returns a pointer to a valid VcenterLcmUpdatePendingCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterLcmUpdatePendingCategoryFromValue(v string) (*VcenterLcmUpdatePendingCategory, error) {
	ev := VcenterLcmUpdatePendingCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterLcmUpdatePendingCategory: valid values are %v", v, AllowedVcenterLcmUpdatePendingCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterLcmUpdatePendingCategory) IsValid() bool {
	for _, existing := range AllowedVcenterLcmUpdatePendingCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterLcmUpdatePendingCategory value
func (v VcenterLcmUpdatePendingCategory) Ptr() *VcenterLcmUpdatePendingCategory {
	return &v
}

type NullableVcenterLcmUpdatePendingCategory struct {
	value *VcenterLcmUpdatePendingCategory
	isSet bool
}

func (v NullableVcenterLcmUpdatePendingCategory) Get() *VcenterLcmUpdatePendingCategory {
	return v.value
}

func (v *NullableVcenterLcmUpdatePendingCategory) Set(val *VcenterLcmUpdatePendingCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterLcmUpdatePendingCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterLcmUpdatePendingCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterLcmUpdatePendingCategory(val *VcenterLcmUpdatePendingCategory) *NullableVcenterLcmUpdatePendingCategory {
	return &NullableVcenterLcmUpdatePendingCategory{value: val, isSet: true}
}

func (v NullableVcenterLcmUpdatePendingCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterLcmUpdatePendingCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

