/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterComputePoliciesObjectCompliance The {@name ObjectCompliance} {@term enumerated type} defines the compliance states a policy can be in on a particular object.
type VcenterComputePoliciesObjectCompliance string

// List of VcenterComputePoliciesObjectCompliance
const (
	VCENTERCOMPUTEPOLICIESOBJECTCOMPLIANCE_UNKNOWN VcenterComputePoliciesObjectCompliance = "UNKNOWN"
	VCENTERCOMPUTEPOLICIESOBJECTCOMPLIANCE_NOT_APPLICABLE VcenterComputePoliciesObjectCompliance = "NOT_APPLICABLE"
	VCENTERCOMPUTEPOLICIESOBJECTCOMPLIANCE_COMPLIANT VcenterComputePoliciesObjectCompliance = "COMPLIANT"
	VCENTERCOMPUTEPOLICIESOBJECTCOMPLIANCE_NOT_COMPLIANT VcenterComputePoliciesObjectCompliance = "NOT_COMPLIANT"
)

// All allowed values of VcenterComputePoliciesObjectCompliance enum
var AllowedVcenterComputePoliciesObjectComplianceEnumValues = []VcenterComputePoliciesObjectCompliance{
	"UNKNOWN",
	"NOT_APPLICABLE",
	"COMPLIANT",
	"NOT_COMPLIANT",
}

func (v *VcenterComputePoliciesObjectCompliance) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterComputePoliciesObjectCompliance(value)
	for _, existing := range AllowedVcenterComputePoliciesObjectComplianceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterComputePoliciesObjectCompliance", value)
}

// NewVcenterComputePoliciesObjectComplianceFromValue returns a pointer to a valid VcenterComputePoliciesObjectCompliance
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterComputePoliciesObjectComplianceFromValue(v string) (*VcenterComputePoliciesObjectCompliance, error) {
	ev := VcenterComputePoliciesObjectCompliance(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterComputePoliciesObjectCompliance: valid values are %v", v, AllowedVcenterComputePoliciesObjectComplianceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterComputePoliciesObjectCompliance) IsValid() bool {
	for _, existing := range AllowedVcenterComputePoliciesObjectComplianceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterComputePoliciesObjectCompliance value
func (v VcenterComputePoliciesObjectCompliance) Ptr() *VcenterComputePoliciesObjectCompliance {
	return &v
}

type NullableVcenterComputePoliciesObjectCompliance struct {
	value *VcenterComputePoliciesObjectCompliance
	isSet bool
}

func (v NullableVcenterComputePoliciesObjectCompliance) Get() *VcenterComputePoliciesObjectCompliance {
	return v.value
}

func (v *NullableVcenterComputePoliciesObjectCompliance) Set(val *VcenterComputePoliciesObjectCompliance) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterComputePoliciesObjectCompliance) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterComputePoliciesObjectCompliance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterComputePoliciesObjectCompliance(val *VcenterComputePoliciesObjectCompliance) *NullableVcenterComputePoliciesObjectCompliance {
	return &NullableVcenterComputePoliciesObjectCompliance{value: val, isSet: true}
}

func (v NullableVcenterComputePoliciesObjectCompliance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterComputePoliciesObjectCompliance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

