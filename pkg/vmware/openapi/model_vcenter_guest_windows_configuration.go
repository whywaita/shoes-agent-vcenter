/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestWindowsConfiguration struct for VcenterGuestWindowsConfiguration
type VcenterGuestWindowsConfiguration struct {
	Reboot *VcenterGuestWindowsConfigurationRebootOption `json:"reboot,omitempty"`
	Sysprep *VcenterGuestWindowsSysprep `json:"sysprep,omitempty"`
	// All settings specified in a XML format. This is the content of a typical answer.xml file that is used by System administrators during the Windows image customization. Check https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs Exactly one of WindowsConfiguration.sysprep or WindowsConfiguration.sysprep-xml must be specified. If unset, sysprep settings will not be applied to the windows guest operating system.
	SysprepXml *string `json:"sysprep_xml,omitempty"`
}

// NewVcenterGuestWindowsConfiguration instantiates a new VcenterGuestWindowsConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestWindowsConfiguration() *VcenterGuestWindowsConfiguration {
	this := VcenterGuestWindowsConfiguration{}
	return &this
}

// NewVcenterGuestWindowsConfigurationWithDefaults instantiates a new VcenterGuestWindowsConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestWindowsConfigurationWithDefaults() *VcenterGuestWindowsConfiguration {
	this := VcenterGuestWindowsConfiguration{}
	return &this
}

// GetReboot returns the Reboot field value if set, zero value otherwise.
func (o *VcenterGuestWindowsConfiguration) GetReboot() VcenterGuestWindowsConfigurationRebootOption {
	if o == nil || o.Reboot == nil {
		var ret VcenterGuestWindowsConfigurationRebootOption
		return ret
	}
	return *o.Reboot
}

// GetRebootOk returns a tuple with the Reboot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestWindowsConfiguration) GetRebootOk() (*VcenterGuestWindowsConfigurationRebootOption, bool) {
	if o == nil || o.Reboot == nil {
		return nil, false
	}
	return o.Reboot, true
}

// HasReboot returns a boolean if a field has been set.
func (o *VcenterGuestWindowsConfiguration) HasReboot() bool {
	if o != nil && o.Reboot != nil {
		return true
	}

	return false
}

// SetReboot gets a reference to the given VcenterGuestWindowsConfigurationRebootOption and assigns it to the Reboot field.
func (o *VcenterGuestWindowsConfiguration) SetReboot(v VcenterGuestWindowsConfigurationRebootOption) {
	o.Reboot = &v
}

// GetSysprep returns the Sysprep field value if set, zero value otherwise.
func (o *VcenterGuestWindowsConfiguration) GetSysprep() VcenterGuestWindowsSysprep {
	if o == nil || o.Sysprep == nil {
		var ret VcenterGuestWindowsSysprep
		return ret
	}
	return *o.Sysprep
}

// GetSysprepOk returns a tuple with the Sysprep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestWindowsConfiguration) GetSysprepOk() (*VcenterGuestWindowsSysprep, bool) {
	if o == nil || o.Sysprep == nil {
		return nil, false
	}
	return o.Sysprep, true
}

// HasSysprep returns a boolean if a field has been set.
func (o *VcenterGuestWindowsConfiguration) HasSysprep() bool {
	if o != nil && o.Sysprep != nil {
		return true
	}

	return false
}

// SetSysprep gets a reference to the given VcenterGuestWindowsSysprep and assigns it to the Sysprep field.
func (o *VcenterGuestWindowsConfiguration) SetSysprep(v VcenterGuestWindowsSysprep) {
	o.Sysprep = &v
}

// GetSysprepXml returns the SysprepXml field value if set, zero value otherwise.
func (o *VcenterGuestWindowsConfiguration) GetSysprepXml() string {
	if o == nil || o.SysprepXml == nil {
		var ret string
		return ret
	}
	return *o.SysprepXml
}

// GetSysprepXmlOk returns a tuple with the SysprepXml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestWindowsConfiguration) GetSysprepXmlOk() (*string, bool) {
	if o == nil || o.SysprepXml == nil {
		return nil, false
	}
	return o.SysprepXml, true
}

// HasSysprepXml returns a boolean if a field has been set.
func (o *VcenterGuestWindowsConfiguration) HasSysprepXml() bool {
	if o != nil && o.SysprepXml != nil {
		return true
	}

	return false
}

// SetSysprepXml gets a reference to the given string and assigns it to the SysprepXml field.
func (o *VcenterGuestWindowsConfiguration) SetSysprepXml(v string) {
	o.SysprepXml = &v
}

func (o VcenterGuestWindowsConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reboot != nil {
		toSerialize["reboot"] = o.Reboot
	}
	if o.Sysprep != nil {
		toSerialize["sysprep"] = o.Sysprep
	}
	if o.SysprepXml != nil {
		toSerialize["sysprep_xml"] = o.SysprepXml
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestWindowsConfiguration struct {
	value *VcenterGuestWindowsConfiguration
	isSet bool
}

func (v NullableVcenterGuestWindowsConfiguration) Get() *VcenterGuestWindowsConfiguration {
	return v.value
}

func (v *NullableVcenterGuestWindowsConfiguration) Set(val *VcenterGuestWindowsConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestWindowsConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestWindowsConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestWindowsConfiguration(val *VcenterGuestWindowsConfiguration) *NullableVcenterGuestWindowsConfiguration {
	return &NullableVcenterGuestWindowsConfiguration{value: val, isSet: true}
}

func (v NullableVcenterGuestWindowsConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestWindowsConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


