/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec struct for VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec
type VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec struct {
	// Compatibility criteria for matching the filter. If true, only Edge Clusters which are compatible with vSphere Namespaces match the filter. If false, only Edge Clusters which are incompatible with vSphere Namespaces match the filter. If unset, both compatible and incompatible Edge Clusters match the filter.
	Compatible *bool `json:"compatible,omitempty"`
}

// NewVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec instantiates a new VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec() *VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec {
	this := VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec{}
	return &this
}

// NewVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpecWithDefaults instantiates a new VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpecWithDefaults() *VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec {
	this := VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec{}
	return &this
}

// GetCompatible returns the Compatible field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) GetCompatible() bool {
	if o == nil || o.Compatible == nil {
		var ret bool
		return ret
	}
	return *o.Compatible
}

// GetCompatibleOk returns a tuple with the Compatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) GetCompatibleOk() (*bool, bool) {
	if o == nil || o.Compatible == nil {
		return nil, false
	}
	return o.Compatible, true
}

// HasCompatible returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) HasCompatible() bool {
	if o != nil && o.Compatible != nil {
		return true
	}

	return false
}

// SetCompatible gets a reference to the given bool and assigns it to the Compatible field.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) SetCompatible(v bool) {
	o.Compatible = &v
}

func (o VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Compatible != nil {
		toSerialize["compatible"] = o.Compatible
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec struct {
	value *VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) Get() *VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) Set(val *VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec(val *VcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) *NullableVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec {
	return &NullableVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementEdgeClusterCompatibilityFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


