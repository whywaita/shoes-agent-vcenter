/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterServicesServiceState The Service.State enumerated type defines valid Run State for services.
type VcenterServicesServiceState string

// List of vcenter.services.service.state
const (
	VCENTERSERVICESSERVICESTATE_STARTING VcenterServicesServiceState = "STARTING"
	VCENTERSERVICESSERVICESTATE_STOPPING VcenterServicesServiceState = "STOPPING"
	VCENTERSERVICESSERVICESTATE_STARTED VcenterServicesServiceState = "STARTED"
	VCENTERSERVICESSERVICESTATE_STOPPED VcenterServicesServiceState = "STOPPED"
)

// All allowed values of VcenterServicesServiceState enum
var AllowedVcenterServicesServiceStateEnumValues = []VcenterServicesServiceState{
	"STARTING",
	"STOPPING",
	"STARTED",
	"STOPPED",
}

func (v *VcenterServicesServiceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterServicesServiceState(value)
	for _, existing := range AllowedVcenterServicesServiceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterServicesServiceState", value)
}

// NewVcenterServicesServiceStateFromValue returns a pointer to a valid VcenterServicesServiceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterServicesServiceStateFromValue(v string) (*VcenterServicesServiceState, error) {
	ev := VcenterServicesServiceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterServicesServiceState: valid values are %v", v, AllowedVcenterServicesServiceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterServicesServiceState) IsValid() bool {
	for _, existing := range AllowedVcenterServicesServiceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.services.service.state value
func (v VcenterServicesServiceState) Ptr() *VcenterServicesServiceState {
	return &v
}

type NullableVcenterServicesServiceState struct {
	value *VcenterServicesServiceState
	isSet bool
}

func (v NullableVcenterServicesServiceState) Get() *VcenterServicesServiceState {
	return v.value
}

func (v *NullableVcenterServicesServiceState) Set(val *VcenterServicesServiceState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterServicesServiceState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterServicesServiceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterServicesServiceState(val *VcenterServicesServiceState) *NullableVcenterServicesServiceState {
	return &NullableVcenterServicesServiceState{value: val, isSet: true}
}

func (v NullableVcenterServicesServiceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterServicesServiceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

