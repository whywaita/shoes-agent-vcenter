/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareBootType The Boot.Type enumerated type defines the valid firmware types for a virtual machine.
type VcenterVmHardwareBootType string

// List of vcenter.vm.hardware.boot.type
const (
	VCENTERVMHARDWAREBOOTTYPE_BIOS VcenterVmHardwareBootType = "BIOS"
	VCENTERVMHARDWAREBOOTTYPE_EFI VcenterVmHardwareBootType = "EFI"
)

// All allowed values of VcenterVmHardwareBootType enum
var AllowedVcenterVmHardwareBootTypeEnumValues = []VcenterVmHardwareBootType{
	"BIOS",
	"EFI",
}

func (v *VcenterVmHardwareBootType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareBootType(value)
	for _, existing := range AllowedVcenterVmHardwareBootTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareBootType", value)
}

// NewVcenterVmHardwareBootTypeFromValue returns a pointer to a valid VcenterVmHardwareBootType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareBootTypeFromValue(v string) (*VcenterVmHardwareBootType, error) {
	ev := VcenterVmHardwareBootType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareBootType: valid values are %v", v, AllowedVcenterVmHardwareBootTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareBootType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareBootTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.boot.type value
func (v VcenterVmHardwareBootType) Ptr() *VcenterVmHardwareBootType {
	return &v
}

type NullableVcenterVmHardwareBootType struct {
	value *VcenterVmHardwareBootType
	isSet bool
}

func (v NullableVcenterVmHardwareBootType) Get() *VcenterVmHardwareBootType {
	return v.value
}

func (v *NullableVcenterVmHardwareBootType) Set(val *VcenterVmHardwareBootType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareBootType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareBootType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareBootType(val *VcenterVmHardwareBootType) *NullableVcenterVmHardwareBootType {
	return &NullableVcenterVmHardwareBootType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareBootType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareBootType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

