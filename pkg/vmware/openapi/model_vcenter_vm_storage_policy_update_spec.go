/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmStoragePolicyUpdateSpec struct for VcenterVmStoragePolicyUpdateSpec
type VcenterVmStoragePolicyUpdateSpec struct {
	VmHome *VcenterVmStoragePolicyVmHomePolicySpec `json:"vm_home,omitempty"`
	// Storage policy or policies to be used when reconfiguring virtual machine diks. if unset the current storage policy is retained. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.
	Disks *[]VcenterVmStoragePolicyUpdateSpecDisks `json:"disks,omitempty"`
}

// NewVcenterVmStoragePolicyUpdateSpec instantiates a new VcenterVmStoragePolicyUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmStoragePolicyUpdateSpec() *VcenterVmStoragePolicyUpdateSpec {
	this := VcenterVmStoragePolicyUpdateSpec{}
	return &this
}

// NewVcenterVmStoragePolicyUpdateSpecWithDefaults instantiates a new VcenterVmStoragePolicyUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmStoragePolicyUpdateSpecWithDefaults() *VcenterVmStoragePolicyUpdateSpec {
	this := VcenterVmStoragePolicyUpdateSpec{}
	return &this
}

// GetVmHome returns the VmHome field value if set, zero value otherwise.
func (o *VcenterVmStoragePolicyUpdateSpec) GetVmHome() VcenterVmStoragePolicyVmHomePolicySpec {
	if o == nil || o.VmHome == nil {
		var ret VcenterVmStoragePolicyVmHomePolicySpec
		return ret
	}
	return *o.VmHome
}

// GetVmHomeOk returns a tuple with the VmHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmStoragePolicyUpdateSpec) GetVmHomeOk() (*VcenterVmStoragePolicyVmHomePolicySpec, bool) {
	if o == nil || o.VmHome == nil {
		return nil, false
	}
	return o.VmHome, true
}

// HasVmHome returns a boolean if a field has been set.
func (o *VcenterVmStoragePolicyUpdateSpec) HasVmHome() bool {
	if o != nil && o.VmHome != nil {
		return true
	}

	return false
}

// SetVmHome gets a reference to the given VcenterVmStoragePolicyVmHomePolicySpec and assigns it to the VmHome field.
func (o *VcenterVmStoragePolicyUpdateSpec) SetVmHome(v VcenterVmStoragePolicyVmHomePolicySpec) {
	o.VmHome = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *VcenterVmStoragePolicyUpdateSpec) GetDisks() []VcenterVmStoragePolicyUpdateSpecDisks {
	if o == nil || o.Disks == nil {
		var ret []VcenterVmStoragePolicyUpdateSpecDisks
		return ret
	}
	return *o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmStoragePolicyUpdateSpec) GetDisksOk() (*[]VcenterVmStoragePolicyUpdateSpecDisks, bool) {
	if o == nil || o.Disks == nil {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *VcenterVmStoragePolicyUpdateSpec) HasDisks() bool {
	if o != nil && o.Disks != nil {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []VcenterVmStoragePolicyUpdateSpecDisks and assigns it to the Disks field.
func (o *VcenterVmStoragePolicyUpdateSpec) SetDisks(v []VcenterVmStoragePolicyUpdateSpecDisks) {
	o.Disks = &v
}

func (o VcenterVmStoragePolicyUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VmHome != nil {
		toSerialize["vm_home"] = o.VmHome
	}
	if o.Disks != nil {
		toSerialize["disks"] = o.Disks
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmStoragePolicyUpdateSpec struct {
	value *VcenterVmStoragePolicyUpdateSpec
	isSet bool
}

func (v NullableVcenterVmStoragePolicyUpdateSpec) Get() *VcenterVmStoragePolicyUpdateSpec {
	return v.value
}

func (v *NullableVcenterVmStoragePolicyUpdateSpec) Set(val *VcenterVmStoragePolicyUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmStoragePolicyUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmStoragePolicyUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmStoragePolicyUpdateSpec(val *VcenterVmStoragePolicyUpdateSpec) *NullableVcenterVmStoragePolicyUpdateSpec {
	return &NullableVcenterVmStoragePolicyUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmStoragePolicyUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmStoragePolicyUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


