/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareCdromInfo struct for VcenterVmHardwareCdromInfo
type VcenterVmHardwareCdromInfo struct {
	Type VcenterVmHardwareCdromHostBusAdapterType `json:"type"`
	// Device label.
	Label string `json:"label"`
	Ide *VcenterVmHardwareIdeAddressInfo `json:"ide,omitempty"`
	Sata *VcenterVmHardwareSataAddressInfo `json:"sata,omitempty"`
	Backing VcenterVmHardwareCdromBackingInfo `json:"backing"`
	State VcenterVmHardwareConnectionState `json:"state"`
	// Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.
	StartConnected bool `json:"start_connected"`
	// Flag indicating whether the guest can connect and disconnect the device.
	AllowGuestControl bool `json:"allow_guest_control"`
}

// NewVcenterVmHardwareCdromInfo instantiates a new VcenterVmHardwareCdromInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareCdromInfo(type_ VcenterVmHardwareCdromHostBusAdapterType, label string, backing VcenterVmHardwareCdromBackingInfo, state VcenterVmHardwareConnectionState, startConnected bool, allowGuestControl bool) *VcenterVmHardwareCdromInfo {
	this := VcenterVmHardwareCdromInfo{}
	this.Type = type_
	this.Label = label
	this.Backing = backing
	this.State = state
	this.StartConnected = startConnected
	this.AllowGuestControl = allowGuestControl
	return &this
}

// NewVcenterVmHardwareCdromInfoWithDefaults instantiates a new VcenterVmHardwareCdromInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareCdromInfoWithDefaults() *VcenterVmHardwareCdromInfo {
	this := VcenterVmHardwareCdromInfo{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterVmHardwareCdromInfo) GetType() VcenterVmHardwareCdromHostBusAdapterType {
	if o == nil {
		var ret VcenterVmHardwareCdromHostBusAdapterType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromInfo) GetTypeOk() (*VcenterVmHardwareCdromHostBusAdapterType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmHardwareCdromInfo) SetType(v VcenterVmHardwareCdromHostBusAdapterType) {
	o.Type = v
}

// GetLabel returns the Label field value
func (o *VcenterVmHardwareCdromInfo) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromInfo) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *VcenterVmHardwareCdromInfo) SetLabel(v string) {
	o.Label = v
}

// GetIde returns the Ide field value if set, zero value otherwise.
func (o *VcenterVmHardwareCdromInfo) GetIde() VcenterVmHardwareIdeAddressInfo {
	if o == nil || o.Ide == nil {
		var ret VcenterVmHardwareIdeAddressInfo
		return ret
	}
	return *o.Ide
}

// GetIdeOk returns a tuple with the Ide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromInfo) GetIdeOk() (*VcenterVmHardwareIdeAddressInfo, bool) {
	if o == nil || o.Ide == nil {
		return nil, false
	}
	return o.Ide, true
}

// HasIde returns a boolean if a field has been set.
func (o *VcenterVmHardwareCdromInfo) HasIde() bool {
	if o != nil && o.Ide != nil {
		return true
	}

	return false
}

// SetIde gets a reference to the given VcenterVmHardwareIdeAddressInfo and assigns it to the Ide field.
func (o *VcenterVmHardwareCdromInfo) SetIde(v VcenterVmHardwareIdeAddressInfo) {
	o.Ide = &v
}

// GetSata returns the Sata field value if set, zero value otherwise.
func (o *VcenterVmHardwareCdromInfo) GetSata() VcenterVmHardwareSataAddressInfo {
	if o == nil || o.Sata == nil {
		var ret VcenterVmHardwareSataAddressInfo
		return ret
	}
	return *o.Sata
}

// GetSataOk returns a tuple with the Sata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromInfo) GetSataOk() (*VcenterVmHardwareSataAddressInfo, bool) {
	if o == nil || o.Sata == nil {
		return nil, false
	}
	return o.Sata, true
}

// HasSata returns a boolean if a field has been set.
func (o *VcenterVmHardwareCdromInfo) HasSata() bool {
	if o != nil && o.Sata != nil {
		return true
	}

	return false
}

// SetSata gets a reference to the given VcenterVmHardwareSataAddressInfo and assigns it to the Sata field.
func (o *VcenterVmHardwareCdromInfo) SetSata(v VcenterVmHardwareSataAddressInfo) {
	o.Sata = &v
}

// GetBacking returns the Backing field value
func (o *VcenterVmHardwareCdromInfo) GetBacking() VcenterVmHardwareCdromBackingInfo {
	if o == nil {
		var ret VcenterVmHardwareCdromBackingInfo
		return ret
	}

	return o.Backing
}

// GetBackingOk returns a tuple with the Backing field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromInfo) GetBackingOk() (*VcenterVmHardwareCdromBackingInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Backing, true
}

// SetBacking sets field value
func (o *VcenterVmHardwareCdromInfo) SetBacking(v VcenterVmHardwareCdromBackingInfo) {
	o.Backing = v
}

// GetState returns the State field value
func (o *VcenterVmHardwareCdromInfo) GetState() VcenterVmHardwareConnectionState {
	if o == nil {
		var ret VcenterVmHardwareConnectionState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromInfo) GetStateOk() (*VcenterVmHardwareConnectionState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VcenterVmHardwareCdromInfo) SetState(v VcenterVmHardwareConnectionState) {
	o.State = v
}

// GetStartConnected returns the StartConnected field value
func (o *VcenterVmHardwareCdromInfo) GetStartConnected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StartConnected
}

// GetStartConnectedOk returns a tuple with the StartConnected field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromInfo) GetStartConnectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartConnected, true
}

// SetStartConnected sets field value
func (o *VcenterVmHardwareCdromInfo) SetStartConnected(v bool) {
	o.StartConnected = v
}

// GetAllowGuestControl returns the AllowGuestControl field value
func (o *VcenterVmHardwareCdromInfo) GetAllowGuestControl() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowGuestControl
}

// GetAllowGuestControlOk returns a tuple with the AllowGuestControl field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromInfo) GetAllowGuestControlOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AllowGuestControl, true
}

// SetAllowGuestControl sets field value
func (o *VcenterVmHardwareCdromInfo) SetAllowGuestControl(v bool) {
	o.AllowGuestControl = v
}

func (o VcenterVmHardwareCdromInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if o.Ide != nil {
		toSerialize["ide"] = o.Ide
	}
	if o.Sata != nil {
		toSerialize["sata"] = o.Sata
	}
	if true {
		toSerialize["backing"] = o.Backing
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["start_connected"] = o.StartConnected
	}
	if true {
		toSerialize["allow_guest_control"] = o.AllowGuestControl
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareCdromInfo struct {
	value *VcenterVmHardwareCdromInfo
	isSet bool
}

func (v NullableVcenterVmHardwareCdromInfo) Get() *VcenterVmHardwareCdromInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareCdromInfo) Set(val *VcenterVmHardwareCdromInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareCdromInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareCdromInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareCdromInfo(val *VcenterVmHardwareCdromInfo) *NullableVcenterVmHardwareCdromInfo {
	return &NullableVcenterVmHardwareCdromInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareCdromInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareCdromInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


