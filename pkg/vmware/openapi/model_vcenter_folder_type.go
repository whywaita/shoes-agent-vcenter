/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterFolderType The Folder.Type enumerated type defines the type of a vCenter Server folder. The type of a folder determines what what kinds of children can be contained in the folder.
type VcenterFolderType string

// List of vcenter.folder.type
const (
	VCENTERFOLDERTYPE_DATACENTER VcenterFolderType = "DATACENTER"
	VCENTERFOLDERTYPE_DATASTORE VcenterFolderType = "DATASTORE"
	VCENTERFOLDERTYPE_HOST VcenterFolderType = "HOST"
	VCENTERFOLDERTYPE_NETWORK VcenterFolderType = "NETWORK"
	VCENTERFOLDERTYPE_VIRTUAL_MACHINE VcenterFolderType = "VIRTUAL_MACHINE"
)

// All allowed values of VcenterFolderType enum
var AllowedVcenterFolderTypeEnumValues = []VcenterFolderType{
	"DATACENTER",
	"DATASTORE",
	"HOST",
	"NETWORK",
	"VIRTUAL_MACHINE",
}

func (v *VcenterFolderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterFolderType(value)
	for _, existing := range AllowedVcenterFolderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterFolderType", value)
}

// NewVcenterFolderTypeFromValue returns a pointer to a valid VcenterFolderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterFolderTypeFromValue(v string) (*VcenterFolderType, error) {
	ev := VcenterFolderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterFolderType: valid values are %v", v, AllowedVcenterFolderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterFolderType) IsValid() bool {
	for _, existing := range AllowedVcenterFolderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.folder.type value
func (v VcenterFolderType) Ptr() *VcenterFolderType {
	return &v
}

type NullableVcenterFolderType struct {
	value *VcenterFolderType
	isSet bool
}

func (v NullableVcenterFolderType) Get() *VcenterFolderType {
	return v.value
}

func (v *NullableVcenterFolderType) Set(val *VcenterFolderType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterFolderType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterFolderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterFolderType(val *VcenterFolderType) *NullableVcenterFolderType {
	return &NullableVcenterFolderType{value: val, isSet: true}
}

func (v NullableVcenterFolderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterFolderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

