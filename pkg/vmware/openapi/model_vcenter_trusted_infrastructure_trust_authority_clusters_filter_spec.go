/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec struct for VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec
type VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec struct {
	// Identifies the cluster. cluster If {@term.unset} return all Trust Authority Clusters. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.
	Cluster *[]string `json:"cluster,omitempty"`
	// The state of the TrustAuthorityClusters. state If {@term.unset} return all Trust Authority Clusters.
	State *[]VcenterTrustedInfrastructureTrustAuthorityClustersState `json:"state,omitempty"`
}

// NewVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec instantiates a new VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec() *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec {
	this := VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec{}
	return &this
}

// NewVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpecWithDefaults instantiates a new VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpecWithDefaults() *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec {
	this := VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) GetCluster() []string {
	if o == nil || o.Cluster == nil {
		var ret []string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) GetClusterOk() (*[]string, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) HasCluster() bool {
	if o != nil && o.Cluster != nil {
		return true
	}

	return false
}

// SetCluster gets a reference to the given []string and assigns it to the Cluster field.
func (o *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) SetCluster(v []string) {
	o.Cluster = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) GetState() []VcenterTrustedInfrastructureTrustAuthorityClustersState {
	if o == nil || o.State == nil {
		var ret []VcenterTrustedInfrastructureTrustAuthorityClustersState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) GetStateOk() (*[]VcenterTrustedInfrastructureTrustAuthorityClustersState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given []VcenterTrustedInfrastructureTrustAuthorityClustersState and assigns it to the State field.
func (o *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) SetState(v []VcenterTrustedInfrastructureTrustAuthorityClustersState) {
	o.State = &v
}

func (o VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cluster != nil {
		toSerialize["cluster"] = o.Cluster
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec struct {
	value *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec
	isSet bool
}

func (v NullableVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) Get() *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec {
	return v.value
}

func (v *NullableVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) Set(val *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec(val *VcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) *NullableVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec {
	return &NullableVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterTrustedInfrastructureTrustAuthorityClustersFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


