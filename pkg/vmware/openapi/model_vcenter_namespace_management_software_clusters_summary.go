/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// VcenterNamespaceManagementSoftwareClustersSummary struct for VcenterNamespaceManagementSoftwareClustersSummary
type VcenterNamespaceManagementSoftwareClustersSummary struct {
	// Identifier for the cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.
	Cluster string `json:"cluster"`
	// Name of the cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.name.
	ClusterName string `json:"cluster_name"`
	// Current version of the cluster.
	CurrentVersion string `json:"current_version"`
	// Set of versions available for upgrade.
	AvailableVersions []string `json:"available_versions"`
	// Date of last successful upgrade. If unset, the cluster has not yet been upgraded.
	LastUpgradedDate *time.Time `json:"last_upgraded_date,omitempty"`
	// Desired version the cluster will be upgraded to. If unset, the cluster upgrade is not in progress.
	DesiredVersion *string `json:"desired_version,omitempty"`
	State VcenterNamespaceManagementSoftwareClustersState `json:"state"`
}

// NewVcenterNamespaceManagementSoftwareClustersSummary instantiates a new VcenterNamespaceManagementSoftwareClustersSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSoftwareClustersSummary(cluster string, clusterName string, currentVersion string, availableVersions []string, state VcenterNamespaceManagementSoftwareClustersState) *VcenterNamespaceManagementSoftwareClustersSummary {
	this := VcenterNamespaceManagementSoftwareClustersSummary{}
	this.Cluster = cluster
	this.ClusterName = clusterName
	this.CurrentVersion = currentVersion
	this.AvailableVersions = availableVersions
	this.State = state
	return &this
}

// NewVcenterNamespaceManagementSoftwareClustersSummaryWithDefaults instantiates a new VcenterNamespaceManagementSoftwareClustersSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSoftwareClustersSummaryWithDefaults() *VcenterNamespaceManagementSoftwareClustersSummary {
	this := VcenterNamespaceManagementSoftwareClustersSummary{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetClusterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *VcenterNamespaceManagementSoftwareClustersSummary) SetCluster(v string) {
	o.Cluster = v
}

// GetClusterName returns the ClusterName field value
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *VcenterNamespaceManagementSoftwareClustersSummary) SetClusterName(v string) {
	o.ClusterName = v
}

// GetCurrentVersion returns the CurrentVersion field value
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetCurrentVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetCurrentVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CurrentVersion, true
}

// SetCurrentVersion sets field value
func (o *VcenterNamespaceManagementSoftwareClustersSummary) SetCurrentVersion(v string) {
	o.CurrentVersion = v
}

// GetAvailableVersions returns the AvailableVersions field value
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetAvailableVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AvailableVersions
}

// GetAvailableVersionsOk returns a tuple with the AvailableVersions field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetAvailableVersionsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AvailableVersions, true
}

// SetAvailableVersions sets field value
func (o *VcenterNamespaceManagementSoftwareClustersSummary) SetAvailableVersions(v []string) {
	o.AvailableVersions = v
}

// GetLastUpgradedDate returns the LastUpgradedDate field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetLastUpgradedDate() time.Time {
	if o == nil || o.LastUpgradedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpgradedDate
}

// GetLastUpgradedDateOk returns a tuple with the LastUpgradedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetLastUpgradedDateOk() (*time.Time, bool) {
	if o == nil || o.LastUpgradedDate == nil {
		return nil, false
	}
	return o.LastUpgradedDate, true
}

// HasLastUpgradedDate returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) HasLastUpgradedDate() bool {
	if o != nil && o.LastUpgradedDate != nil {
		return true
	}

	return false
}

// SetLastUpgradedDate gets a reference to the given time.Time and assigns it to the LastUpgradedDate field.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) SetLastUpgradedDate(v time.Time) {
	o.LastUpgradedDate = &v
}

// GetDesiredVersion returns the DesiredVersion field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetDesiredVersion() string {
	if o == nil || o.DesiredVersion == nil {
		var ret string
		return ret
	}
	return *o.DesiredVersion
}

// GetDesiredVersionOk returns a tuple with the DesiredVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetDesiredVersionOk() (*string, bool) {
	if o == nil || o.DesiredVersion == nil {
		return nil, false
	}
	return o.DesiredVersion, true
}

// HasDesiredVersion returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) HasDesiredVersion() bool {
	if o != nil && o.DesiredVersion != nil {
		return true
	}

	return false
}

// SetDesiredVersion gets a reference to the given string and assigns it to the DesiredVersion field.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) SetDesiredVersion(v string) {
	o.DesiredVersion = &v
}

// GetState returns the State field value
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetState() VcenterNamespaceManagementSoftwareClustersState {
	if o == nil {
		var ret VcenterNamespaceManagementSoftwareClustersState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersSummary) GetStateOk() (*VcenterNamespaceManagementSoftwareClustersState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VcenterNamespaceManagementSoftwareClustersSummary) SetState(v VcenterNamespaceManagementSoftwareClustersState) {
	o.State = v
}

func (o VcenterNamespaceManagementSoftwareClustersSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cluster"] = o.Cluster
	}
	if true {
		toSerialize["cluster_name"] = o.ClusterName
	}
	if true {
		toSerialize["current_version"] = o.CurrentVersion
	}
	if true {
		toSerialize["available_versions"] = o.AvailableVersions
	}
	if o.LastUpgradedDate != nil {
		toSerialize["last_upgraded_date"] = o.LastUpgradedDate
	}
	if o.DesiredVersion != nil {
		toSerialize["desired_version"] = o.DesiredVersion
	}
	if true {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSoftwareClustersSummary struct {
	value *VcenterNamespaceManagementSoftwareClustersSummary
	isSet bool
}

func (v NullableVcenterNamespaceManagementSoftwareClustersSummary) Get() *VcenterNamespaceManagementSoftwareClustersSummary {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersSummary) Set(val *VcenterNamespaceManagementSoftwareClustersSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSoftwareClustersSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSoftwareClustersSummary(val *VcenterNamespaceManagementSoftwareClustersSummary) *NullableVcenterNamespaceManagementSoftwareClustersSummary {
	return &NullableVcenterNamespaceManagementSoftwareClustersSummary{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSoftwareClustersSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


