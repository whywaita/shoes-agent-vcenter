/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSoftwareClustersUpgradeStatus struct for VcenterNamespaceManagementSoftwareClustersUpgradeStatus
type VcenterNamespaceManagementSoftwareClustersUpgradeStatus struct {
	// Desired version the cluster will be upgraded to. If unset, the cluster upgrade is not in progress.
	DesiredVersion *string `json:"desired_version,omitempty"`
	// Current set of messages associated with the upgrade state.
	Messages []VcenterNamespaceManagementSoftwareClustersMessage `json:"messages"`
	Progress *VcenterNamespaceManagementSoftwareClustersUpgradeProgress `json:"progress,omitempty"`
}

// NewVcenterNamespaceManagementSoftwareClustersUpgradeStatus instantiates a new VcenterNamespaceManagementSoftwareClustersUpgradeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSoftwareClustersUpgradeStatus(messages []VcenterNamespaceManagementSoftwareClustersMessage) *VcenterNamespaceManagementSoftwareClustersUpgradeStatus {
	this := VcenterNamespaceManagementSoftwareClustersUpgradeStatus{}
	this.Messages = messages
	return &this
}

// NewVcenterNamespaceManagementSoftwareClustersUpgradeStatusWithDefaults instantiates a new VcenterNamespaceManagementSoftwareClustersUpgradeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSoftwareClustersUpgradeStatusWithDefaults() *VcenterNamespaceManagementSoftwareClustersUpgradeStatus {
	this := VcenterNamespaceManagementSoftwareClustersUpgradeStatus{}
	return &this
}

// GetDesiredVersion returns the DesiredVersion field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) GetDesiredVersion() string {
	if o == nil || o.DesiredVersion == nil {
		var ret string
		return ret
	}
	return *o.DesiredVersion
}

// GetDesiredVersionOk returns a tuple with the DesiredVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) GetDesiredVersionOk() (*string, bool) {
	if o == nil || o.DesiredVersion == nil {
		return nil, false
	}
	return o.DesiredVersion, true
}

// HasDesiredVersion returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) HasDesiredVersion() bool {
	if o != nil && o.DesiredVersion != nil {
		return true
	}

	return false
}

// SetDesiredVersion gets a reference to the given string and assigns it to the DesiredVersion field.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) SetDesiredVersion(v string) {
	o.DesiredVersion = &v
}

// GetMessages returns the Messages field value
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) GetMessages() []VcenterNamespaceManagementSoftwareClustersMessage {
	if o == nil {
		var ret []VcenterNamespaceManagementSoftwareClustersMessage
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) GetMessagesOk() (*[]VcenterNamespaceManagementSoftwareClustersMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Messages, true
}

// SetMessages sets field value
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) SetMessages(v []VcenterNamespaceManagementSoftwareClustersMessage) {
	o.Messages = v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) GetProgress() VcenterNamespaceManagementSoftwareClustersUpgradeProgress {
	if o == nil || o.Progress == nil {
		var ret VcenterNamespaceManagementSoftwareClustersUpgradeProgress
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) GetProgressOk() (*VcenterNamespaceManagementSoftwareClustersUpgradeProgress, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given VcenterNamespaceManagementSoftwareClustersUpgradeProgress and assigns it to the Progress field.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) SetProgress(v VcenterNamespaceManagementSoftwareClustersUpgradeProgress) {
	o.Progress = &v
}

func (o VcenterNamespaceManagementSoftwareClustersUpgradeStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DesiredVersion != nil {
		toSerialize["desired_version"] = o.DesiredVersion
	}
	if true {
		toSerialize["messages"] = o.Messages
	}
	if o.Progress != nil {
		toSerialize["progress"] = o.Progress
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSoftwareClustersUpgradeStatus struct {
	value *VcenterNamespaceManagementSoftwareClustersUpgradeStatus
	isSet bool
}

func (v NullableVcenterNamespaceManagementSoftwareClustersUpgradeStatus) Get() *VcenterNamespaceManagementSoftwareClustersUpgradeStatus {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersUpgradeStatus) Set(val *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSoftwareClustersUpgradeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersUpgradeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSoftwareClustersUpgradeStatus(val *VcenterNamespaceManagementSoftwareClustersUpgradeStatus) *NullableVcenterNamespaceManagementSoftwareClustersUpgradeStatus {
	return &NullableVcenterNamespaceManagementSoftwareClustersUpgradeStatus{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSoftwareClustersUpgradeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersUpgradeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


