/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterStoragePoliciesComplianceVMFilterSpec struct for VcenterStoragePoliciesComplianceVMFilterSpec
type VcenterStoragePoliciesComplianceVMFilterSpec struct {
	// Compliance Status that a virtual machine must have to match the filter. Atleast one status must be specified.
	Status []VcenterStoragePoliciesComplianceVMStatus `json:"status"`
	// Identifiers of virtual machines that can match the filter If unset or empty, virtual machines with any identifier matches the filter When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: VirtualMachine.
	Vms *[]string `json:"vms,omitempty"`
}

// NewVcenterStoragePoliciesComplianceVMFilterSpec instantiates a new VcenterStoragePoliciesComplianceVMFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterStoragePoliciesComplianceVMFilterSpec(status []VcenterStoragePoliciesComplianceVMStatus) *VcenterStoragePoliciesComplianceVMFilterSpec {
	this := VcenterStoragePoliciesComplianceVMFilterSpec{}
	this.Status = status
	return &this
}

// NewVcenterStoragePoliciesComplianceVMFilterSpecWithDefaults instantiates a new VcenterStoragePoliciesComplianceVMFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterStoragePoliciesComplianceVMFilterSpecWithDefaults() *VcenterStoragePoliciesComplianceVMFilterSpec {
	this := VcenterStoragePoliciesComplianceVMFilterSpec{}
	return &this
}

// GetStatus returns the Status field value
func (o *VcenterStoragePoliciesComplianceVMFilterSpec) GetStatus() []VcenterStoragePoliciesComplianceVMStatus {
	if o == nil {
		var ret []VcenterStoragePoliciesComplianceVMStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VcenterStoragePoliciesComplianceVMFilterSpec) GetStatusOk() (*[]VcenterStoragePoliciesComplianceVMStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VcenterStoragePoliciesComplianceVMFilterSpec) SetStatus(v []VcenterStoragePoliciesComplianceVMStatus) {
	o.Status = v
}

// GetVms returns the Vms field value if set, zero value otherwise.
func (o *VcenterStoragePoliciesComplianceVMFilterSpec) GetVms() []string {
	if o == nil || o.Vms == nil {
		var ret []string
		return ret
	}
	return *o.Vms
}

// GetVmsOk returns a tuple with the Vms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterStoragePoliciesComplianceVMFilterSpec) GetVmsOk() (*[]string, bool) {
	if o == nil || o.Vms == nil {
		return nil, false
	}
	return o.Vms, true
}

// HasVms returns a boolean if a field has been set.
func (o *VcenterStoragePoliciesComplianceVMFilterSpec) HasVms() bool {
	if o != nil && o.Vms != nil {
		return true
	}

	return false
}

// SetVms gets a reference to the given []string and assigns it to the Vms field.
func (o *VcenterStoragePoliciesComplianceVMFilterSpec) SetVms(v []string) {
	o.Vms = &v
}

func (o VcenterStoragePoliciesComplianceVMFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Vms != nil {
		toSerialize["vms"] = o.Vms
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterStoragePoliciesComplianceVMFilterSpec struct {
	value *VcenterStoragePoliciesComplianceVMFilterSpec
	isSet bool
}

func (v NullableVcenterStoragePoliciesComplianceVMFilterSpec) Get() *VcenterStoragePoliciesComplianceVMFilterSpec {
	return v.value
}

func (v *NullableVcenterStoragePoliciesComplianceVMFilterSpec) Set(val *VcenterStoragePoliciesComplianceVMFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterStoragePoliciesComplianceVMFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterStoragePoliciesComplianceVMFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterStoragePoliciesComplianceVMFilterSpec(val *VcenterStoragePoliciesComplianceVMFilterSpec) *NullableVcenterStoragePoliciesComplianceVMFilterSpec {
	return &NullableVcenterStoragePoliciesComplianceVMFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterStoragePoliciesComplianceVMFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterStoragePoliciesComplianceVMFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


