/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClustersEnableSpec struct for VcenterNamespaceManagementClustersEnableSpec
type VcenterNamespaceManagementClustersEnableSpec struct {
	SizeHint VcenterNamespaceManagementSizingHint `json:"size_hint"`
	ServiceCidr VcenterNamespaceManagementIpv4Cidr `json:"service_cidr"`
	NetworkProvider VcenterNamespaceManagementClustersNetworkProvider `json:"network_provider"`
	NcpClusterNetworkSpec *VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec `json:"ncp_cluster_network_spec,omitempty"`
	WorkloadNetworksSpec *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec `json:"workload_networks_spec,omitempty"`
	// List of NTP server DNS names or IP addresses to use for workloads such as Tanzu Kubernetes Grid VMs, specified in order of preference. If unset, NTP server for Kubernetes API servers will be used.
	WorkloadNtpServers *[]string `json:"workload_ntp_servers,omitempty"`
	LoadBalancerConfigSpec *VcenterNamespaceManagementLoadBalancersConfigSpec `json:"load_balancer_config_spec,omitempty"`
	MasterManagementNetwork VcenterNamespaceManagementClustersNetworkSpec `json:"master_management_network"`
	// List of DNS server IP addresses to use on Kubernetes API server, specified in order of preference. If unset, no default DNS servers are set.
	MasterDNS *[]string `json:"master_DNS,omitempty"`
	// List of DNS server IP addresses to use on the worker nodes, specified in order of preference. If unset, no default DNS servers are set.
	WorkerDNS *[]string `json:"worker_DNS,omitempty"`
	// List of domains (for example \"vmware.com\") to be searched when trying to lookup a host name on Kubernetes API server, specified in order of preference. If unset, no default DNS search domains are set.
	MasterDNSSearchDomains *[]string `json:"master_DNS_search_domains,omitempty"`
	// List of NTP server DNS names or IP addresses to use on Kubernetes API server, specified in order of preference. If unset, VMware Tools based time synchronization is enabled.
	MasterNTPServers *[]string `json:"master_NTP_servers,omitempty"`
	// Identifier of storage policy associated with Kubernetes API server. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.
	MasterStoragePolicy string `json:"master_storage_policy"`
	// Identifier of storage policy associated with ephemeral disks of all the Kubernetes Pods in the cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.
	EphemeralStoragePolicy string `json:"ephemeral_storage_policy"`
	CnsFileConfig *VcenterNamespaceManagementCNSFileConfig `json:"cns_file_config,omitempty"`
	// Disclaimer to be displayed prior to login via the Kubectl plugin. If unset, just skip it.
	LoginBanner *string `json:"login_banner,omitempty"`
	// List of additional DNS names to associate with the Kubernetes API server. These DNS names are embedded in the TLS certificate presented by the API server. If unset, no additional DNS names are embedded in the TLS certificate.
	MasterDNSNames *[]string `json:"Master_DNS_names,omitempty"`
	ImageStorage VcenterNamespaceManagementClustersImageStorageSpec `json:"image_storage"`
	DefaultImageRegistry *VcenterNamespaceManagementClustersImageRegistry `json:"default_image_registry,omitempty"`
	// Default image repository to use when Kubernetes Pod container specification does not specify it as part of the container image name. If unset, defaults to Docker Hub official repository in case of Docker Hub image registry, otherwise defaults to empty string.
	DefaultImageRepository *string `json:"default_image_repository,omitempty"`
	// Identifier of the Content Library which holds the VM Images for vSphere Kubernetes Service. This Content Library should be subscribed to VMware's hosted vSphere Kubernetes Service Repository. If unset, the Content Library identifier will not be set. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.Library. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.Library.
	DefaultKubernetesServiceContentLibrary *string `json:"default_kubernetes_service_content_library,omitempty"`
}

// NewVcenterNamespaceManagementClustersEnableSpec instantiates a new VcenterNamespaceManagementClustersEnableSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClustersEnableSpec(sizeHint VcenterNamespaceManagementSizingHint, serviceCidr VcenterNamespaceManagementIpv4Cidr, networkProvider VcenterNamespaceManagementClustersNetworkProvider, masterManagementNetwork VcenterNamespaceManagementClustersNetworkSpec, masterStoragePolicy string, ephemeralStoragePolicy string, imageStorage VcenterNamespaceManagementClustersImageStorageSpec) *VcenterNamespaceManagementClustersEnableSpec {
	this := VcenterNamespaceManagementClustersEnableSpec{}
	this.SizeHint = sizeHint
	this.ServiceCidr = serviceCidr
	this.NetworkProvider = networkProvider
	this.MasterManagementNetwork = masterManagementNetwork
	this.MasterStoragePolicy = masterStoragePolicy
	this.EphemeralStoragePolicy = ephemeralStoragePolicy
	this.ImageStorage = imageStorage
	return &this
}

// NewVcenterNamespaceManagementClustersEnableSpecWithDefaults instantiates a new VcenterNamespaceManagementClustersEnableSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClustersEnableSpecWithDefaults() *VcenterNamespaceManagementClustersEnableSpec {
	this := VcenterNamespaceManagementClustersEnableSpec{}
	return &this
}

// GetSizeHint returns the SizeHint field value
func (o *VcenterNamespaceManagementClustersEnableSpec) GetSizeHint() VcenterNamespaceManagementSizingHint {
	if o == nil {
		var ret VcenterNamespaceManagementSizingHint
		return ret
	}

	return o.SizeHint
}

// GetSizeHintOk returns a tuple with the SizeHint field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetSizeHintOk() (*VcenterNamespaceManagementSizingHint, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SizeHint, true
}

// SetSizeHint sets field value
func (o *VcenterNamespaceManagementClustersEnableSpec) SetSizeHint(v VcenterNamespaceManagementSizingHint) {
	o.SizeHint = v
}

// GetServiceCidr returns the ServiceCidr field value
func (o *VcenterNamespaceManagementClustersEnableSpec) GetServiceCidr() VcenterNamespaceManagementIpv4Cidr {
	if o == nil {
		var ret VcenterNamespaceManagementIpv4Cidr
		return ret
	}

	return o.ServiceCidr
}

// GetServiceCidrOk returns a tuple with the ServiceCidr field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetServiceCidrOk() (*VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServiceCidr, true
}

// SetServiceCidr sets field value
func (o *VcenterNamespaceManagementClustersEnableSpec) SetServiceCidr(v VcenterNamespaceManagementIpv4Cidr) {
	o.ServiceCidr = v
}

// GetNetworkProvider returns the NetworkProvider field value
func (o *VcenterNamespaceManagementClustersEnableSpec) GetNetworkProvider() VcenterNamespaceManagementClustersNetworkProvider {
	if o == nil {
		var ret VcenterNamespaceManagementClustersNetworkProvider
		return ret
	}

	return o.NetworkProvider
}

// GetNetworkProviderOk returns a tuple with the NetworkProvider field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetNetworkProviderOk() (*VcenterNamespaceManagementClustersNetworkProvider, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NetworkProvider, true
}

// SetNetworkProvider sets field value
func (o *VcenterNamespaceManagementClustersEnableSpec) SetNetworkProvider(v VcenterNamespaceManagementClustersNetworkProvider) {
	o.NetworkProvider = v
}

// GetNcpClusterNetworkSpec returns the NcpClusterNetworkSpec field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetNcpClusterNetworkSpec() VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec {
	if o == nil || o.NcpClusterNetworkSpec == nil {
		var ret VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec
		return ret
	}
	return *o.NcpClusterNetworkSpec
}

// GetNcpClusterNetworkSpecOk returns a tuple with the NcpClusterNetworkSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetNcpClusterNetworkSpecOk() (*VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec, bool) {
	if o == nil || o.NcpClusterNetworkSpec == nil {
		return nil, false
	}
	return o.NcpClusterNetworkSpec, true
}

// HasNcpClusterNetworkSpec returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasNcpClusterNetworkSpec() bool {
	if o != nil && o.NcpClusterNetworkSpec != nil {
		return true
	}

	return false
}

// SetNcpClusterNetworkSpec gets a reference to the given VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec and assigns it to the NcpClusterNetworkSpec field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetNcpClusterNetworkSpec(v VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec) {
	o.NcpClusterNetworkSpec = &v
}

// GetWorkloadNetworksSpec returns the WorkloadNetworksSpec field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetWorkloadNetworksSpec() VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec {
	if o == nil || o.WorkloadNetworksSpec == nil {
		var ret VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec
		return ret
	}
	return *o.WorkloadNetworksSpec
}

// GetWorkloadNetworksSpecOk returns a tuple with the WorkloadNetworksSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetWorkloadNetworksSpecOk() (*VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec, bool) {
	if o == nil || o.WorkloadNetworksSpec == nil {
		return nil, false
	}
	return o.WorkloadNetworksSpec, true
}

// HasWorkloadNetworksSpec returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasWorkloadNetworksSpec() bool {
	if o != nil && o.WorkloadNetworksSpec != nil {
		return true
	}

	return false
}

// SetWorkloadNetworksSpec gets a reference to the given VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec and assigns it to the WorkloadNetworksSpec field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetWorkloadNetworksSpec(v VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) {
	o.WorkloadNetworksSpec = &v
}

// GetWorkloadNtpServers returns the WorkloadNtpServers field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetWorkloadNtpServers() []string {
	if o == nil || o.WorkloadNtpServers == nil {
		var ret []string
		return ret
	}
	return *o.WorkloadNtpServers
}

// GetWorkloadNtpServersOk returns a tuple with the WorkloadNtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetWorkloadNtpServersOk() (*[]string, bool) {
	if o == nil || o.WorkloadNtpServers == nil {
		return nil, false
	}
	return o.WorkloadNtpServers, true
}

// HasWorkloadNtpServers returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasWorkloadNtpServers() bool {
	if o != nil && o.WorkloadNtpServers != nil {
		return true
	}

	return false
}

// SetWorkloadNtpServers gets a reference to the given []string and assigns it to the WorkloadNtpServers field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetWorkloadNtpServers(v []string) {
	o.WorkloadNtpServers = &v
}

// GetLoadBalancerConfigSpec returns the LoadBalancerConfigSpec field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetLoadBalancerConfigSpec() VcenterNamespaceManagementLoadBalancersConfigSpec {
	if o == nil || o.LoadBalancerConfigSpec == nil {
		var ret VcenterNamespaceManagementLoadBalancersConfigSpec
		return ret
	}
	return *o.LoadBalancerConfigSpec
}

// GetLoadBalancerConfigSpecOk returns a tuple with the LoadBalancerConfigSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetLoadBalancerConfigSpecOk() (*VcenterNamespaceManagementLoadBalancersConfigSpec, bool) {
	if o == nil || o.LoadBalancerConfigSpec == nil {
		return nil, false
	}
	return o.LoadBalancerConfigSpec, true
}

// HasLoadBalancerConfigSpec returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasLoadBalancerConfigSpec() bool {
	if o != nil && o.LoadBalancerConfigSpec != nil {
		return true
	}

	return false
}

// SetLoadBalancerConfigSpec gets a reference to the given VcenterNamespaceManagementLoadBalancersConfigSpec and assigns it to the LoadBalancerConfigSpec field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetLoadBalancerConfigSpec(v VcenterNamespaceManagementLoadBalancersConfigSpec) {
	o.LoadBalancerConfigSpec = &v
}

// GetMasterManagementNetwork returns the MasterManagementNetwork field value
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterManagementNetwork() VcenterNamespaceManagementClustersNetworkSpec {
	if o == nil {
		var ret VcenterNamespaceManagementClustersNetworkSpec
		return ret
	}

	return o.MasterManagementNetwork
}

// GetMasterManagementNetworkOk returns a tuple with the MasterManagementNetwork field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterManagementNetworkOk() (*VcenterNamespaceManagementClustersNetworkSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MasterManagementNetwork, true
}

// SetMasterManagementNetwork sets field value
func (o *VcenterNamespaceManagementClustersEnableSpec) SetMasterManagementNetwork(v VcenterNamespaceManagementClustersNetworkSpec) {
	o.MasterManagementNetwork = v
}

// GetMasterDNS returns the MasterDNS field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterDNS() []string {
	if o == nil || o.MasterDNS == nil {
		var ret []string
		return ret
	}
	return *o.MasterDNS
}

// GetMasterDNSOk returns a tuple with the MasterDNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterDNSOk() (*[]string, bool) {
	if o == nil || o.MasterDNS == nil {
		return nil, false
	}
	return o.MasterDNS, true
}

// HasMasterDNS returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasMasterDNS() bool {
	if o != nil && o.MasterDNS != nil {
		return true
	}

	return false
}

// SetMasterDNS gets a reference to the given []string and assigns it to the MasterDNS field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetMasterDNS(v []string) {
	o.MasterDNS = &v
}

// GetWorkerDNS returns the WorkerDNS field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetWorkerDNS() []string {
	if o == nil || o.WorkerDNS == nil {
		var ret []string
		return ret
	}
	return *o.WorkerDNS
}

// GetWorkerDNSOk returns a tuple with the WorkerDNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetWorkerDNSOk() (*[]string, bool) {
	if o == nil || o.WorkerDNS == nil {
		return nil, false
	}
	return o.WorkerDNS, true
}

// HasWorkerDNS returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasWorkerDNS() bool {
	if o != nil && o.WorkerDNS != nil {
		return true
	}

	return false
}

// SetWorkerDNS gets a reference to the given []string and assigns it to the WorkerDNS field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetWorkerDNS(v []string) {
	o.WorkerDNS = &v
}

// GetMasterDNSSearchDomains returns the MasterDNSSearchDomains field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterDNSSearchDomains() []string {
	if o == nil || o.MasterDNSSearchDomains == nil {
		var ret []string
		return ret
	}
	return *o.MasterDNSSearchDomains
}

// GetMasterDNSSearchDomainsOk returns a tuple with the MasterDNSSearchDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterDNSSearchDomainsOk() (*[]string, bool) {
	if o == nil || o.MasterDNSSearchDomains == nil {
		return nil, false
	}
	return o.MasterDNSSearchDomains, true
}

// HasMasterDNSSearchDomains returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasMasterDNSSearchDomains() bool {
	if o != nil && o.MasterDNSSearchDomains != nil {
		return true
	}

	return false
}

// SetMasterDNSSearchDomains gets a reference to the given []string and assigns it to the MasterDNSSearchDomains field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetMasterDNSSearchDomains(v []string) {
	o.MasterDNSSearchDomains = &v
}

// GetMasterNTPServers returns the MasterNTPServers field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterNTPServers() []string {
	if o == nil || o.MasterNTPServers == nil {
		var ret []string
		return ret
	}
	return *o.MasterNTPServers
}

// GetMasterNTPServersOk returns a tuple with the MasterNTPServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterNTPServersOk() (*[]string, bool) {
	if o == nil || o.MasterNTPServers == nil {
		return nil, false
	}
	return o.MasterNTPServers, true
}

// HasMasterNTPServers returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasMasterNTPServers() bool {
	if o != nil && o.MasterNTPServers != nil {
		return true
	}

	return false
}

// SetMasterNTPServers gets a reference to the given []string and assigns it to the MasterNTPServers field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetMasterNTPServers(v []string) {
	o.MasterNTPServers = &v
}

// GetMasterStoragePolicy returns the MasterStoragePolicy field value
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterStoragePolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MasterStoragePolicy
}

// GetMasterStoragePolicyOk returns a tuple with the MasterStoragePolicy field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterStoragePolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MasterStoragePolicy, true
}

// SetMasterStoragePolicy sets field value
func (o *VcenterNamespaceManagementClustersEnableSpec) SetMasterStoragePolicy(v string) {
	o.MasterStoragePolicy = v
}

// GetEphemeralStoragePolicy returns the EphemeralStoragePolicy field value
func (o *VcenterNamespaceManagementClustersEnableSpec) GetEphemeralStoragePolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EphemeralStoragePolicy
}

// GetEphemeralStoragePolicyOk returns a tuple with the EphemeralStoragePolicy field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetEphemeralStoragePolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EphemeralStoragePolicy, true
}

// SetEphemeralStoragePolicy sets field value
func (o *VcenterNamespaceManagementClustersEnableSpec) SetEphemeralStoragePolicy(v string) {
	o.EphemeralStoragePolicy = v
}

// GetCnsFileConfig returns the CnsFileConfig field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetCnsFileConfig() VcenterNamespaceManagementCNSFileConfig {
	if o == nil || o.CnsFileConfig == nil {
		var ret VcenterNamespaceManagementCNSFileConfig
		return ret
	}
	return *o.CnsFileConfig
}

// GetCnsFileConfigOk returns a tuple with the CnsFileConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetCnsFileConfigOk() (*VcenterNamespaceManagementCNSFileConfig, bool) {
	if o == nil || o.CnsFileConfig == nil {
		return nil, false
	}
	return o.CnsFileConfig, true
}

// HasCnsFileConfig returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasCnsFileConfig() bool {
	if o != nil && o.CnsFileConfig != nil {
		return true
	}

	return false
}

// SetCnsFileConfig gets a reference to the given VcenterNamespaceManagementCNSFileConfig and assigns it to the CnsFileConfig field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetCnsFileConfig(v VcenterNamespaceManagementCNSFileConfig) {
	o.CnsFileConfig = &v
}

// GetLoginBanner returns the LoginBanner field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetLoginBanner() string {
	if o == nil || o.LoginBanner == nil {
		var ret string
		return ret
	}
	return *o.LoginBanner
}

// GetLoginBannerOk returns a tuple with the LoginBanner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetLoginBannerOk() (*string, bool) {
	if o == nil || o.LoginBanner == nil {
		return nil, false
	}
	return o.LoginBanner, true
}

// HasLoginBanner returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasLoginBanner() bool {
	if o != nil && o.LoginBanner != nil {
		return true
	}

	return false
}

// SetLoginBanner gets a reference to the given string and assigns it to the LoginBanner field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetLoginBanner(v string) {
	o.LoginBanner = &v
}

// GetMasterDNSNames returns the MasterDNSNames field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterDNSNames() []string {
	if o == nil || o.MasterDNSNames == nil {
		var ret []string
		return ret
	}
	return *o.MasterDNSNames
}

// GetMasterDNSNamesOk returns a tuple with the MasterDNSNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetMasterDNSNamesOk() (*[]string, bool) {
	if o == nil || o.MasterDNSNames == nil {
		return nil, false
	}
	return o.MasterDNSNames, true
}

// HasMasterDNSNames returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasMasterDNSNames() bool {
	if o != nil && o.MasterDNSNames != nil {
		return true
	}

	return false
}

// SetMasterDNSNames gets a reference to the given []string and assigns it to the MasterDNSNames field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetMasterDNSNames(v []string) {
	o.MasterDNSNames = &v
}

// GetImageStorage returns the ImageStorage field value
func (o *VcenterNamespaceManagementClustersEnableSpec) GetImageStorage() VcenterNamespaceManagementClustersImageStorageSpec {
	if o == nil {
		var ret VcenterNamespaceManagementClustersImageStorageSpec
		return ret
	}

	return o.ImageStorage
}

// GetImageStorageOk returns a tuple with the ImageStorage field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetImageStorageOk() (*VcenterNamespaceManagementClustersImageStorageSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ImageStorage, true
}

// SetImageStorage sets field value
func (o *VcenterNamespaceManagementClustersEnableSpec) SetImageStorage(v VcenterNamespaceManagementClustersImageStorageSpec) {
	o.ImageStorage = v
}

// GetDefaultImageRegistry returns the DefaultImageRegistry field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetDefaultImageRegistry() VcenterNamespaceManagementClustersImageRegistry {
	if o == nil || o.DefaultImageRegistry == nil {
		var ret VcenterNamespaceManagementClustersImageRegistry
		return ret
	}
	return *o.DefaultImageRegistry
}

// GetDefaultImageRegistryOk returns a tuple with the DefaultImageRegistry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetDefaultImageRegistryOk() (*VcenterNamespaceManagementClustersImageRegistry, bool) {
	if o == nil || o.DefaultImageRegistry == nil {
		return nil, false
	}
	return o.DefaultImageRegistry, true
}

// HasDefaultImageRegistry returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasDefaultImageRegistry() bool {
	if o != nil && o.DefaultImageRegistry != nil {
		return true
	}

	return false
}

// SetDefaultImageRegistry gets a reference to the given VcenterNamespaceManagementClustersImageRegistry and assigns it to the DefaultImageRegistry field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetDefaultImageRegistry(v VcenterNamespaceManagementClustersImageRegistry) {
	o.DefaultImageRegistry = &v
}

// GetDefaultImageRepository returns the DefaultImageRepository field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetDefaultImageRepository() string {
	if o == nil || o.DefaultImageRepository == nil {
		var ret string
		return ret
	}
	return *o.DefaultImageRepository
}

// GetDefaultImageRepositoryOk returns a tuple with the DefaultImageRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetDefaultImageRepositoryOk() (*string, bool) {
	if o == nil || o.DefaultImageRepository == nil {
		return nil, false
	}
	return o.DefaultImageRepository, true
}

// HasDefaultImageRepository returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasDefaultImageRepository() bool {
	if o != nil && o.DefaultImageRepository != nil {
		return true
	}

	return false
}

// SetDefaultImageRepository gets a reference to the given string and assigns it to the DefaultImageRepository field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetDefaultImageRepository(v string) {
	o.DefaultImageRepository = &v
}

// GetDefaultKubernetesServiceContentLibrary returns the DefaultKubernetesServiceContentLibrary field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetDefaultKubernetesServiceContentLibrary() string {
	if o == nil || o.DefaultKubernetesServiceContentLibrary == nil {
		var ret string
		return ret
	}
	return *o.DefaultKubernetesServiceContentLibrary
}

// GetDefaultKubernetesServiceContentLibraryOk returns a tuple with the DefaultKubernetesServiceContentLibrary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) GetDefaultKubernetesServiceContentLibraryOk() (*string, bool) {
	if o == nil || o.DefaultKubernetesServiceContentLibrary == nil {
		return nil, false
	}
	return o.DefaultKubernetesServiceContentLibrary, true
}

// HasDefaultKubernetesServiceContentLibrary returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersEnableSpec) HasDefaultKubernetesServiceContentLibrary() bool {
	if o != nil && o.DefaultKubernetesServiceContentLibrary != nil {
		return true
	}

	return false
}

// SetDefaultKubernetesServiceContentLibrary gets a reference to the given string and assigns it to the DefaultKubernetesServiceContentLibrary field.
func (o *VcenterNamespaceManagementClustersEnableSpec) SetDefaultKubernetesServiceContentLibrary(v string) {
	o.DefaultKubernetesServiceContentLibrary = &v
}

func (o VcenterNamespaceManagementClustersEnableSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["size_hint"] = o.SizeHint
	}
	if true {
		toSerialize["service_cidr"] = o.ServiceCidr
	}
	if true {
		toSerialize["network_provider"] = o.NetworkProvider
	}
	if o.NcpClusterNetworkSpec != nil {
		toSerialize["ncp_cluster_network_spec"] = o.NcpClusterNetworkSpec
	}
	if o.WorkloadNetworksSpec != nil {
		toSerialize["workload_networks_spec"] = o.WorkloadNetworksSpec
	}
	if o.WorkloadNtpServers != nil {
		toSerialize["workload_ntp_servers"] = o.WorkloadNtpServers
	}
	if o.LoadBalancerConfigSpec != nil {
		toSerialize["load_balancer_config_spec"] = o.LoadBalancerConfigSpec
	}
	if true {
		toSerialize["master_management_network"] = o.MasterManagementNetwork
	}
	if o.MasterDNS != nil {
		toSerialize["master_DNS"] = o.MasterDNS
	}
	if o.WorkerDNS != nil {
		toSerialize["worker_DNS"] = o.WorkerDNS
	}
	if o.MasterDNSSearchDomains != nil {
		toSerialize["master_DNS_search_domains"] = o.MasterDNSSearchDomains
	}
	if o.MasterNTPServers != nil {
		toSerialize["master_NTP_servers"] = o.MasterNTPServers
	}
	if true {
		toSerialize["master_storage_policy"] = o.MasterStoragePolicy
	}
	if true {
		toSerialize["ephemeral_storage_policy"] = o.EphemeralStoragePolicy
	}
	if o.CnsFileConfig != nil {
		toSerialize["cns_file_config"] = o.CnsFileConfig
	}
	if o.LoginBanner != nil {
		toSerialize["login_banner"] = o.LoginBanner
	}
	if o.MasterDNSNames != nil {
		toSerialize["Master_DNS_names"] = o.MasterDNSNames
	}
	if true {
		toSerialize["image_storage"] = o.ImageStorage
	}
	if o.DefaultImageRegistry != nil {
		toSerialize["default_image_registry"] = o.DefaultImageRegistry
	}
	if o.DefaultImageRepository != nil {
		toSerialize["default_image_repository"] = o.DefaultImageRepository
	}
	if o.DefaultKubernetesServiceContentLibrary != nil {
		toSerialize["default_kubernetes_service_content_library"] = o.DefaultKubernetesServiceContentLibrary
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClustersEnableSpec struct {
	value *VcenterNamespaceManagementClustersEnableSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersEnableSpec) Get() *VcenterNamespaceManagementClustersEnableSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersEnableSpec) Set(val *VcenterNamespaceManagementClustersEnableSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersEnableSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersEnableSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersEnableSpec(val *VcenterNamespaceManagementClustersEnableSpec) *NullableVcenterNamespaceManagementClustersEnableSpec {
	return &NullableVcenterNamespaceManagementClustersEnableSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersEnableSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersEnableSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


