/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementCNSFileConfig struct for VcenterNamespaceManagementCNSFileConfig
type VcenterNamespaceManagementCNSFileConfig struct {
	// CNSFileConfig.vsan-clusters is a list of clusters to be used for provisioning file volumes. As a prerequisite these clusters must have vSAN and vSAN file services enabled, and must be in the same vCenter as the Supervisor Cluster. Currently this list must have a single entry which is the cluster identifier of the current cluster. This cluster must be a vSAN cluster and must have vSAN File Service enabled. If a cluster in the list is not a vSAN cluster or does not have vSAN File Service enabled, an InvalidArgument error will be thrown from Clusters.enable, Clusters.update and Clusters.set APIs. For disabling file volume support on Supervisor Cluster, an empty list is expected. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.
	VsanClusters []string `json:"vsan_clusters"`
}

// NewVcenterNamespaceManagementCNSFileConfig instantiates a new VcenterNamespaceManagementCNSFileConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementCNSFileConfig(vsanClusters []string) *VcenterNamespaceManagementCNSFileConfig {
	this := VcenterNamespaceManagementCNSFileConfig{}
	this.VsanClusters = vsanClusters
	return &this
}

// NewVcenterNamespaceManagementCNSFileConfigWithDefaults instantiates a new VcenterNamespaceManagementCNSFileConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementCNSFileConfigWithDefaults() *VcenterNamespaceManagementCNSFileConfig {
	this := VcenterNamespaceManagementCNSFileConfig{}
	return &this
}

// GetVsanClusters returns the VsanClusters field value
func (o *VcenterNamespaceManagementCNSFileConfig) GetVsanClusters() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.VsanClusters
}

// GetVsanClustersOk returns a tuple with the VsanClusters field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementCNSFileConfig) GetVsanClustersOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VsanClusters, true
}

// SetVsanClusters sets field value
func (o *VcenterNamespaceManagementCNSFileConfig) SetVsanClusters(v []string) {
	o.VsanClusters = v
}

func (o VcenterNamespaceManagementCNSFileConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["vsan_clusters"] = o.VsanClusters
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementCNSFileConfig struct {
	value *VcenterNamespaceManagementCNSFileConfig
	isSet bool
}

func (v NullableVcenterNamespaceManagementCNSFileConfig) Get() *VcenterNamespaceManagementCNSFileConfig {
	return v.value
}

func (v *NullableVcenterNamespaceManagementCNSFileConfig) Set(val *VcenterNamespaceManagementCNSFileConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementCNSFileConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementCNSFileConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementCNSFileConfig(val *VcenterNamespaceManagementCNSFileConfig) *NullableVcenterNamespaceManagementCNSFileConfig {
	return &NullableVcenterNamespaceManagementCNSFileConfig{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementCNSFileConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementCNSFileConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


