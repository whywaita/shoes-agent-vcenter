/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentInfoSubtasks struct for VcenterDeploymentInfoSubtasks
type VcenterDeploymentInfoSubtasks struct {
	Key *string `json:"key,omitempty"`
	Value *VcenterDeploymentTask `json:"value,omitempty"`
}

// NewVcenterDeploymentInfoSubtasks instantiates a new VcenterDeploymentInfoSubtasks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentInfoSubtasks() *VcenterDeploymentInfoSubtasks {
	this := VcenterDeploymentInfoSubtasks{}
	return &this
}

// NewVcenterDeploymentInfoSubtasksWithDefaults instantiates a new VcenterDeploymentInfoSubtasks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentInfoSubtasksWithDefaults() *VcenterDeploymentInfoSubtasks {
	this := VcenterDeploymentInfoSubtasks{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *VcenterDeploymentInfoSubtasks) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfoSubtasks) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *VcenterDeploymentInfoSubtasks) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *VcenterDeploymentInfoSubtasks) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VcenterDeploymentInfoSubtasks) GetValue() VcenterDeploymentTask {
	if o == nil || o.Value == nil {
		var ret VcenterDeploymentTask
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfoSubtasks) GetValueOk() (*VcenterDeploymentTask, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VcenterDeploymentInfoSubtasks) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given VcenterDeploymentTask and assigns it to the Value field.
func (o *VcenterDeploymentInfoSubtasks) SetValue(v VcenterDeploymentTask) {
	o.Value = &v
}

func (o VcenterDeploymentInfoSubtasks) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentInfoSubtasks struct {
	value *VcenterDeploymentInfoSubtasks
	isSet bool
}

func (v NullableVcenterDeploymentInfoSubtasks) Get() *VcenterDeploymentInfoSubtasks {
	return v.value
}

func (v *NullableVcenterDeploymentInfoSubtasks) Set(val *VcenterDeploymentInfoSubtasks) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentInfoSubtasks) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentInfoSubtasks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentInfoSubtasks(val *VcenterDeploymentInfoSubtasks) *NullableVcenterDeploymentInfoSubtasks {
	return &NullableVcenterDeploymentInfoSubtasks{value: val, isSet: true}
}

func (v NullableVcenterDeploymentInfoSubtasks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentInfoSubtasks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


