/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestNetworkingInterfacesInfo struct for VcenterVmGuestNetworkingInterfacesInfo
type VcenterVmGuestNetworkingInterfacesInfo struct {
	DnsValues *VcenterVmGuestDnsAssignedValues `json:"dns_values,omitempty"`
	// MAC address of the adapter. If unset then not supported by the Guest OS.
	MacAddress *string `json:"mac_address,omitempty"`
	Dns *VcenterVmGuestDnsConfigInfo `json:"dns,omitempty"`
	Ip *VcenterVmGuestNetworkingInterfacesIpConfigInfo `json:"ip,omitempty"`
	// The IP addresses of any WINS name servers for the adapter. If unset then not supported by the Guest OS.
	WinsServers *[]string `json:"wins_servers,omitempty"`
	// Link to the corresponding virtual device. If unset then the interface is not backed by a virtual device. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.Ethernet.
	Nic *string `json:"nic,omitempty"`
}

// NewVcenterVmGuestNetworkingInterfacesInfo instantiates a new VcenterVmGuestNetworkingInterfacesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestNetworkingInterfacesInfo() *VcenterVmGuestNetworkingInterfacesInfo {
	this := VcenterVmGuestNetworkingInterfacesInfo{}
	return &this
}

// NewVcenterVmGuestNetworkingInterfacesInfoWithDefaults instantiates a new VcenterVmGuestNetworkingInterfacesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestNetworkingInterfacesInfoWithDefaults() *VcenterVmGuestNetworkingInterfacesInfo {
	this := VcenterVmGuestNetworkingInterfacesInfo{}
	return &this
}

// GetDnsValues returns the DnsValues field value if set, zero value otherwise.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetDnsValues() VcenterVmGuestDnsAssignedValues {
	if o == nil || o.DnsValues == nil {
		var ret VcenterVmGuestDnsAssignedValues
		return ret
	}
	return *o.DnsValues
}

// GetDnsValuesOk returns a tuple with the DnsValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetDnsValuesOk() (*VcenterVmGuestDnsAssignedValues, bool) {
	if o == nil || o.DnsValues == nil {
		return nil, false
	}
	return o.DnsValues, true
}

// HasDnsValues returns a boolean if a field has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) HasDnsValues() bool {
	if o != nil && o.DnsValues != nil {
		return true
	}

	return false
}

// SetDnsValues gets a reference to the given VcenterVmGuestDnsAssignedValues and assigns it to the DnsValues field.
func (o *VcenterVmGuestNetworkingInterfacesInfo) SetDnsValues(v VcenterVmGuestDnsAssignedValues) {
	o.DnsValues = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetMacAddress() string {
	if o == nil || o.MacAddress == nil {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetMacAddressOk() (*string, bool) {
	if o == nil || o.MacAddress == nil {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) HasMacAddress() bool {
	if o != nil && o.MacAddress != nil {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *VcenterVmGuestNetworkingInterfacesInfo) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetDns() VcenterVmGuestDnsConfigInfo {
	if o == nil || o.Dns == nil {
		var ret VcenterVmGuestDnsConfigInfo
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetDnsOk() (*VcenterVmGuestDnsConfigInfo, bool) {
	if o == nil || o.Dns == nil {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) HasDns() bool {
	if o != nil && o.Dns != nil {
		return true
	}

	return false
}

// SetDns gets a reference to the given VcenterVmGuestDnsConfigInfo and assigns it to the Dns field.
func (o *VcenterVmGuestNetworkingInterfacesInfo) SetDns(v VcenterVmGuestDnsConfigInfo) {
	o.Dns = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetIp() VcenterVmGuestNetworkingInterfacesIpConfigInfo {
	if o == nil || o.Ip == nil {
		var ret VcenterVmGuestNetworkingInterfacesIpConfigInfo
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetIpOk() (*VcenterVmGuestNetworkingInterfacesIpConfigInfo, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given VcenterVmGuestNetworkingInterfacesIpConfigInfo and assigns it to the Ip field.
func (o *VcenterVmGuestNetworkingInterfacesInfo) SetIp(v VcenterVmGuestNetworkingInterfacesIpConfigInfo) {
	o.Ip = &v
}

// GetWinsServers returns the WinsServers field value if set, zero value otherwise.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetWinsServers() []string {
	if o == nil || o.WinsServers == nil {
		var ret []string
		return ret
	}
	return *o.WinsServers
}

// GetWinsServersOk returns a tuple with the WinsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetWinsServersOk() (*[]string, bool) {
	if o == nil || o.WinsServers == nil {
		return nil, false
	}
	return o.WinsServers, true
}

// HasWinsServers returns a boolean if a field has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) HasWinsServers() bool {
	if o != nil && o.WinsServers != nil {
		return true
	}

	return false
}

// SetWinsServers gets a reference to the given []string and assigns it to the WinsServers field.
func (o *VcenterVmGuestNetworkingInterfacesInfo) SetWinsServers(v []string) {
	o.WinsServers = &v
}

// GetNic returns the Nic field value if set, zero value otherwise.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetNic() string {
	if o == nil || o.Nic == nil {
		var ret string
		return ret
	}
	return *o.Nic
}

// GetNicOk returns a tuple with the Nic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) GetNicOk() (*string, bool) {
	if o == nil || o.Nic == nil {
		return nil, false
	}
	return o.Nic, true
}

// HasNic returns a boolean if a field has been set.
func (o *VcenterVmGuestNetworkingInterfacesInfo) HasNic() bool {
	if o != nil && o.Nic != nil {
		return true
	}

	return false
}

// SetNic gets a reference to the given string and assigns it to the Nic field.
func (o *VcenterVmGuestNetworkingInterfacesInfo) SetNic(v string) {
	o.Nic = &v
}

func (o VcenterVmGuestNetworkingInterfacesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DnsValues != nil {
		toSerialize["dns_values"] = o.DnsValues
	}
	if o.MacAddress != nil {
		toSerialize["mac_address"] = o.MacAddress
	}
	if o.Dns != nil {
		toSerialize["dns"] = o.Dns
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.WinsServers != nil {
		toSerialize["wins_servers"] = o.WinsServers
	}
	if o.Nic != nil {
		toSerialize["nic"] = o.Nic
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestNetworkingInterfacesInfo struct {
	value *VcenterVmGuestNetworkingInterfacesInfo
	isSet bool
}

func (v NullableVcenterVmGuestNetworkingInterfacesInfo) Get() *VcenterVmGuestNetworkingInterfacesInfo {
	return v.value
}

func (v *NullableVcenterVmGuestNetworkingInterfacesInfo) Set(val *VcenterVmGuestNetworkingInterfacesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestNetworkingInterfacesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestNetworkingInterfacesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestNetworkingInterfacesInfo(val *VcenterVmGuestNetworkingInterfacesInfo) *NullableVcenterVmGuestNetworkingInterfacesInfo {
	return &NullableVcenterVmGuestNetworkingInterfacesInfo{value: val, isSet: true}
}

func (v NullableVcenterVmGuestNetworkingInterfacesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestNetworkingInterfacesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


