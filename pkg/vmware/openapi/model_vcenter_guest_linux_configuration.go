/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestLinuxConfiguration struct for VcenterGuestLinuxConfiguration
type VcenterGuestLinuxConfiguration struct {
	Hostname VcenterGuestHostnameGenerator `json:"hostname"`
	// The fully qualified domain name.
	Domain string `json:"domain"`
	// The case-sensitive time zone, such as Europe/Sofia. Valid time zone values are based on the tz (time zone) database used by Linux. The values are strings (string) in the form \"Area/Location,\" in which Area is a continent or ocean name, and Location is the city, island, or other regional designation.   See the https://kb.vmware.com/kb/2145518 for a list of supported time zones for different versions in Linux.  If unset, time zone is not modified inside guest operating system.
	TimeZone *string `json:"time_zone,omitempty"`
	// The script to run before and after Linux guest customization.  The max size of the script is 1500 bytes. As long as the script (shell, perl, python...) has the right \"#!\" in the header, it is supported. The caller should not assume any environment variables when the script is run.   The script is invoked by the customization engine using the command line: 1) with argument \"precustomization\" before customization, 2) with argument \"postcustomization\" after customization. The script should parse this argument and implement pre-customization or post-customization task code details in the corresponding block.    A Linux shell script example:     #!/bin/sh  if [ x$1 == x\"precustomization\" ]; then  echo \"Do Precustomization tasks\"  #code for pre-customization actions...  elif [ x$1 == x\"postcustomization\" ]; then  echo \"Do Postcustomization tasks\"  #code for post-customization actions...  fi    If unset, no script will be executed.
	ScriptText *string `json:"script_text,omitempty"`
}

// NewVcenterGuestLinuxConfiguration instantiates a new VcenterGuestLinuxConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestLinuxConfiguration(hostname VcenterGuestHostnameGenerator, domain string) *VcenterGuestLinuxConfiguration {
	this := VcenterGuestLinuxConfiguration{}
	this.Hostname = hostname
	this.Domain = domain
	return &this
}

// NewVcenterGuestLinuxConfigurationWithDefaults instantiates a new VcenterGuestLinuxConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestLinuxConfigurationWithDefaults() *VcenterGuestLinuxConfiguration {
	this := VcenterGuestLinuxConfiguration{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *VcenterGuestLinuxConfiguration) GetHostname() VcenterGuestHostnameGenerator {
	if o == nil {
		var ret VcenterGuestHostnameGenerator
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *VcenterGuestLinuxConfiguration) GetHostnameOk() (*VcenterGuestHostnameGenerator, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *VcenterGuestLinuxConfiguration) SetHostname(v VcenterGuestHostnameGenerator) {
	o.Hostname = v
}

// GetDomain returns the Domain field value
func (o *VcenterGuestLinuxConfiguration) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *VcenterGuestLinuxConfiguration) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *VcenterGuestLinuxConfiguration) SetDomain(v string) {
	o.Domain = v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *VcenterGuestLinuxConfiguration) GetTimeZone() string {
	if o == nil || o.TimeZone == nil {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestLinuxConfiguration) GetTimeZoneOk() (*string, bool) {
	if o == nil || o.TimeZone == nil {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *VcenterGuestLinuxConfiguration) HasTimeZone() bool {
	if o != nil && o.TimeZone != nil {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *VcenterGuestLinuxConfiguration) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetScriptText returns the ScriptText field value if set, zero value otherwise.
func (o *VcenterGuestLinuxConfiguration) GetScriptText() string {
	if o == nil || o.ScriptText == nil {
		var ret string
		return ret
	}
	return *o.ScriptText
}

// GetScriptTextOk returns a tuple with the ScriptText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestLinuxConfiguration) GetScriptTextOk() (*string, bool) {
	if o == nil || o.ScriptText == nil {
		return nil, false
	}
	return o.ScriptText, true
}

// HasScriptText returns a boolean if a field has been set.
func (o *VcenterGuestLinuxConfiguration) HasScriptText() bool {
	if o != nil && o.ScriptText != nil {
		return true
	}

	return false
}

// SetScriptText gets a reference to the given string and assigns it to the ScriptText field.
func (o *VcenterGuestLinuxConfiguration) SetScriptText(v string) {
	o.ScriptText = &v
}

func (o VcenterGuestLinuxConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if true {
		toSerialize["domain"] = o.Domain
	}
	if o.TimeZone != nil {
		toSerialize["time_zone"] = o.TimeZone
	}
	if o.ScriptText != nil {
		toSerialize["script_text"] = o.ScriptText
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestLinuxConfiguration struct {
	value *VcenterGuestLinuxConfiguration
	isSet bool
}

func (v NullableVcenterGuestLinuxConfiguration) Get() *VcenterGuestLinuxConfiguration {
	return v.value
}

func (v *NullableVcenterGuestLinuxConfiguration) Set(val *VcenterGuestLinuxConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestLinuxConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestLinuxConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestLinuxConfiguration(val *VcenterGuestLinuxConfiguration) *NullableVcenterGuestLinuxConfiguration {
	return &NullableVcenterGuestLinuxConfiguration{value: val, isSet: true}
}

func (v NullableVcenterGuestLinuxConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestLinuxConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


