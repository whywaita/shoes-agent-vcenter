/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClustersIpv4Range struct for VcenterNamespaceManagementClustersIpv4Range
type VcenterNamespaceManagementClustersIpv4Range struct {
	// The IPv4 address denoting the start of the range.
	StartingAddress string `json:"starting_address"`
	// The number of IP addresses in the range. Addresses are derived by incrementing Clusters.Ipv4Range.starting-address.
	AddressCount int64 `json:"address_count"`
	// Subnet mask to be set.
	SubnetMask string `json:"subnet_mask"`
	// The IPv4 address of the gateway associated with the range indicated by Clusters.Ipv4Range.starting-address and Clusters.Ipv4Range.address-count.
	Gateway string `json:"gateway"`
}

// NewVcenterNamespaceManagementClustersIpv4Range instantiates a new VcenterNamespaceManagementClustersIpv4Range object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClustersIpv4Range(startingAddress string, addressCount int64, subnetMask string, gateway string) *VcenterNamespaceManagementClustersIpv4Range {
	this := VcenterNamespaceManagementClustersIpv4Range{}
	this.StartingAddress = startingAddress
	this.AddressCount = addressCount
	this.SubnetMask = subnetMask
	this.Gateway = gateway
	return &this
}

// NewVcenterNamespaceManagementClustersIpv4RangeWithDefaults instantiates a new VcenterNamespaceManagementClustersIpv4Range object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClustersIpv4RangeWithDefaults() *VcenterNamespaceManagementClustersIpv4Range {
	this := VcenterNamespaceManagementClustersIpv4Range{}
	return &this
}

// GetStartingAddress returns the StartingAddress field value
func (o *VcenterNamespaceManagementClustersIpv4Range) GetStartingAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartingAddress
}

// GetStartingAddressOk returns a tuple with the StartingAddress field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersIpv4Range) GetStartingAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartingAddress, true
}

// SetStartingAddress sets field value
func (o *VcenterNamespaceManagementClustersIpv4Range) SetStartingAddress(v string) {
	o.StartingAddress = v
}

// GetAddressCount returns the AddressCount field value
func (o *VcenterNamespaceManagementClustersIpv4Range) GetAddressCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AddressCount
}

// GetAddressCountOk returns a tuple with the AddressCount field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersIpv4Range) GetAddressCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AddressCount, true
}

// SetAddressCount sets field value
func (o *VcenterNamespaceManagementClustersIpv4Range) SetAddressCount(v int64) {
	o.AddressCount = v
}

// GetSubnetMask returns the SubnetMask field value
func (o *VcenterNamespaceManagementClustersIpv4Range) GetSubnetMask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersIpv4Range) GetSubnetMaskOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SubnetMask, true
}

// SetSubnetMask sets field value
func (o *VcenterNamespaceManagementClustersIpv4Range) SetSubnetMask(v string) {
	o.SubnetMask = v
}

// GetGateway returns the Gateway field value
func (o *VcenterNamespaceManagementClustersIpv4Range) GetGateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersIpv4Range) GetGatewayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Gateway, true
}

// SetGateway sets field value
func (o *VcenterNamespaceManagementClustersIpv4Range) SetGateway(v string) {
	o.Gateway = v
}

func (o VcenterNamespaceManagementClustersIpv4Range) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["starting_address"] = o.StartingAddress
	}
	if true {
		toSerialize["address_count"] = o.AddressCount
	}
	if true {
		toSerialize["subnet_mask"] = o.SubnetMask
	}
	if true {
		toSerialize["gateway"] = o.Gateway
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClustersIpv4Range struct {
	value *VcenterNamespaceManagementClustersIpv4Range
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersIpv4Range) Get() *VcenterNamespaceManagementClustersIpv4Range {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersIpv4Range) Set(val *VcenterNamespaceManagementClustersIpv4Range) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersIpv4Range) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersIpv4Range) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersIpv4Range(val *VcenterNamespaceManagementClustersIpv4Range) *NullableVcenterNamespaceManagementClustersIpv4Range {
	return &NullableVcenterNamespaceManagementClustersIpv4Range{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersIpv4Range) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersIpv4Range) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


