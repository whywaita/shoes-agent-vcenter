/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareUpgradeStatus The Hardware.UpgradeStatus enumerated type defines the valid virtual hardware upgrade statuses for a virtual machine.
type VcenterVmHardwareUpgradeStatus string

// List of vcenter.vm.hardware.upgrade_status
const (
	VCENTERVMHARDWAREUPGRADESTATUS_NONE VcenterVmHardwareUpgradeStatus = "NONE"
	VCENTERVMHARDWAREUPGRADESTATUS_PENDING VcenterVmHardwareUpgradeStatus = "PENDING"
	VCENTERVMHARDWAREUPGRADESTATUS_SUCCESS VcenterVmHardwareUpgradeStatus = "SUCCESS"
	VCENTERVMHARDWAREUPGRADESTATUS_FAILED VcenterVmHardwareUpgradeStatus = "FAILED"
)

// All allowed values of VcenterVmHardwareUpgradeStatus enum
var AllowedVcenterVmHardwareUpgradeStatusEnumValues = []VcenterVmHardwareUpgradeStatus{
	"NONE",
	"PENDING",
	"SUCCESS",
	"FAILED",
}

func (v *VcenterVmHardwareUpgradeStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareUpgradeStatus(value)
	for _, existing := range AllowedVcenterVmHardwareUpgradeStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareUpgradeStatus", value)
}

// NewVcenterVmHardwareUpgradeStatusFromValue returns a pointer to a valid VcenterVmHardwareUpgradeStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareUpgradeStatusFromValue(v string) (*VcenterVmHardwareUpgradeStatus, error) {
	ev := VcenterVmHardwareUpgradeStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareUpgradeStatus: valid values are %v", v, AllowedVcenterVmHardwareUpgradeStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareUpgradeStatus) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareUpgradeStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.upgrade_status value
func (v VcenterVmHardwareUpgradeStatus) Ptr() *VcenterVmHardwareUpgradeStatus {
	return &v
}

type NullableVcenterVmHardwareUpgradeStatus struct {
	value *VcenterVmHardwareUpgradeStatus
	isSet bool
}

func (v NullableVcenterVmHardwareUpgradeStatus) Get() *VcenterVmHardwareUpgradeStatus {
	return v.value
}

func (v *NullableVcenterVmHardwareUpgradeStatus) Set(val *VcenterVmHardwareUpgradeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareUpgradeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareUpgradeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareUpgradeStatus(val *VcenterVmHardwareUpgradeStatus) *NullableVcenterVmHardwareUpgradeStatus {
	return &NullableVcenterVmHardwareUpgradeStatus{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareUpgradeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareUpgradeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

