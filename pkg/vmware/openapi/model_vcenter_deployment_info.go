/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// VcenterDeploymentInfo struct for VcenterDeploymentInfo
type VcenterDeploymentInfo struct {
	State VcenterDeploymentApplianceState `json:"state"`
	Progress *CisTaskProgress `json:"progress,omitempty"`
	// The ordered list of subtasks for this deployment operation. Only set when the appliance state is RUNNING_IN_PROGRESS, FAILED, CANCELLED and SUCCEEDED.
	SubtaskOrder *[]string `json:"subtask_order,omitempty"`
	// The map of the deployment subtasks and their status infomation. Only set when the appliance state is RUNNING_IN_PROGRESS, FAILED, CANCELLED and SUCCEEDED.
	Subtasks *[]VcenterDeploymentInfoSubtasks `json:"subtasks,omitempty"`
	Description VapiStdLocalizableMessage `json:"description"`
	// Identifier of the service containing the operation. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vapi.service. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vapi.service.
	Service string `json:"service"`
	// Identifier of the operation associated with the task. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vapi.operation. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vapi.operation.
	Operation string `json:"operation"`
	// Parent of the current task. This field will be unset if the task has no parent. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: cis.task. When operations return a value of this structure as a result, the field will be an identifier for the resource type: cis.task.
	Parent *string `json:"parent,omitempty"`
	Target *VapiStdDynamicID `json:"target,omitempty"`
	Status CisTaskStatus `json:"status"`
	// Flag to indicate whether or not the operation can be cancelled. The value may change as the operation progresses.
	Cancelable bool `json:"cancelable"`
	// Description of the error if the operation status is \"FAILED\". If unset the description of why the operation failed will be included in the result of the operation (see Info.result).
	Error *string `json:"error,omitempty"`
	// Time when the operation is started. This field is optional and it is only relevant when the value of CommonInfo.status is one of RUNNING, BLOCKED, SUCCEEDED, or FAILED.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Time when the operation is completed. This field is optional and it is only relevant when the value of CommonInfo.status is one of SUCCEEDED or FAILED.
	EndTime *time.Time `json:"end_time,omitempty"`
	// Name of the user who performed the operation. This field will be unset if the operation is performed by the system.
	User *string `json:"user,omitempty"`
}

// NewVcenterDeploymentInfo instantiates a new VcenterDeploymentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentInfo(state VcenterDeploymentApplianceState, description VapiStdLocalizableMessage, service string, operation string, status CisTaskStatus, cancelable bool) *VcenterDeploymentInfo {
	this := VcenterDeploymentInfo{}
	this.State = state
	this.Description = description
	this.Service = service
	this.Operation = operation
	this.Status = status
	this.Cancelable = cancelable
	return &this
}

// NewVcenterDeploymentInfoWithDefaults instantiates a new VcenterDeploymentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentInfoWithDefaults() *VcenterDeploymentInfo {
	this := VcenterDeploymentInfo{}
	return &this
}

// GetState returns the State field value
func (o *VcenterDeploymentInfo) GetState() VcenterDeploymentApplianceState {
	if o == nil {
		var ret VcenterDeploymentApplianceState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetStateOk() (*VcenterDeploymentApplianceState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VcenterDeploymentInfo) SetState(v VcenterDeploymentApplianceState) {
	o.State = v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *VcenterDeploymentInfo) GetProgress() CisTaskProgress {
	if o == nil || o.Progress == nil {
		var ret CisTaskProgress
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetProgressOk() (*CisTaskProgress, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *VcenterDeploymentInfo) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given CisTaskProgress and assigns it to the Progress field.
func (o *VcenterDeploymentInfo) SetProgress(v CisTaskProgress) {
	o.Progress = &v
}

// GetSubtaskOrder returns the SubtaskOrder field value if set, zero value otherwise.
func (o *VcenterDeploymentInfo) GetSubtaskOrder() []string {
	if o == nil || o.SubtaskOrder == nil {
		var ret []string
		return ret
	}
	return *o.SubtaskOrder
}

// GetSubtaskOrderOk returns a tuple with the SubtaskOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetSubtaskOrderOk() (*[]string, bool) {
	if o == nil || o.SubtaskOrder == nil {
		return nil, false
	}
	return o.SubtaskOrder, true
}

// HasSubtaskOrder returns a boolean if a field has been set.
func (o *VcenterDeploymentInfo) HasSubtaskOrder() bool {
	if o != nil && o.SubtaskOrder != nil {
		return true
	}

	return false
}

// SetSubtaskOrder gets a reference to the given []string and assigns it to the SubtaskOrder field.
func (o *VcenterDeploymentInfo) SetSubtaskOrder(v []string) {
	o.SubtaskOrder = &v
}

// GetSubtasks returns the Subtasks field value if set, zero value otherwise.
func (o *VcenterDeploymentInfo) GetSubtasks() []VcenterDeploymentInfoSubtasks {
	if o == nil || o.Subtasks == nil {
		var ret []VcenterDeploymentInfoSubtasks
		return ret
	}
	return *o.Subtasks
}

// GetSubtasksOk returns a tuple with the Subtasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetSubtasksOk() (*[]VcenterDeploymentInfoSubtasks, bool) {
	if o == nil || o.Subtasks == nil {
		return nil, false
	}
	return o.Subtasks, true
}

// HasSubtasks returns a boolean if a field has been set.
func (o *VcenterDeploymentInfo) HasSubtasks() bool {
	if o != nil && o.Subtasks != nil {
		return true
	}

	return false
}

// SetSubtasks gets a reference to the given []VcenterDeploymentInfoSubtasks and assigns it to the Subtasks field.
func (o *VcenterDeploymentInfo) SetSubtasks(v []VcenterDeploymentInfoSubtasks) {
	o.Subtasks = &v
}

// GetDescription returns the Description field value
func (o *VcenterDeploymentInfo) GetDescription() VapiStdLocalizableMessage {
	if o == nil {
		var ret VapiStdLocalizableMessage
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetDescriptionOk() (*VapiStdLocalizableMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *VcenterDeploymentInfo) SetDescription(v VapiStdLocalizableMessage) {
	o.Description = v
}

// GetService returns the Service field value
func (o *VcenterDeploymentInfo) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetServiceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *VcenterDeploymentInfo) SetService(v string) {
	o.Service = v
}

// GetOperation returns the Operation field value
func (o *VcenterDeploymentInfo) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetOperationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *VcenterDeploymentInfo) SetOperation(v string) {
	o.Operation = v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *VcenterDeploymentInfo) GetParent() string {
	if o == nil || o.Parent == nil {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetParentOk() (*string, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *VcenterDeploymentInfo) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *VcenterDeploymentInfo) SetParent(v string) {
	o.Parent = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *VcenterDeploymentInfo) GetTarget() VapiStdDynamicID {
	if o == nil || o.Target == nil {
		var ret VapiStdDynamicID
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetTargetOk() (*VapiStdDynamicID, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *VcenterDeploymentInfo) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given VapiStdDynamicID and assigns it to the Target field.
func (o *VcenterDeploymentInfo) SetTarget(v VapiStdDynamicID) {
	o.Target = &v
}

// GetStatus returns the Status field value
func (o *VcenterDeploymentInfo) GetStatus() CisTaskStatus {
	if o == nil {
		var ret CisTaskStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetStatusOk() (*CisTaskStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VcenterDeploymentInfo) SetStatus(v CisTaskStatus) {
	o.Status = v
}

// GetCancelable returns the Cancelable field value
func (o *VcenterDeploymentInfo) GetCancelable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Cancelable
}

// GetCancelableOk returns a tuple with the Cancelable field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetCancelableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cancelable, true
}

// SetCancelable sets field value
func (o *VcenterDeploymentInfo) SetCancelable(v bool) {
	o.Cancelable = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *VcenterDeploymentInfo) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *VcenterDeploymentInfo) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *VcenterDeploymentInfo) SetError(v string) {
	o.Error = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *VcenterDeploymentInfo) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *VcenterDeploymentInfo) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *VcenterDeploymentInfo) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *VcenterDeploymentInfo) GetEndTime() time.Time {
	if o == nil || o.EndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *VcenterDeploymentInfo) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *VcenterDeploymentInfo) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *VcenterDeploymentInfo) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInfo) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *VcenterDeploymentInfo) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *VcenterDeploymentInfo) SetUser(v string) {
	o.User = &v
}

func (o VcenterDeploymentInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}
	if o.Progress != nil {
		toSerialize["progress"] = o.Progress
	}
	if o.SubtaskOrder != nil {
		toSerialize["subtask_order"] = o.SubtaskOrder
	}
	if o.Subtasks != nil {
		toSerialize["subtasks"] = o.Subtasks
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["service"] = o.Service
	}
	if true {
		toSerialize["operation"] = o.Operation
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["cancelable"] = o.Cancelable
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.StartTime != nil {
		toSerialize["start_time"] = o.StartTime
	}
	if o.EndTime != nil {
		toSerialize["end_time"] = o.EndTime
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentInfo struct {
	value *VcenterDeploymentInfo
	isSet bool
}

func (v NullableVcenterDeploymentInfo) Get() *VcenterDeploymentInfo {
	return v.value
}

func (v *NullableVcenterDeploymentInfo) Set(val *VcenterDeploymentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentInfo(val *VcenterDeploymentInfo) *NullableVcenterDeploymentInfo {
	return &NullableVcenterDeploymentInfo{value: val, isSet: true}
}

func (v NullableVcenterDeploymentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


