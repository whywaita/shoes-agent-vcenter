/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareCdromBackingInfo struct for VcenterVmHardwareCdromBackingInfo
type VcenterVmHardwareCdromBackingInfo struct {
	Type VcenterVmHardwareCdromBackingType `json:"type"`
	// Path of the image file backing the virtual CD-ROM device. This field is optional and it is only relevant when the value of Cdrom.BackingInfo.type is ISO_FILE.
	IsoFile *string `json:"iso_file,omitempty"`
	// Name of the host device backing the virtual CD-ROM device.    This field will be unset if Cdrom.BackingInfo.auto-detect is true and the virtual CD-ROM device is not connected or no suitable device is available on the host.
	HostDevice *string `json:"host_device,omitempty"`
	// Flag indicating whether the virtual CD-ROM device is configured to automatically detect a suitable host device. This field is optional and it is only relevant when the value of Cdrom.BackingInfo.type is HOST_DEVICE.
	AutoDetect *bool `json:"auto_detect,omitempty"`
	DeviceAccessType *VcenterVmHardwareCdromDeviceAccessType `json:"device_access_type,omitempty"`
}

// NewVcenterVmHardwareCdromBackingInfo instantiates a new VcenterVmHardwareCdromBackingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareCdromBackingInfo(type_ VcenterVmHardwareCdromBackingType) *VcenterVmHardwareCdromBackingInfo {
	this := VcenterVmHardwareCdromBackingInfo{}
	this.Type = type_
	return &this
}

// NewVcenterVmHardwareCdromBackingInfoWithDefaults instantiates a new VcenterVmHardwareCdromBackingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareCdromBackingInfoWithDefaults() *VcenterVmHardwareCdromBackingInfo {
	this := VcenterVmHardwareCdromBackingInfo{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterVmHardwareCdromBackingInfo) GetType() VcenterVmHardwareCdromBackingType {
	if o == nil {
		var ret VcenterVmHardwareCdromBackingType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromBackingInfo) GetTypeOk() (*VcenterVmHardwareCdromBackingType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmHardwareCdromBackingInfo) SetType(v VcenterVmHardwareCdromBackingType) {
	o.Type = v
}

// GetIsoFile returns the IsoFile field value if set, zero value otherwise.
func (o *VcenterVmHardwareCdromBackingInfo) GetIsoFile() string {
	if o == nil || o.IsoFile == nil {
		var ret string
		return ret
	}
	return *o.IsoFile
}

// GetIsoFileOk returns a tuple with the IsoFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromBackingInfo) GetIsoFileOk() (*string, bool) {
	if o == nil || o.IsoFile == nil {
		return nil, false
	}
	return o.IsoFile, true
}

// HasIsoFile returns a boolean if a field has been set.
func (o *VcenterVmHardwareCdromBackingInfo) HasIsoFile() bool {
	if o != nil && o.IsoFile != nil {
		return true
	}

	return false
}

// SetIsoFile gets a reference to the given string and assigns it to the IsoFile field.
func (o *VcenterVmHardwareCdromBackingInfo) SetIsoFile(v string) {
	o.IsoFile = &v
}

// GetHostDevice returns the HostDevice field value if set, zero value otherwise.
func (o *VcenterVmHardwareCdromBackingInfo) GetHostDevice() string {
	if o == nil || o.HostDevice == nil {
		var ret string
		return ret
	}
	return *o.HostDevice
}

// GetHostDeviceOk returns a tuple with the HostDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromBackingInfo) GetHostDeviceOk() (*string, bool) {
	if o == nil || o.HostDevice == nil {
		return nil, false
	}
	return o.HostDevice, true
}

// HasHostDevice returns a boolean if a field has been set.
func (o *VcenterVmHardwareCdromBackingInfo) HasHostDevice() bool {
	if o != nil && o.HostDevice != nil {
		return true
	}

	return false
}

// SetHostDevice gets a reference to the given string and assigns it to the HostDevice field.
func (o *VcenterVmHardwareCdromBackingInfo) SetHostDevice(v string) {
	o.HostDevice = &v
}

// GetAutoDetect returns the AutoDetect field value if set, zero value otherwise.
func (o *VcenterVmHardwareCdromBackingInfo) GetAutoDetect() bool {
	if o == nil || o.AutoDetect == nil {
		var ret bool
		return ret
	}
	return *o.AutoDetect
}

// GetAutoDetectOk returns a tuple with the AutoDetect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromBackingInfo) GetAutoDetectOk() (*bool, bool) {
	if o == nil || o.AutoDetect == nil {
		return nil, false
	}
	return o.AutoDetect, true
}

// HasAutoDetect returns a boolean if a field has been set.
func (o *VcenterVmHardwareCdromBackingInfo) HasAutoDetect() bool {
	if o != nil && o.AutoDetect != nil {
		return true
	}

	return false
}

// SetAutoDetect gets a reference to the given bool and assigns it to the AutoDetect field.
func (o *VcenterVmHardwareCdromBackingInfo) SetAutoDetect(v bool) {
	o.AutoDetect = &v
}

// GetDeviceAccessType returns the DeviceAccessType field value if set, zero value otherwise.
func (o *VcenterVmHardwareCdromBackingInfo) GetDeviceAccessType() VcenterVmHardwareCdromDeviceAccessType {
	if o == nil || o.DeviceAccessType == nil {
		var ret VcenterVmHardwareCdromDeviceAccessType
		return ret
	}
	return *o.DeviceAccessType
}

// GetDeviceAccessTypeOk returns a tuple with the DeviceAccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromBackingInfo) GetDeviceAccessTypeOk() (*VcenterVmHardwareCdromDeviceAccessType, bool) {
	if o == nil || o.DeviceAccessType == nil {
		return nil, false
	}
	return o.DeviceAccessType, true
}

// HasDeviceAccessType returns a boolean if a field has been set.
func (o *VcenterVmHardwareCdromBackingInfo) HasDeviceAccessType() bool {
	if o != nil && o.DeviceAccessType != nil {
		return true
	}

	return false
}

// SetDeviceAccessType gets a reference to the given VcenterVmHardwareCdromDeviceAccessType and assigns it to the DeviceAccessType field.
func (o *VcenterVmHardwareCdromBackingInfo) SetDeviceAccessType(v VcenterVmHardwareCdromDeviceAccessType) {
	o.DeviceAccessType = &v
}

func (o VcenterVmHardwareCdromBackingInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.IsoFile != nil {
		toSerialize["iso_file"] = o.IsoFile
	}
	if o.HostDevice != nil {
		toSerialize["host_device"] = o.HostDevice
	}
	if o.AutoDetect != nil {
		toSerialize["auto_detect"] = o.AutoDetect
	}
	if o.DeviceAccessType != nil {
		toSerialize["device_access_type"] = o.DeviceAccessType
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareCdromBackingInfo struct {
	value *VcenterVmHardwareCdromBackingInfo
	isSet bool
}

func (v NullableVcenterVmHardwareCdromBackingInfo) Get() *VcenterVmHardwareCdromBackingInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareCdromBackingInfo) Set(val *VcenterVmHardwareCdromBackingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareCdromBackingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareCdromBackingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareCdromBackingInfo(val *VcenterVmHardwareCdromBackingInfo) *NullableVcenterVmHardwareCdromBackingInfo {
	return &NullableVcenterVmHardwareCdromBackingInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareCdromBackingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareCdromBackingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


