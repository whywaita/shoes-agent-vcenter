/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterOvfExportFlagInfo struct for VcenterOvfExportFlagInfo
type VcenterOvfExportFlagInfo struct {
	// The name of the export flag that is supported by the server.
	Option string `json:"option"`
	Description VapiStdLocalizableMessage `json:"description"`
}

// NewVcenterOvfExportFlagInfo instantiates a new VcenterOvfExportFlagInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterOvfExportFlagInfo(option string, description VapiStdLocalizableMessage) *VcenterOvfExportFlagInfo {
	this := VcenterOvfExportFlagInfo{}
	this.Option = option
	this.Description = description
	return &this
}

// NewVcenterOvfExportFlagInfoWithDefaults instantiates a new VcenterOvfExportFlagInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterOvfExportFlagInfoWithDefaults() *VcenterOvfExportFlagInfo {
	this := VcenterOvfExportFlagInfo{}
	return &this
}

// GetOption returns the Option field value
func (o *VcenterOvfExportFlagInfo) GetOption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Option
}

// GetOptionOk returns a tuple with the Option field value
// and a boolean to check if the value has been set.
func (o *VcenterOvfExportFlagInfo) GetOptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Option, true
}

// SetOption sets field value
func (o *VcenterOvfExportFlagInfo) SetOption(v string) {
	o.Option = v
}

// GetDescription returns the Description field value
func (o *VcenterOvfExportFlagInfo) GetDescription() VapiStdLocalizableMessage {
	if o == nil {
		var ret VapiStdLocalizableMessage
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *VcenterOvfExportFlagInfo) GetDescriptionOk() (*VapiStdLocalizableMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *VcenterOvfExportFlagInfo) SetDescription(v VapiStdLocalizableMessage) {
	o.Description = v
}

func (o VcenterOvfExportFlagInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["option"] = o.Option
	}
	if true {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterOvfExportFlagInfo struct {
	value *VcenterOvfExportFlagInfo
	isSet bool
}

func (v NullableVcenterOvfExportFlagInfo) Get() *VcenterOvfExportFlagInfo {
	return v.value
}

func (v *NullableVcenterOvfExportFlagInfo) Set(val *VcenterOvfExportFlagInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterOvfExportFlagInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterOvfExportFlagInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterOvfExportFlagInfo(val *VcenterOvfExportFlagInfo) *NullableVcenterOvfExportFlagInfo {
	return &NullableVcenterOvfExportFlagInfo{value: val, isSet: true}
}

func (v NullableVcenterOvfExportFlagInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterOvfExportFlagInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


