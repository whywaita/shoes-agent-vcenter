/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementStatsTimeSeriesPodIdentifier struct for VcenterNamespaceManagementStatsTimeSeriesPodIdentifier
type VcenterNamespaceManagementStatsTimeSeriesPodIdentifier struct {
	// The namespace that the pod is running in. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.
	Namespace string `json:"namespace"`
	// The name of the pod itself.
	PodName string `json:"pod_name"`
}

// NewVcenterNamespaceManagementStatsTimeSeriesPodIdentifier instantiates a new VcenterNamespaceManagementStatsTimeSeriesPodIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementStatsTimeSeriesPodIdentifier(namespace string, podName string) *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier {
	this := VcenterNamespaceManagementStatsTimeSeriesPodIdentifier{}
	this.Namespace = namespace
	this.PodName = podName
	return &this
}

// NewVcenterNamespaceManagementStatsTimeSeriesPodIdentifierWithDefaults instantiates a new VcenterNamespaceManagementStatsTimeSeriesPodIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementStatsTimeSeriesPodIdentifierWithDefaults() *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier {
	this := VcenterNamespaceManagementStatsTimeSeriesPodIdentifier{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier) GetNamespaceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier) SetNamespace(v string) {
	o.Namespace = v
}

// GetPodName returns the PodName field value
func (o *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier) GetPodName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PodName
}

// GetPodNameOk returns a tuple with the PodName field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier) GetPodNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PodName, true
}

// SetPodName sets field value
func (o *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier) SetPodName(v string) {
	o.PodName = v
}

func (o VcenterNamespaceManagementStatsTimeSeriesPodIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["namespace"] = o.Namespace
	}
	if true {
		toSerialize["pod_name"] = o.PodName
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementStatsTimeSeriesPodIdentifier struct {
	value *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier
	isSet bool
}

func (v NullableVcenterNamespaceManagementStatsTimeSeriesPodIdentifier) Get() *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier {
	return v.value
}

func (v *NullableVcenterNamespaceManagementStatsTimeSeriesPodIdentifier) Set(val *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementStatsTimeSeriesPodIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementStatsTimeSeriesPodIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementStatsTimeSeriesPodIdentifier(val *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier) *NullableVcenterNamespaceManagementStatsTimeSeriesPodIdentifier {
	return &NullableVcenterNamespaceManagementStatsTimeSeriesPodIdentifier{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementStatsTimeSeriesPodIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementStatsTimeSeriesPodIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


