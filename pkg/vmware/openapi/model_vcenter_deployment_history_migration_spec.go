/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentHistoryMigrationSpec struct for VcenterDeploymentHistoryMigrationSpec
type VcenterDeploymentHistoryMigrationSpec struct {
	DataSet VcenterDeploymentHistoryMigrationOption `json:"data_set"`
	// Defines how vCenter history will be migrated. If set to true, vCenter history will be migrated separately after successful upgrade(supported scenarios are upgrade from 6.0 or 6.5 to 6.7) or migration, otherwise it will be migrated along with core data during the upgrade or migration process. vCSA upgrade with deferred import is no longer supported for target version 7.0 and later. If unset, vCenter historical data won't be deferred and will be migrated along with core data.
	DeferImport *bool `json:"defer_import,omitempty"`
}

// NewVcenterDeploymentHistoryMigrationSpec instantiates a new VcenterDeploymentHistoryMigrationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentHistoryMigrationSpec(dataSet VcenterDeploymentHistoryMigrationOption) *VcenterDeploymentHistoryMigrationSpec {
	this := VcenterDeploymentHistoryMigrationSpec{}
	this.DataSet = dataSet
	return &this
}

// NewVcenterDeploymentHistoryMigrationSpecWithDefaults instantiates a new VcenterDeploymentHistoryMigrationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentHistoryMigrationSpecWithDefaults() *VcenterDeploymentHistoryMigrationSpec {
	this := VcenterDeploymentHistoryMigrationSpec{}
	return &this
}

// GetDataSet returns the DataSet field value
func (o *VcenterDeploymentHistoryMigrationSpec) GetDataSet() VcenterDeploymentHistoryMigrationOption {
	if o == nil {
		var ret VcenterDeploymentHistoryMigrationOption
		return ret
	}

	return o.DataSet
}

// GetDataSetOk returns a tuple with the DataSet field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentHistoryMigrationSpec) GetDataSetOk() (*VcenterDeploymentHistoryMigrationOption, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DataSet, true
}

// SetDataSet sets field value
func (o *VcenterDeploymentHistoryMigrationSpec) SetDataSet(v VcenterDeploymentHistoryMigrationOption) {
	o.DataSet = v
}

// GetDeferImport returns the DeferImport field value if set, zero value otherwise.
func (o *VcenterDeploymentHistoryMigrationSpec) GetDeferImport() bool {
	if o == nil || o.DeferImport == nil {
		var ret bool
		return ret
	}
	return *o.DeferImport
}

// GetDeferImportOk returns a tuple with the DeferImport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentHistoryMigrationSpec) GetDeferImportOk() (*bool, bool) {
	if o == nil || o.DeferImport == nil {
		return nil, false
	}
	return o.DeferImport, true
}

// HasDeferImport returns a boolean if a field has been set.
func (o *VcenterDeploymentHistoryMigrationSpec) HasDeferImport() bool {
	if o != nil && o.DeferImport != nil {
		return true
	}

	return false
}

// SetDeferImport gets a reference to the given bool and assigns it to the DeferImport field.
func (o *VcenterDeploymentHistoryMigrationSpec) SetDeferImport(v bool) {
	o.DeferImport = &v
}

func (o VcenterDeploymentHistoryMigrationSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data_set"] = o.DataSet
	}
	if o.DeferImport != nil {
		toSerialize["defer_import"] = o.DeferImport
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentHistoryMigrationSpec struct {
	value *VcenterDeploymentHistoryMigrationSpec
	isSet bool
}

func (v NullableVcenterDeploymentHistoryMigrationSpec) Get() *VcenterDeploymentHistoryMigrationSpec {
	return v.value
}

func (v *NullableVcenterDeploymentHistoryMigrationSpec) Set(val *VcenterDeploymentHistoryMigrationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentHistoryMigrationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentHistoryMigrationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentHistoryMigrationSpec(val *VcenterDeploymentHistoryMigrationSpec) *NullableVcenterDeploymentHistoryMigrationSpec {
	return &NullableVcenterDeploymentHistoryMigrationSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentHistoryMigrationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentHistoryMigrationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


