/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterResourcePoolUpdateSpec struct for VcenterResourcePoolUpdateSpec
type VcenterResourcePoolUpdateSpec struct {
	// Name of the resource pool. if unset or empty, the name of the resource pool will not be changed.
	Name *string `json:"name,omitempty"`
	CpuAllocation *VcenterResourcePoolResourceAllocationUpdateSpec `json:"cpu_allocation,omitempty"`
	MemoryAllocation *VcenterResourcePoolResourceAllocationUpdateSpec `json:"memory_allocation,omitempty"`
}

// NewVcenterResourcePoolUpdateSpec instantiates a new VcenterResourcePoolUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterResourcePoolUpdateSpec() *VcenterResourcePoolUpdateSpec {
	this := VcenterResourcePoolUpdateSpec{}
	return &this
}

// NewVcenterResourcePoolUpdateSpecWithDefaults instantiates a new VcenterResourcePoolUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterResourcePoolUpdateSpecWithDefaults() *VcenterResourcePoolUpdateSpec {
	this := VcenterResourcePoolUpdateSpec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VcenterResourcePoolUpdateSpec) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterResourcePoolUpdateSpec) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VcenterResourcePoolUpdateSpec) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VcenterResourcePoolUpdateSpec) SetName(v string) {
	o.Name = &v
}

// GetCpuAllocation returns the CpuAllocation field value if set, zero value otherwise.
func (o *VcenterResourcePoolUpdateSpec) GetCpuAllocation() VcenterResourcePoolResourceAllocationUpdateSpec {
	if o == nil || o.CpuAllocation == nil {
		var ret VcenterResourcePoolResourceAllocationUpdateSpec
		return ret
	}
	return *o.CpuAllocation
}

// GetCpuAllocationOk returns a tuple with the CpuAllocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterResourcePoolUpdateSpec) GetCpuAllocationOk() (*VcenterResourcePoolResourceAllocationUpdateSpec, bool) {
	if o == nil || o.CpuAllocation == nil {
		return nil, false
	}
	return o.CpuAllocation, true
}

// HasCpuAllocation returns a boolean if a field has been set.
func (o *VcenterResourcePoolUpdateSpec) HasCpuAllocation() bool {
	if o != nil && o.CpuAllocation != nil {
		return true
	}

	return false
}

// SetCpuAllocation gets a reference to the given VcenterResourcePoolResourceAllocationUpdateSpec and assigns it to the CpuAllocation field.
func (o *VcenterResourcePoolUpdateSpec) SetCpuAllocation(v VcenterResourcePoolResourceAllocationUpdateSpec) {
	o.CpuAllocation = &v
}

// GetMemoryAllocation returns the MemoryAllocation field value if set, zero value otherwise.
func (o *VcenterResourcePoolUpdateSpec) GetMemoryAllocation() VcenterResourcePoolResourceAllocationUpdateSpec {
	if o == nil || o.MemoryAllocation == nil {
		var ret VcenterResourcePoolResourceAllocationUpdateSpec
		return ret
	}
	return *o.MemoryAllocation
}

// GetMemoryAllocationOk returns a tuple with the MemoryAllocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterResourcePoolUpdateSpec) GetMemoryAllocationOk() (*VcenterResourcePoolResourceAllocationUpdateSpec, bool) {
	if o == nil || o.MemoryAllocation == nil {
		return nil, false
	}
	return o.MemoryAllocation, true
}

// HasMemoryAllocation returns a boolean if a field has been set.
func (o *VcenterResourcePoolUpdateSpec) HasMemoryAllocation() bool {
	if o != nil && o.MemoryAllocation != nil {
		return true
	}

	return false
}

// SetMemoryAllocation gets a reference to the given VcenterResourcePoolResourceAllocationUpdateSpec and assigns it to the MemoryAllocation field.
func (o *VcenterResourcePoolUpdateSpec) SetMemoryAllocation(v VcenterResourcePoolResourceAllocationUpdateSpec) {
	o.MemoryAllocation = &v
}

func (o VcenterResourcePoolUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CpuAllocation != nil {
		toSerialize["cpu_allocation"] = o.CpuAllocation
	}
	if o.MemoryAllocation != nil {
		toSerialize["memory_allocation"] = o.MemoryAllocation
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterResourcePoolUpdateSpec struct {
	value *VcenterResourcePoolUpdateSpec
	isSet bool
}

func (v NullableVcenterResourcePoolUpdateSpec) Get() *VcenterResourcePoolUpdateSpec {
	return v.value
}

func (v *NullableVcenterResourcePoolUpdateSpec) Set(val *VcenterResourcePoolUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterResourcePoolUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterResourcePoolUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterResourcePoolUpdateSpec(val *VcenterResourcePoolUpdateSpec) *NullableVcenterResourcePoolUpdateSpec {
	return &NullableVcenterResourcePoolUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterResourcePoolUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterResourcePoolUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


