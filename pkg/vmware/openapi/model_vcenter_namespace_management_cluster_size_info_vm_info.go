/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClusterSizeInfoVmInfo struct for VcenterNamespaceManagementClusterSizeInfoVmInfo
type VcenterNamespaceManagementClusterSizeInfoVmInfo struct {
	// Number of CPU cores.
	Count int64 `json:"count"`
	// Number of CPU cores per socket.
	CoresPerSocket int64 `json:"cores_per_socket"`
	// Memory size, in mebibytes.
	Memory int64 `json:"memory"`
	// Overall capacity of the disks in the virtual machine, in mebibytes.
	Capacity int64 `json:"capacity"`
}

// NewVcenterNamespaceManagementClusterSizeInfoVmInfo instantiates a new VcenterNamespaceManagementClusterSizeInfoVmInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClusterSizeInfoVmInfo(count int64, coresPerSocket int64, memory int64, capacity int64) *VcenterNamespaceManagementClusterSizeInfoVmInfo {
	this := VcenterNamespaceManagementClusterSizeInfoVmInfo{}
	this.Count = count
	this.CoresPerSocket = coresPerSocket
	this.Memory = memory
	this.Capacity = capacity
	return &this
}

// NewVcenterNamespaceManagementClusterSizeInfoVmInfoWithDefaults instantiates a new VcenterNamespaceManagementClusterSizeInfoVmInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClusterSizeInfoVmInfoWithDefaults() *VcenterNamespaceManagementClusterSizeInfoVmInfo {
	this := VcenterNamespaceManagementClusterSizeInfoVmInfo{}
	return &this
}

// GetCount returns the Count field value
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) GetCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) SetCount(v int64) {
	o.Count = v
}

// GetCoresPerSocket returns the CoresPerSocket field value
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) GetCoresPerSocket() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CoresPerSocket
}

// GetCoresPerSocketOk returns a tuple with the CoresPerSocket field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) GetCoresPerSocketOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CoresPerSocket, true
}

// SetCoresPerSocket sets field value
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) SetCoresPerSocket(v int64) {
	o.CoresPerSocket = v
}

// GetMemory returns the Memory field value
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) GetMemory() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) GetMemoryOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) SetMemory(v int64) {
	o.Memory = v
}

// GetCapacity returns the Capacity field value
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) GetCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) GetCapacityOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *VcenterNamespaceManagementClusterSizeInfoVmInfo) SetCapacity(v int64) {
	o.Capacity = v
}

func (o VcenterNamespaceManagementClusterSizeInfoVmInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["cores_per_socket"] = o.CoresPerSocket
	}
	if true {
		toSerialize["memory"] = o.Memory
	}
	if true {
		toSerialize["capacity"] = o.Capacity
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClusterSizeInfoVmInfo struct {
	value *VcenterNamespaceManagementClusterSizeInfoVmInfo
	isSet bool
}

func (v NullableVcenterNamespaceManagementClusterSizeInfoVmInfo) Get() *VcenterNamespaceManagementClusterSizeInfoVmInfo {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClusterSizeInfoVmInfo) Set(val *VcenterNamespaceManagementClusterSizeInfoVmInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClusterSizeInfoVmInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClusterSizeInfoVmInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClusterSizeInfoVmInfo(val *VcenterNamespaceManagementClusterSizeInfoVmInfo) *NullableVcenterNamespaceManagementClusterSizeInfoVmInfo {
	return &NullableVcenterNamespaceManagementClusterSizeInfoVmInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClusterSizeInfoVmInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClusterSizeInfoVmInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


