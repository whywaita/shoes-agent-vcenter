/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementEdgeClusterCompatibilitySummary struct for VcenterNamespaceManagementEdgeClusterCompatibilitySummary
type VcenterNamespaceManagementEdgeClusterCompatibilitySummary struct {
	// Identifier of the Edge Cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: NSXEdgeCluster. When operations return a value of this structure as a result, the field will be an identifier for the resource type: NSXEdgeCluster.
	EdgeCluster string `json:"edge_cluster"`
	// Display name of the Edge Cluster.
	DisplayName string `json:"display_name"`
	// Compatibility of this Edge Cluster with Namespaces feature.
	Compatible bool `json:"compatible"`
	// List of reasons for incompatibility. If unset, this Edge Cluster is compatible.
	IncompatibilityReasons *[]VapiStdLocalizableMessage `json:"incompatibility_reasons,omitempty"`
}

// NewVcenterNamespaceManagementEdgeClusterCompatibilitySummary instantiates a new VcenterNamespaceManagementEdgeClusterCompatibilitySummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementEdgeClusterCompatibilitySummary(edgeCluster string, displayName string, compatible bool) *VcenterNamespaceManagementEdgeClusterCompatibilitySummary {
	this := VcenterNamespaceManagementEdgeClusterCompatibilitySummary{}
	this.EdgeCluster = edgeCluster
	this.DisplayName = displayName
	this.Compatible = compatible
	return &this
}

// NewVcenterNamespaceManagementEdgeClusterCompatibilitySummaryWithDefaults instantiates a new VcenterNamespaceManagementEdgeClusterCompatibilitySummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementEdgeClusterCompatibilitySummaryWithDefaults() *VcenterNamespaceManagementEdgeClusterCompatibilitySummary {
	this := VcenterNamespaceManagementEdgeClusterCompatibilitySummary{}
	return &this
}

// GetEdgeCluster returns the EdgeCluster field value
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) GetEdgeCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EdgeCluster
}

// GetEdgeClusterOk returns a tuple with the EdgeCluster field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) GetEdgeClusterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EdgeCluster, true
}

// SetEdgeCluster sets field value
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) SetEdgeCluster(v string) {
	o.EdgeCluster = v
}

// GetDisplayName returns the DisplayName field value
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetCompatible returns the Compatible field value
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) GetCompatible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Compatible
}

// GetCompatibleOk returns a tuple with the Compatible field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) GetCompatibleOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Compatible, true
}

// SetCompatible sets field value
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) SetCompatible(v bool) {
	o.Compatible = v
}

// GetIncompatibilityReasons returns the IncompatibilityReasons field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) GetIncompatibilityReasons() []VapiStdLocalizableMessage {
	if o == nil || o.IncompatibilityReasons == nil {
		var ret []VapiStdLocalizableMessage
		return ret
	}
	return *o.IncompatibilityReasons
}

// GetIncompatibilityReasonsOk returns a tuple with the IncompatibilityReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) GetIncompatibilityReasonsOk() (*[]VapiStdLocalizableMessage, bool) {
	if o == nil || o.IncompatibilityReasons == nil {
		return nil, false
	}
	return o.IncompatibilityReasons, true
}

// HasIncompatibilityReasons returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) HasIncompatibilityReasons() bool {
	if o != nil && o.IncompatibilityReasons != nil {
		return true
	}

	return false
}

// SetIncompatibilityReasons gets a reference to the given []VapiStdLocalizableMessage and assigns it to the IncompatibilityReasons field.
func (o *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) SetIncompatibilityReasons(v []VapiStdLocalizableMessage) {
	o.IncompatibilityReasons = &v
}

func (o VcenterNamespaceManagementEdgeClusterCompatibilitySummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["edge_cluster"] = o.EdgeCluster
	}
	if true {
		toSerialize["display_name"] = o.DisplayName
	}
	if true {
		toSerialize["compatible"] = o.Compatible
	}
	if o.IncompatibilityReasons != nil {
		toSerialize["incompatibility_reasons"] = o.IncompatibilityReasons
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementEdgeClusterCompatibilitySummary struct {
	value *VcenterNamespaceManagementEdgeClusterCompatibilitySummary
	isSet bool
}

func (v NullableVcenterNamespaceManagementEdgeClusterCompatibilitySummary) Get() *VcenterNamespaceManagementEdgeClusterCompatibilitySummary {
	return v.value
}

func (v *NullableVcenterNamespaceManagementEdgeClusterCompatibilitySummary) Set(val *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementEdgeClusterCompatibilitySummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementEdgeClusterCompatibilitySummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementEdgeClusterCompatibilitySummary(val *VcenterNamespaceManagementEdgeClusterCompatibilitySummary) *NullableVcenterNamespaceManagementEdgeClusterCompatibilitySummary {
	return &NullableVcenterNamespaceManagementEdgeClusterCompatibilitySummary{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementEdgeClusterCompatibilitySummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementEdgeClusterCompatibilitySummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


