/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVchaNetworkType The NetworkType enumerated type defines the type of a vCenter Server network.
type VcenterVchaNetworkType string

// List of vcenter.vcha.network_type
const (
	VCENTERVCHANETWORKTYPE_STANDARD_PORTGROUP VcenterVchaNetworkType = "STANDARD_PORTGROUP"
	VCENTERVCHANETWORKTYPE_DISTRIBUTED_PORTGROUP VcenterVchaNetworkType = "DISTRIBUTED_PORTGROUP"
)

// All allowed values of VcenterVchaNetworkType enum
var AllowedVcenterVchaNetworkTypeEnumValues = []VcenterVchaNetworkType{
	"STANDARD_PORTGROUP",
	"DISTRIBUTED_PORTGROUP",
}

func (v *VcenterVchaNetworkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVchaNetworkType(value)
	for _, existing := range AllowedVcenterVchaNetworkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVchaNetworkType", value)
}

// NewVcenterVchaNetworkTypeFromValue returns a pointer to a valid VcenterVchaNetworkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVchaNetworkTypeFromValue(v string) (*VcenterVchaNetworkType, error) {
	ev := VcenterVchaNetworkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVchaNetworkType: valid values are %v", v, AllowedVcenterVchaNetworkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVchaNetworkType) IsValid() bool {
	for _, existing := range AllowedVcenterVchaNetworkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vcha.network_type value
func (v VcenterVchaNetworkType) Ptr() *VcenterVchaNetworkType {
	return &v
}

type NullableVcenterVchaNetworkType struct {
	value *VcenterVchaNetworkType
	isSet bool
}

func (v NullableVcenterVchaNetworkType) Get() *VcenterVchaNetworkType {
	return v.value
}

func (v *NullableVcenterVchaNetworkType) Set(val *VcenterVchaNetworkType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaNetworkType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaNetworkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaNetworkType(val *VcenterVchaNetworkType) *NullableVcenterVchaNetworkType {
	return &NullableVcenterVchaNetworkType{value: val, isSet: true}
}

func (v NullableVcenterVchaNetworkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaNetworkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

