/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVchaClusterConfigState The Cluster.ConfigState enumerated type defines the VCHA configuration state.
type VcenterVchaClusterConfigState string

// List of vcenter.vcha.cluster.config_state
const (
	VCENTERVCHACLUSTERCONFIGSTATE_CONFIGURED VcenterVchaClusterConfigState = "CONFIGURED"
	VCENTERVCHACLUSTERCONFIGSTATE_NOTCONFIGURED VcenterVchaClusterConfigState = "NOTCONFIGURED"
	VCENTERVCHACLUSTERCONFIGSTATE_INVALID VcenterVchaClusterConfigState = "INVALID"
	VCENTERVCHACLUSTERCONFIGSTATE_PREPARED VcenterVchaClusterConfigState = "PREPARED"
)

// All allowed values of VcenterVchaClusterConfigState enum
var AllowedVcenterVchaClusterConfigStateEnumValues = []VcenterVchaClusterConfigState{
	"CONFIGURED",
	"NOTCONFIGURED",
	"INVALID",
	"PREPARED",
}

func (v *VcenterVchaClusterConfigState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVchaClusterConfigState(value)
	for _, existing := range AllowedVcenterVchaClusterConfigStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVchaClusterConfigState", value)
}

// NewVcenterVchaClusterConfigStateFromValue returns a pointer to a valid VcenterVchaClusterConfigState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVchaClusterConfigStateFromValue(v string) (*VcenterVchaClusterConfigState, error) {
	ev := VcenterVchaClusterConfigState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVchaClusterConfigState: valid values are %v", v, AllowedVcenterVchaClusterConfigStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVchaClusterConfigState) IsValid() bool {
	for _, existing := range AllowedVcenterVchaClusterConfigStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vcha.cluster.config_state value
func (v VcenterVchaClusterConfigState) Ptr() *VcenterVchaClusterConfigState {
	return &v
}

type NullableVcenterVchaClusterConfigState struct {
	value *VcenterVchaClusterConfigState
	isSet bool
}

func (v NullableVcenterVchaClusterConfigState) Get() *VcenterVchaClusterConfigState {
	return v.value
}

func (v *NullableVcenterVchaClusterConfigState) Set(val *VcenterVchaClusterConfigState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterConfigState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterConfigState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterConfigState(val *VcenterVchaClusterConfigState) *NullableVcenterVchaClusterConfigState {
	return &NullableVcenterVchaClusterConfigState{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterConfigState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterConfigState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

