/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterStoragePoliciesCompatibilityInfo struct for VcenterStoragePoliciesCompatibilityInfo
type VcenterStoragePoliciesCompatibilityInfo struct {
	// Info about a list of datastores compatible with a specific storage policy.
	CompatibleDatastores []VcenterStoragePoliciesCompatibleDatastoreInfo `json:"compatible_datastores"`
}

// NewVcenterStoragePoliciesCompatibilityInfo instantiates a new VcenterStoragePoliciesCompatibilityInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterStoragePoliciesCompatibilityInfo(compatibleDatastores []VcenterStoragePoliciesCompatibleDatastoreInfo) *VcenterStoragePoliciesCompatibilityInfo {
	this := VcenterStoragePoliciesCompatibilityInfo{}
	this.CompatibleDatastores = compatibleDatastores
	return &this
}

// NewVcenterStoragePoliciesCompatibilityInfoWithDefaults instantiates a new VcenterStoragePoliciesCompatibilityInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterStoragePoliciesCompatibilityInfoWithDefaults() *VcenterStoragePoliciesCompatibilityInfo {
	this := VcenterStoragePoliciesCompatibilityInfo{}
	return &this
}

// GetCompatibleDatastores returns the CompatibleDatastores field value
func (o *VcenterStoragePoliciesCompatibilityInfo) GetCompatibleDatastores() []VcenterStoragePoliciesCompatibleDatastoreInfo {
	if o == nil {
		var ret []VcenterStoragePoliciesCompatibleDatastoreInfo
		return ret
	}

	return o.CompatibleDatastores
}

// GetCompatibleDatastoresOk returns a tuple with the CompatibleDatastores field value
// and a boolean to check if the value has been set.
func (o *VcenterStoragePoliciesCompatibilityInfo) GetCompatibleDatastoresOk() (*[]VcenterStoragePoliciesCompatibleDatastoreInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CompatibleDatastores, true
}

// SetCompatibleDatastores sets field value
func (o *VcenterStoragePoliciesCompatibilityInfo) SetCompatibleDatastores(v []VcenterStoragePoliciesCompatibleDatastoreInfo) {
	o.CompatibleDatastores = v
}

func (o VcenterStoragePoliciesCompatibilityInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["compatible_datastores"] = o.CompatibleDatastores
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterStoragePoliciesCompatibilityInfo struct {
	value *VcenterStoragePoliciesCompatibilityInfo
	isSet bool
}

func (v NullableVcenterStoragePoliciesCompatibilityInfo) Get() *VcenterStoragePoliciesCompatibilityInfo {
	return v.value
}

func (v *NullableVcenterStoragePoliciesCompatibilityInfo) Set(val *VcenterStoragePoliciesCompatibilityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterStoragePoliciesCompatibilityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterStoragePoliciesCompatibilityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterStoragePoliciesCompatibilityInfo(val *VcenterStoragePoliciesCompatibilityInfo) *NullableVcenterStoragePoliciesCompatibilityInfo {
	return &NullableVcenterStoragePoliciesCompatibilityInfo{value: val, isSet: true}
}

func (v NullableVcenterStoragePoliciesCompatibilityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterStoragePoliciesCompatibilityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


