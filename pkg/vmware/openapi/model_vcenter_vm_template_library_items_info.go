/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsInfo struct for VcenterVmTemplateLibraryItemsInfo
type VcenterVmTemplateLibraryItemsInfo struct {
	GuestOS VcenterVmGuestOS `json:"guest_OS"`
	Cpu VcenterVmTemplateLibraryItemsCpuInfo `json:"cpu"`
	Memory VcenterVmTemplateLibraryItemsMemoryInfo `json:"memory"`
	VmHomeStorage VcenterVmTemplateLibraryItemsVmHomeStorageInfo `json:"vm_home_storage"`
	// Storage information about the virtual machine template's virtual disks.
	Disks []VcenterVmTemplateLibraryItemsInfoDisks `json:"disks"`
	// Information about the virtual machine template's virtual ethernet adapters.
	Nics []VcenterVmTemplateLibraryItemsInfoNics `json:"nics"`
	// Identifier of the latest virtual machine template contained in the library item. This {@term field} is the managed object identifier used to identify the virtual machine template in the vSphere Management (SOAP) API.
	VmTemplate string `json:"vm_template"`
}

// NewVcenterVmTemplateLibraryItemsInfo instantiates a new VcenterVmTemplateLibraryItemsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsInfo(guestOS VcenterVmGuestOS, cpu VcenterVmTemplateLibraryItemsCpuInfo, memory VcenterVmTemplateLibraryItemsMemoryInfo, vmHomeStorage VcenterVmTemplateLibraryItemsVmHomeStorageInfo, disks []VcenterVmTemplateLibraryItemsInfoDisks, nics []VcenterVmTemplateLibraryItemsInfoNics, vmTemplate string) *VcenterVmTemplateLibraryItemsInfo {
	this := VcenterVmTemplateLibraryItemsInfo{}
	this.GuestOS = guestOS
	this.Cpu = cpu
	this.Memory = memory
	this.VmHomeStorage = vmHomeStorage
	this.Disks = disks
	this.Nics = nics
	this.VmTemplate = vmTemplate
	return &this
}

// NewVcenterVmTemplateLibraryItemsInfoWithDefaults instantiates a new VcenterVmTemplateLibraryItemsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsInfoWithDefaults() *VcenterVmTemplateLibraryItemsInfo {
	this := VcenterVmTemplateLibraryItemsInfo{}
	return &this
}

// GetGuestOS returns the GuestOS field value
func (o *VcenterVmTemplateLibraryItemsInfo) GetGuestOS() VcenterVmGuestOS {
	if o == nil {
		var ret VcenterVmGuestOS
		return ret
	}

	return o.GuestOS
}

// GetGuestOSOk returns a tuple with the GuestOS field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsInfo) GetGuestOSOk() (*VcenterVmGuestOS, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GuestOS, true
}

// SetGuestOS sets field value
func (o *VcenterVmTemplateLibraryItemsInfo) SetGuestOS(v VcenterVmGuestOS) {
	o.GuestOS = v
}

// GetCpu returns the Cpu field value
func (o *VcenterVmTemplateLibraryItemsInfo) GetCpu() VcenterVmTemplateLibraryItemsCpuInfo {
	if o == nil {
		var ret VcenterVmTemplateLibraryItemsCpuInfo
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsInfo) GetCpuOk() (*VcenterVmTemplateLibraryItemsCpuInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *VcenterVmTemplateLibraryItemsInfo) SetCpu(v VcenterVmTemplateLibraryItemsCpuInfo) {
	o.Cpu = v
}

// GetMemory returns the Memory field value
func (o *VcenterVmTemplateLibraryItemsInfo) GetMemory() VcenterVmTemplateLibraryItemsMemoryInfo {
	if o == nil {
		var ret VcenterVmTemplateLibraryItemsMemoryInfo
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsInfo) GetMemoryOk() (*VcenterVmTemplateLibraryItemsMemoryInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *VcenterVmTemplateLibraryItemsInfo) SetMemory(v VcenterVmTemplateLibraryItemsMemoryInfo) {
	o.Memory = v
}

// GetVmHomeStorage returns the VmHomeStorage field value
func (o *VcenterVmTemplateLibraryItemsInfo) GetVmHomeStorage() VcenterVmTemplateLibraryItemsVmHomeStorageInfo {
	if o == nil {
		var ret VcenterVmTemplateLibraryItemsVmHomeStorageInfo
		return ret
	}

	return o.VmHomeStorage
}

// GetVmHomeStorageOk returns a tuple with the VmHomeStorage field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsInfo) GetVmHomeStorageOk() (*VcenterVmTemplateLibraryItemsVmHomeStorageInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VmHomeStorage, true
}

// SetVmHomeStorage sets field value
func (o *VcenterVmTemplateLibraryItemsInfo) SetVmHomeStorage(v VcenterVmTemplateLibraryItemsVmHomeStorageInfo) {
	o.VmHomeStorage = v
}

// GetDisks returns the Disks field value
func (o *VcenterVmTemplateLibraryItemsInfo) GetDisks() []VcenterVmTemplateLibraryItemsInfoDisks {
	if o == nil {
		var ret []VcenterVmTemplateLibraryItemsInfoDisks
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsInfo) GetDisksOk() (*[]VcenterVmTemplateLibraryItemsInfoDisks, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Disks, true
}

// SetDisks sets field value
func (o *VcenterVmTemplateLibraryItemsInfo) SetDisks(v []VcenterVmTemplateLibraryItemsInfoDisks) {
	o.Disks = v
}

// GetNics returns the Nics field value
func (o *VcenterVmTemplateLibraryItemsInfo) GetNics() []VcenterVmTemplateLibraryItemsInfoNics {
	if o == nil {
		var ret []VcenterVmTemplateLibraryItemsInfoNics
		return ret
	}

	return o.Nics
}

// GetNicsOk returns a tuple with the Nics field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsInfo) GetNicsOk() (*[]VcenterVmTemplateLibraryItemsInfoNics, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Nics, true
}

// SetNics sets field value
func (o *VcenterVmTemplateLibraryItemsInfo) SetNics(v []VcenterVmTemplateLibraryItemsInfoNics) {
	o.Nics = v
}

// GetVmTemplate returns the VmTemplate field value
func (o *VcenterVmTemplateLibraryItemsInfo) GetVmTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VmTemplate
}

// GetVmTemplateOk returns a tuple with the VmTemplate field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsInfo) GetVmTemplateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VmTemplate, true
}

// SetVmTemplate sets field value
func (o *VcenterVmTemplateLibraryItemsInfo) SetVmTemplate(v string) {
	o.VmTemplate = v
}

func (o VcenterVmTemplateLibraryItemsInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["guest_OS"] = o.GuestOS
	}
	if true {
		toSerialize["cpu"] = o.Cpu
	}
	if true {
		toSerialize["memory"] = o.Memory
	}
	if true {
		toSerialize["vm_home_storage"] = o.VmHomeStorage
	}
	if true {
		toSerialize["disks"] = o.Disks
	}
	if true {
		toSerialize["nics"] = o.Nics
	}
	if true {
		toSerialize["vm_template"] = o.VmTemplate
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsInfo struct {
	value *VcenterVmTemplateLibraryItemsInfo
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsInfo) Get() *VcenterVmTemplateLibraryItemsInfo {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsInfo) Set(val *VcenterVmTemplateLibraryItemsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsInfo(val *VcenterVmTemplateLibraryItemsInfo) *NullableVcenterVmTemplateLibraryItemsInfo {
	return &NullableVcenterVmTemplateLibraryItemsInfo{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


