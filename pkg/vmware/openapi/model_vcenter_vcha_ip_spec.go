/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaIpSpec struct for VcenterVchaIpSpec
type VcenterVchaIpSpec struct {
	IpFamily VcenterVchaIpFamily `json:"ip_family"`
	Ipv4 *VcenterVchaIpv4Spec `json:"ipv4,omitempty"`
	Ipv6 *VcenterVchaIpv6Spec `json:"ipv6,omitempty"`
	// The IP address of the Gateway for this interface. If unset, gateway will not be used for the network interface.
	DefaultGateway *string `json:"default_gateway,omitempty"`
	// The list of IP addresses of the DNS servers for this interface. This list is a comma separated list. If unset, DNS servers will not be used for the network interface.
	DnsServers *[]string `json:"dns_servers,omitempty"`
}

// NewVcenterVchaIpSpec instantiates a new VcenterVchaIpSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaIpSpec(ipFamily VcenterVchaIpFamily) *VcenterVchaIpSpec {
	this := VcenterVchaIpSpec{}
	this.IpFamily = ipFamily
	return &this
}

// NewVcenterVchaIpSpecWithDefaults instantiates a new VcenterVchaIpSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaIpSpecWithDefaults() *VcenterVchaIpSpec {
	this := VcenterVchaIpSpec{}
	return &this
}

// GetIpFamily returns the IpFamily field value
func (o *VcenterVchaIpSpec) GetIpFamily() VcenterVchaIpFamily {
	if o == nil {
		var ret VcenterVchaIpFamily
		return ret
	}

	return o.IpFamily
}

// GetIpFamilyOk returns a tuple with the IpFamily field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaIpSpec) GetIpFamilyOk() (*VcenterVchaIpFamily, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpFamily, true
}

// SetIpFamily sets field value
func (o *VcenterVchaIpSpec) SetIpFamily(v VcenterVchaIpFamily) {
	o.IpFamily = v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *VcenterVchaIpSpec) GetIpv4() VcenterVchaIpv4Spec {
	if o == nil || o.Ipv4 == nil {
		var ret VcenterVchaIpv4Spec
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaIpSpec) GetIpv4Ok() (*VcenterVchaIpv4Spec, bool) {
	if o == nil || o.Ipv4 == nil {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *VcenterVchaIpSpec) HasIpv4() bool {
	if o != nil && o.Ipv4 != nil {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given VcenterVchaIpv4Spec and assigns it to the Ipv4 field.
func (o *VcenterVchaIpSpec) SetIpv4(v VcenterVchaIpv4Spec) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *VcenterVchaIpSpec) GetIpv6() VcenterVchaIpv6Spec {
	if o == nil || o.Ipv6 == nil {
		var ret VcenterVchaIpv6Spec
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaIpSpec) GetIpv6Ok() (*VcenterVchaIpv6Spec, bool) {
	if o == nil || o.Ipv6 == nil {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *VcenterVchaIpSpec) HasIpv6() bool {
	if o != nil && o.Ipv6 != nil {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given VcenterVchaIpv6Spec and assigns it to the Ipv6 field.
func (o *VcenterVchaIpSpec) SetIpv6(v VcenterVchaIpv6Spec) {
	o.Ipv6 = &v
}

// GetDefaultGateway returns the DefaultGateway field value if set, zero value otherwise.
func (o *VcenterVchaIpSpec) GetDefaultGateway() string {
	if o == nil || o.DefaultGateway == nil {
		var ret string
		return ret
	}
	return *o.DefaultGateway
}

// GetDefaultGatewayOk returns a tuple with the DefaultGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaIpSpec) GetDefaultGatewayOk() (*string, bool) {
	if o == nil || o.DefaultGateway == nil {
		return nil, false
	}
	return o.DefaultGateway, true
}

// HasDefaultGateway returns a boolean if a field has been set.
func (o *VcenterVchaIpSpec) HasDefaultGateway() bool {
	if o != nil && o.DefaultGateway != nil {
		return true
	}

	return false
}

// SetDefaultGateway gets a reference to the given string and assigns it to the DefaultGateway field.
func (o *VcenterVchaIpSpec) SetDefaultGateway(v string) {
	o.DefaultGateway = &v
}

// GetDnsServers returns the DnsServers field value if set, zero value otherwise.
func (o *VcenterVchaIpSpec) GetDnsServers() []string {
	if o == nil || o.DnsServers == nil {
		var ret []string
		return ret
	}
	return *o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaIpSpec) GetDnsServersOk() (*[]string, bool) {
	if o == nil || o.DnsServers == nil {
		return nil, false
	}
	return o.DnsServers, true
}

// HasDnsServers returns a boolean if a field has been set.
func (o *VcenterVchaIpSpec) HasDnsServers() bool {
	if o != nil && o.DnsServers != nil {
		return true
	}

	return false
}

// SetDnsServers gets a reference to the given []string and assigns it to the DnsServers field.
func (o *VcenterVchaIpSpec) SetDnsServers(v []string) {
	o.DnsServers = &v
}

func (o VcenterVchaIpSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ip_family"] = o.IpFamily
	}
	if o.Ipv4 != nil {
		toSerialize["ipv4"] = o.Ipv4
	}
	if o.Ipv6 != nil {
		toSerialize["ipv6"] = o.Ipv6
	}
	if o.DefaultGateway != nil {
		toSerialize["default_gateway"] = o.DefaultGateway
	}
	if o.DnsServers != nil {
		toSerialize["dns_servers"] = o.DnsServers
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaIpSpec struct {
	value *VcenterVchaIpSpec
	isSet bool
}

func (v NullableVcenterVchaIpSpec) Get() *VcenterVchaIpSpec {
	return v.value
}

func (v *NullableVcenterVchaIpSpec) Set(val *VcenterVchaIpSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaIpSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaIpSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaIpSpec(val *VcenterVchaIpSpec) *NullableVcenterVchaIpSpec {
	return &NullableVcenterVchaIpSpec{value: val, isSet: true}
}

func (v NullableVcenterVchaIpSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaIpSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


