/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec struct for VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec
type VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec struct {
	// The file is hidden. If {term unset} the value will not be changed.
	Hidden *bool `json:"hidden,omitempty"`
	// The file is read-only. If {term unset} the value will not be changed.
	ReadOnly *bool `json:"read_only,omitempty"`
}

// NewVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec instantiates a new VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec() *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec {
	this := VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec{}
	return &this
}

// NewVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpecWithDefaults instantiates a new VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpecWithDefaults() *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec {
	this := VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec{}
	return &this
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) SetHidden(v bool) {
	o.Hidden = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

func (o VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if o.ReadOnly != nil {
		toSerialize["read_only"] = o.ReadOnly
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec struct {
	value *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec
	isSet bool
}

func (v NullableVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) Get() *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec {
	return v.value
}

func (v *NullableVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) Set(val *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec(val *VcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) *NullableVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec {
	return &NullableVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestFilesystemFilesWindowsFileAttributesUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


