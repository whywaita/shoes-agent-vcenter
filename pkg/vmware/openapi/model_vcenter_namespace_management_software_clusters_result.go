/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSoftwareClustersResult struct for VcenterNamespaceManagementSoftwareClustersResult
type VcenterNamespaceManagementSoftwareClustersResult struct {
	Res VcenterNamespaceManagementSoftwareClustersResultRes `json:"res"`
	// Exception when cluster pre-check failed during upgrade invocation. This field is optional and it is only relevant when the value of Clusters.Result.res is REJECTED.
	Exception *string `json:"exception,omitempty"`
}

// NewVcenterNamespaceManagementSoftwareClustersResult instantiates a new VcenterNamespaceManagementSoftwareClustersResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSoftwareClustersResult(res VcenterNamespaceManagementSoftwareClustersResultRes) *VcenterNamespaceManagementSoftwareClustersResult {
	this := VcenterNamespaceManagementSoftwareClustersResult{}
	this.Res = res
	return &this
}

// NewVcenterNamespaceManagementSoftwareClustersResultWithDefaults instantiates a new VcenterNamespaceManagementSoftwareClustersResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSoftwareClustersResultWithDefaults() *VcenterNamespaceManagementSoftwareClustersResult {
	this := VcenterNamespaceManagementSoftwareClustersResult{}
	return &this
}

// GetRes returns the Res field value
func (o *VcenterNamespaceManagementSoftwareClustersResult) GetRes() VcenterNamespaceManagementSoftwareClustersResultRes {
	if o == nil {
		var ret VcenterNamespaceManagementSoftwareClustersResultRes
		return ret
	}

	return o.Res
}

// GetResOk returns a tuple with the Res field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersResult) GetResOk() (*VcenterNamespaceManagementSoftwareClustersResultRes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Res, true
}

// SetRes sets field value
func (o *VcenterNamespaceManagementSoftwareClustersResult) SetRes(v VcenterNamespaceManagementSoftwareClustersResultRes) {
	o.Res = v
}

// GetException returns the Exception field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSoftwareClustersResult) GetException() string {
	if o == nil || o.Exception == nil {
		var ret string
		return ret
	}
	return *o.Exception
}

// GetExceptionOk returns a tuple with the Exception field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersResult) GetExceptionOk() (*string, bool) {
	if o == nil || o.Exception == nil {
		return nil, false
	}
	return o.Exception, true
}

// HasException returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSoftwareClustersResult) HasException() bool {
	if o != nil && o.Exception != nil {
		return true
	}

	return false
}

// SetException gets a reference to the given string and assigns it to the Exception field.
func (o *VcenterNamespaceManagementSoftwareClustersResult) SetException(v string) {
	o.Exception = &v
}

func (o VcenterNamespaceManagementSoftwareClustersResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["res"] = o.Res
	}
	if o.Exception != nil {
		toSerialize["exception"] = o.Exception
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSoftwareClustersResult struct {
	value *VcenterNamespaceManagementSoftwareClustersResult
	isSet bool
}

func (v NullableVcenterNamespaceManagementSoftwareClustersResult) Get() *VcenterNamespaceManagementSoftwareClustersResult {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersResult) Set(val *VcenterNamespaceManagementSoftwareClustersResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSoftwareClustersResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSoftwareClustersResult(val *VcenterNamespaceManagementSoftwareClustersResult) *NullableVcenterNamespaceManagementSoftwareClustersResult {
	return &NullableVcenterNamespaceManagementSoftwareClustersResult{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSoftwareClustersResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


