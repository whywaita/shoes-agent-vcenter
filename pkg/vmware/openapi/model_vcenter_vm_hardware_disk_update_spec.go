/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareDiskUpdateSpec struct for VcenterVmHardwareDiskUpdateSpec
type VcenterVmHardwareDiskUpdateSpec struct {
	Backing *VcenterVmHardwareDiskBackingSpec `json:"backing,omitempty"`
}

// NewVcenterVmHardwareDiskUpdateSpec instantiates a new VcenterVmHardwareDiskUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareDiskUpdateSpec() *VcenterVmHardwareDiskUpdateSpec {
	this := VcenterVmHardwareDiskUpdateSpec{}
	return &this
}

// NewVcenterVmHardwareDiskUpdateSpecWithDefaults instantiates a new VcenterVmHardwareDiskUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareDiskUpdateSpecWithDefaults() *VcenterVmHardwareDiskUpdateSpec {
	this := VcenterVmHardwareDiskUpdateSpec{}
	return &this
}

// GetBacking returns the Backing field value if set, zero value otherwise.
func (o *VcenterVmHardwareDiskUpdateSpec) GetBacking() VcenterVmHardwareDiskBackingSpec {
	if o == nil || o.Backing == nil {
		var ret VcenterVmHardwareDiskBackingSpec
		return ret
	}
	return *o.Backing
}

// GetBackingOk returns a tuple with the Backing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareDiskUpdateSpec) GetBackingOk() (*VcenterVmHardwareDiskBackingSpec, bool) {
	if o == nil || o.Backing == nil {
		return nil, false
	}
	return o.Backing, true
}

// HasBacking returns a boolean if a field has been set.
func (o *VcenterVmHardwareDiskUpdateSpec) HasBacking() bool {
	if o != nil && o.Backing != nil {
		return true
	}

	return false
}

// SetBacking gets a reference to the given VcenterVmHardwareDiskBackingSpec and assigns it to the Backing field.
func (o *VcenterVmHardwareDiskUpdateSpec) SetBacking(v VcenterVmHardwareDiskBackingSpec) {
	o.Backing = &v
}

func (o VcenterVmHardwareDiskUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Backing != nil {
		toSerialize["backing"] = o.Backing
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareDiskUpdateSpec struct {
	value *VcenterVmHardwareDiskUpdateSpec
	isSet bool
}

func (v NullableVcenterVmHardwareDiskUpdateSpec) Get() *VcenterVmHardwareDiskUpdateSpec {
	return v.value
}

func (v *NullableVcenterVmHardwareDiskUpdateSpec) Set(val *VcenterVmHardwareDiskUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareDiskUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareDiskUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareDiskUpdateSpec(val *VcenterVmHardwareDiskUpdateSpec) *NullableVcenterVmHardwareDiskUpdateSpec {
	return &NullableVcenterVmHardwareDiskUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareDiskUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareDiskUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


