/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespacesInstancesUpdateSpec struct for VcenterNamespacesInstancesUpdateSpec
type VcenterNamespacesInstancesUpdateSpec struct {
	// Description for the namespace. If unset, the description of the namespace will not be modified.
	Description *string `json:"description,omitempty"`
	// Resource quota updates on the namespace. Refer to vcenter.namespace_management.NamespaceResourceOptions.Info#updateResourceQuotaType and use vcenter.namespace_management.NamespaceResourceOptions#get for retrieving the type for the value for this field. For an example of this, see ResourceQuotaOptionsV1Update. If unset, the resource constraints on the namespace will not be modified.
	ResourceSpec *map[string]interface{} `json:"resource_spec,omitempty"`
	// Access control associated with the namespace. If unset, access controls on the namespace will not be modified. Existing pods from users will continue to run.
	AccessList *[]VcenterNamespacesInstancesAccess `json:"access_list,omitempty"`
	// Storage associated with the namespace. If unset, storage policies and their limit will not be modified. Pods which are already using persistent storage from the earlier version of storage policies will be able to access them till the datastores are attached to the worker nodes.
	StorageSpecs *[]VcenterNamespacesInstancesStorageSpec `json:"storage_specs,omitempty"`
	VmServiceSpec *VcenterNamespacesInstancesVMServiceSpec `json:"vm_service_spec,omitempty"`
}

// NewVcenterNamespacesInstancesUpdateSpec instantiates a new VcenterNamespacesInstancesUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespacesInstancesUpdateSpec() *VcenterNamespacesInstancesUpdateSpec {
	this := VcenterNamespacesInstancesUpdateSpec{}
	return &this
}

// NewVcenterNamespacesInstancesUpdateSpecWithDefaults instantiates a new VcenterNamespacesInstancesUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespacesInstancesUpdateSpecWithDefaults() *VcenterNamespacesInstancesUpdateSpec {
	this := VcenterNamespacesInstancesUpdateSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesUpdateSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesUpdateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesUpdateSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VcenterNamespacesInstancesUpdateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetResourceSpec returns the ResourceSpec field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesUpdateSpec) GetResourceSpec() map[string]interface{} {
	if o == nil || o.ResourceSpec == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ResourceSpec
}

// GetResourceSpecOk returns a tuple with the ResourceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesUpdateSpec) GetResourceSpecOk() (*map[string]interface{}, bool) {
	if o == nil || o.ResourceSpec == nil {
		return nil, false
	}
	return o.ResourceSpec, true
}

// HasResourceSpec returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesUpdateSpec) HasResourceSpec() bool {
	if o != nil && o.ResourceSpec != nil {
		return true
	}

	return false
}

// SetResourceSpec gets a reference to the given map[string]interface{} and assigns it to the ResourceSpec field.
func (o *VcenterNamespacesInstancesUpdateSpec) SetResourceSpec(v map[string]interface{}) {
	o.ResourceSpec = &v
}

// GetAccessList returns the AccessList field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesUpdateSpec) GetAccessList() []VcenterNamespacesInstancesAccess {
	if o == nil || o.AccessList == nil {
		var ret []VcenterNamespacesInstancesAccess
		return ret
	}
	return *o.AccessList
}

// GetAccessListOk returns a tuple with the AccessList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesUpdateSpec) GetAccessListOk() (*[]VcenterNamespacesInstancesAccess, bool) {
	if o == nil || o.AccessList == nil {
		return nil, false
	}
	return o.AccessList, true
}

// HasAccessList returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesUpdateSpec) HasAccessList() bool {
	if o != nil && o.AccessList != nil {
		return true
	}

	return false
}

// SetAccessList gets a reference to the given []VcenterNamespacesInstancesAccess and assigns it to the AccessList field.
func (o *VcenterNamespacesInstancesUpdateSpec) SetAccessList(v []VcenterNamespacesInstancesAccess) {
	o.AccessList = &v
}

// GetStorageSpecs returns the StorageSpecs field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesUpdateSpec) GetStorageSpecs() []VcenterNamespacesInstancesStorageSpec {
	if o == nil || o.StorageSpecs == nil {
		var ret []VcenterNamespacesInstancesStorageSpec
		return ret
	}
	return *o.StorageSpecs
}

// GetStorageSpecsOk returns a tuple with the StorageSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesUpdateSpec) GetStorageSpecsOk() (*[]VcenterNamespacesInstancesStorageSpec, bool) {
	if o == nil || o.StorageSpecs == nil {
		return nil, false
	}
	return o.StorageSpecs, true
}

// HasStorageSpecs returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesUpdateSpec) HasStorageSpecs() bool {
	if o != nil && o.StorageSpecs != nil {
		return true
	}

	return false
}

// SetStorageSpecs gets a reference to the given []VcenterNamespacesInstancesStorageSpec and assigns it to the StorageSpecs field.
func (o *VcenterNamespacesInstancesUpdateSpec) SetStorageSpecs(v []VcenterNamespacesInstancesStorageSpec) {
	o.StorageSpecs = &v
}

// GetVmServiceSpec returns the VmServiceSpec field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesUpdateSpec) GetVmServiceSpec() VcenterNamespacesInstancesVMServiceSpec {
	if o == nil || o.VmServiceSpec == nil {
		var ret VcenterNamespacesInstancesVMServiceSpec
		return ret
	}
	return *o.VmServiceSpec
}

// GetVmServiceSpecOk returns a tuple with the VmServiceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesUpdateSpec) GetVmServiceSpecOk() (*VcenterNamespacesInstancesVMServiceSpec, bool) {
	if o == nil || o.VmServiceSpec == nil {
		return nil, false
	}
	return o.VmServiceSpec, true
}

// HasVmServiceSpec returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesUpdateSpec) HasVmServiceSpec() bool {
	if o != nil && o.VmServiceSpec != nil {
		return true
	}

	return false
}

// SetVmServiceSpec gets a reference to the given VcenterNamespacesInstancesVMServiceSpec and assigns it to the VmServiceSpec field.
func (o *VcenterNamespacesInstancesUpdateSpec) SetVmServiceSpec(v VcenterNamespacesInstancesVMServiceSpec) {
	o.VmServiceSpec = &v
}

func (o VcenterNamespacesInstancesUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ResourceSpec != nil {
		toSerialize["resource_spec"] = o.ResourceSpec
	}
	if o.AccessList != nil {
		toSerialize["access_list"] = o.AccessList
	}
	if o.StorageSpecs != nil {
		toSerialize["storage_specs"] = o.StorageSpecs
	}
	if o.VmServiceSpec != nil {
		toSerialize["vm_service_spec"] = o.VmServiceSpec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespacesInstancesUpdateSpec struct {
	value *VcenterNamespacesInstancesUpdateSpec
	isSet bool
}

func (v NullableVcenterNamespacesInstancesUpdateSpec) Get() *VcenterNamespacesInstancesUpdateSpec {
	return v.value
}

func (v *NullableVcenterNamespacesInstancesUpdateSpec) Set(val *VcenterNamespacesInstancesUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesInstancesUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesInstancesUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesInstancesUpdateSpec(val *VcenterNamespacesInstancesUpdateSpec) *NullableVcenterNamespacesInstancesUpdateSpec {
	return &NullableVcenterNamespacesInstancesUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespacesInstancesUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesInstancesUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


