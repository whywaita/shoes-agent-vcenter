/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// VcenterCryptoManagerKmsProvidersImportResult struct for VcenterCryptoManagerKmsProvidersImportResult
type VcenterCryptoManagerKmsProvidersImportResult struct {
	// Provider identifier When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.crypto_manager.kms.provider. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.crypto_manager.kms.provider.
	Provider string `json:"provider"`
	Type VcenterCryptoManagerKmsProvidersType `json:"type"`
	NativeInfo *VcenterCryptoManagerKmsProvidersNativeProviderInfo `json:"native_info,omitempty"`
	// Time when the provider was exported
	ExportTime time.Time `json:"export_time"`
	Constraints *VcenterCryptoManagerKmsProvidersConstraints `json:"constraints,omitempty"`
}

// NewVcenterCryptoManagerKmsProvidersImportResult instantiates a new VcenterCryptoManagerKmsProvidersImportResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCryptoManagerKmsProvidersImportResult(provider string, type_ VcenterCryptoManagerKmsProvidersType, exportTime time.Time) *VcenterCryptoManagerKmsProvidersImportResult {
	this := VcenterCryptoManagerKmsProvidersImportResult{}
	this.Provider = provider
	this.Type = type_
	this.ExportTime = exportTime
	return &this
}

// NewVcenterCryptoManagerKmsProvidersImportResultWithDefaults instantiates a new VcenterCryptoManagerKmsProvidersImportResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCryptoManagerKmsProvidersImportResultWithDefaults() *VcenterCryptoManagerKmsProvidersImportResult {
	this := VcenterCryptoManagerKmsProvidersImportResult{}
	return &this
}

// GetProvider returns the Provider field value
func (o *VcenterCryptoManagerKmsProvidersImportResult) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersImportResult) GetProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *VcenterCryptoManagerKmsProvidersImportResult) SetProvider(v string) {
	o.Provider = v
}

// GetType returns the Type field value
func (o *VcenterCryptoManagerKmsProvidersImportResult) GetType() VcenterCryptoManagerKmsProvidersType {
	if o == nil {
		var ret VcenterCryptoManagerKmsProvidersType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersImportResult) GetTypeOk() (*VcenterCryptoManagerKmsProvidersType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterCryptoManagerKmsProvidersImportResult) SetType(v VcenterCryptoManagerKmsProvidersType) {
	o.Type = v
}

// GetNativeInfo returns the NativeInfo field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersImportResult) GetNativeInfo() VcenterCryptoManagerKmsProvidersNativeProviderInfo {
	if o == nil || o.NativeInfo == nil {
		var ret VcenterCryptoManagerKmsProvidersNativeProviderInfo
		return ret
	}
	return *o.NativeInfo
}

// GetNativeInfoOk returns a tuple with the NativeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersImportResult) GetNativeInfoOk() (*VcenterCryptoManagerKmsProvidersNativeProviderInfo, bool) {
	if o == nil || o.NativeInfo == nil {
		return nil, false
	}
	return o.NativeInfo, true
}

// HasNativeInfo returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersImportResult) HasNativeInfo() bool {
	if o != nil && o.NativeInfo != nil {
		return true
	}

	return false
}

// SetNativeInfo gets a reference to the given VcenterCryptoManagerKmsProvidersNativeProviderInfo and assigns it to the NativeInfo field.
func (o *VcenterCryptoManagerKmsProvidersImportResult) SetNativeInfo(v VcenterCryptoManagerKmsProvidersNativeProviderInfo) {
	o.NativeInfo = &v
}

// GetExportTime returns the ExportTime field value
func (o *VcenterCryptoManagerKmsProvidersImportResult) GetExportTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExportTime
}

// GetExportTimeOk returns a tuple with the ExportTime field value
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersImportResult) GetExportTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExportTime, true
}

// SetExportTime sets field value
func (o *VcenterCryptoManagerKmsProvidersImportResult) SetExportTime(v time.Time) {
	o.ExportTime = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersImportResult) GetConstraints() VcenterCryptoManagerKmsProvidersConstraints {
	if o == nil || o.Constraints == nil {
		var ret VcenterCryptoManagerKmsProvidersConstraints
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersImportResult) GetConstraintsOk() (*VcenterCryptoManagerKmsProvidersConstraints, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersImportResult) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given VcenterCryptoManagerKmsProvidersConstraints and assigns it to the Constraints field.
func (o *VcenterCryptoManagerKmsProvidersImportResult) SetConstraints(v VcenterCryptoManagerKmsProvidersConstraints) {
	o.Constraints = &v
}

func (o VcenterCryptoManagerKmsProvidersImportResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.NativeInfo != nil {
		toSerialize["native_info"] = o.NativeInfo
	}
	if true {
		toSerialize["export_time"] = o.ExportTime
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCryptoManagerKmsProvidersImportResult struct {
	value *VcenterCryptoManagerKmsProvidersImportResult
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersImportResult) Get() *VcenterCryptoManagerKmsProvidersImportResult {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersImportResult) Set(val *VcenterCryptoManagerKmsProvidersImportResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersImportResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersImportResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersImportResult(val *VcenterCryptoManagerKmsProvidersImportResult) *NullableVcenterCryptoManagerKmsProvidersImportResult {
	return &NullableVcenterCryptoManagerKmsProvidersImportResult{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersImportResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersImportResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


