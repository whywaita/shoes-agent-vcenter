/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"os"
)

// VcenterCryptoManagerKmsProvidersImportSpec struct for VcenterCryptoManagerKmsProvidersImportSpec
type VcenterCryptoManagerKmsProvidersImportSpec struct {
	// Configuration to import. Currently this is required. Other import methods may be supported in the future.
	Config **os.File `json:"config,omitempty"`
	// Password to decrypt the configuration to import. If unset or empty, configuration to import must be unencrypted.
	Password *string `json:"password,omitempty"`
	Constraints *VcenterCryptoManagerKmsProvidersConstraintsSpec `json:"constraints,omitempty"`
	// Whether to perform a trial import without actuallly creating a provider. If unset, a new provider will be created.
	DryRun *bool `json:"dry_run,omitempty"`
}

// NewVcenterCryptoManagerKmsProvidersImportSpec instantiates a new VcenterCryptoManagerKmsProvidersImportSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCryptoManagerKmsProvidersImportSpec() *VcenterCryptoManagerKmsProvidersImportSpec {
	this := VcenterCryptoManagerKmsProvidersImportSpec{}
	return &this
}

// NewVcenterCryptoManagerKmsProvidersImportSpecWithDefaults instantiates a new VcenterCryptoManagerKmsProvidersImportSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCryptoManagerKmsProvidersImportSpecWithDefaults() *VcenterCryptoManagerKmsProvidersImportSpec {
	this := VcenterCryptoManagerKmsProvidersImportSpec{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) GetConfig() *os.File {
	if o == nil || o.Config == nil {
		var ret *os.File
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) GetConfigOk() (**os.File, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given *os.File and assigns it to the Config field.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) SetConfig(v *os.File) {
	o.Config = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) SetPassword(v string) {
	o.Password = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) GetConstraints() VcenterCryptoManagerKmsProvidersConstraintsSpec {
	if o == nil || o.Constraints == nil {
		var ret VcenterCryptoManagerKmsProvidersConstraintsSpec
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) GetConstraintsOk() (*VcenterCryptoManagerKmsProvidersConstraintsSpec, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given VcenterCryptoManagerKmsProvidersConstraintsSpec and assigns it to the Constraints field.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) SetConstraints(v VcenterCryptoManagerKmsProvidersConstraintsSpec) {
	o.Constraints = &v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) GetDryRun() bool {
	if o == nil || o.DryRun == nil {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) GetDryRunOk() (*bool, bool) {
	if o == nil || o.DryRun == nil {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) HasDryRun() bool {
	if o != nil && o.DryRun != nil {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *VcenterCryptoManagerKmsProvidersImportSpec) SetDryRun(v bool) {
	o.DryRun = &v
}

func (o VcenterCryptoManagerKmsProvidersImportSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	if o.DryRun != nil {
		toSerialize["dry_run"] = o.DryRun
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCryptoManagerKmsProvidersImportSpec struct {
	value *VcenterCryptoManagerKmsProvidersImportSpec
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersImportSpec) Get() *VcenterCryptoManagerKmsProvidersImportSpec {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersImportSpec) Set(val *VcenterCryptoManagerKmsProvidersImportSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersImportSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersImportSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersImportSpec(val *VcenterCryptoManagerKmsProvidersImportSpec) *NullableVcenterCryptoManagerKmsProvidersImportSpec {
	return &NullableVcenterCryptoManagerKmsProvidersImportSpec{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersImportSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersImportSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


