/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType Policy type for the deployed virtual machine's disk.
type VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType string

// List of vcenter.vm_template.library_items.deploy_spec_disk_storage_policy.type
const (
	VCENTERVMTEMPLATELIBRARYITEMSDEPLOYSPECDISKSTORAGEPOLICYTYPE_SPECIFIED_POLICY VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType = "USE_SPECIFIED_POLICY"
	VCENTERVMTEMPLATELIBRARYITEMSDEPLOYSPECDISKSTORAGEPOLICYTYPE_SOURCE_POLICY VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType = "USE_SOURCE_POLICY"
)

// All allowed values of VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType enum
var AllowedVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyTypeEnumValues = []VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType{
	"USE_SPECIFIED_POLICY",
	"USE_SOURCE_POLICY",
}

func (v *VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType(value)
	for _, existing := range AllowedVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType", value)
}

// NewVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyTypeFromValue returns a pointer to a valid VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyTypeFromValue(v string) (*VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType, error) {
	ev := VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType: valid values are %v", v, AllowedVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) IsValid() bool {
	for _, existing := range AllowedVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm_template.library_items.deploy_spec_disk_storage_policy.type value
func (v VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) Ptr() *VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType {
	return &v
}

type NullableVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType struct {
	value *VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) Get() *VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) Set(val *VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType(val *VcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) *NullableVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType {
	return &NullableVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsDeploySpecDiskStoragePolicyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

