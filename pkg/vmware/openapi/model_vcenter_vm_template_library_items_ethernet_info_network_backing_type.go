/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType The {@name NetworkBackingType} {@term enumerated type} defines valid network backing types for a virtual Ethernet adapter.
type VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType string

// List of vcenter.vm_template.library_items.ethernet_info.network_backing_type
const (
	VCENTERVMTEMPLATELIBRARYITEMSETHERNETINFONETWORKBACKINGTYPE_STANDARD_PORTGROUP VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType = "STANDARD_PORTGROUP"
	VCENTERVMTEMPLATELIBRARYITEMSETHERNETINFONETWORKBACKINGTYPE_HOST_DEVICE VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType = "HOST_DEVICE"
	VCENTERVMTEMPLATELIBRARYITEMSETHERNETINFONETWORKBACKINGTYPE_DISTRIBUTED_PORTGROUP VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType = "DISTRIBUTED_PORTGROUP"
	VCENTERVMTEMPLATELIBRARYITEMSETHERNETINFONETWORKBACKINGTYPE_OPAQUE_NETWORK VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType = "OPAQUE_NETWORK"
)

// All allowed values of VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType enum
var AllowedVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingTypeEnumValues = []VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType{
	"STANDARD_PORTGROUP",
	"HOST_DEVICE",
	"DISTRIBUTED_PORTGROUP",
	"OPAQUE_NETWORK",
}

func (v *VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType(value)
	for _, existing := range AllowedVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType", value)
}

// NewVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingTypeFromValue returns a pointer to a valid VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingTypeFromValue(v string) (*VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType, error) {
	ev := VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType: valid values are %v", v, AllowedVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) IsValid() bool {
	for _, existing := range AllowedVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm_template.library_items.ethernet_info.network_backing_type value
func (v VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) Ptr() *VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType {
	return &v
}

type NullableVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType struct {
	value *VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) Get() *VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) Set(val *VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType(val *VcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) *NullableVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType {
	return &NullableVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsEthernetInfoNetworkBackingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

