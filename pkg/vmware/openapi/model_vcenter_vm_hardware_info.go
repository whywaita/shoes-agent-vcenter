/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareInfo struct for VcenterVmHardwareInfo
type VcenterVmHardwareInfo struct {
	Version VcenterVmHardwareVersion `json:"version"`
	UpgradePolicy VcenterVmHardwareUpgradePolicy `json:"upgrade_policy"`
	UpgradeVersion *VcenterVmHardwareVersion `json:"upgrade_version,omitempty"`
	UpgradeStatus VcenterVmHardwareUpgradeStatus `json:"upgrade_status"`
	// Reason for the scheduled upgrade failure. This field is optional and it is only relevant when the value of Hardware.Info.upgrade-status is FAILED.
	UpgradeError *string `json:"upgrade_error,omitempty"`
}

// NewVcenterVmHardwareInfo instantiates a new VcenterVmHardwareInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareInfo(version VcenterVmHardwareVersion, upgradePolicy VcenterVmHardwareUpgradePolicy, upgradeStatus VcenterVmHardwareUpgradeStatus) *VcenterVmHardwareInfo {
	this := VcenterVmHardwareInfo{}
	this.Version = version
	this.UpgradePolicy = upgradePolicy
	this.UpgradeStatus = upgradeStatus
	return &this
}

// NewVcenterVmHardwareInfoWithDefaults instantiates a new VcenterVmHardwareInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareInfoWithDefaults() *VcenterVmHardwareInfo {
	this := VcenterVmHardwareInfo{}
	return &this
}

// GetVersion returns the Version field value
func (o *VcenterVmHardwareInfo) GetVersion() VcenterVmHardwareVersion {
	if o == nil {
		var ret VcenterVmHardwareVersion
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareInfo) GetVersionOk() (*VcenterVmHardwareVersion, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VcenterVmHardwareInfo) SetVersion(v VcenterVmHardwareVersion) {
	o.Version = v
}

// GetUpgradePolicy returns the UpgradePolicy field value
func (o *VcenterVmHardwareInfo) GetUpgradePolicy() VcenterVmHardwareUpgradePolicy {
	if o == nil {
		var ret VcenterVmHardwareUpgradePolicy
		return ret
	}

	return o.UpgradePolicy
}

// GetUpgradePolicyOk returns a tuple with the UpgradePolicy field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareInfo) GetUpgradePolicyOk() (*VcenterVmHardwareUpgradePolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpgradePolicy, true
}

// SetUpgradePolicy sets field value
func (o *VcenterVmHardwareInfo) SetUpgradePolicy(v VcenterVmHardwareUpgradePolicy) {
	o.UpgradePolicy = v
}

// GetUpgradeVersion returns the UpgradeVersion field value if set, zero value otherwise.
func (o *VcenterVmHardwareInfo) GetUpgradeVersion() VcenterVmHardwareVersion {
	if o == nil || o.UpgradeVersion == nil {
		var ret VcenterVmHardwareVersion
		return ret
	}
	return *o.UpgradeVersion
}

// GetUpgradeVersionOk returns a tuple with the UpgradeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareInfo) GetUpgradeVersionOk() (*VcenterVmHardwareVersion, bool) {
	if o == nil || o.UpgradeVersion == nil {
		return nil, false
	}
	return o.UpgradeVersion, true
}

// HasUpgradeVersion returns a boolean if a field has been set.
func (o *VcenterVmHardwareInfo) HasUpgradeVersion() bool {
	if o != nil && o.UpgradeVersion != nil {
		return true
	}

	return false
}

// SetUpgradeVersion gets a reference to the given VcenterVmHardwareVersion and assigns it to the UpgradeVersion field.
func (o *VcenterVmHardwareInfo) SetUpgradeVersion(v VcenterVmHardwareVersion) {
	o.UpgradeVersion = &v
}

// GetUpgradeStatus returns the UpgradeStatus field value
func (o *VcenterVmHardwareInfo) GetUpgradeStatus() VcenterVmHardwareUpgradeStatus {
	if o == nil {
		var ret VcenterVmHardwareUpgradeStatus
		return ret
	}

	return o.UpgradeStatus
}

// GetUpgradeStatusOk returns a tuple with the UpgradeStatus field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareInfo) GetUpgradeStatusOk() (*VcenterVmHardwareUpgradeStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpgradeStatus, true
}

// SetUpgradeStatus sets field value
func (o *VcenterVmHardwareInfo) SetUpgradeStatus(v VcenterVmHardwareUpgradeStatus) {
	o.UpgradeStatus = v
}

// GetUpgradeError returns the UpgradeError field value if set, zero value otherwise.
func (o *VcenterVmHardwareInfo) GetUpgradeError() string {
	if o == nil || o.UpgradeError == nil {
		var ret string
		return ret
	}
	return *o.UpgradeError
}

// GetUpgradeErrorOk returns a tuple with the UpgradeError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareInfo) GetUpgradeErrorOk() (*string, bool) {
	if o == nil || o.UpgradeError == nil {
		return nil, false
	}
	return o.UpgradeError, true
}

// HasUpgradeError returns a boolean if a field has been set.
func (o *VcenterVmHardwareInfo) HasUpgradeError() bool {
	if o != nil && o.UpgradeError != nil {
		return true
	}

	return false
}

// SetUpgradeError gets a reference to the given string and assigns it to the UpgradeError field.
func (o *VcenterVmHardwareInfo) SetUpgradeError(v string) {
	o.UpgradeError = &v
}

func (o VcenterVmHardwareInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["upgrade_policy"] = o.UpgradePolicy
	}
	if o.UpgradeVersion != nil {
		toSerialize["upgrade_version"] = o.UpgradeVersion
	}
	if true {
		toSerialize["upgrade_status"] = o.UpgradeStatus
	}
	if o.UpgradeError != nil {
		toSerialize["upgrade_error"] = o.UpgradeError
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareInfo struct {
	value *VcenterVmHardwareInfo
	isSet bool
}

func (v NullableVcenterVmHardwareInfo) Get() *VcenterVmHardwareInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareInfo) Set(val *VcenterVmHardwareInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareInfo(val *VcenterVmHardwareInfo) *NullableVcenterVmHardwareInfo {
	return &NullableVcenterVmHardwareInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


