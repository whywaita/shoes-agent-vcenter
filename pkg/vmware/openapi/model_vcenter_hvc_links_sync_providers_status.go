/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterHvcLinksSyncProvidersStatus The {@name Status} {@term enumerated type} defines valid sync status. *Warning:* This enumeration is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
type VcenterHvcLinksSyncProvidersStatus string

// List of vcenter.hvc.links.sync.providers.status
const (
	VCENTERHVCLINKSSYNCPROVIDERSSTATUS_SUCCEEDED VcenterHvcLinksSyncProvidersStatus = "SUCCEEDED"
	VCENTERHVCLINKSSYNCPROVIDERSSTATUS_FAILED VcenterHvcLinksSyncProvidersStatus = "FAILED"
	VCENTERHVCLINKSSYNCPROVIDERSSTATUS_NO_SYNC_FOUND VcenterHvcLinksSyncProvidersStatus = "NO_SYNC_FOUND"
)

// All allowed values of VcenterHvcLinksSyncProvidersStatus enum
var AllowedVcenterHvcLinksSyncProvidersStatusEnumValues = []VcenterHvcLinksSyncProvidersStatus{
	"SUCCEEDED",
	"FAILED",
	"NO_SYNC_FOUND",
}

func (v *VcenterHvcLinksSyncProvidersStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterHvcLinksSyncProvidersStatus(value)
	for _, existing := range AllowedVcenterHvcLinksSyncProvidersStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterHvcLinksSyncProvidersStatus", value)
}

// NewVcenterHvcLinksSyncProvidersStatusFromValue returns a pointer to a valid VcenterHvcLinksSyncProvidersStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterHvcLinksSyncProvidersStatusFromValue(v string) (*VcenterHvcLinksSyncProvidersStatus, error) {
	ev := VcenterHvcLinksSyncProvidersStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterHvcLinksSyncProvidersStatus: valid values are %v", v, AllowedVcenterHvcLinksSyncProvidersStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterHvcLinksSyncProvidersStatus) IsValid() bool {
	for _, existing := range AllowedVcenterHvcLinksSyncProvidersStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.hvc.links.sync.providers.status value
func (v VcenterHvcLinksSyncProvidersStatus) Ptr() *VcenterHvcLinksSyncProvidersStatus {
	return &v
}

type NullableVcenterHvcLinksSyncProvidersStatus struct {
	value *VcenterHvcLinksSyncProvidersStatus
	isSet bool
}

func (v NullableVcenterHvcLinksSyncProvidersStatus) Get() *VcenterHvcLinksSyncProvidersStatus {
	return v.value
}

func (v *NullableVcenterHvcLinksSyncProvidersStatus) Set(val *VcenterHvcLinksSyncProvidersStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterHvcLinksSyncProvidersStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterHvcLinksSyncProvidersStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterHvcLinksSyncProvidersStatus(val *VcenterHvcLinksSyncProvidersStatus) *NullableVcenterHvcLinksSyncProvidersStatus {
	return &NullableVcenterHvcLinksSyncProvidersStatus{value: val, isSet: true}
}

func (v NullableVcenterHvcLinksSyncProvidersStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterHvcLinksSyncProvidersStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

