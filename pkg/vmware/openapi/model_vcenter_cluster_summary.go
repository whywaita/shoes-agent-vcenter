/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterClusterSummary struct for VcenterClusterSummary
type VcenterClusterSummary struct {
	// Identifier of the cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.
	Cluster string `json:"cluster"`
	// Name of the cluster.
	Name string `json:"name"`
	// Flag indicating whether the vSphere HA feature is enabled for the cluster.
	HaEnabled bool `json:"ha_enabled"`
	// Flag indicating whether the vSphere DRS service is enabled for the cluster.
	DrsEnabled bool `json:"drs_enabled"`
}

// NewVcenterClusterSummary instantiates a new VcenterClusterSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterClusterSummary(cluster string, name string, haEnabled bool, drsEnabled bool) *VcenterClusterSummary {
	this := VcenterClusterSummary{}
	this.Cluster = cluster
	this.Name = name
	this.HaEnabled = haEnabled
	this.DrsEnabled = drsEnabled
	return &this
}

// NewVcenterClusterSummaryWithDefaults instantiates a new VcenterClusterSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterClusterSummaryWithDefaults() *VcenterClusterSummary {
	this := VcenterClusterSummary{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *VcenterClusterSummary) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *VcenterClusterSummary) GetClusterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *VcenterClusterSummary) SetCluster(v string) {
	o.Cluster = v
}

// GetName returns the Name field value
func (o *VcenterClusterSummary) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterClusterSummary) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterClusterSummary) SetName(v string) {
	o.Name = v
}

// GetHaEnabled returns the HaEnabled field value
func (o *VcenterClusterSummary) GetHaEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HaEnabled
}

// GetHaEnabledOk returns a tuple with the HaEnabled field value
// and a boolean to check if the value has been set.
func (o *VcenterClusterSummary) GetHaEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HaEnabled, true
}

// SetHaEnabled sets field value
func (o *VcenterClusterSummary) SetHaEnabled(v bool) {
	o.HaEnabled = v
}

// GetDrsEnabled returns the DrsEnabled field value
func (o *VcenterClusterSummary) GetDrsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DrsEnabled
}

// GetDrsEnabledOk returns a tuple with the DrsEnabled field value
// and a boolean to check if the value has been set.
func (o *VcenterClusterSummary) GetDrsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DrsEnabled, true
}

// SetDrsEnabled sets field value
func (o *VcenterClusterSummary) SetDrsEnabled(v bool) {
	o.DrsEnabled = v
}

func (o VcenterClusterSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cluster"] = o.Cluster
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["ha_enabled"] = o.HaEnabled
	}
	if true {
		toSerialize["drs_enabled"] = o.DrsEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterClusterSummary struct {
	value *VcenterClusterSummary
	isSet bool
}

func (v NullableVcenterClusterSummary) Get() *VcenterClusterSummary {
	return v.value
}

func (v *NullableVcenterClusterSummary) Set(val *VcenterClusterSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterClusterSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterClusterSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterClusterSummary(val *VcenterClusterSummary) *NullableVcenterClusterSummary {
	return &NullableVcenterClusterSummary{value: val, isSet: true}
}

func (v NullableVcenterClusterSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterClusterSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


