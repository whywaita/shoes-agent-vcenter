/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmGuestNetworkingInterfacesIpAddressStatus The Interfaces.IpAddressStatus enumerated type defines the present status of an address on an interface. See RFC 4293 IpAddressStatusTC.
type VcenterVmGuestNetworkingInterfacesIpAddressStatus string

// List of vcenter.vm.guest.networking.interfaces.ip_address_status
const (
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSSTATUS_PREFERRED VcenterVmGuestNetworkingInterfacesIpAddressStatus = "PREFERRED"
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSSTATUS_DEPRECATED VcenterVmGuestNetworkingInterfacesIpAddressStatus = "DEPRECATED"
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSSTATUS_INVALID VcenterVmGuestNetworkingInterfacesIpAddressStatus = "INVALID"
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSSTATUS_INACCESSIBLE VcenterVmGuestNetworkingInterfacesIpAddressStatus = "INACCESSIBLE"
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSSTATUS_UNKNOWN VcenterVmGuestNetworkingInterfacesIpAddressStatus = "UNKNOWN"
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSSTATUS_TENTATIVE VcenterVmGuestNetworkingInterfacesIpAddressStatus = "TENTATIVE"
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSSTATUS_DUPLICATE VcenterVmGuestNetworkingInterfacesIpAddressStatus = "DUPLICATE"
)

// All allowed values of VcenterVmGuestNetworkingInterfacesIpAddressStatus enum
var AllowedVcenterVmGuestNetworkingInterfacesIpAddressStatusEnumValues = []VcenterVmGuestNetworkingInterfacesIpAddressStatus{
	"PREFERRED",
	"DEPRECATED",
	"INVALID",
	"INACCESSIBLE",
	"UNKNOWN",
	"TENTATIVE",
	"DUPLICATE",
}

func (v *VcenterVmGuestNetworkingInterfacesIpAddressStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmGuestNetworkingInterfacesIpAddressStatus(value)
	for _, existing := range AllowedVcenterVmGuestNetworkingInterfacesIpAddressStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmGuestNetworkingInterfacesIpAddressStatus", value)
}

// NewVcenterVmGuestNetworkingInterfacesIpAddressStatusFromValue returns a pointer to a valid VcenterVmGuestNetworkingInterfacesIpAddressStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmGuestNetworkingInterfacesIpAddressStatusFromValue(v string) (*VcenterVmGuestNetworkingInterfacesIpAddressStatus, error) {
	ev := VcenterVmGuestNetworkingInterfacesIpAddressStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmGuestNetworkingInterfacesIpAddressStatus: valid values are %v", v, AllowedVcenterVmGuestNetworkingInterfacesIpAddressStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmGuestNetworkingInterfacesIpAddressStatus) IsValid() bool {
	for _, existing := range AllowedVcenterVmGuestNetworkingInterfacesIpAddressStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.guest.networking.interfaces.ip_address_status value
func (v VcenterVmGuestNetworkingInterfacesIpAddressStatus) Ptr() *VcenterVmGuestNetworkingInterfacesIpAddressStatus {
	return &v
}

type NullableVcenterVmGuestNetworkingInterfacesIpAddressStatus struct {
	value *VcenterVmGuestNetworkingInterfacesIpAddressStatus
	isSet bool
}

func (v NullableVcenterVmGuestNetworkingInterfacesIpAddressStatus) Get() *VcenterVmGuestNetworkingInterfacesIpAddressStatus {
	return v.value
}

func (v *NullableVcenterVmGuestNetworkingInterfacesIpAddressStatus) Set(val *VcenterVmGuestNetworkingInterfacesIpAddressStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestNetworkingInterfacesIpAddressStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestNetworkingInterfacesIpAddressStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestNetworkingInterfacesIpAddressStatus(val *VcenterVmGuestNetworkingInterfacesIpAddressStatus) *NullableVcenterVmGuestNetworkingInterfacesIpAddressStatus {
	return &NullableVcenterVmGuestNetworkingInterfacesIpAddressStatus{value: val, isSet: true}
}

func (v NullableVcenterVmGuestNetworkingInterfacesIpAddressStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestNetworkingInterfacesIpAddressStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

