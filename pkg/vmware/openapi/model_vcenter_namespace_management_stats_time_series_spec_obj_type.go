/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementStatsTimeSeriesSpecObjType Type of statistics object that this request is operating on.
type VcenterNamespaceManagementStatsTimeSeriesSpecObjType string

// List of VcenterNamespaceManagementStatsTimeSeriesSpecObjType
const (
	VCENTERNAMESPACEMANAGEMENTSTATSTIMESERIESSPECOBJTYPE_CLUSTER VcenterNamespaceManagementStatsTimeSeriesSpecObjType = "CLUSTER"
	VCENTERNAMESPACEMANAGEMENTSTATSTIMESERIESSPECOBJTYPE_NAMESPACE VcenterNamespaceManagementStatsTimeSeriesSpecObjType = "NAMESPACE"
	VCENTERNAMESPACEMANAGEMENTSTATSTIMESERIESSPECOBJTYPE_POD VcenterNamespaceManagementStatsTimeSeriesSpecObjType = "POD"
)

// All allowed values of VcenterNamespaceManagementStatsTimeSeriesSpecObjType enum
var AllowedVcenterNamespaceManagementStatsTimeSeriesSpecObjTypeEnumValues = []VcenterNamespaceManagementStatsTimeSeriesSpecObjType{
	"CLUSTER",
	"NAMESPACE",
	"POD",
}

func (v *VcenterNamespaceManagementStatsTimeSeriesSpecObjType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementStatsTimeSeriesSpecObjType(value)
	for _, existing := range AllowedVcenterNamespaceManagementStatsTimeSeriesSpecObjTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementStatsTimeSeriesSpecObjType", value)
}

// NewVcenterNamespaceManagementStatsTimeSeriesSpecObjTypeFromValue returns a pointer to a valid VcenterNamespaceManagementStatsTimeSeriesSpecObjType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementStatsTimeSeriesSpecObjTypeFromValue(v string) (*VcenterNamespaceManagementStatsTimeSeriesSpecObjType, error) {
	ev := VcenterNamespaceManagementStatsTimeSeriesSpecObjType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementStatsTimeSeriesSpecObjType: valid values are %v", v, AllowedVcenterNamespaceManagementStatsTimeSeriesSpecObjTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementStatsTimeSeriesSpecObjType) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementStatsTimeSeriesSpecObjTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementStatsTimeSeriesSpecObjType value
func (v VcenterNamespaceManagementStatsTimeSeriesSpecObjType) Ptr() *VcenterNamespaceManagementStatsTimeSeriesSpecObjType {
	return &v
}

type NullableVcenterNamespaceManagementStatsTimeSeriesSpecObjType struct {
	value *VcenterNamespaceManagementStatsTimeSeriesSpecObjType
	isSet bool
}

func (v NullableVcenterNamespaceManagementStatsTimeSeriesSpecObjType) Get() *VcenterNamespaceManagementStatsTimeSeriesSpecObjType {
	return v.value
}

func (v *NullableVcenterNamespaceManagementStatsTimeSeriesSpecObjType) Set(val *VcenterNamespaceManagementStatsTimeSeriesSpecObjType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementStatsTimeSeriesSpecObjType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementStatsTimeSeriesSpecObjType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementStatsTimeSeriesSpecObjType(val *VcenterNamespaceManagementStatsTimeSeriesSpecObjType) *NullableVcenterNamespaceManagementStatsTimeSeriesSpecObjType {
	return &NullableVcenterNamespaceManagementStatsTimeSeriesSpecObjType{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementStatsTimeSeriesSpecObjType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementStatsTimeSeriesSpecObjType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

