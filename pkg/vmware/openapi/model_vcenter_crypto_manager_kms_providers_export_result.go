/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCryptoManagerKmsProvidersExportResult struct for VcenterCryptoManagerKmsProvidersExportResult
type VcenterCryptoManagerKmsProvidersExportResult struct {
	Type VcenterCryptoManagerKmsProvidersExportType `json:"type"`
	Location *VcenterCryptoManagerKmsProvidersLocation `json:"location,omitempty"`
}

// NewVcenterCryptoManagerKmsProvidersExportResult instantiates a new VcenterCryptoManagerKmsProvidersExportResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCryptoManagerKmsProvidersExportResult(type_ VcenterCryptoManagerKmsProvidersExportType) *VcenterCryptoManagerKmsProvidersExportResult {
	this := VcenterCryptoManagerKmsProvidersExportResult{}
	this.Type = type_
	return &this
}

// NewVcenterCryptoManagerKmsProvidersExportResultWithDefaults instantiates a new VcenterCryptoManagerKmsProvidersExportResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCryptoManagerKmsProvidersExportResultWithDefaults() *VcenterCryptoManagerKmsProvidersExportResult {
	this := VcenterCryptoManagerKmsProvidersExportResult{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterCryptoManagerKmsProvidersExportResult) GetType() VcenterCryptoManagerKmsProvidersExportType {
	if o == nil {
		var ret VcenterCryptoManagerKmsProvidersExportType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersExportResult) GetTypeOk() (*VcenterCryptoManagerKmsProvidersExportType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterCryptoManagerKmsProvidersExportResult) SetType(v VcenterCryptoManagerKmsProvidersExportType) {
	o.Type = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersExportResult) GetLocation() VcenterCryptoManagerKmsProvidersLocation {
	if o == nil || o.Location == nil {
		var ret VcenterCryptoManagerKmsProvidersLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersExportResult) GetLocationOk() (*VcenterCryptoManagerKmsProvidersLocation, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersExportResult) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given VcenterCryptoManagerKmsProvidersLocation and assigns it to the Location field.
func (o *VcenterCryptoManagerKmsProvidersExportResult) SetLocation(v VcenterCryptoManagerKmsProvidersLocation) {
	o.Location = &v
}

func (o VcenterCryptoManagerKmsProvidersExportResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCryptoManagerKmsProvidersExportResult struct {
	value *VcenterCryptoManagerKmsProvidersExportResult
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersExportResult) Get() *VcenterCryptoManagerKmsProvidersExportResult {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersExportResult) Set(val *VcenterCryptoManagerKmsProvidersExportResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersExportResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersExportResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersExportResult(val *VcenterCryptoManagerKmsProvidersExportResult) *NullableVcenterCryptoManagerKmsProvidersExportResult {
	return &NullableVcenterCryptoManagerKmsProvidersExportResult{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersExportResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersExportResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


