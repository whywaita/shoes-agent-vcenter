/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VapiStdDynamicID struct for VapiStdDynamicID
type VapiStdDynamicID struct {
	// The type of resource being identified (for example {@code com.acme.Person}). <p> {@term Services} that contain {@term operations} for creating and deleting resources typically contain a {@term constant} specifying the resource type for the resources being created and deleted. The API metamodel metadata {@term services} include a {@term service} that allows retrieving all the known resource types.
	Type string `json:"type"`
	// The identifier for a resource whose type is specified by {@link #type}.
	Id string `json:"id"`
}

// NewVapiStdDynamicID instantiates a new VapiStdDynamicID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVapiStdDynamicID(type_ string, id string) *VapiStdDynamicID {
	this := VapiStdDynamicID{}
	this.Type = type_
	this.Id = id
	return &this
}

// NewVapiStdDynamicIDWithDefaults instantiates a new VapiStdDynamicID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVapiStdDynamicIDWithDefaults() *VapiStdDynamicID {
	this := VapiStdDynamicID{}
	return &this
}

// GetType returns the Type field value
func (o *VapiStdDynamicID) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VapiStdDynamicID) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VapiStdDynamicID) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *VapiStdDynamicID) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VapiStdDynamicID) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VapiStdDynamicID) SetId(v string) {
	o.Id = v
}

func (o VapiStdDynamicID) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableVapiStdDynamicID struct {
	value *VapiStdDynamicID
	isSet bool
}

func (v NullableVapiStdDynamicID) Get() *VapiStdDynamicID {
	return v.value
}

func (v *NullableVapiStdDynamicID) Set(val *VapiStdDynamicID) {
	v.value = val
	v.isSet = true
}

func (v NullableVapiStdDynamicID) IsSet() bool {
	return v.isSet
}

func (v *NullableVapiStdDynamicID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVapiStdDynamicID(val *VapiStdDynamicID) *NullableVapiStdDynamicID {
	return &NullableVapiStdDynamicID{value: val, isSet: true}
}

func (v NullableVapiStdDynamicID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVapiStdDynamicID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


