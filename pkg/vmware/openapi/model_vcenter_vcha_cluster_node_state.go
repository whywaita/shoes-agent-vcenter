/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVchaClusterNodeState The Cluster.NodeState enumerated type defines possible state a node can be in a VCHA Cluster.
type VcenterVchaClusterNodeState string

// List of vcenter.vcha.cluster.node_state
const (
	VCENTERVCHACLUSTERNODESTATE_UP VcenterVchaClusterNodeState = "UP"
	VCENTERVCHACLUSTERNODESTATE_DOWN VcenterVchaClusterNodeState = "DOWN"
)

// All allowed values of VcenterVchaClusterNodeState enum
var AllowedVcenterVchaClusterNodeStateEnumValues = []VcenterVchaClusterNodeState{
	"UP",
	"DOWN",
}

func (v *VcenterVchaClusterNodeState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVchaClusterNodeState(value)
	for _, existing := range AllowedVcenterVchaClusterNodeStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVchaClusterNodeState", value)
}

// NewVcenterVchaClusterNodeStateFromValue returns a pointer to a valid VcenterVchaClusterNodeState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVchaClusterNodeStateFromValue(v string) (*VcenterVchaClusterNodeState, error) {
	ev := VcenterVchaClusterNodeState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVchaClusterNodeState: valid values are %v", v, AllowedVcenterVchaClusterNodeStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVchaClusterNodeState) IsValid() bool {
	for _, existing := range AllowedVcenterVchaClusterNodeStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vcha.cluster.node_state value
func (v VcenterVchaClusterNodeState) Ptr() *VcenterVchaClusterNodeState {
	return &v
}

type NullableVcenterVchaClusterNodeState struct {
	value *VcenterVchaClusterNodeState
	isSet bool
}

func (v NullableVcenterVchaClusterNodeState) Get() *VcenterVchaClusterNodeState {
	return v.value
}

func (v *NullableVcenterVchaClusterNodeState) Set(val *VcenterVchaClusterNodeState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterNodeState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterNodeState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterNodeState(val *VcenterVchaClusterNodeState) *NullableVcenterVchaClusterNodeState {
	return &NullableVcenterVchaClusterNodeState{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterNodeState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterNodeState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

