/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VapiStdLocalizationParamDateTimeFormat The {@name DateTimeFormat} {@term enumerated type} lists possible date and time formatting options. It combines the Unicode CLDR format types - full, long, medium and short with 3 different presentations - date only, time only and combined date and time presentation.
type VapiStdLocalizationParamDateTimeFormat string

// List of vapi.std.localization_param.date_time_format
const (
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_SHORT_DATE VapiStdLocalizationParamDateTimeFormat = "SHORT_DATE"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_MED_DATE VapiStdLocalizationParamDateTimeFormat = "MED_DATE"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_LONG_DATE VapiStdLocalizationParamDateTimeFormat = "LONG_DATE"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_FULL_DATE VapiStdLocalizationParamDateTimeFormat = "FULL_DATE"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_SHORT_TIME VapiStdLocalizationParamDateTimeFormat = "SHORT_TIME"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_MED_TIME VapiStdLocalizationParamDateTimeFormat = "MED_TIME"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_LONG_TIME VapiStdLocalizationParamDateTimeFormat = "LONG_TIME"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_FULL_TIME VapiStdLocalizationParamDateTimeFormat = "FULL_TIME"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_SHORT_DATE_TIME VapiStdLocalizationParamDateTimeFormat = "SHORT_DATE_TIME"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_MED_DATE_TIME VapiStdLocalizationParamDateTimeFormat = "MED_DATE_TIME"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_LONG_DATE_TIME VapiStdLocalizationParamDateTimeFormat = "LONG_DATE_TIME"
	VAPISTDLOCALIZATIONPARAMDATETIMEFORMAT_FULL_DATE_TIME VapiStdLocalizationParamDateTimeFormat = "FULL_DATE_TIME"
)

// All allowed values of VapiStdLocalizationParamDateTimeFormat enum
var AllowedVapiStdLocalizationParamDateTimeFormatEnumValues = []VapiStdLocalizationParamDateTimeFormat{
	"SHORT_DATE",
	"MED_DATE",
	"LONG_DATE",
	"FULL_DATE",
	"SHORT_TIME",
	"MED_TIME",
	"LONG_TIME",
	"FULL_TIME",
	"SHORT_DATE_TIME",
	"MED_DATE_TIME",
	"LONG_DATE_TIME",
	"FULL_DATE_TIME",
}

func (v *VapiStdLocalizationParamDateTimeFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VapiStdLocalizationParamDateTimeFormat(value)
	for _, existing := range AllowedVapiStdLocalizationParamDateTimeFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VapiStdLocalizationParamDateTimeFormat", value)
}

// NewVapiStdLocalizationParamDateTimeFormatFromValue returns a pointer to a valid VapiStdLocalizationParamDateTimeFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVapiStdLocalizationParamDateTimeFormatFromValue(v string) (*VapiStdLocalizationParamDateTimeFormat, error) {
	ev := VapiStdLocalizationParamDateTimeFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VapiStdLocalizationParamDateTimeFormat: valid values are %v", v, AllowedVapiStdLocalizationParamDateTimeFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VapiStdLocalizationParamDateTimeFormat) IsValid() bool {
	for _, existing := range AllowedVapiStdLocalizationParamDateTimeFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vapi.std.localization_param.date_time_format value
func (v VapiStdLocalizationParamDateTimeFormat) Ptr() *VapiStdLocalizationParamDateTimeFormat {
	return &v
}

type NullableVapiStdLocalizationParamDateTimeFormat struct {
	value *VapiStdLocalizationParamDateTimeFormat
	isSet bool
}

func (v NullableVapiStdLocalizationParamDateTimeFormat) Get() *VapiStdLocalizationParamDateTimeFormat {
	return v.value
}

func (v *NullableVapiStdLocalizationParamDateTimeFormat) Set(val *VapiStdLocalizationParamDateTimeFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableVapiStdLocalizationParamDateTimeFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableVapiStdLocalizationParamDateTimeFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVapiStdLocalizationParamDateTimeFormat(val *VapiStdLocalizationParamDateTimeFormat) *NullableVapiStdLocalizationParamDateTimeFormat {
	return &NullableVapiStdLocalizationParamDateTimeFormat{value: val, isSet: true}
}

func (v NullableVapiStdLocalizationParamDateTimeFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVapiStdLocalizationParamDateTimeFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

