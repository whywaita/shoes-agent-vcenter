/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaDiskSpec struct for VcenterVchaDiskSpec
type VcenterVchaDiskSpec struct {
	// The identifier of the datastore to put all the virtual disks on. This field needs to be set. If unset, then see vim.vm.RelocateSpec.datastore. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore:VCenter.
	Datastore *string `json:"datastore,omitempty"`
}

// NewVcenterVchaDiskSpec instantiates a new VcenterVchaDiskSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaDiskSpec() *VcenterVchaDiskSpec {
	this := VcenterVchaDiskSpec{}
	return &this
}

// NewVcenterVchaDiskSpecWithDefaults instantiates a new VcenterVchaDiskSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaDiskSpecWithDefaults() *VcenterVchaDiskSpec {
	this := VcenterVchaDiskSpec{}
	return &this
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *VcenterVchaDiskSpec) GetDatastore() string {
	if o == nil || o.Datastore == nil {
		var ret string
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaDiskSpec) GetDatastoreOk() (*string, bool) {
	if o == nil || o.Datastore == nil {
		return nil, false
	}
	return o.Datastore, true
}

// HasDatastore returns a boolean if a field has been set.
func (o *VcenterVchaDiskSpec) HasDatastore() bool {
	if o != nil && o.Datastore != nil {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given string and assigns it to the Datastore field.
func (o *VcenterVchaDiskSpec) SetDatastore(v string) {
	o.Datastore = &v
}

func (o VcenterVchaDiskSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Datastore != nil {
		toSerialize["datastore"] = o.Datastore
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaDiskSpec struct {
	value *VcenterVchaDiskSpec
	isSet bool
}

func (v NullableVcenterVchaDiskSpec) Get() *VcenterVchaDiskSpec {
	return v.value
}

func (v *NullableVcenterVchaDiskSpec) Set(val *VcenterVchaDiskSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaDiskSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaDiskSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaDiskSpec(val *VcenterVchaDiskSpec) *NullableVcenterVchaDiskSpec {
	return &NullableVcenterVchaDiskSpec{value: val, isSet: true}
}

func (v NullableVcenterVchaDiskSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaDiskSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


