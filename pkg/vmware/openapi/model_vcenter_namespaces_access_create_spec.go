/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespacesAccessCreateSpec struct for VcenterNamespacesAccessCreateSpec
type VcenterNamespacesAccessCreateSpec struct {
	Role VcenterNamespacesAccessRole `json:"role"`
}

// NewVcenterNamespacesAccessCreateSpec instantiates a new VcenterNamespacesAccessCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespacesAccessCreateSpec(role VcenterNamespacesAccessRole) *VcenterNamespacesAccessCreateSpec {
	this := VcenterNamespacesAccessCreateSpec{}
	this.Role = role
	return &this
}

// NewVcenterNamespacesAccessCreateSpecWithDefaults instantiates a new VcenterNamespacesAccessCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespacesAccessCreateSpecWithDefaults() *VcenterNamespacesAccessCreateSpec {
	this := VcenterNamespacesAccessCreateSpec{}
	return &this
}

// GetRole returns the Role field value
func (o *VcenterNamespacesAccessCreateSpec) GetRole() VcenterNamespacesAccessRole {
	if o == nil {
		var ret VcenterNamespacesAccessRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesAccessCreateSpec) GetRoleOk() (*VcenterNamespacesAccessRole, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *VcenterNamespacesAccessCreateSpec) SetRole(v VcenterNamespacesAccessRole) {
	o.Role = v
}

func (o VcenterNamespacesAccessCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["role"] = o.Role
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespacesAccessCreateSpec struct {
	value *VcenterNamespacesAccessCreateSpec
	isSet bool
}

func (v NullableVcenterNamespacesAccessCreateSpec) Get() *VcenterNamespacesAccessCreateSpec {
	return v.value
}

func (v *NullableVcenterNamespacesAccessCreateSpec) Set(val *VcenterNamespacesAccessCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesAccessCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesAccessCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesAccessCreateSpec(val *VcenterNamespacesAccessCreateSpec) *NullableVcenterNamespacesAccessCreateSpec {
	return &NullableVcenterNamespacesAccessCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespacesAccessCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesAccessCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


