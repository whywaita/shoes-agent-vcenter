/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareSerialInfo struct for VcenterVmHardwareSerialInfo
type VcenterVmHardwareSerialInfo struct {
	// Device label.
	Label string `json:"label"`
	// CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host.
	YieldOnPoll bool `json:"yield_on_poll"`
	Backing VcenterVmHardwareSerialBackingInfo `json:"backing"`
	State VcenterVmHardwareConnectionState `json:"state"`
	// Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.
	StartConnected bool `json:"start_connected"`
	// Flag indicating whether the guest can connect and disconnect the device.
	AllowGuestControl bool `json:"allow_guest_control"`
}

// NewVcenterVmHardwareSerialInfo instantiates a new VcenterVmHardwareSerialInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareSerialInfo(label string, yieldOnPoll bool, backing VcenterVmHardwareSerialBackingInfo, state VcenterVmHardwareConnectionState, startConnected bool, allowGuestControl bool) *VcenterVmHardwareSerialInfo {
	this := VcenterVmHardwareSerialInfo{}
	this.Label = label
	this.YieldOnPoll = yieldOnPoll
	this.Backing = backing
	this.State = state
	this.StartConnected = startConnected
	this.AllowGuestControl = allowGuestControl
	return &this
}

// NewVcenterVmHardwareSerialInfoWithDefaults instantiates a new VcenterVmHardwareSerialInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareSerialInfoWithDefaults() *VcenterVmHardwareSerialInfo {
	this := VcenterVmHardwareSerialInfo{}
	return &this
}

// GetLabel returns the Label field value
func (o *VcenterVmHardwareSerialInfo) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareSerialInfo) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *VcenterVmHardwareSerialInfo) SetLabel(v string) {
	o.Label = v
}

// GetYieldOnPoll returns the YieldOnPoll field value
func (o *VcenterVmHardwareSerialInfo) GetYieldOnPoll() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.YieldOnPoll
}

// GetYieldOnPollOk returns a tuple with the YieldOnPoll field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareSerialInfo) GetYieldOnPollOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.YieldOnPoll, true
}

// SetYieldOnPoll sets field value
func (o *VcenterVmHardwareSerialInfo) SetYieldOnPoll(v bool) {
	o.YieldOnPoll = v
}

// GetBacking returns the Backing field value
func (o *VcenterVmHardwareSerialInfo) GetBacking() VcenterVmHardwareSerialBackingInfo {
	if o == nil {
		var ret VcenterVmHardwareSerialBackingInfo
		return ret
	}

	return o.Backing
}

// GetBackingOk returns a tuple with the Backing field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareSerialInfo) GetBackingOk() (*VcenterVmHardwareSerialBackingInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Backing, true
}

// SetBacking sets field value
func (o *VcenterVmHardwareSerialInfo) SetBacking(v VcenterVmHardwareSerialBackingInfo) {
	o.Backing = v
}

// GetState returns the State field value
func (o *VcenterVmHardwareSerialInfo) GetState() VcenterVmHardwareConnectionState {
	if o == nil {
		var ret VcenterVmHardwareConnectionState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareSerialInfo) GetStateOk() (*VcenterVmHardwareConnectionState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VcenterVmHardwareSerialInfo) SetState(v VcenterVmHardwareConnectionState) {
	o.State = v
}

// GetStartConnected returns the StartConnected field value
func (o *VcenterVmHardwareSerialInfo) GetStartConnected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StartConnected
}

// GetStartConnectedOk returns a tuple with the StartConnected field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareSerialInfo) GetStartConnectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartConnected, true
}

// SetStartConnected sets field value
func (o *VcenterVmHardwareSerialInfo) SetStartConnected(v bool) {
	o.StartConnected = v
}

// GetAllowGuestControl returns the AllowGuestControl field value
func (o *VcenterVmHardwareSerialInfo) GetAllowGuestControl() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowGuestControl
}

// GetAllowGuestControlOk returns a tuple with the AllowGuestControl field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareSerialInfo) GetAllowGuestControlOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AllowGuestControl, true
}

// SetAllowGuestControl sets field value
func (o *VcenterVmHardwareSerialInfo) SetAllowGuestControl(v bool) {
	o.AllowGuestControl = v
}

func (o VcenterVmHardwareSerialInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["yield_on_poll"] = o.YieldOnPoll
	}
	if true {
		toSerialize["backing"] = o.Backing
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["start_connected"] = o.StartConnected
	}
	if true {
		toSerialize["allow_guest_control"] = o.AllowGuestControl
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareSerialInfo struct {
	value *VcenterVmHardwareSerialInfo
	isSet bool
}

func (v NullableVcenterVmHardwareSerialInfo) Get() *VcenterVmHardwareSerialInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareSerialInfo) Set(val *VcenterVmHardwareSerialInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareSerialInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareSerialInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareSerialInfo(val *VcenterVmHardwareSerialInfo) *NullableVcenterVmHardwareSerialInfo {
	return &NullableVcenterVmHardwareSerialInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareSerialInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareSerialInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


