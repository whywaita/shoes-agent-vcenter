/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterDeploymentApplianceType The ApplianceType enumerated type defines the vCenter appliance types.
type VcenterDeploymentApplianceType string

// List of vcenter.deployment.appliance_type
const (
	VCENTERDEPLOYMENTAPPLIANCETYPE_VCSA_EMBEDDED VcenterDeploymentApplianceType = "VCSA_EMBEDDED"
	VCENTERDEPLOYMENTAPPLIANCETYPE_VCSA_EXTERNAL VcenterDeploymentApplianceType = "VCSA_EXTERNAL"
	VCENTERDEPLOYMENTAPPLIANCETYPE_PSC_EXTERNAL VcenterDeploymentApplianceType = "PSC_EXTERNAL"
)

// All allowed values of VcenterDeploymentApplianceType enum
var AllowedVcenterDeploymentApplianceTypeEnumValues = []VcenterDeploymentApplianceType{
	"VCSA_EMBEDDED",
	"VCSA_EXTERNAL",
	"PSC_EXTERNAL",
}

func (v *VcenterDeploymentApplianceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterDeploymentApplianceType(value)
	for _, existing := range AllowedVcenterDeploymentApplianceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterDeploymentApplianceType", value)
}

// NewVcenterDeploymentApplianceTypeFromValue returns a pointer to a valid VcenterDeploymentApplianceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterDeploymentApplianceTypeFromValue(v string) (*VcenterDeploymentApplianceType, error) {
	ev := VcenterDeploymentApplianceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterDeploymentApplianceType: valid values are %v", v, AllowedVcenterDeploymentApplianceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterDeploymentApplianceType) IsValid() bool {
	for _, existing := range AllowedVcenterDeploymentApplianceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.deployment.appliance_type value
func (v VcenterDeploymentApplianceType) Ptr() *VcenterDeploymentApplianceType {
	return &v
}

type NullableVcenterDeploymentApplianceType struct {
	value *VcenterDeploymentApplianceType
	isSet bool
}

func (v NullableVcenterDeploymentApplianceType) Get() *VcenterDeploymentApplianceType {
	return v.value
}

func (v *NullableVcenterDeploymentApplianceType) Set(val *VcenterDeploymentApplianceType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentApplianceType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentApplianceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentApplianceType(val *VcenterDeploymentApplianceType) *NullableVcenterDeploymentApplianceType {
	return &NullableVcenterDeploymentApplianceType{value: val, isSet: true}
}

func (v NullableVcenterDeploymentApplianceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentApplianceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

