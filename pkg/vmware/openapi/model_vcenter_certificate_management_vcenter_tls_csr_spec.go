/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCertificateManagementVcenterTlsCsrSpec struct for VcenterCertificateManagementVcenterTlsCsrSpec
type VcenterCertificateManagementVcenterTlsCsrSpec struct {
	// keySize will take 2048 bits if not modified.
	KeySize *int64 `json:"key_size,omitempty"`
	// commonName will take PNID if not modified.
	CommonName *string `json:"common_name,omitempty"`
	// Organization field in certificate subject
	Organization string `json:"organization"`
	// Organization unit field in certificate subject
	OrganizationUnit string `json:"organization_unit"`
	// Locality field in certificate subject
	Locality string `json:"locality"`
	// State field in certificate subject
	StateOrProvince string `json:"state_or_province"`
	// Country field in certificate subject
	Country string `json:"country"`
	// Email field in Certificate extensions
	EmailAddress string `json:"email_address"`
	// subjectAltName is list of Dns Names and Ip addresses
	SubjectAltName *[]string `json:"subject_alt_name,omitempty"`
}

// NewVcenterCertificateManagementVcenterTlsCsrSpec instantiates a new VcenterCertificateManagementVcenterTlsCsrSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCertificateManagementVcenterTlsCsrSpec(organization string, organizationUnit string, locality string, stateOrProvince string, country string, emailAddress string) *VcenterCertificateManagementVcenterTlsCsrSpec {
	this := VcenterCertificateManagementVcenterTlsCsrSpec{}
	this.Organization = organization
	this.OrganizationUnit = organizationUnit
	this.Locality = locality
	this.StateOrProvince = stateOrProvince
	this.Country = country
	this.EmailAddress = emailAddress
	return &this
}

// NewVcenterCertificateManagementVcenterTlsCsrSpecWithDefaults instantiates a new VcenterCertificateManagementVcenterTlsCsrSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCertificateManagementVcenterTlsCsrSpecWithDefaults() *VcenterCertificateManagementVcenterTlsCsrSpec {
	this := VcenterCertificateManagementVcenterTlsCsrSpec{}
	return &this
}

// GetKeySize returns the KeySize field value if set, zero value otherwise.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetKeySize() int64 {
	if o == nil || o.KeySize == nil {
		var ret int64
		return ret
	}
	return *o.KeySize
}

// GetKeySizeOk returns a tuple with the KeySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetKeySizeOk() (*int64, bool) {
	if o == nil || o.KeySize == nil {
		return nil, false
	}
	return o.KeySize, true
}

// HasKeySize returns a boolean if a field has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) HasKeySize() bool {
	if o != nil && o.KeySize != nil {
		return true
	}

	return false
}

// SetKeySize gets a reference to the given int64 and assigns it to the KeySize field.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) SetKeySize(v int64) {
	o.KeySize = &v
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetCommonName() string {
	if o == nil || o.CommonName == nil {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetCommonNameOk() (*string, bool) {
	if o == nil || o.CommonName == nil {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) HasCommonName() bool {
	if o != nil && o.CommonName != nil {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) SetCommonName(v string) {
	o.CommonName = &v
}

// GetOrganization returns the Organization field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetOrganization() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetOrganizationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) SetOrganization(v string) {
	o.Organization = v
}

// GetOrganizationUnit returns the OrganizationUnit field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetOrganizationUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationUnit
}

// GetOrganizationUnitOk returns a tuple with the OrganizationUnit field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetOrganizationUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OrganizationUnit, true
}

// SetOrganizationUnit sets field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) SetOrganizationUnit(v string) {
	o.OrganizationUnit = v
}

// GetLocality returns the Locality field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetLocality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetLocalityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Locality, true
}

// SetLocality sets field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) SetLocality(v string) {
	o.Locality = v
}

// GetStateOrProvince returns the StateOrProvince field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetStateOrProvince() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateOrProvince
}

// GetStateOrProvinceOk returns a tuple with the StateOrProvince field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetStateOrProvinceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StateOrProvince, true
}

// SetStateOrProvince sets field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) SetStateOrProvince(v string) {
	o.StateOrProvince = v
}

// GetCountry returns the Country field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) SetCountry(v string) {
	o.Country = v
}

// GetEmailAddress returns the EmailAddress field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) SetEmailAddress(v string) {
	o.EmailAddress = v
}

// GetSubjectAltName returns the SubjectAltName field value if set, zero value otherwise.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetSubjectAltName() []string {
	if o == nil || o.SubjectAltName == nil {
		var ret []string
		return ret
	}
	return *o.SubjectAltName
}

// GetSubjectAltNameOk returns a tuple with the SubjectAltName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) GetSubjectAltNameOk() (*[]string, bool) {
	if o == nil || o.SubjectAltName == nil {
		return nil, false
	}
	return o.SubjectAltName, true
}

// HasSubjectAltName returns a boolean if a field has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) HasSubjectAltName() bool {
	if o != nil && o.SubjectAltName != nil {
		return true
	}

	return false
}

// SetSubjectAltName gets a reference to the given []string and assigns it to the SubjectAltName field.
func (o *VcenterCertificateManagementVcenterTlsCsrSpec) SetSubjectAltName(v []string) {
	o.SubjectAltName = &v
}

func (o VcenterCertificateManagementVcenterTlsCsrSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KeySize != nil {
		toSerialize["key_size"] = o.KeySize
	}
	if o.CommonName != nil {
		toSerialize["common_name"] = o.CommonName
	}
	if true {
		toSerialize["organization"] = o.Organization
	}
	if true {
		toSerialize["organization_unit"] = o.OrganizationUnit
	}
	if true {
		toSerialize["locality"] = o.Locality
	}
	if true {
		toSerialize["state_or_province"] = o.StateOrProvince
	}
	if true {
		toSerialize["country"] = o.Country
	}
	if true {
		toSerialize["email_address"] = o.EmailAddress
	}
	if o.SubjectAltName != nil {
		toSerialize["subject_alt_name"] = o.SubjectAltName
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCertificateManagementVcenterTlsCsrSpec struct {
	value *VcenterCertificateManagementVcenterTlsCsrSpec
	isSet bool
}

func (v NullableVcenterCertificateManagementVcenterTlsCsrSpec) Get() *VcenterCertificateManagementVcenterTlsCsrSpec {
	return v.value
}

func (v *NullableVcenterCertificateManagementVcenterTlsCsrSpec) Set(val *VcenterCertificateManagementVcenterTlsCsrSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCertificateManagementVcenterTlsCsrSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCertificateManagementVcenterTlsCsrSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCertificateManagementVcenterTlsCsrSpec(val *VcenterCertificateManagementVcenterTlsCsrSpec) *NullableVcenterCertificateManagementVcenterTlsCsrSpec {
	return &NullableVcenterCertificateManagementVcenterTlsCsrSpec{value: val, isSet: true}
}

func (v NullableVcenterCertificateManagementVcenterTlsCsrSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCertificateManagementVcenterTlsCsrSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


