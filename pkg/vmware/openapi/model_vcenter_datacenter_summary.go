/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDatacenterSummary struct for VcenterDatacenterSummary
type VcenterDatacenterSummary struct {
	// Identifier of the datacenter. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datacenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datacenter.
	Datacenter string `json:"datacenter"`
	// Name of the datacenter.
	Name string `json:"name"`
}

// NewVcenterDatacenterSummary instantiates a new VcenterDatacenterSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDatacenterSummary(datacenter string, name string) *VcenterDatacenterSummary {
	this := VcenterDatacenterSummary{}
	this.Datacenter = datacenter
	this.Name = name
	return &this
}

// NewVcenterDatacenterSummaryWithDefaults instantiates a new VcenterDatacenterSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDatacenterSummaryWithDefaults() *VcenterDatacenterSummary {
	this := VcenterDatacenterSummary{}
	return &this
}

// GetDatacenter returns the Datacenter field value
func (o *VcenterDatacenterSummary) GetDatacenter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datacenter
}

// GetDatacenterOk returns a tuple with the Datacenter field value
// and a boolean to check if the value has been set.
func (o *VcenterDatacenterSummary) GetDatacenterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Datacenter, true
}

// SetDatacenter sets field value
func (o *VcenterDatacenterSummary) SetDatacenter(v string) {
	o.Datacenter = v
}

// GetName returns the Name field value
func (o *VcenterDatacenterSummary) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterDatacenterSummary) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterDatacenterSummary) SetName(v string) {
	o.Name = v
}

func (o VcenterDatacenterSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["datacenter"] = o.Datacenter
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDatacenterSummary struct {
	value *VcenterDatacenterSummary
	isSet bool
}

func (v NullableVcenterDatacenterSummary) Get() *VcenterDatacenterSummary {
	return v.value
}

func (v *NullableVcenterDatacenterSummary) Set(val *VcenterDatacenterSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDatacenterSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDatacenterSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDatacenterSummary(val *VcenterDatacenterSummary) *NullableVcenterDatacenterSummary {
	return &NullableVcenterDatacenterSummary{value: val, isSet: true}
}

func (v NullableVcenterDatacenterSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDatacenterSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


