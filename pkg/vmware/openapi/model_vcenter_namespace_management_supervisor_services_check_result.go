/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSupervisorServicesCheckResult struct for VcenterNamespaceManagementSupervisorServicesCheckResult
type VcenterNamespaceManagementSupervisorServicesCheckResult struct {
	Status VcenterNamespaceManagementSupervisorServicesValidationStatus `json:"status"`
	ContentType *VcenterNamespaceManagementSupervisorServicesVersionsContentType `json:"content_type,omitempty"`
	VsphereAppsCheckResult *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult `json:"vsphere_apps_check_result,omitempty"`
	// A list of messages indicating why the content was considered valid but contains information that should be reviewed closely. This field is optional and it is only relevant when the value of SupervisorServices.CheckResult.status is VALID_WITH_WARNINGS.
	WarningMessages *[]VapiStdLocalizableMessage `json:"warning_messages,omitempty"`
	// A list of messages indicating why the content was considered invalid. This field is optional and it is only relevant when the value of SupervisorServices.CheckResult.status is INVALID.
	ErrorMessages *[]VapiStdLocalizableMessage `json:"error_messages,omitempty"`
}

// NewVcenterNamespaceManagementSupervisorServicesCheckResult instantiates a new VcenterNamespaceManagementSupervisorServicesCheckResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSupervisorServicesCheckResult(status VcenterNamespaceManagementSupervisorServicesValidationStatus) *VcenterNamespaceManagementSupervisorServicesCheckResult {
	this := VcenterNamespaceManagementSupervisorServicesCheckResult{}
	this.Status = status
	return &this
}

// NewVcenterNamespaceManagementSupervisorServicesCheckResultWithDefaults instantiates a new VcenterNamespaceManagementSupervisorServicesCheckResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSupervisorServicesCheckResultWithDefaults() *VcenterNamespaceManagementSupervisorServicesCheckResult {
	this := VcenterNamespaceManagementSupervisorServicesCheckResult{}
	return &this
}

// GetStatus returns the Status field value
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) GetStatus() VcenterNamespaceManagementSupervisorServicesValidationStatus {
	if o == nil {
		var ret VcenterNamespaceManagementSupervisorServicesValidationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) GetStatusOk() (*VcenterNamespaceManagementSupervisorServicesValidationStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) SetStatus(v VcenterNamespaceManagementSupervisorServicesValidationStatus) {
	o.Status = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) GetContentType() VcenterNamespaceManagementSupervisorServicesVersionsContentType {
	if o == nil || o.ContentType == nil {
		var ret VcenterNamespaceManagementSupervisorServicesVersionsContentType
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) GetContentTypeOk() (*VcenterNamespaceManagementSupervisorServicesVersionsContentType, bool) {
	if o == nil || o.ContentType == nil {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) HasContentType() bool {
	if o != nil && o.ContentType != nil {
		return true
	}

	return false
}

// SetContentType gets a reference to the given VcenterNamespaceManagementSupervisorServicesVersionsContentType and assigns it to the ContentType field.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) SetContentType(v VcenterNamespaceManagementSupervisorServicesVersionsContentType) {
	o.ContentType = &v
}

// GetVsphereAppsCheckResult returns the VsphereAppsCheckResult field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) GetVsphereAppsCheckResult() VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult {
	if o == nil || o.VsphereAppsCheckResult == nil {
		var ret VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult
		return ret
	}
	return *o.VsphereAppsCheckResult
}

// GetVsphereAppsCheckResultOk returns a tuple with the VsphereAppsCheckResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) GetVsphereAppsCheckResultOk() (*VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult, bool) {
	if o == nil || o.VsphereAppsCheckResult == nil {
		return nil, false
	}
	return o.VsphereAppsCheckResult, true
}

// HasVsphereAppsCheckResult returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) HasVsphereAppsCheckResult() bool {
	if o != nil && o.VsphereAppsCheckResult != nil {
		return true
	}

	return false
}

// SetVsphereAppsCheckResult gets a reference to the given VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult and assigns it to the VsphereAppsCheckResult field.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) SetVsphereAppsCheckResult(v VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) {
	o.VsphereAppsCheckResult = &v
}

// GetWarningMessages returns the WarningMessages field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) GetWarningMessages() []VapiStdLocalizableMessage {
	if o == nil || o.WarningMessages == nil {
		var ret []VapiStdLocalizableMessage
		return ret
	}
	return *o.WarningMessages
}

// GetWarningMessagesOk returns a tuple with the WarningMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) GetWarningMessagesOk() (*[]VapiStdLocalizableMessage, bool) {
	if o == nil || o.WarningMessages == nil {
		return nil, false
	}
	return o.WarningMessages, true
}

// HasWarningMessages returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) HasWarningMessages() bool {
	if o != nil && o.WarningMessages != nil {
		return true
	}

	return false
}

// SetWarningMessages gets a reference to the given []VapiStdLocalizableMessage and assigns it to the WarningMessages field.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) SetWarningMessages(v []VapiStdLocalizableMessage) {
	o.WarningMessages = &v
}

// GetErrorMessages returns the ErrorMessages field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) GetErrorMessages() []VapiStdLocalizableMessage {
	if o == nil || o.ErrorMessages == nil {
		var ret []VapiStdLocalizableMessage
		return ret
	}
	return *o.ErrorMessages
}

// GetErrorMessagesOk returns a tuple with the ErrorMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) GetErrorMessagesOk() (*[]VapiStdLocalizableMessage, bool) {
	if o == nil || o.ErrorMessages == nil {
		return nil, false
	}
	return o.ErrorMessages, true
}

// HasErrorMessages returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) HasErrorMessages() bool {
	if o != nil && o.ErrorMessages != nil {
		return true
	}

	return false
}

// SetErrorMessages gets a reference to the given []VapiStdLocalizableMessage and assigns it to the ErrorMessages field.
func (o *VcenterNamespaceManagementSupervisorServicesCheckResult) SetErrorMessages(v []VapiStdLocalizableMessage) {
	o.ErrorMessages = &v
}

func (o VcenterNamespaceManagementSupervisorServicesCheckResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.ContentType != nil {
		toSerialize["content_type"] = o.ContentType
	}
	if o.VsphereAppsCheckResult != nil {
		toSerialize["vsphere_apps_check_result"] = o.VsphereAppsCheckResult
	}
	if o.WarningMessages != nil {
		toSerialize["warning_messages"] = o.WarningMessages
	}
	if o.ErrorMessages != nil {
		toSerialize["error_messages"] = o.ErrorMessages
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSupervisorServicesCheckResult struct {
	value *VcenterNamespaceManagementSupervisorServicesCheckResult
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesCheckResult) Get() *VcenterNamespaceManagementSupervisorServicesCheckResult {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesCheckResult) Set(val *VcenterNamespaceManagementSupervisorServicesCheckResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesCheckResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesCheckResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesCheckResult(val *VcenterNamespaceManagementSupervisorServicesCheckResult) *NullableVcenterNamespaceManagementSupervisorServicesCheckResult {
	return &NullableVcenterNamespaceManagementSupervisorServicesCheckResult{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesCheckResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesCheckResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


