/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSupervisorServicesInfo struct for VcenterNamespaceManagementSupervisorServicesInfo
type VcenterNamespaceManagementSupervisorServicesInfo struct {
	// The human readable name of the Supervisor Service.
	DisplayName string `json:"display_name"`
	State VcenterNamespaceManagementSupervisorServicesState `json:"state"`
	// A human readable description of the Supervisor Service. If unset, no description is available for the Supervisor Service.
	Description *string `json:"description,omitempty"`
}

// NewVcenterNamespaceManagementSupervisorServicesInfo instantiates a new VcenterNamespaceManagementSupervisorServicesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSupervisorServicesInfo(displayName string, state VcenterNamespaceManagementSupervisorServicesState) *VcenterNamespaceManagementSupervisorServicesInfo {
	this := VcenterNamespaceManagementSupervisorServicesInfo{}
	this.DisplayName = displayName
	this.State = state
	return &this
}

// NewVcenterNamespaceManagementSupervisorServicesInfoWithDefaults instantiates a new VcenterNamespaceManagementSupervisorServicesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSupervisorServicesInfoWithDefaults() *VcenterNamespaceManagementSupervisorServicesInfo {
	this := VcenterNamespaceManagementSupervisorServicesInfo{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *VcenterNamespaceManagementSupervisorServicesInfo) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesInfo) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *VcenterNamespaceManagementSupervisorServicesInfo) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetState returns the State field value
func (o *VcenterNamespaceManagementSupervisorServicesInfo) GetState() VcenterNamespaceManagementSupervisorServicesState {
	if o == nil {
		var ret VcenterNamespaceManagementSupervisorServicesState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesInfo) GetStateOk() (*VcenterNamespaceManagementSupervisorServicesState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VcenterNamespaceManagementSupervisorServicesInfo) SetState(v VcenterNamespaceManagementSupervisorServicesState) {
	o.State = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VcenterNamespaceManagementSupervisorServicesInfo) SetDescription(v string) {
	o.Description = &v
}

func (o VcenterNamespaceManagementSupervisorServicesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["display_name"] = o.DisplayName
	}
	if true {
		toSerialize["state"] = o.State
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSupervisorServicesInfo struct {
	value *VcenterNamespaceManagementSupervisorServicesInfo
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesInfo) Get() *VcenterNamespaceManagementSupervisorServicesInfo {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesInfo) Set(val *VcenterNamespaceManagementSupervisorServicesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesInfo(val *VcenterNamespaceManagementSupervisorServicesInfo) *NullableVcenterNamespaceManagementSupervisorServicesInfo {
	return &NullableVcenterNamespaceManagementSupervisorServicesInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


