/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmToolsUpgradePolicy The Tools.UpgradePolicy enumerated type defines when Tools are auto-upgraded for a virtual machine.
type VcenterVmToolsUpgradePolicy string

// List of vcenter.vm.tools.upgrade_policy
const (
	VCENTERVMTOOLSUPGRADEPOLICY_MANUAL VcenterVmToolsUpgradePolicy = "MANUAL"
	VCENTERVMTOOLSUPGRADEPOLICY_UPGRADE_AT_POWER_CYCLE VcenterVmToolsUpgradePolicy = "UPGRADE_AT_POWER_CYCLE"
)

// All allowed values of VcenterVmToolsUpgradePolicy enum
var AllowedVcenterVmToolsUpgradePolicyEnumValues = []VcenterVmToolsUpgradePolicy{
	"MANUAL",
	"UPGRADE_AT_POWER_CYCLE",
}

func (v *VcenterVmToolsUpgradePolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmToolsUpgradePolicy(value)
	for _, existing := range AllowedVcenterVmToolsUpgradePolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmToolsUpgradePolicy", value)
}

// NewVcenterVmToolsUpgradePolicyFromValue returns a pointer to a valid VcenterVmToolsUpgradePolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmToolsUpgradePolicyFromValue(v string) (*VcenterVmToolsUpgradePolicy, error) {
	ev := VcenterVmToolsUpgradePolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmToolsUpgradePolicy: valid values are %v", v, AllowedVcenterVmToolsUpgradePolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmToolsUpgradePolicy) IsValid() bool {
	for _, existing := range AllowedVcenterVmToolsUpgradePolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.tools.upgrade_policy value
func (v VcenterVmToolsUpgradePolicy) Ptr() *VcenterVmToolsUpgradePolicy {
	return &v
}

type NullableVcenterVmToolsUpgradePolicy struct {
	value *VcenterVmToolsUpgradePolicy
	isSet bool
}

func (v NullableVcenterVmToolsUpgradePolicy) Get() *VcenterVmToolsUpgradePolicy {
	return v.value
}

func (v *NullableVcenterVmToolsUpgradePolicy) Set(val *VcenterVmToolsUpgradePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmToolsUpgradePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmToolsUpgradePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmToolsUpgradePolicy(val *VcenterVmToolsUpgradePolicy) *NullableVcenterVmToolsUpgradePolicy {
	return &NullableVcenterVmToolsUpgradePolicy{value: val, isSet: true}
}

func (v NullableVcenterVmToolsUpgradePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmToolsUpgradePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

