/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestCustomizationSpecsFilterSpec struct for VcenterGuestCustomizationSpecsFilterSpec
type VcenterGuestCustomizationSpecsFilterSpec struct {
	// Names that guest customization specifications must have to match the filter (see CustomizationSpecs.Summary.name). If unset or empty, guest customization specifications with any name match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.guest.CustomizationSpec. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.guest.CustomizationSpec.
	Names *[]string `json:"names,omitempty"`
	OSType *VcenterGuestCustomizationSpecsOsType `json:"OS_type,omitempty"`
}

// NewVcenterGuestCustomizationSpecsFilterSpec instantiates a new VcenterGuestCustomizationSpecsFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestCustomizationSpecsFilterSpec() *VcenterGuestCustomizationSpecsFilterSpec {
	this := VcenterGuestCustomizationSpecsFilterSpec{}
	return &this
}

// NewVcenterGuestCustomizationSpecsFilterSpecWithDefaults instantiates a new VcenterGuestCustomizationSpecsFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestCustomizationSpecsFilterSpecWithDefaults() *VcenterGuestCustomizationSpecsFilterSpec {
	this := VcenterGuestCustomizationSpecsFilterSpec{}
	return &this
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *VcenterGuestCustomizationSpecsFilterSpec) GetNames() []string {
	if o == nil || o.Names == nil {
		var ret []string
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestCustomizationSpecsFilterSpec) GetNamesOk() (*[]string, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *VcenterGuestCustomizationSpecsFilterSpec) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *VcenterGuestCustomizationSpecsFilterSpec) SetNames(v []string) {
	o.Names = &v
}

// GetOSType returns the OSType field value if set, zero value otherwise.
func (o *VcenterGuestCustomizationSpecsFilterSpec) GetOSType() VcenterGuestCustomizationSpecsOsType {
	if o == nil || o.OSType == nil {
		var ret VcenterGuestCustomizationSpecsOsType
		return ret
	}
	return *o.OSType
}

// GetOSTypeOk returns a tuple with the OSType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestCustomizationSpecsFilterSpec) GetOSTypeOk() (*VcenterGuestCustomizationSpecsOsType, bool) {
	if o == nil || o.OSType == nil {
		return nil, false
	}
	return o.OSType, true
}

// HasOSType returns a boolean if a field has been set.
func (o *VcenterGuestCustomizationSpecsFilterSpec) HasOSType() bool {
	if o != nil && o.OSType != nil {
		return true
	}

	return false
}

// SetOSType gets a reference to the given VcenterGuestCustomizationSpecsOsType and assigns it to the OSType field.
func (o *VcenterGuestCustomizationSpecsFilterSpec) SetOSType(v VcenterGuestCustomizationSpecsOsType) {
	o.OSType = &v
}

func (o VcenterGuestCustomizationSpecsFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	if o.OSType != nil {
		toSerialize["OS_type"] = o.OSType
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestCustomizationSpecsFilterSpec struct {
	value *VcenterGuestCustomizationSpecsFilterSpec
	isSet bool
}

func (v NullableVcenterGuestCustomizationSpecsFilterSpec) Get() *VcenterGuestCustomizationSpecsFilterSpec {
	return v.value
}

func (v *NullableVcenterGuestCustomizationSpecsFilterSpec) Set(val *VcenterGuestCustomizationSpecsFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestCustomizationSpecsFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestCustomizationSpecsFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestCustomizationSpecsFilterSpec(val *VcenterGuestCustomizationSpecsFilterSpec) *NullableVcenterGuestCustomizationSpecsFilterSpec {
	return &NullableVcenterGuestCustomizationSpecsFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterGuestCustomizationSpecsFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestCustomizationSpecsFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


