/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSupervisorServicesVersionsInfo struct for VcenterNamespaceManagementSupervisorServicesVersionsInfo
type VcenterNamespaceManagementSupervisorServicesVersionsInfo struct {
	// The human readable name of the Supervisor Service version.
	DisplayName string `json:"display_name"`
	// A human-readable description of the Supervisor Service version. If unset, no description is available for the Supervisor Service version.
	Description *string `json:"description,omitempty"`
	// The End User License Agreement (EULA) associated with the Supervisor Service version. If unset, no EULA is available for the Supervisor Service version.
	EULA *string `json:"EULA,omitempty"`
	ContentType VcenterNamespaceManagementSupervisorServicesVersionsContentType `json:"content_type"`
	// Inline content that contains base64 encoded service definition for the version.
	Content *string `json:"content,omitempty"`
	// If true, the Supervisor Service version is from trusted provider and the trust is verified.
	TrustVerified bool `json:"trust_verified"`
	State VcenterNamespaceManagementSupervisorServicesVersionsState `json:"state"`
}

// NewVcenterNamespaceManagementSupervisorServicesVersionsInfo instantiates a new VcenterNamespaceManagementSupervisorServicesVersionsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSupervisorServicesVersionsInfo(displayName string, contentType VcenterNamespaceManagementSupervisorServicesVersionsContentType, trustVerified bool, state VcenterNamespaceManagementSupervisorServicesVersionsState) *VcenterNamespaceManagementSupervisorServicesVersionsInfo {
	this := VcenterNamespaceManagementSupervisorServicesVersionsInfo{}
	this.DisplayName = displayName
	this.ContentType = contentType
	this.TrustVerified = trustVerified
	this.State = state
	return &this
}

// NewVcenterNamespaceManagementSupervisorServicesVersionsInfoWithDefaults instantiates a new VcenterNamespaceManagementSupervisorServicesVersionsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSupervisorServicesVersionsInfoWithDefaults() *VcenterNamespaceManagementSupervisorServicesVersionsInfo {
	this := VcenterNamespaceManagementSupervisorServicesVersionsInfo{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) SetDescription(v string) {
	o.Description = &v
}

// GetEULA returns the EULA field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetEULA() string {
	if o == nil || o.EULA == nil {
		var ret string
		return ret
	}
	return *o.EULA
}

// GetEULAOk returns a tuple with the EULA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetEULAOk() (*string, bool) {
	if o == nil || o.EULA == nil {
		return nil, false
	}
	return o.EULA, true
}

// HasEULA returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) HasEULA() bool {
	if o != nil && o.EULA != nil {
		return true
	}

	return false
}

// SetEULA gets a reference to the given string and assigns it to the EULA field.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) SetEULA(v string) {
	o.EULA = &v
}

// GetContentType returns the ContentType field value
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetContentType() VcenterNamespaceManagementSupervisorServicesVersionsContentType {
	if o == nil {
		var ret VcenterNamespaceManagementSupervisorServicesVersionsContentType
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetContentTypeOk() (*VcenterNamespaceManagementSupervisorServicesVersionsContentType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) SetContentType(v VcenterNamespaceManagementSupervisorServicesVersionsContentType) {
	o.ContentType = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) SetContent(v string) {
	o.Content = &v
}

// GetTrustVerified returns the TrustVerified field value
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetTrustVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TrustVerified
}

// GetTrustVerifiedOk returns a tuple with the TrustVerified field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetTrustVerifiedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TrustVerified, true
}

// SetTrustVerified sets field value
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) SetTrustVerified(v bool) {
	o.TrustVerified = v
}

// GetState returns the State field value
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetState() VcenterNamespaceManagementSupervisorServicesVersionsState {
	if o == nil {
		var ret VcenterNamespaceManagementSupervisorServicesVersionsState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) GetStateOk() (*VcenterNamespaceManagementSupervisorServicesVersionsState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VcenterNamespaceManagementSupervisorServicesVersionsInfo) SetState(v VcenterNamespaceManagementSupervisorServicesVersionsState) {
	o.State = v
}

func (o VcenterNamespaceManagementSupervisorServicesVersionsInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.EULA != nil {
		toSerialize["EULA"] = o.EULA
	}
	if true {
		toSerialize["content_type"] = o.ContentType
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if true {
		toSerialize["trust_verified"] = o.TrustVerified
	}
	if true {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSupervisorServicesVersionsInfo struct {
	value *VcenterNamespaceManagementSupervisorServicesVersionsInfo
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVersionsInfo) Get() *VcenterNamespaceManagementSupervisorServicesVersionsInfo {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVersionsInfo) Set(val *VcenterNamespaceManagementSupervisorServicesVersionsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVersionsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVersionsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesVersionsInfo(val *VcenterNamespaceManagementSupervisorServicesVersionsInfo) *NullableVcenterNamespaceManagementSupervisorServicesVersionsInfo {
	return &NullableVcenterNamespaceManagementSupervisorServicesVersionsInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVersionsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVersionsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


