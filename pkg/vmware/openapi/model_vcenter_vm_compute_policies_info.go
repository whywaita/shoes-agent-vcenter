/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmComputePoliciesInfo struct for VcenterVmComputePoliciesInfo
type VcenterVmComputePoliciesInfo struct {
	Status VcenterComputePoliciesObjectCompliance `json:"status"`
}

// NewVcenterVmComputePoliciesInfo instantiates a new VcenterVmComputePoliciesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmComputePoliciesInfo(status VcenterComputePoliciesObjectCompliance) *VcenterVmComputePoliciesInfo {
	this := VcenterVmComputePoliciesInfo{}
	this.Status = status
	return &this
}

// NewVcenterVmComputePoliciesInfoWithDefaults instantiates a new VcenterVmComputePoliciesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmComputePoliciesInfoWithDefaults() *VcenterVmComputePoliciesInfo {
	this := VcenterVmComputePoliciesInfo{}
	return &this
}

// GetStatus returns the Status field value
func (o *VcenterVmComputePoliciesInfo) GetStatus() VcenterComputePoliciesObjectCompliance {
	if o == nil {
		var ret VcenterComputePoliciesObjectCompliance
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VcenterVmComputePoliciesInfo) GetStatusOk() (*VcenterComputePoliciesObjectCompliance, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VcenterVmComputePoliciesInfo) SetStatus(v VcenterComputePoliciesObjectCompliance) {
	o.Status = v
}

func (o VcenterVmComputePoliciesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmComputePoliciesInfo struct {
	value *VcenterVmComputePoliciesInfo
	isSet bool
}

func (v NullableVcenterVmComputePoliciesInfo) Get() *VcenterVmComputePoliciesInfo {
	return v.value
}

func (v *NullableVcenterVmComputePoliciesInfo) Set(val *VcenterVmComputePoliciesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmComputePoliciesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmComputePoliciesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmComputePoliciesInfo(val *VcenterVmComputePoliciesInfo) *NullableVcenterVmComputePoliciesInfo {
	return &NullableVcenterVmComputePoliciesInfo{value: val, isSet: true}
}

func (v NullableVcenterVmComputePoliciesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmComputePoliciesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


