/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterLcmUpdatePendingSeverityType Level of severity for applying a given patch or update.
type VcenterLcmUpdatePendingSeverityType string

// List of VcenterLcmUpdatePendingSeverityType
const (
	VCENTERLCMUPDATEPENDINGSEVERITYTYPE_CRITICAL VcenterLcmUpdatePendingSeverityType = "CRITICAL"
	VCENTERLCMUPDATEPENDINGSEVERITYTYPE_IMPORTANT VcenterLcmUpdatePendingSeverityType = "IMPORTANT"
	VCENTERLCMUPDATEPENDINGSEVERITYTYPE_MODERATE VcenterLcmUpdatePendingSeverityType = "MODERATE"
	VCENTERLCMUPDATEPENDINGSEVERITYTYPE_LOW VcenterLcmUpdatePendingSeverityType = "LOW"
)

// All allowed values of VcenterLcmUpdatePendingSeverityType enum
var AllowedVcenterLcmUpdatePendingSeverityTypeEnumValues = []VcenterLcmUpdatePendingSeverityType{
	"CRITICAL",
	"IMPORTANT",
	"MODERATE",
	"LOW",
}

func (v *VcenterLcmUpdatePendingSeverityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterLcmUpdatePendingSeverityType(value)
	for _, existing := range AllowedVcenterLcmUpdatePendingSeverityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterLcmUpdatePendingSeverityType", value)
}

// NewVcenterLcmUpdatePendingSeverityTypeFromValue returns a pointer to a valid VcenterLcmUpdatePendingSeverityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterLcmUpdatePendingSeverityTypeFromValue(v string) (*VcenterLcmUpdatePendingSeverityType, error) {
	ev := VcenterLcmUpdatePendingSeverityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterLcmUpdatePendingSeverityType: valid values are %v", v, AllowedVcenterLcmUpdatePendingSeverityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterLcmUpdatePendingSeverityType) IsValid() bool {
	for _, existing := range AllowedVcenterLcmUpdatePendingSeverityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterLcmUpdatePendingSeverityType value
func (v VcenterLcmUpdatePendingSeverityType) Ptr() *VcenterLcmUpdatePendingSeverityType {
	return &v
}

type NullableVcenterLcmUpdatePendingSeverityType struct {
	value *VcenterLcmUpdatePendingSeverityType
	isSet bool
}

func (v NullableVcenterLcmUpdatePendingSeverityType) Get() *VcenterLcmUpdatePendingSeverityType {
	return v.value
}

func (v *NullableVcenterLcmUpdatePendingSeverityType) Set(val *VcenterLcmUpdatePendingSeverityType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterLcmUpdatePendingSeverityType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterLcmUpdatePendingSeverityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterLcmUpdatePendingSeverityType(val *VcenterLcmUpdatePendingSeverityType) *NullableVcenterLcmUpdatePendingSeverityType {
	return &NullableVcenterLcmUpdatePendingSeverityType{value: val, isSet: true}
}

func (v NullableVcenterLcmUpdatePendingSeverityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterLcmUpdatePendingSeverityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

