/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareParallelBackingSpec struct for VcenterVmHardwareParallelBackingSpec
type VcenterVmHardwareParallelBackingSpec struct {
	Type VcenterVmHardwareParallelBackingType `json:"type"`
	// Path of the file that should be used as the virtual parallel port backing. This field is optional and it is only relevant when the value of Parallel.BackingSpec.type is FILE.
	File *string `json:"file,omitempty"`
	// Name of the device that should be used as the virtual parallel port backing. If unset, the virtual parallel port will be configured to automatically detect a suitable host device.
	HostDevice *string `json:"host_device,omitempty"`
}

// NewVcenterVmHardwareParallelBackingSpec instantiates a new VcenterVmHardwareParallelBackingSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareParallelBackingSpec(type_ VcenterVmHardwareParallelBackingType) *VcenterVmHardwareParallelBackingSpec {
	this := VcenterVmHardwareParallelBackingSpec{}
	this.Type = type_
	return &this
}

// NewVcenterVmHardwareParallelBackingSpecWithDefaults instantiates a new VcenterVmHardwareParallelBackingSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareParallelBackingSpecWithDefaults() *VcenterVmHardwareParallelBackingSpec {
	this := VcenterVmHardwareParallelBackingSpec{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterVmHardwareParallelBackingSpec) GetType() VcenterVmHardwareParallelBackingType {
	if o == nil {
		var ret VcenterVmHardwareParallelBackingType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelBackingSpec) GetTypeOk() (*VcenterVmHardwareParallelBackingType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmHardwareParallelBackingSpec) SetType(v VcenterVmHardwareParallelBackingType) {
	o.Type = v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *VcenterVmHardwareParallelBackingSpec) GetFile() string {
	if o == nil || o.File == nil {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelBackingSpec) GetFileOk() (*string, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *VcenterVmHardwareParallelBackingSpec) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *VcenterVmHardwareParallelBackingSpec) SetFile(v string) {
	o.File = &v
}

// GetHostDevice returns the HostDevice field value if set, zero value otherwise.
func (o *VcenterVmHardwareParallelBackingSpec) GetHostDevice() string {
	if o == nil || o.HostDevice == nil {
		var ret string
		return ret
	}
	return *o.HostDevice
}

// GetHostDeviceOk returns a tuple with the HostDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelBackingSpec) GetHostDeviceOk() (*string, bool) {
	if o == nil || o.HostDevice == nil {
		return nil, false
	}
	return o.HostDevice, true
}

// HasHostDevice returns a boolean if a field has been set.
func (o *VcenterVmHardwareParallelBackingSpec) HasHostDevice() bool {
	if o != nil && o.HostDevice != nil {
		return true
	}

	return false
}

// SetHostDevice gets a reference to the given string and assigns it to the HostDevice field.
func (o *VcenterVmHardwareParallelBackingSpec) SetHostDevice(v string) {
	o.HostDevice = &v
}

func (o VcenterVmHardwareParallelBackingSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	if o.HostDevice != nil {
		toSerialize["host_device"] = o.HostDevice
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareParallelBackingSpec struct {
	value *VcenterVmHardwareParallelBackingSpec
	isSet bool
}

func (v NullableVcenterVmHardwareParallelBackingSpec) Get() *VcenterVmHardwareParallelBackingSpec {
	return v.value
}

func (v *NullableVcenterVmHardwareParallelBackingSpec) Set(val *VcenterVmHardwareParallelBackingSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareParallelBackingSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareParallelBackingSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareParallelBackingSpec(val *VcenterVmHardwareParallelBackingSpec) *NullableVcenterVmHardwareParallelBackingSpec {
	return &NullableVcenterVmHardwareParallelBackingSpec{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareParallelBackingSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareParallelBackingSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


