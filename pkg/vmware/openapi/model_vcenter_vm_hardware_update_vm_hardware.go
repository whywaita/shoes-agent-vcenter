/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareUpdateVmHardware struct for VcenterVmHardwareUpdateVmHardware
type VcenterVmHardwareUpdateVmHardware struct {
	Spec *VcenterVmHardwareUpdateSpec `json:"spec,omitempty"`
}

// NewVcenterVmHardwareUpdateVmHardware instantiates a new VcenterVmHardwareUpdateVmHardware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareUpdateVmHardware() *VcenterVmHardwareUpdateVmHardware {
	this := VcenterVmHardwareUpdateVmHardware{}
	return &this
}

// NewVcenterVmHardwareUpdateVmHardwareWithDefaults instantiates a new VcenterVmHardwareUpdateVmHardware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareUpdateVmHardwareWithDefaults() *VcenterVmHardwareUpdateVmHardware {
	this := VcenterVmHardwareUpdateVmHardware{}
	return &this
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *VcenterVmHardwareUpdateVmHardware) GetSpec() VcenterVmHardwareUpdateSpec {
	if o == nil || o.Spec == nil {
		var ret VcenterVmHardwareUpdateSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareUpdateVmHardware) GetSpecOk() (*VcenterVmHardwareUpdateSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *VcenterVmHardwareUpdateVmHardware) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given VcenterVmHardwareUpdateSpec and assigns it to the Spec field.
func (o *VcenterVmHardwareUpdateVmHardware) SetSpec(v VcenterVmHardwareUpdateSpec) {
	o.Spec = &v
}

func (o VcenterVmHardwareUpdateVmHardware) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareUpdateVmHardware struct {
	value *VcenterVmHardwareUpdateVmHardware
	isSet bool
}

func (v NullableVcenterVmHardwareUpdateVmHardware) Get() *VcenterVmHardwareUpdateVmHardware {
	return v.value
}

func (v *NullableVcenterVmHardwareUpdateVmHardware) Set(val *VcenterVmHardwareUpdateVmHardware) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareUpdateVmHardware) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareUpdateVmHardware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareUpdateVmHardware(val *VcenterVmHardwareUpdateVmHardware) *NullableVcenterVmHardwareUpdateVmHardware {
	return &NullableVcenterVmHardwareUpdateVmHardware{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareUpdateVmHardware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareUpdateVmHardware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


