/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDatacenterFilterSpec struct for VcenterDatacenterFilterSpec
type VcenterDatacenterFilterSpec struct {
	// Identifiers of datacenters that can match the filter. If unset or empty, datacenters with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.
	Datacenters *[]string `json:"datacenters,omitempty"`
	// Names that datacenters must have to match the filter (see Datacenter.Info.name). If unset or empty, datacenters with any name match the filter.
	Names *[]string `json:"names,omitempty"`
	// Folders that must contain the datacenters for the datacenter to match the filter. If unset or empty, datacenters in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.
	Folders *[]string `json:"folders,omitempty"`
}

// NewVcenterDatacenterFilterSpec instantiates a new VcenterDatacenterFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDatacenterFilterSpec() *VcenterDatacenterFilterSpec {
	this := VcenterDatacenterFilterSpec{}
	return &this
}

// NewVcenterDatacenterFilterSpecWithDefaults instantiates a new VcenterDatacenterFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDatacenterFilterSpecWithDefaults() *VcenterDatacenterFilterSpec {
	this := VcenterDatacenterFilterSpec{}
	return &this
}

// GetDatacenters returns the Datacenters field value if set, zero value otherwise.
func (o *VcenterDatacenterFilterSpec) GetDatacenters() []string {
	if o == nil || o.Datacenters == nil {
		var ret []string
		return ret
	}
	return *o.Datacenters
}

// GetDatacentersOk returns a tuple with the Datacenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDatacenterFilterSpec) GetDatacentersOk() (*[]string, bool) {
	if o == nil || o.Datacenters == nil {
		return nil, false
	}
	return o.Datacenters, true
}

// HasDatacenters returns a boolean if a field has been set.
func (o *VcenterDatacenterFilterSpec) HasDatacenters() bool {
	if o != nil && o.Datacenters != nil {
		return true
	}

	return false
}

// SetDatacenters gets a reference to the given []string and assigns it to the Datacenters field.
func (o *VcenterDatacenterFilterSpec) SetDatacenters(v []string) {
	o.Datacenters = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *VcenterDatacenterFilterSpec) GetNames() []string {
	if o == nil || o.Names == nil {
		var ret []string
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDatacenterFilterSpec) GetNamesOk() (*[]string, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *VcenterDatacenterFilterSpec) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *VcenterDatacenterFilterSpec) SetNames(v []string) {
	o.Names = &v
}

// GetFolders returns the Folders field value if set, zero value otherwise.
func (o *VcenterDatacenterFilterSpec) GetFolders() []string {
	if o == nil || o.Folders == nil {
		var ret []string
		return ret
	}
	return *o.Folders
}

// GetFoldersOk returns a tuple with the Folders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDatacenterFilterSpec) GetFoldersOk() (*[]string, bool) {
	if o == nil || o.Folders == nil {
		return nil, false
	}
	return o.Folders, true
}

// HasFolders returns a boolean if a field has been set.
func (o *VcenterDatacenterFilterSpec) HasFolders() bool {
	if o != nil && o.Folders != nil {
		return true
	}

	return false
}

// SetFolders gets a reference to the given []string and assigns it to the Folders field.
func (o *VcenterDatacenterFilterSpec) SetFolders(v []string) {
	o.Folders = &v
}

func (o VcenterDatacenterFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Datacenters != nil {
		toSerialize["datacenters"] = o.Datacenters
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	if o.Folders != nil {
		toSerialize["folders"] = o.Folders
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDatacenterFilterSpec struct {
	value *VcenterDatacenterFilterSpec
	isSet bool
}

func (v NullableVcenterDatacenterFilterSpec) Get() *VcenterDatacenterFilterSpec {
	return v.value
}

func (v *NullableVcenterDatacenterFilterSpec) Set(val *VcenterDatacenterFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDatacenterFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDatacenterFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDatacenterFilterSpec(val *VcenterDatacenterFilterSpec) *NullableVcenterDatacenterFilterSpec {
	return &NullableVcenterDatacenterFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterDatacenterFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDatacenterFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


