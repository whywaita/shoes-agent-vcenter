/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmStoragePolicyComplianceCheckSpec struct for VcenterVmStoragePolicyComplianceCheckSpec
type VcenterVmStoragePolicyComplianceCheckSpec struct {
	// Invoke compliance check on the virtual machine home directory if set to true.
	VmHome bool `json:"vm_home"`
	// Identifiers of the virtual machine's virtual disks for which compliance should be checked. If unset or empty, compliance check is invoked on all the associated disks. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.vm.hardware.Disk.
	Disks *[]string `json:"disks,omitempty"`
}

// NewVcenterVmStoragePolicyComplianceCheckSpec instantiates a new VcenterVmStoragePolicyComplianceCheckSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmStoragePolicyComplianceCheckSpec(vmHome bool) *VcenterVmStoragePolicyComplianceCheckSpec {
	this := VcenterVmStoragePolicyComplianceCheckSpec{}
	this.VmHome = vmHome
	return &this
}

// NewVcenterVmStoragePolicyComplianceCheckSpecWithDefaults instantiates a new VcenterVmStoragePolicyComplianceCheckSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmStoragePolicyComplianceCheckSpecWithDefaults() *VcenterVmStoragePolicyComplianceCheckSpec {
	this := VcenterVmStoragePolicyComplianceCheckSpec{}
	return &this
}

// GetVmHome returns the VmHome field value
func (o *VcenterVmStoragePolicyComplianceCheckSpec) GetVmHome() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VmHome
}

// GetVmHomeOk returns a tuple with the VmHome field value
// and a boolean to check if the value has been set.
func (o *VcenterVmStoragePolicyComplianceCheckSpec) GetVmHomeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VmHome, true
}

// SetVmHome sets field value
func (o *VcenterVmStoragePolicyComplianceCheckSpec) SetVmHome(v bool) {
	o.VmHome = v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *VcenterVmStoragePolicyComplianceCheckSpec) GetDisks() []string {
	if o == nil || o.Disks == nil {
		var ret []string
		return ret
	}
	return *o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmStoragePolicyComplianceCheckSpec) GetDisksOk() (*[]string, bool) {
	if o == nil || o.Disks == nil {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *VcenterVmStoragePolicyComplianceCheckSpec) HasDisks() bool {
	if o != nil && o.Disks != nil {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []string and assigns it to the Disks field.
func (o *VcenterVmStoragePolicyComplianceCheckSpec) SetDisks(v []string) {
	o.Disks = &v
}

func (o VcenterVmStoragePolicyComplianceCheckSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["vm_home"] = o.VmHome
	}
	if o.Disks != nil {
		toSerialize["disks"] = o.Disks
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmStoragePolicyComplianceCheckSpec struct {
	value *VcenterVmStoragePolicyComplianceCheckSpec
	isSet bool
}

func (v NullableVcenterVmStoragePolicyComplianceCheckSpec) Get() *VcenterVmStoragePolicyComplianceCheckSpec {
	return v.value
}

func (v *NullableVcenterVmStoragePolicyComplianceCheckSpec) Set(val *VcenterVmStoragePolicyComplianceCheckSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmStoragePolicyComplianceCheckSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmStoragePolicyComplianceCheckSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmStoragePolicyComplianceCheckSpec(val *VcenterVmStoragePolicyComplianceCheckSpec) *NullableVcenterVmStoragePolicyComplianceCheckSpec {
	return &NullableVcenterVmStoragePolicyComplianceCheckSpec{value: val, isSet: true}
}

func (v NullableVcenterVmStoragePolicyComplianceCheckSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmStoragePolicyComplianceCheckSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


