/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterContentRegistriesHealthStatus The {@name Status} {@term enumerated type} describes the status of the container registry.
type VcenterContentRegistriesHealthStatus string

// List of vcenter.content.registries.health.status
const (
	VCENTERCONTENTREGISTRIESHEALTHSTATUS_STARTING VcenterContentRegistriesHealthStatus = "STARTING"
	VCENTERCONTENTREGISTRIESHEALTHSTATUS_RUNNING VcenterContentRegistriesHealthStatus = "RUNNING"
	VCENTERCONTENTREGISTRIESHEALTHSTATUS_WARNING VcenterContentRegistriesHealthStatus = "WARNING"
	VCENTERCONTENTREGISTRIESHEALTHSTATUS_ERROR VcenterContentRegistriesHealthStatus = "ERROR"
	VCENTERCONTENTREGISTRIESHEALTHSTATUS_DELETING VcenterContentRegistriesHealthStatus = "DELETING"
)

// All allowed values of VcenterContentRegistriesHealthStatus enum
var AllowedVcenterContentRegistriesHealthStatusEnumValues = []VcenterContentRegistriesHealthStatus{
	"STARTING",
	"RUNNING",
	"WARNING",
	"ERROR",
	"DELETING",
}

func (v *VcenterContentRegistriesHealthStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterContentRegistriesHealthStatus(value)
	for _, existing := range AllowedVcenterContentRegistriesHealthStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterContentRegistriesHealthStatus", value)
}

// NewVcenterContentRegistriesHealthStatusFromValue returns a pointer to a valid VcenterContentRegistriesHealthStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterContentRegistriesHealthStatusFromValue(v string) (*VcenterContentRegistriesHealthStatus, error) {
	ev := VcenterContentRegistriesHealthStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterContentRegistriesHealthStatus: valid values are %v", v, AllowedVcenterContentRegistriesHealthStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterContentRegistriesHealthStatus) IsValid() bool {
	for _, existing := range AllowedVcenterContentRegistriesHealthStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.content.registries.health.status value
func (v VcenterContentRegistriesHealthStatus) Ptr() *VcenterContentRegistriesHealthStatus {
	return &v
}

type NullableVcenterContentRegistriesHealthStatus struct {
	value *VcenterContentRegistriesHealthStatus
	isSet bool
}

func (v NullableVcenterContentRegistriesHealthStatus) Get() *VcenterContentRegistriesHealthStatus {
	return v.value
}

func (v *NullableVcenterContentRegistriesHealthStatus) Set(val *VcenterContentRegistriesHealthStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterContentRegistriesHealthStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterContentRegistriesHealthStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterContentRegistriesHealthStatus(val *VcenterContentRegistriesHealthStatus) *NullableVcenterContentRegistriesHealthStatus {
	return &NullableVcenterContentRegistriesHealthStatus{value: val, isSet: true}
}

func (v NullableVcenterContentRegistriesHealthStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterContentRegistriesHealthStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

