/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareDiskBackingType The Disk.BackingType enumerated type defines the valid backing types for a virtual disk.
type VcenterVmHardwareDiskBackingType string

// List of vcenter.vm.hardware.disk.backing_type
const (
	VCENTERVMHARDWAREDISKBACKINGTYPE_VMDK_FILE VcenterVmHardwareDiskBackingType = "VMDK_FILE"
)

// All allowed values of VcenterVmHardwareDiskBackingType enum
var AllowedVcenterVmHardwareDiskBackingTypeEnumValues = []VcenterVmHardwareDiskBackingType{
	"VMDK_FILE",
}

func (v *VcenterVmHardwareDiskBackingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareDiskBackingType(value)
	for _, existing := range AllowedVcenterVmHardwareDiskBackingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareDiskBackingType", value)
}

// NewVcenterVmHardwareDiskBackingTypeFromValue returns a pointer to a valid VcenterVmHardwareDiskBackingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareDiskBackingTypeFromValue(v string) (*VcenterVmHardwareDiskBackingType, error) {
	ev := VcenterVmHardwareDiskBackingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareDiskBackingType: valid values are %v", v, AllowedVcenterVmHardwareDiskBackingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareDiskBackingType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareDiskBackingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.disk.backing_type value
func (v VcenterVmHardwareDiskBackingType) Ptr() *VcenterVmHardwareDiskBackingType {
	return &v
}

type NullableVcenterVmHardwareDiskBackingType struct {
	value *VcenterVmHardwareDiskBackingType
	isSet bool
}

func (v NullableVcenterVmHardwareDiskBackingType) Get() *VcenterVmHardwareDiskBackingType {
	return v.value
}

func (v *NullableVcenterVmHardwareDiskBackingType) Set(val *VcenterVmHardwareDiskBackingType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareDiskBackingType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareDiskBackingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareDiskBackingType(val *VcenterVmHardwareDiskBackingType) *NullableVcenterVmHardwareDiskBackingType {
	return &NullableVcenterVmHardwareDiskBackingType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareDiskBackingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareDiskBackingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

