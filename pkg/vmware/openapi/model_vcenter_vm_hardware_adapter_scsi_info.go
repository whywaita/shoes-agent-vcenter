/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareAdapterScsiInfo struct for VcenterVmHardwareAdapterScsiInfo
type VcenterVmHardwareAdapterScsiInfo struct {
	// Device label.
	Label string `json:"label"`
	Type VcenterVmHardwareAdapterScsiType `json:"type"`
	Scsi VcenterVmHardwareScsiAddressInfo `json:"scsi"`
	// Address of the SCSI adapter on the PCI bus. If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added. May be unset if the virtual machine has never been powered on since the adapter was created.
	PciSlotNumber *int64 `json:"pci_slot_number,omitempty"`
	Sharing VcenterVmHardwareAdapterScsiSharing `json:"sharing"`
}

// NewVcenterVmHardwareAdapterScsiInfo instantiates a new VcenterVmHardwareAdapterScsiInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareAdapterScsiInfo(label string, type_ VcenterVmHardwareAdapterScsiType, scsi VcenterVmHardwareScsiAddressInfo, sharing VcenterVmHardwareAdapterScsiSharing) *VcenterVmHardwareAdapterScsiInfo {
	this := VcenterVmHardwareAdapterScsiInfo{}
	this.Label = label
	this.Type = type_
	this.Scsi = scsi
	this.Sharing = sharing
	return &this
}

// NewVcenterVmHardwareAdapterScsiInfoWithDefaults instantiates a new VcenterVmHardwareAdapterScsiInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareAdapterScsiInfoWithDefaults() *VcenterVmHardwareAdapterScsiInfo {
	this := VcenterVmHardwareAdapterScsiInfo{}
	return &this
}

// GetLabel returns the Label field value
func (o *VcenterVmHardwareAdapterScsiInfo) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareAdapterScsiInfo) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *VcenterVmHardwareAdapterScsiInfo) SetLabel(v string) {
	o.Label = v
}

// GetType returns the Type field value
func (o *VcenterVmHardwareAdapterScsiInfo) GetType() VcenterVmHardwareAdapterScsiType {
	if o == nil {
		var ret VcenterVmHardwareAdapterScsiType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareAdapterScsiInfo) GetTypeOk() (*VcenterVmHardwareAdapterScsiType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmHardwareAdapterScsiInfo) SetType(v VcenterVmHardwareAdapterScsiType) {
	o.Type = v
}

// GetScsi returns the Scsi field value
func (o *VcenterVmHardwareAdapterScsiInfo) GetScsi() VcenterVmHardwareScsiAddressInfo {
	if o == nil {
		var ret VcenterVmHardwareScsiAddressInfo
		return ret
	}

	return o.Scsi
}

// GetScsiOk returns a tuple with the Scsi field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareAdapterScsiInfo) GetScsiOk() (*VcenterVmHardwareScsiAddressInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Scsi, true
}

// SetScsi sets field value
func (o *VcenterVmHardwareAdapterScsiInfo) SetScsi(v VcenterVmHardwareScsiAddressInfo) {
	o.Scsi = v
}

// GetPciSlotNumber returns the PciSlotNumber field value if set, zero value otherwise.
func (o *VcenterVmHardwareAdapterScsiInfo) GetPciSlotNumber() int64 {
	if o == nil || o.PciSlotNumber == nil {
		var ret int64
		return ret
	}
	return *o.PciSlotNumber
}

// GetPciSlotNumberOk returns a tuple with the PciSlotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareAdapterScsiInfo) GetPciSlotNumberOk() (*int64, bool) {
	if o == nil || o.PciSlotNumber == nil {
		return nil, false
	}
	return o.PciSlotNumber, true
}

// HasPciSlotNumber returns a boolean if a field has been set.
func (o *VcenterVmHardwareAdapterScsiInfo) HasPciSlotNumber() bool {
	if o != nil && o.PciSlotNumber != nil {
		return true
	}

	return false
}

// SetPciSlotNumber gets a reference to the given int64 and assigns it to the PciSlotNumber field.
func (o *VcenterVmHardwareAdapterScsiInfo) SetPciSlotNumber(v int64) {
	o.PciSlotNumber = &v
}

// GetSharing returns the Sharing field value
func (o *VcenterVmHardwareAdapterScsiInfo) GetSharing() VcenterVmHardwareAdapterScsiSharing {
	if o == nil {
		var ret VcenterVmHardwareAdapterScsiSharing
		return ret
	}

	return o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareAdapterScsiInfo) GetSharingOk() (*VcenterVmHardwareAdapterScsiSharing, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Sharing, true
}

// SetSharing sets field value
func (o *VcenterVmHardwareAdapterScsiInfo) SetSharing(v VcenterVmHardwareAdapterScsiSharing) {
	o.Sharing = v
}

func (o VcenterVmHardwareAdapterScsiInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["scsi"] = o.Scsi
	}
	if o.PciSlotNumber != nil {
		toSerialize["pci_slot_number"] = o.PciSlotNumber
	}
	if true {
		toSerialize["sharing"] = o.Sharing
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareAdapterScsiInfo struct {
	value *VcenterVmHardwareAdapterScsiInfo
	isSet bool
}

func (v NullableVcenterVmHardwareAdapterScsiInfo) Get() *VcenterVmHardwareAdapterScsiInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareAdapterScsiInfo) Set(val *VcenterVmHardwareAdapterScsiInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareAdapterScsiInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareAdapterScsiInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareAdapterScsiInfo(val *VcenterVmHardwareAdapterScsiInfo) *NullableVcenterVmHardwareAdapterScsiInfo {
	return &NullableVcenterVmHardwareAdapterScsiInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareAdapterScsiInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareAdapterScsiInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


