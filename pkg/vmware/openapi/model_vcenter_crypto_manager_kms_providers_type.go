/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterCryptoManagerKmsProvidersType The Providers.Type enumerated type contains the types of providers.
type VcenterCryptoManagerKmsProvidersType string

// List of VcenterCryptoManagerKmsProvidersType
const (
	VCENTERCRYPTOMANAGERKMSPROVIDERSTYPE_NATIVE VcenterCryptoManagerKmsProvidersType = "NATIVE"
)

// All allowed values of VcenterCryptoManagerKmsProvidersType enum
var AllowedVcenterCryptoManagerKmsProvidersTypeEnumValues = []VcenterCryptoManagerKmsProvidersType{
	"NATIVE",
}

func (v *VcenterCryptoManagerKmsProvidersType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterCryptoManagerKmsProvidersType(value)
	for _, existing := range AllowedVcenterCryptoManagerKmsProvidersTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterCryptoManagerKmsProvidersType", value)
}

// NewVcenterCryptoManagerKmsProvidersTypeFromValue returns a pointer to a valid VcenterCryptoManagerKmsProvidersType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterCryptoManagerKmsProvidersTypeFromValue(v string) (*VcenterCryptoManagerKmsProvidersType, error) {
	ev := VcenterCryptoManagerKmsProvidersType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterCryptoManagerKmsProvidersType: valid values are %v", v, AllowedVcenterCryptoManagerKmsProvidersTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterCryptoManagerKmsProvidersType) IsValid() bool {
	for _, existing := range AllowedVcenterCryptoManagerKmsProvidersTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterCryptoManagerKmsProvidersType value
func (v VcenterCryptoManagerKmsProvidersType) Ptr() *VcenterCryptoManagerKmsProvidersType {
	return &v
}

type NullableVcenterCryptoManagerKmsProvidersType struct {
	value *VcenterCryptoManagerKmsProvidersType
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersType) Get() *VcenterCryptoManagerKmsProvidersType {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersType) Set(val *VcenterCryptoManagerKmsProvidersType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersType(val *VcenterCryptoManagerKmsProvidersType) *NullableVcenterCryptoManagerKmsProvidersType {
	return &NullableVcenterCryptoManagerKmsProvidersType{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

