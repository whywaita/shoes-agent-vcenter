/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestLocalFilesystemVirtualDiskMapping struct for VcenterVmGuestLocalFilesystemVirtualDiskMapping
type VcenterVmGuestLocalFilesystemVirtualDiskMapping struct {
	// The virtual disk. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.Disk.
	Disk string `json:"disk"`
}

// NewVcenterVmGuestLocalFilesystemVirtualDiskMapping instantiates a new VcenterVmGuestLocalFilesystemVirtualDiskMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestLocalFilesystemVirtualDiskMapping(disk string) *VcenterVmGuestLocalFilesystemVirtualDiskMapping {
	this := VcenterVmGuestLocalFilesystemVirtualDiskMapping{}
	this.Disk = disk
	return &this
}

// NewVcenterVmGuestLocalFilesystemVirtualDiskMappingWithDefaults instantiates a new VcenterVmGuestLocalFilesystemVirtualDiskMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestLocalFilesystemVirtualDiskMappingWithDefaults() *VcenterVmGuestLocalFilesystemVirtualDiskMapping {
	this := VcenterVmGuestLocalFilesystemVirtualDiskMapping{}
	return &this
}

// GetDisk returns the Disk field value
func (o *VcenterVmGuestLocalFilesystemVirtualDiskMapping) GetDisk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestLocalFilesystemVirtualDiskMapping) GetDiskOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Disk, true
}

// SetDisk sets field value
func (o *VcenterVmGuestLocalFilesystemVirtualDiskMapping) SetDisk(v string) {
	o.Disk = v
}

func (o VcenterVmGuestLocalFilesystemVirtualDiskMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["disk"] = o.Disk
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestLocalFilesystemVirtualDiskMapping struct {
	value *VcenterVmGuestLocalFilesystemVirtualDiskMapping
	isSet bool
}

func (v NullableVcenterVmGuestLocalFilesystemVirtualDiskMapping) Get() *VcenterVmGuestLocalFilesystemVirtualDiskMapping {
	return v.value
}

func (v *NullableVcenterVmGuestLocalFilesystemVirtualDiskMapping) Set(val *VcenterVmGuestLocalFilesystemVirtualDiskMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestLocalFilesystemVirtualDiskMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestLocalFilesystemVirtualDiskMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestLocalFilesystemVirtualDiskMapping(val *VcenterVmGuestLocalFilesystemVirtualDiskMapping) *NullableVcenterVmGuestLocalFilesystemVirtualDiskMapping {
	return &NullableVcenterVmGuestLocalFilesystemVirtualDiskMapping{value: val, isSet: true}
}

func (v NullableVcenterVmGuestLocalFilesystemVirtualDiskMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestLocalFilesystemVirtualDiskMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


