/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterGuestHostnameGeneratorType The HostnameGenerator.Type enumerated type specifies different types of Name Generators.
type VcenterGuestHostnameGeneratorType string

// List of vcenter.guest.hostname_generator.type
const (
	VCENTERGUESTHOSTNAMEGENERATORTYPE_FIXED VcenterGuestHostnameGeneratorType = "FIXED"
	VCENTERGUESTHOSTNAMEGENERATORTYPE_PREFIX VcenterGuestHostnameGeneratorType = "PREFIX"
	VCENTERGUESTHOSTNAMEGENERATORTYPE_VIRTUAL_MACHINE VcenterGuestHostnameGeneratorType = "VIRTUAL_MACHINE"
	VCENTERGUESTHOSTNAMEGENERATORTYPE_USER_INPUT_REQUIRED VcenterGuestHostnameGeneratorType = "USER_INPUT_REQUIRED"
)

// All allowed values of VcenterGuestHostnameGeneratorType enum
var AllowedVcenterGuestHostnameGeneratorTypeEnumValues = []VcenterGuestHostnameGeneratorType{
	"FIXED",
	"PREFIX",
	"VIRTUAL_MACHINE",
	"USER_INPUT_REQUIRED",
}

func (v *VcenterGuestHostnameGeneratorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterGuestHostnameGeneratorType(value)
	for _, existing := range AllowedVcenterGuestHostnameGeneratorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterGuestHostnameGeneratorType", value)
}

// NewVcenterGuestHostnameGeneratorTypeFromValue returns a pointer to a valid VcenterGuestHostnameGeneratorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterGuestHostnameGeneratorTypeFromValue(v string) (*VcenterGuestHostnameGeneratorType, error) {
	ev := VcenterGuestHostnameGeneratorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterGuestHostnameGeneratorType: valid values are %v", v, AllowedVcenterGuestHostnameGeneratorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterGuestHostnameGeneratorType) IsValid() bool {
	for _, existing := range AllowedVcenterGuestHostnameGeneratorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.guest.hostname_generator.type value
func (v VcenterGuestHostnameGeneratorType) Ptr() *VcenterGuestHostnameGeneratorType {
	return &v
}

type NullableVcenterGuestHostnameGeneratorType struct {
	value *VcenterGuestHostnameGeneratorType
	isSet bool
}

func (v NullableVcenterGuestHostnameGeneratorType) Get() *VcenterGuestHostnameGeneratorType {
	return v.value
}

func (v *NullableVcenterGuestHostnameGeneratorType) Set(val *VcenterGuestHostnameGeneratorType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestHostnameGeneratorType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestHostnameGeneratorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestHostnameGeneratorType(val *VcenterGuestHostnameGeneratorType) *NullableVcenterGuestHostnameGeneratorType {
	return &NullableVcenterGuestHostnameGeneratorType{value: val, isSet: true}
}

func (v NullableVcenterGuestHostnameGeneratorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestHostnameGeneratorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

