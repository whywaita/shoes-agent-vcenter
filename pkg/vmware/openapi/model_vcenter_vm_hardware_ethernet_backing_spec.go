/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareEthernetBackingSpec struct for VcenterVmHardwareEthernetBackingSpec
type VcenterVmHardwareEthernetBackingSpec struct {
	Type VcenterVmHardwareEthernetBackingType `json:"type"`
	// Identifier of the network that backs the virtual Ethernet adapter. This field is optional and it is only relevant when the value of Ethernet.BackingSpec.type is one of STANDARD_PORTGROUP, DISTRIBUTED_PORTGROUP, or OPAQUE_NETWORK. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network.
	Network *string `json:"network,omitempty"`
	// Key of the distributed virtual port that backs the virtual Ethernet adapter. Depending on the type of the Portgroup, the port may be specified using this field. If the portgroup type is early-binding (also known as static), a port is assigned when the Ethernet adapter is configured to use the port. The port may be either automatically or specifically assigned based on the value of this field. If the portgroup type is ephemeral, the port is created and assigned to a virtual machine when it is powered on and the Ethernet adapter is connected. This field cannot be specified as no free ports exist before use. May be used to specify a port when the network specified on the Ethernet.BackingSpec.network field is a static or early binding distributed portgroup. If unset, the port will be automatically assigned to the Ethernet adapter based on the policy embodied by the portgroup type.
	DistributedPort *string `json:"distributed_port,omitempty"`
}

// NewVcenterVmHardwareEthernetBackingSpec instantiates a new VcenterVmHardwareEthernetBackingSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareEthernetBackingSpec(type_ VcenterVmHardwareEthernetBackingType) *VcenterVmHardwareEthernetBackingSpec {
	this := VcenterVmHardwareEthernetBackingSpec{}
	this.Type = type_
	return &this
}

// NewVcenterVmHardwareEthernetBackingSpecWithDefaults instantiates a new VcenterVmHardwareEthernetBackingSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareEthernetBackingSpecWithDefaults() *VcenterVmHardwareEthernetBackingSpec {
	this := VcenterVmHardwareEthernetBackingSpec{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterVmHardwareEthernetBackingSpec) GetType() VcenterVmHardwareEthernetBackingType {
	if o == nil {
		var ret VcenterVmHardwareEthernetBackingType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingSpec) GetTypeOk() (*VcenterVmHardwareEthernetBackingType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmHardwareEthernetBackingSpec) SetType(v VcenterVmHardwareEthernetBackingType) {
	o.Type = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *VcenterVmHardwareEthernetBackingSpec) GetNetwork() string {
	if o == nil || o.Network == nil {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingSpec) GetNetworkOk() (*string, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *VcenterVmHardwareEthernetBackingSpec) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *VcenterVmHardwareEthernetBackingSpec) SetNetwork(v string) {
	o.Network = &v
}

// GetDistributedPort returns the DistributedPort field value if set, zero value otherwise.
func (o *VcenterVmHardwareEthernetBackingSpec) GetDistributedPort() string {
	if o == nil || o.DistributedPort == nil {
		var ret string
		return ret
	}
	return *o.DistributedPort
}

// GetDistributedPortOk returns a tuple with the DistributedPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingSpec) GetDistributedPortOk() (*string, bool) {
	if o == nil || o.DistributedPort == nil {
		return nil, false
	}
	return o.DistributedPort, true
}

// HasDistributedPort returns a boolean if a field has been set.
func (o *VcenterVmHardwareEthernetBackingSpec) HasDistributedPort() bool {
	if o != nil && o.DistributedPort != nil {
		return true
	}

	return false
}

// SetDistributedPort gets a reference to the given string and assigns it to the DistributedPort field.
func (o *VcenterVmHardwareEthernetBackingSpec) SetDistributedPort(v string) {
	o.DistributedPort = &v
}

func (o VcenterVmHardwareEthernetBackingSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	if o.DistributedPort != nil {
		toSerialize["distributed_port"] = o.DistributedPort
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareEthernetBackingSpec struct {
	value *VcenterVmHardwareEthernetBackingSpec
	isSet bool
}

func (v NullableVcenterVmHardwareEthernetBackingSpec) Get() *VcenterVmHardwareEthernetBackingSpec {
	return v.value
}

func (v *NullableVcenterVmHardwareEthernetBackingSpec) Set(val *VcenterVmHardwareEthernetBackingSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareEthernetBackingSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareEthernetBackingSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareEthernetBackingSpec(val *VcenterVmHardwareEthernetBackingSpec) *NullableVcenterVmHardwareEthernetBackingSpec {
	return &NullableVcenterVmHardwareEthernetBackingSpec{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareEthernetBackingSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareEthernetBackingSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


