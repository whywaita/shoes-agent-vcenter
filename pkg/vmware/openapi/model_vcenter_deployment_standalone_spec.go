/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentStandaloneSpec struct for VcenterDeploymentStandaloneSpec
type VcenterDeploymentStandaloneSpec struct {
	// The SSO administrator account password.
	SsoAdminPassword string `json:"sso_admin_password"`
	// The SSO domain name to be used to configure this appliance. If unset, vsphere.local will be used.
	SsoDomainName *string `json:"sso_domain_name,omitempty"`
}

// NewVcenterDeploymentStandaloneSpec instantiates a new VcenterDeploymentStandaloneSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentStandaloneSpec(ssoAdminPassword string) *VcenterDeploymentStandaloneSpec {
	this := VcenterDeploymentStandaloneSpec{}
	this.SsoAdminPassword = ssoAdminPassword
	return &this
}

// NewVcenterDeploymentStandaloneSpecWithDefaults instantiates a new VcenterDeploymentStandaloneSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentStandaloneSpecWithDefaults() *VcenterDeploymentStandaloneSpec {
	this := VcenterDeploymentStandaloneSpec{}
	return &this
}

// GetSsoAdminPassword returns the SsoAdminPassword field value
func (o *VcenterDeploymentStandaloneSpec) GetSsoAdminPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SsoAdminPassword
}

// GetSsoAdminPasswordOk returns a tuple with the SsoAdminPassword field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentStandaloneSpec) GetSsoAdminPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SsoAdminPassword, true
}

// SetSsoAdminPassword sets field value
func (o *VcenterDeploymentStandaloneSpec) SetSsoAdminPassword(v string) {
	o.SsoAdminPassword = v
}

// GetSsoDomainName returns the SsoDomainName field value if set, zero value otherwise.
func (o *VcenterDeploymentStandaloneSpec) GetSsoDomainName() string {
	if o == nil || o.SsoDomainName == nil {
		var ret string
		return ret
	}
	return *o.SsoDomainName
}

// GetSsoDomainNameOk returns a tuple with the SsoDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentStandaloneSpec) GetSsoDomainNameOk() (*string, bool) {
	if o == nil || o.SsoDomainName == nil {
		return nil, false
	}
	return o.SsoDomainName, true
}

// HasSsoDomainName returns a boolean if a field has been set.
func (o *VcenterDeploymentStandaloneSpec) HasSsoDomainName() bool {
	if o != nil && o.SsoDomainName != nil {
		return true
	}

	return false
}

// SetSsoDomainName gets a reference to the given string and assigns it to the SsoDomainName field.
func (o *VcenterDeploymentStandaloneSpec) SetSsoDomainName(v string) {
	o.SsoDomainName = &v
}

func (o VcenterDeploymentStandaloneSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sso_admin_password"] = o.SsoAdminPassword
	}
	if o.SsoDomainName != nil {
		toSerialize["sso_domain_name"] = o.SsoDomainName
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentStandaloneSpec struct {
	value *VcenterDeploymentStandaloneSpec
	isSet bool
}

func (v NullableVcenterDeploymentStandaloneSpec) Get() *VcenterDeploymentStandaloneSpec {
	return v.value
}

func (v *NullableVcenterDeploymentStandaloneSpec) Set(val *VcenterDeploymentStandaloneSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentStandaloneSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentStandaloneSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentStandaloneSpec(val *VcenterDeploymentStandaloneSpec) *NullableVcenterDeploymentStandaloneSpec {
	return &NullableVcenterDeploymentStandaloneSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentStandaloneSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentStandaloneSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


