/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareAdapterSataType The Sata.Type enumerated type defines the valid emulation types for a virtual SATA adapter.
type VcenterVmHardwareAdapterSataType string

// List of vcenter.vm.hardware.adapter.sata.type
const (
	VCENTERVMHARDWAREADAPTERSATATYPE_AHCI VcenterVmHardwareAdapterSataType = "AHCI"
)

// All allowed values of VcenterVmHardwareAdapterSataType enum
var AllowedVcenterVmHardwareAdapterSataTypeEnumValues = []VcenterVmHardwareAdapterSataType{
	"AHCI",
}

func (v *VcenterVmHardwareAdapterSataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareAdapterSataType(value)
	for _, existing := range AllowedVcenterVmHardwareAdapterSataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareAdapterSataType", value)
}

// NewVcenterVmHardwareAdapterSataTypeFromValue returns a pointer to a valid VcenterVmHardwareAdapterSataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareAdapterSataTypeFromValue(v string) (*VcenterVmHardwareAdapterSataType, error) {
	ev := VcenterVmHardwareAdapterSataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareAdapterSataType: valid values are %v", v, AllowedVcenterVmHardwareAdapterSataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareAdapterSataType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareAdapterSataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.adapter.sata.type value
func (v VcenterVmHardwareAdapterSataType) Ptr() *VcenterVmHardwareAdapterSataType {
	return &v
}

type NullableVcenterVmHardwareAdapterSataType struct {
	value *VcenterVmHardwareAdapterSataType
	isSet bool
}

func (v NullableVcenterVmHardwareAdapterSataType) Get() *VcenterVmHardwareAdapterSataType {
	return v.value
}

func (v *NullableVcenterVmHardwareAdapterSataType) Set(val *VcenterVmHardwareAdapterSataType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareAdapterSataType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareAdapterSataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareAdapterSataType(val *VcenterVmHardwareAdapterSataType) *NullableVcenterVmHardwareAdapterSataType {
	return &NullableVcenterVmHardwareAdapterSataType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareAdapterSataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareAdapterSataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

