/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsDeploySpec struct for VcenterVmTemplateLibraryItemsDeploySpec
type VcenterVmTemplateLibraryItemsDeploySpec struct {
	// Name of the deployed virtual machine.
	Name string `json:"name"`
	// Description of the deployed virtual machine.
	Description *string `json:"description,omitempty"`
	VmHomeStorage *VcenterVmTemplateLibraryItemsDeploySpecVmHomeStorage `json:"vm_home_storage,omitempty"`
	DiskStorage *VcenterVmTemplateLibraryItemsDeploySpecDiskStorage `json:"disk_storage,omitempty"`
	// Storage specification for individual disks in the deployed virtual machine. This is specified as a mapping between disk identifiers in the source virtual machine template contained in the library item and their storage specifications.
	DiskStorageOverrides *[]VcenterVmTemplateLibraryItemsDeploySpecDiskStorageOverrides `json:"disk_storage_overrides,omitempty"`
	Placement *VcenterVmTemplateLibraryItemsDeployPlacementSpec `json:"placement,omitempty"`
	// Specifies whether the deployed virtual machine should be powered on after deployment.
	PoweredOn *bool `json:"powered_on,omitempty"`
	GuestCustomization *VcenterVmTemplateLibraryItemsGuestCustomizationSpec `json:"guest_customization,omitempty"`
	HardwareCustomization *VcenterVmTemplateLibraryItemsHardwareCustomizationSpec `json:"hardware_customization,omitempty"`
}

// NewVcenterVmTemplateLibraryItemsDeploySpec instantiates a new VcenterVmTemplateLibraryItemsDeploySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsDeploySpec(name string) *VcenterVmTemplateLibraryItemsDeploySpec {
	this := VcenterVmTemplateLibraryItemsDeploySpec{}
	this.Name = name
	return &this
}

// NewVcenterVmTemplateLibraryItemsDeploySpecWithDefaults instantiates a new VcenterVmTemplateLibraryItemsDeploySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsDeploySpecWithDefaults() *VcenterVmTemplateLibraryItemsDeploySpec {
	this := VcenterVmTemplateLibraryItemsDeploySpec{}
	return &this
}

// GetName returns the Name field value
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterVmTemplateLibraryItemsDeploySpec) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) SetDescription(v string) {
	o.Description = &v
}

// GetVmHomeStorage returns the VmHomeStorage field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetVmHomeStorage() VcenterVmTemplateLibraryItemsDeploySpecVmHomeStorage {
	if o == nil || o.VmHomeStorage == nil {
		var ret VcenterVmTemplateLibraryItemsDeploySpecVmHomeStorage
		return ret
	}
	return *o.VmHomeStorage
}

// GetVmHomeStorageOk returns a tuple with the VmHomeStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetVmHomeStorageOk() (*VcenterVmTemplateLibraryItemsDeploySpecVmHomeStorage, bool) {
	if o == nil || o.VmHomeStorage == nil {
		return nil, false
	}
	return o.VmHomeStorage, true
}

// HasVmHomeStorage returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) HasVmHomeStorage() bool {
	if o != nil && o.VmHomeStorage != nil {
		return true
	}

	return false
}

// SetVmHomeStorage gets a reference to the given VcenterVmTemplateLibraryItemsDeploySpecVmHomeStorage and assigns it to the VmHomeStorage field.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) SetVmHomeStorage(v VcenterVmTemplateLibraryItemsDeploySpecVmHomeStorage) {
	o.VmHomeStorage = &v
}

// GetDiskStorage returns the DiskStorage field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetDiskStorage() VcenterVmTemplateLibraryItemsDeploySpecDiskStorage {
	if o == nil || o.DiskStorage == nil {
		var ret VcenterVmTemplateLibraryItemsDeploySpecDiskStorage
		return ret
	}
	return *o.DiskStorage
}

// GetDiskStorageOk returns a tuple with the DiskStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetDiskStorageOk() (*VcenterVmTemplateLibraryItemsDeploySpecDiskStorage, bool) {
	if o == nil || o.DiskStorage == nil {
		return nil, false
	}
	return o.DiskStorage, true
}

// HasDiskStorage returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) HasDiskStorage() bool {
	if o != nil && o.DiskStorage != nil {
		return true
	}

	return false
}

// SetDiskStorage gets a reference to the given VcenterVmTemplateLibraryItemsDeploySpecDiskStorage and assigns it to the DiskStorage field.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) SetDiskStorage(v VcenterVmTemplateLibraryItemsDeploySpecDiskStorage) {
	o.DiskStorage = &v
}

// GetDiskStorageOverrides returns the DiskStorageOverrides field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetDiskStorageOverrides() []VcenterVmTemplateLibraryItemsDeploySpecDiskStorageOverrides {
	if o == nil || o.DiskStorageOverrides == nil {
		var ret []VcenterVmTemplateLibraryItemsDeploySpecDiskStorageOverrides
		return ret
	}
	return *o.DiskStorageOverrides
}

// GetDiskStorageOverridesOk returns a tuple with the DiskStorageOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetDiskStorageOverridesOk() (*[]VcenterVmTemplateLibraryItemsDeploySpecDiskStorageOverrides, bool) {
	if o == nil || o.DiskStorageOverrides == nil {
		return nil, false
	}
	return o.DiskStorageOverrides, true
}

// HasDiskStorageOverrides returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) HasDiskStorageOverrides() bool {
	if o != nil && o.DiskStorageOverrides != nil {
		return true
	}

	return false
}

// SetDiskStorageOverrides gets a reference to the given []VcenterVmTemplateLibraryItemsDeploySpecDiskStorageOverrides and assigns it to the DiskStorageOverrides field.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) SetDiskStorageOverrides(v []VcenterVmTemplateLibraryItemsDeploySpecDiskStorageOverrides) {
	o.DiskStorageOverrides = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetPlacement() VcenterVmTemplateLibraryItemsDeployPlacementSpec {
	if o == nil || o.Placement == nil {
		var ret VcenterVmTemplateLibraryItemsDeployPlacementSpec
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetPlacementOk() (*VcenterVmTemplateLibraryItemsDeployPlacementSpec, bool) {
	if o == nil || o.Placement == nil {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) HasPlacement() bool {
	if o != nil && o.Placement != nil {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given VcenterVmTemplateLibraryItemsDeployPlacementSpec and assigns it to the Placement field.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) SetPlacement(v VcenterVmTemplateLibraryItemsDeployPlacementSpec) {
	o.Placement = &v
}

// GetPoweredOn returns the PoweredOn field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetPoweredOn() bool {
	if o == nil || o.PoweredOn == nil {
		var ret bool
		return ret
	}
	return *o.PoweredOn
}

// GetPoweredOnOk returns a tuple with the PoweredOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetPoweredOnOk() (*bool, bool) {
	if o == nil || o.PoweredOn == nil {
		return nil, false
	}
	return o.PoweredOn, true
}

// HasPoweredOn returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) HasPoweredOn() bool {
	if o != nil && o.PoweredOn != nil {
		return true
	}

	return false
}

// SetPoweredOn gets a reference to the given bool and assigns it to the PoweredOn field.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) SetPoweredOn(v bool) {
	o.PoweredOn = &v
}

// GetGuestCustomization returns the GuestCustomization field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetGuestCustomization() VcenterVmTemplateLibraryItemsGuestCustomizationSpec {
	if o == nil || o.GuestCustomization == nil {
		var ret VcenterVmTemplateLibraryItemsGuestCustomizationSpec
		return ret
	}
	return *o.GuestCustomization
}

// GetGuestCustomizationOk returns a tuple with the GuestCustomization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetGuestCustomizationOk() (*VcenterVmTemplateLibraryItemsGuestCustomizationSpec, bool) {
	if o == nil || o.GuestCustomization == nil {
		return nil, false
	}
	return o.GuestCustomization, true
}

// HasGuestCustomization returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) HasGuestCustomization() bool {
	if o != nil && o.GuestCustomization != nil {
		return true
	}

	return false
}

// SetGuestCustomization gets a reference to the given VcenterVmTemplateLibraryItemsGuestCustomizationSpec and assigns it to the GuestCustomization field.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) SetGuestCustomization(v VcenterVmTemplateLibraryItemsGuestCustomizationSpec) {
	o.GuestCustomization = &v
}

// GetHardwareCustomization returns the HardwareCustomization field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetHardwareCustomization() VcenterVmTemplateLibraryItemsHardwareCustomizationSpec {
	if o == nil || o.HardwareCustomization == nil {
		var ret VcenterVmTemplateLibraryItemsHardwareCustomizationSpec
		return ret
	}
	return *o.HardwareCustomization
}

// GetHardwareCustomizationOk returns a tuple with the HardwareCustomization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) GetHardwareCustomizationOk() (*VcenterVmTemplateLibraryItemsHardwareCustomizationSpec, bool) {
	if o == nil || o.HardwareCustomization == nil {
		return nil, false
	}
	return o.HardwareCustomization, true
}

// HasHardwareCustomization returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) HasHardwareCustomization() bool {
	if o != nil && o.HardwareCustomization != nil {
		return true
	}

	return false
}

// SetHardwareCustomization gets a reference to the given VcenterVmTemplateLibraryItemsHardwareCustomizationSpec and assigns it to the HardwareCustomization field.
func (o *VcenterVmTemplateLibraryItemsDeploySpec) SetHardwareCustomization(v VcenterVmTemplateLibraryItemsHardwareCustomizationSpec) {
	o.HardwareCustomization = &v
}

func (o VcenterVmTemplateLibraryItemsDeploySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.VmHomeStorage != nil {
		toSerialize["vm_home_storage"] = o.VmHomeStorage
	}
	if o.DiskStorage != nil {
		toSerialize["disk_storage"] = o.DiskStorage
	}
	if o.DiskStorageOverrides != nil {
		toSerialize["disk_storage_overrides"] = o.DiskStorageOverrides
	}
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	if o.PoweredOn != nil {
		toSerialize["powered_on"] = o.PoweredOn
	}
	if o.GuestCustomization != nil {
		toSerialize["guest_customization"] = o.GuestCustomization
	}
	if o.HardwareCustomization != nil {
		toSerialize["hardware_customization"] = o.HardwareCustomization
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsDeploySpec struct {
	value *VcenterVmTemplateLibraryItemsDeploySpec
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsDeploySpec) Get() *VcenterVmTemplateLibraryItemsDeploySpec {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsDeploySpec) Set(val *VcenterVmTemplateLibraryItemsDeploySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsDeploySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsDeploySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsDeploySpec(val *VcenterVmTemplateLibraryItemsDeploySpec) *NullableVcenterVmTemplateLibraryItemsDeploySpec {
	return &NullableVcenterVmTemplateLibraryItemsDeploySpec{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsDeploySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsDeploySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


