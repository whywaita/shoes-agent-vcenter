/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespacesNamespaceSelfServiceStatus The page describes the status of the namespace self-service on the cluster on which vSphere Namespaces enabled.
type VcenterNamespacesNamespaceSelfServiceStatus string

// List of VcenterNamespacesNamespaceSelfServiceStatus
const (
	VCENTERNAMESPACESNAMESPACESELFSERVICESTATUS_CONFIGURING VcenterNamespacesNamespaceSelfServiceStatus = "CONFIGURING"
	VCENTERNAMESPACESNAMESPACESELFSERVICESTATUS_RUNNING VcenterNamespacesNamespaceSelfServiceStatus = "RUNNING"
	VCENTERNAMESPACESNAMESPACESELFSERVICESTATUS_REMOVING VcenterNamespacesNamespaceSelfServiceStatus = "REMOVING"
	VCENTERNAMESPACESNAMESPACESELFSERVICESTATUS_DEACTIVATED VcenterNamespacesNamespaceSelfServiceStatus = "DEACTIVATED"
	VCENTERNAMESPACESNAMESPACESELFSERVICESTATUS_ERROR VcenterNamespacesNamespaceSelfServiceStatus = "ERROR"
)

// All allowed values of VcenterNamespacesNamespaceSelfServiceStatus enum
var AllowedVcenterNamespacesNamespaceSelfServiceStatusEnumValues = []VcenterNamespacesNamespaceSelfServiceStatus{
	"CONFIGURING",
	"RUNNING",
	"REMOVING",
	"DEACTIVATED",
	"ERROR",
}

func (v *VcenterNamespacesNamespaceSelfServiceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespacesNamespaceSelfServiceStatus(value)
	for _, existing := range AllowedVcenterNamespacesNamespaceSelfServiceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespacesNamespaceSelfServiceStatus", value)
}

// NewVcenterNamespacesNamespaceSelfServiceStatusFromValue returns a pointer to a valid VcenterNamespacesNamespaceSelfServiceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespacesNamespaceSelfServiceStatusFromValue(v string) (*VcenterNamespacesNamespaceSelfServiceStatus, error) {
	ev := VcenterNamespacesNamespaceSelfServiceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespacesNamespaceSelfServiceStatus: valid values are %v", v, AllowedVcenterNamespacesNamespaceSelfServiceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespacesNamespaceSelfServiceStatus) IsValid() bool {
	for _, existing := range AllowedVcenterNamespacesNamespaceSelfServiceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespacesNamespaceSelfServiceStatus value
func (v VcenterNamespacesNamespaceSelfServiceStatus) Ptr() *VcenterNamespacesNamespaceSelfServiceStatus {
	return &v
}

type NullableVcenterNamespacesNamespaceSelfServiceStatus struct {
	value *VcenterNamespacesNamespaceSelfServiceStatus
	isSet bool
}

func (v NullableVcenterNamespacesNamespaceSelfServiceStatus) Get() *VcenterNamespacesNamespaceSelfServiceStatus {
	return v.value
}

func (v *NullableVcenterNamespacesNamespaceSelfServiceStatus) Set(val *VcenterNamespacesNamespaceSelfServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesNamespaceSelfServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesNamespaceSelfServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesNamespaceSelfServiceStatus(val *VcenterNamespacesNamespaceSelfServiceStatus) *NullableVcenterNamespacesNamespaceSelfServiceStatus {
	return &NullableVcenterNamespacesNamespaceSelfServiceStatus{value: val, isSet: true}
}

func (v NullableVcenterNamespacesNamespaceSelfServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesNamespaceSelfServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

