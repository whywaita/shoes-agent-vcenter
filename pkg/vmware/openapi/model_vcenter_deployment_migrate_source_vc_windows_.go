/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentMigrateSourceVcWindows struct for VcenterDeploymentMigrateSourceVcWindows
type VcenterDeploymentMigrateSourceVcWindows struct {
	// The IP address or DNS resolvable name of the source Windows machine.
	Hostname string `json:"hostname"`
	// The SSO account with administrative privilege to perform the migration operation.
	Username string `json:"username"`
	// The SSO administrator account password.
	Password string `json:"password"`
}

// NewVcenterDeploymentMigrateSourceVcWindows instantiates a new VcenterDeploymentMigrateSourceVcWindows object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentMigrateSourceVcWindows(hostname string, username string, password string) *VcenterDeploymentMigrateSourceVcWindows {
	this := VcenterDeploymentMigrateSourceVcWindows{}
	this.Hostname = hostname
	this.Username = username
	this.Password = password
	return &this
}

// NewVcenterDeploymentMigrateSourceVcWindowsWithDefaults instantiates a new VcenterDeploymentMigrateSourceVcWindows object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentMigrateSourceVcWindowsWithDefaults() *VcenterDeploymentMigrateSourceVcWindows {
	this := VcenterDeploymentMigrateSourceVcWindows{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *VcenterDeploymentMigrateSourceVcWindows) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateSourceVcWindows) GetHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *VcenterDeploymentMigrateSourceVcWindows) SetHostname(v string) {
	o.Hostname = v
}

// GetUsername returns the Username field value
func (o *VcenterDeploymentMigrateSourceVcWindows) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateSourceVcWindows) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *VcenterDeploymentMigrateSourceVcWindows) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *VcenterDeploymentMigrateSourceVcWindows) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateSourceVcWindows) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *VcenterDeploymentMigrateSourceVcWindows) SetPassword(v string) {
	o.Password = v
}

func (o VcenterDeploymentMigrateSourceVcWindows) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentMigrateSourceVcWindows struct {
	value *VcenterDeploymentMigrateSourceVcWindows
	isSet bool
}

func (v NullableVcenterDeploymentMigrateSourceVcWindows) Get() *VcenterDeploymentMigrateSourceVcWindows {
	return v.value
}

func (v *NullableVcenterDeploymentMigrateSourceVcWindows) Set(val *VcenterDeploymentMigrateSourceVcWindows) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentMigrateSourceVcWindows) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentMigrateSourceVcWindows) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentMigrateSourceVcWindows(val *VcenterDeploymentMigrateSourceVcWindows) *NullableVcenterDeploymentMigrateSourceVcWindows {
	return &NullableVcenterDeploymentMigrateSourceVcWindows{value: val, isSet: true}
}

func (v NullableVcenterDeploymentMigrateSourceVcWindows) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentMigrateSourceVcWindows) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


