/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaPlacementSpec struct for VcenterVchaPlacementSpec
type VcenterVchaPlacementSpec struct {
	// The name of the VCHA node to be used for the virtual machine name.
	Name string `json:"name"`
	// The identifier of the folder to deploy the VCHA node to. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder:VCenter.
	Folder string `json:"folder"`
	// The identifier of the host to deploy the VCHA node to. If unset, see vim.vm.RelocateSpec.host. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem:VCenter.
	Host *string `json:"host,omitempty"`
	// The identifier of the resource pool to deploy the VCHA node to. If unset, then the active node's resource pool will be used. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool:VCenter.
	ResourcePool *string `json:"resource_pool,omitempty"`
	HaNetworkType *VcenterVchaNetworkType `json:"ha_network_type,omitempty"`
	// The identifier of the Network object used for the HA network.  If the PlacementSpec.ha-network field is set, then the {#link #haNetworkType} field must be set.  If the PlacementSpec.ha-network field is unset, then the PlacementSpec.ha-network-type field is ignored. If unset and the PlacementSpec.ha-network-type field is unset, then the same network present on the Active node virtual machine is used to deploy the virtual machine with an assumption that the network is present on the destination.  When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network:VCenter.
	HaNetwork *string `json:"ha_network,omitempty"`
	ManagementNetworkType *VcenterVchaNetworkType `json:"management_network_type,omitempty"`
	// The identifier of the Network object used for the Management network. If the PlacementSpec.management-network field is set, then the PlacementSpec.management-network-type field must be set.  If the PlacementSpec.management-network field is unset, then the PlacementSpec.management-network-type field is ignored. If unset and the PlacementSpec.management-network-type field is unset, then the same network present on the Active node virtual machine is used to deploy the virtual machine with an assumption that the network is present on the destination.  When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network:VCenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network:VCenter.
	ManagementNetwork *string `json:"management_network,omitempty"`
	Storage *VcenterVchaDiskSpec `json:"storage,omitempty"`
}

// NewVcenterVchaPlacementSpec instantiates a new VcenterVchaPlacementSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaPlacementSpec(name string, folder string) *VcenterVchaPlacementSpec {
	this := VcenterVchaPlacementSpec{}
	this.Name = name
	this.Folder = folder
	return &this
}

// NewVcenterVchaPlacementSpecWithDefaults instantiates a new VcenterVchaPlacementSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaPlacementSpecWithDefaults() *VcenterVchaPlacementSpec {
	this := VcenterVchaPlacementSpec{}
	return &this
}

// GetName returns the Name field value
func (o *VcenterVchaPlacementSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaPlacementSpec) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterVchaPlacementSpec) SetName(v string) {
	o.Name = v
}

// GetFolder returns the Folder field value
func (o *VcenterVchaPlacementSpec) GetFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Folder
}

// GetFolderOk returns a tuple with the Folder field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaPlacementSpec) GetFolderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Folder, true
}

// SetFolder sets field value
func (o *VcenterVchaPlacementSpec) SetFolder(v string) {
	o.Folder = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *VcenterVchaPlacementSpec) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaPlacementSpec) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *VcenterVchaPlacementSpec) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *VcenterVchaPlacementSpec) SetHost(v string) {
	o.Host = &v
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise.
func (o *VcenterVchaPlacementSpec) GetResourcePool() string {
	if o == nil || o.ResourcePool == nil {
		var ret string
		return ret
	}
	return *o.ResourcePool
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaPlacementSpec) GetResourcePoolOk() (*string, bool) {
	if o == nil || o.ResourcePool == nil {
		return nil, false
	}
	return o.ResourcePool, true
}

// HasResourcePool returns a boolean if a field has been set.
func (o *VcenterVchaPlacementSpec) HasResourcePool() bool {
	if o != nil && o.ResourcePool != nil {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given string and assigns it to the ResourcePool field.
func (o *VcenterVchaPlacementSpec) SetResourcePool(v string) {
	o.ResourcePool = &v
}

// GetHaNetworkType returns the HaNetworkType field value if set, zero value otherwise.
func (o *VcenterVchaPlacementSpec) GetHaNetworkType() VcenterVchaNetworkType {
	if o == nil || o.HaNetworkType == nil {
		var ret VcenterVchaNetworkType
		return ret
	}
	return *o.HaNetworkType
}

// GetHaNetworkTypeOk returns a tuple with the HaNetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaPlacementSpec) GetHaNetworkTypeOk() (*VcenterVchaNetworkType, bool) {
	if o == nil || o.HaNetworkType == nil {
		return nil, false
	}
	return o.HaNetworkType, true
}

// HasHaNetworkType returns a boolean if a field has been set.
func (o *VcenterVchaPlacementSpec) HasHaNetworkType() bool {
	if o != nil && o.HaNetworkType != nil {
		return true
	}

	return false
}

// SetHaNetworkType gets a reference to the given VcenterVchaNetworkType and assigns it to the HaNetworkType field.
func (o *VcenterVchaPlacementSpec) SetHaNetworkType(v VcenterVchaNetworkType) {
	o.HaNetworkType = &v
}

// GetHaNetwork returns the HaNetwork field value if set, zero value otherwise.
func (o *VcenterVchaPlacementSpec) GetHaNetwork() string {
	if o == nil || o.HaNetwork == nil {
		var ret string
		return ret
	}
	return *o.HaNetwork
}

// GetHaNetworkOk returns a tuple with the HaNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaPlacementSpec) GetHaNetworkOk() (*string, bool) {
	if o == nil || o.HaNetwork == nil {
		return nil, false
	}
	return o.HaNetwork, true
}

// HasHaNetwork returns a boolean if a field has been set.
func (o *VcenterVchaPlacementSpec) HasHaNetwork() bool {
	if o != nil && o.HaNetwork != nil {
		return true
	}

	return false
}

// SetHaNetwork gets a reference to the given string and assigns it to the HaNetwork field.
func (o *VcenterVchaPlacementSpec) SetHaNetwork(v string) {
	o.HaNetwork = &v
}

// GetManagementNetworkType returns the ManagementNetworkType field value if set, zero value otherwise.
func (o *VcenterVchaPlacementSpec) GetManagementNetworkType() VcenterVchaNetworkType {
	if o == nil || o.ManagementNetworkType == nil {
		var ret VcenterVchaNetworkType
		return ret
	}
	return *o.ManagementNetworkType
}

// GetManagementNetworkTypeOk returns a tuple with the ManagementNetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaPlacementSpec) GetManagementNetworkTypeOk() (*VcenterVchaNetworkType, bool) {
	if o == nil || o.ManagementNetworkType == nil {
		return nil, false
	}
	return o.ManagementNetworkType, true
}

// HasManagementNetworkType returns a boolean if a field has been set.
func (o *VcenterVchaPlacementSpec) HasManagementNetworkType() bool {
	if o != nil && o.ManagementNetworkType != nil {
		return true
	}

	return false
}

// SetManagementNetworkType gets a reference to the given VcenterVchaNetworkType and assigns it to the ManagementNetworkType field.
func (o *VcenterVchaPlacementSpec) SetManagementNetworkType(v VcenterVchaNetworkType) {
	o.ManagementNetworkType = &v
}

// GetManagementNetwork returns the ManagementNetwork field value if set, zero value otherwise.
func (o *VcenterVchaPlacementSpec) GetManagementNetwork() string {
	if o == nil || o.ManagementNetwork == nil {
		var ret string
		return ret
	}
	return *o.ManagementNetwork
}

// GetManagementNetworkOk returns a tuple with the ManagementNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaPlacementSpec) GetManagementNetworkOk() (*string, bool) {
	if o == nil || o.ManagementNetwork == nil {
		return nil, false
	}
	return o.ManagementNetwork, true
}

// HasManagementNetwork returns a boolean if a field has been set.
func (o *VcenterVchaPlacementSpec) HasManagementNetwork() bool {
	if o != nil && o.ManagementNetwork != nil {
		return true
	}

	return false
}

// SetManagementNetwork gets a reference to the given string and assigns it to the ManagementNetwork field.
func (o *VcenterVchaPlacementSpec) SetManagementNetwork(v string) {
	o.ManagementNetwork = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *VcenterVchaPlacementSpec) GetStorage() VcenterVchaDiskSpec {
	if o == nil || o.Storage == nil {
		var ret VcenterVchaDiskSpec
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaPlacementSpec) GetStorageOk() (*VcenterVchaDiskSpec, bool) {
	if o == nil || o.Storage == nil {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *VcenterVchaPlacementSpec) HasStorage() bool {
	if o != nil && o.Storage != nil {
		return true
	}

	return false
}

// SetStorage gets a reference to the given VcenterVchaDiskSpec and assigns it to the Storage field.
func (o *VcenterVchaPlacementSpec) SetStorage(v VcenterVchaDiskSpec) {
	o.Storage = &v
}

func (o VcenterVchaPlacementSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["folder"] = o.Folder
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.ResourcePool != nil {
		toSerialize["resource_pool"] = o.ResourcePool
	}
	if o.HaNetworkType != nil {
		toSerialize["ha_network_type"] = o.HaNetworkType
	}
	if o.HaNetwork != nil {
		toSerialize["ha_network"] = o.HaNetwork
	}
	if o.ManagementNetworkType != nil {
		toSerialize["management_network_type"] = o.ManagementNetworkType
	}
	if o.ManagementNetwork != nil {
		toSerialize["management_network"] = o.ManagementNetwork
	}
	if o.Storage != nil {
		toSerialize["storage"] = o.Storage
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaPlacementSpec struct {
	value *VcenterVchaPlacementSpec
	isSet bool
}

func (v NullableVcenterVchaPlacementSpec) Get() *VcenterVchaPlacementSpec {
	return v.value
}

func (v *NullableVcenterVchaPlacementSpec) Set(val *VcenterVchaPlacementSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaPlacementSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaPlacementSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaPlacementSpec(val *VcenterVchaPlacementSpec) *NullableVcenterVchaPlacementSpec {
	return &NullableVcenterVchaPlacementSpec{value: val, isSet: true}
}

func (v NullableVcenterVchaPlacementSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaPlacementSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


