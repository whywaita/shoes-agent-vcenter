/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMSummary struct for VcenterVMSummary
type VcenterVMSummary struct {
	// Identifier of the virtual machine. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will be an identifier for the resource type: VirtualMachine.
	Vm string `json:"vm"`
	// Name of the Virtual machine.
	Name string `json:"name"`
	PowerState VcenterVmPowerState `json:"power_state"`
	// Number of CPU cores. This field will be unset if the virtual machine configuration is not available. For example, the configuration information would be unavailable if the server is unable to access the virtual machine files on disk, and is often also unavailable during the intial phases of virtual machine creation.
	CpuCount *int64 `json:"cpu_count,omitempty"`
	// Memory size in mebibytes. This field will be unset if the virtual machine configuration is not available. For example, the configuration information would be unavailable if the server is unable to access the virtual machine files on disk, and is often also unavailable during the intial phases of virtual machine creation.
	MemorySizeMiB *int64 `json:"memory_size_MiB,omitempty"`
}

// NewVcenterVMSummary instantiates a new VcenterVMSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMSummary(vm string, name string, powerState VcenterVmPowerState) *VcenterVMSummary {
	this := VcenterVMSummary{}
	this.Vm = vm
	this.Name = name
	this.PowerState = powerState
	return &this
}

// NewVcenterVMSummaryWithDefaults instantiates a new VcenterVMSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMSummaryWithDefaults() *VcenterVMSummary {
	this := VcenterVMSummary{}
	return &this
}

// GetVm returns the Vm field value
func (o *VcenterVMSummary) GetVm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vm
}

// GetVmOk returns a tuple with the Vm field value
// and a boolean to check if the value has been set.
func (o *VcenterVMSummary) GetVmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Vm, true
}

// SetVm sets field value
func (o *VcenterVMSummary) SetVm(v string) {
	o.Vm = v
}

// GetName returns the Name field value
func (o *VcenterVMSummary) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterVMSummary) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterVMSummary) SetName(v string) {
	o.Name = v
}

// GetPowerState returns the PowerState field value
func (o *VcenterVMSummary) GetPowerState() VcenterVmPowerState {
	if o == nil {
		var ret VcenterVmPowerState
		return ret
	}

	return o.PowerState
}

// GetPowerStateOk returns a tuple with the PowerState field value
// and a boolean to check if the value has been set.
func (o *VcenterVMSummary) GetPowerStateOk() (*VcenterVmPowerState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PowerState, true
}

// SetPowerState sets field value
func (o *VcenterVMSummary) SetPowerState(v VcenterVmPowerState) {
	o.PowerState = v
}

// GetCpuCount returns the CpuCount field value if set, zero value otherwise.
func (o *VcenterVMSummary) GetCpuCount() int64 {
	if o == nil || o.CpuCount == nil {
		var ret int64
		return ret
	}
	return *o.CpuCount
}

// GetCpuCountOk returns a tuple with the CpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMSummary) GetCpuCountOk() (*int64, bool) {
	if o == nil || o.CpuCount == nil {
		return nil, false
	}
	return o.CpuCount, true
}

// HasCpuCount returns a boolean if a field has been set.
func (o *VcenterVMSummary) HasCpuCount() bool {
	if o != nil && o.CpuCount != nil {
		return true
	}

	return false
}

// SetCpuCount gets a reference to the given int64 and assigns it to the CpuCount field.
func (o *VcenterVMSummary) SetCpuCount(v int64) {
	o.CpuCount = &v
}

// GetMemorySizeMiB returns the MemorySizeMiB field value if set, zero value otherwise.
func (o *VcenterVMSummary) GetMemorySizeMiB() int64 {
	if o == nil || o.MemorySizeMiB == nil {
		var ret int64
		return ret
	}
	return *o.MemorySizeMiB
}

// GetMemorySizeMiBOk returns a tuple with the MemorySizeMiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMSummary) GetMemorySizeMiBOk() (*int64, bool) {
	if o == nil || o.MemorySizeMiB == nil {
		return nil, false
	}
	return o.MemorySizeMiB, true
}

// HasMemorySizeMiB returns a boolean if a field has been set.
func (o *VcenterVMSummary) HasMemorySizeMiB() bool {
	if o != nil && o.MemorySizeMiB != nil {
		return true
	}

	return false
}

// SetMemorySizeMiB gets a reference to the given int64 and assigns it to the MemorySizeMiB field.
func (o *VcenterVMSummary) SetMemorySizeMiB(v int64) {
	o.MemorySizeMiB = &v
}

func (o VcenterVMSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["vm"] = o.Vm
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["power_state"] = o.PowerState
	}
	if o.CpuCount != nil {
		toSerialize["cpu_count"] = o.CpuCount
	}
	if o.MemorySizeMiB != nil {
		toSerialize["memory_size_MiB"] = o.MemorySizeMiB
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMSummary struct {
	value *VcenterVMSummary
	isSet bool
}

func (v NullableVcenterVMSummary) Get() *VcenterVMSummary {
	return v.value
}

func (v *NullableVcenterVMSummary) Set(val *VcenterVMSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMSummary(val *VcenterVMSummary) *NullableVcenterVMSummary {
	return &NullableVcenterVMSummary{value: val, isSet: true}
}

func (v NullableVcenterVMSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


