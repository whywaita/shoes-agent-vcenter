/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterUndeploySpec struct for VcenterVchaClusterUndeploySpec
type VcenterVchaClusterUndeploySpec struct {
	VcSpec *VcenterVchaCredentialsSpec `json:"vc_spec,omitempty"`
	// Flag controlling in what circumstances the virtual machines will be deleted. For this flag to take effect, the VCHA cluster should have been successfully configured using automatic deployment.     -  If true, the Cluster.UndeploySpec.vms field will be ignored, the VCHA cluster specific information is removed, and the passive and witness virtual machines will be deleted.    -  If false, the Cluster.UndeploySpec.vms field contains the information identifying the passive and witness virtual machines.        =  If the Cluster.UndeploySpec.vms field is set, then it will be validated prior to deleting the passive and witness virtual machines and VCHA cluster specific information is removed.      =  If the Cluster.UndeploySpec.vms field is unset, then the passive and witness virtual machines will not be deleted. The customer should delete them in order to cleanup completely. VCHA cluster specific information is removed.    If unset, the Cluster.UndeploySpec.vms field contains the information identifying the passive and witness virtual machines.     -  If the Cluster.UndeploySpec.vms field is set, then it will be validated prior to deleting the passive and witness virtual machines. VCHA cluster specific information is removed.    -  If the Cluster.UndeploySpec.vms field is unset, then the passive and witness virtual machines will not be deleted. The customer should delete them in order to cleanup completely. VCHA cluster specific information is removed. 
	ForceDelete *bool `json:"force_delete,omitempty"`
	Vms *VcenterVchaClusterVmInfo `json:"vms,omitempty"`
}

// NewVcenterVchaClusterUndeploySpec instantiates a new VcenterVchaClusterUndeploySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterUndeploySpec() *VcenterVchaClusterUndeploySpec {
	this := VcenterVchaClusterUndeploySpec{}
	return &this
}

// NewVcenterVchaClusterUndeploySpecWithDefaults instantiates a new VcenterVchaClusterUndeploySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterUndeploySpecWithDefaults() *VcenterVchaClusterUndeploySpec {
	this := VcenterVchaClusterUndeploySpec{}
	return &this
}

// GetVcSpec returns the VcSpec field value if set, zero value otherwise.
func (o *VcenterVchaClusterUndeploySpec) GetVcSpec() VcenterVchaCredentialsSpec {
	if o == nil || o.VcSpec == nil {
		var ret VcenterVchaCredentialsSpec
		return ret
	}
	return *o.VcSpec
}

// GetVcSpecOk returns a tuple with the VcSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterUndeploySpec) GetVcSpecOk() (*VcenterVchaCredentialsSpec, bool) {
	if o == nil || o.VcSpec == nil {
		return nil, false
	}
	return o.VcSpec, true
}

// HasVcSpec returns a boolean if a field has been set.
func (o *VcenterVchaClusterUndeploySpec) HasVcSpec() bool {
	if o != nil && o.VcSpec != nil {
		return true
	}

	return false
}

// SetVcSpec gets a reference to the given VcenterVchaCredentialsSpec and assigns it to the VcSpec field.
func (o *VcenterVchaClusterUndeploySpec) SetVcSpec(v VcenterVchaCredentialsSpec) {
	o.VcSpec = &v
}

// GetForceDelete returns the ForceDelete field value if set, zero value otherwise.
func (o *VcenterVchaClusterUndeploySpec) GetForceDelete() bool {
	if o == nil || o.ForceDelete == nil {
		var ret bool
		return ret
	}
	return *o.ForceDelete
}

// GetForceDeleteOk returns a tuple with the ForceDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterUndeploySpec) GetForceDeleteOk() (*bool, bool) {
	if o == nil || o.ForceDelete == nil {
		return nil, false
	}
	return o.ForceDelete, true
}

// HasForceDelete returns a boolean if a field has been set.
func (o *VcenterVchaClusterUndeploySpec) HasForceDelete() bool {
	if o != nil && o.ForceDelete != nil {
		return true
	}

	return false
}

// SetForceDelete gets a reference to the given bool and assigns it to the ForceDelete field.
func (o *VcenterVchaClusterUndeploySpec) SetForceDelete(v bool) {
	o.ForceDelete = &v
}

// GetVms returns the Vms field value if set, zero value otherwise.
func (o *VcenterVchaClusterUndeploySpec) GetVms() VcenterVchaClusterVmInfo {
	if o == nil || o.Vms == nil {
		var ret VcenterVchaClusterVmInfo
		return ret
	}
	return *o.Vms
}

// GetVmsOk returns a tuple with the Vms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterUndeploySpec) GetVmsOk() (*VcenterVchaClusterVmInfo, bool) {
	if o == nil || o.Vms == nil {
		return nil, false
	}
	return o.Vms, true
}

// HasVms returns a boolean if a field has been set.
func (o *VcenterVchaClusterUndeploySpec) HasVms() bool {
	if o != nil && o.Vms != nil {
		return true
	}

	return false
}

// SetVms gets a reference to the given VcenterVchaClusterVmInfo and assigns it to the Vms field.
func (o *VcenterVchaClusterUndeploySpec) SetVms(v VcenterVchaClusterVmInfo) {
	o.Vms = &v
}

func (o VcenterVchaClusterUndeploySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VcSpec != nil {
		toSerialize["vc_spec"] = o.VcSpec
	}
	if o.ForceDelete != nil {
		toSerialize["force_delete"] = o.ForceDelete
	}
	if o.Vms != nil {
		toSerialize["vms"] = o.Vms
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterUndeploySpec struct {
	value *VcenterVchaClusterUndeploySpec
	isSet bool
}

func (v NullableVcenterVchaClusterUndeploySpec) Get() *VcenterVchaClusterUndeploySpec {
	return v.value
}

func (v *NullableVcenterVchaClusterUndeploySpec) Set(val *VcenterVchaClusterUndeploySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterUndeploySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterUndeploySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterUndeploySpec(val *VcenterVchaClusterUndeploySpec) *NullableVcenterVchaClusterUndeploySpec {
	return &NullableVcenterVchaClusterUndeploySpec{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterUndeploySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterUndeploySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


