/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareParallelBackingInfo struct for VcenterVmHardwareParallelBackingInfo
type VcenterVmHardwareParallelBackingInfo struct {
	Type VcenterVmHardwareParallelBackingType `json:"type"`
	// Path of the file backing the virtual parallel port. This field is optional and it is only relevant when the value of Parallel.BackingInfo.type is FILE.
	File *string `json:"file,omitempty"`
	// Name of the device backing the virtual parallel port.    This field will be unset if Parallel.BackingInfo.auto-detect is true and the virtual parallel port is not connected or no suitable device is available on the host.
	HostDevice *string `json:"host_device,omitempty"`
	// Flag indicating whether the virtual parallel port is configured to automatically detect a suitable host device. This field is optional and it is only relevant when the value of Parallel.BackingInfo.type is HOST_DEVICE.
	AutoDetect *bool `json:"auto_detect,omitempty"`
}

// NewVcenterVmHardwareParallelBackingInfo instantiates a new VcenterVmHardwareParallelBackingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareParallelBackingInfo(type_ VcenterVmHardwareParallelBackingType) *VcenterVmHardwareParallelBackingInfo {
	this := VcenterVmHardwareParallelBackingInfo{}
	this.Type = type_
	return &this
}

// NewVcenterVmHardwareParallelBackingInfoWithDefaults instantiates a new VcenterVmHardwareParallelBackingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareParallelBackingInfoWithDefaults() *VcenterVmHardwareParallelBackingInfo {
	this := VcenterVmHardwareParallelBackingInfo{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterVmHardwareParallelBackingInfo) GetType() VcenterVmHardwareParallelBackingType {
	if o == nil {
		var ret VcenterVmHardwareParallelBackingType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelBackingInfo) GetTypeOk() (*VcenterVmHardwareParallelBackingType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmHardwareParallelBackingInfo) SetType(v VcenterVmHardwareParallelBackingType) {
	o.Type = v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *VcenterVmHardwareParallelBackingInfo) GetFile() string {
	if o == nil || o.File == nil {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelBackingInfo) GetFileOk() (*string, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *VcenterVmHardwareParallelBackingInfo) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *VcenterVmHardwareParallelBackingInfo) SetFile(v string) {
	o.File = &v
}

// GetHostDevice returns the HostDevice field value if set, zero value otherwise.
func (o *VcenterVmHardwareParallelBackingInfo) GetHostDevice() string {
	if o == nil || o.HostDevice == nil {
		var ret string
		return ret
	}
	return *o.HostDevice
}

// GetHostDeviceOk returns a tuple with the HostDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelBackingInfo) GetHostDeviceOk() (*string, bool) {
	if o == nil || o.HostDevice == nil {
		return nil, false
	}
	return o.HostDevice, true
}

// HasHostDevice returns a boolean if a field has been set.
func (o *VcenterVmHardwareParallelBackingInfo) HasHostDevice() bool {
	if o != nil && o.HostDevice != nil {
		return true
	}

	return false
}

// SetHostDevice gets a reference to the given string and assigns it to the HostDevice field.
func (o *VcenterVmHardwareParallelBackingInfo) SetHostDevice(v string) {
	o.HostDevice = &v
}

// GetAutoDetect returns the AutoDetect field value if set, zero value otherwise.
func (o *VcenterVmHardwareParallelBackingInfo) GetAutoDetect() bool {
	if o == nil || o.AutoDetect == nil {
		var ret bool
		return ret
	}
	return *o.AutoDetect
}

// GetAutoDetectOk returns a tuple with the AutoDetect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareParallelBackingInfo) GetAutoDetectOk() (*bool, bool) {
	if o == nil || o.AutoDetect == nil {
		return nil, false
	}
	return o.AutoDetect, true
}

// HasAutoDetect returns a boolean if a field has been set.
func (o *VcenterVmHardwareParallelBackingInfo) HasAutoDetect() bool {
	if o != nil && o.AutoDetect != nil {
		return true
	}

	return false
}

// SetAutoDetect gets a reference to the given bool and assigns it to the AutoDetect field.
func (o *VcenterVmHardwareParallelBackingInfo) SetAutoDetect(v bool) {
	o.AutoDetect = &v
}

func (o VcenterVmHardwareParallelBackingInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	if o.HostDevice != nil {
		toSerialize["host_device"] = o.HostDevice
	}
	if o.AutoDetect != nil {
		toSerialize["auto_detect"] = o.AutoDetect
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareParallelBackingInfo struct {
	value *VcenterVmHardwareParallelBackingInfo
	isSet bool
}

func (v NullableVcenterVmHardwareParallelBackingInfo) Get() *VcenterVmHardwareParallelBackingInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareParallelBackingInfo) Set(val *VcenterVmHardwareParallelBackingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareParallelBackingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareParallelBackingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareParallelBackingInfo(val *VcenterVmHardwareParallelBackingInfo) *NullableVcenterVmHardwareParallelBackingInfo {
	return &NullableVcenterVmHardwareParallelBackingInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareParallelBackingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareParallelBackingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


