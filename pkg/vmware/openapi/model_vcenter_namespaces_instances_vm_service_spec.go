/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespacesInstancesVMServiceSpec struct for VcenterNamespacesInstancesVMServiceSpec
type VcenterNamespacesInstancesVMServiceSpec struct {
	// Set of content libraries for use by the VM Service. The content libraries specified should exist in vSphere inventory. This field is optional because it was added in a newer version than its parent node. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: content.Library. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: content.Library.
	ContentLibraries *[]string `json:"content_libraries,omitempty"`
	// Set of VirtualMachineClasses for use by the VM Service. The class names specified here should exist in vSphere inventory. If this field is empty in an updated specification, all VirtualMachineClasses that are currently associated with the namespace will be disassociated from it.   NOTE: Any change in virtual machine classes associated with the namespace will not impact existing VMs.  This field is optional because it was added in a newer version than its parent node. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.namespace_management.VirtualMachineClass. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.namespace_management.VirtualMachineClass.
	VmClasses *[]string `json:"vm_classes,omitempty"`
}

// NewVcenterNamespacesInstancesVMServiceSpec instantiates a new VcenterNamespacesInstancesVMServiceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespacesInstancesVMServiceSpec() *VcenterNamespacesInstancesVMServiceSpec {
	this := VcenterNamespacesInstancesVMServiceSpec{}
	return &this
}

// NewVcenterNamespacesInstancesVMServiceSpecWithDefaults instantiates a new VcenterNamespacesInstancesVMServiceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespacesInstancesVMServiceSpecWithDefaults() *VcenterNamespacesInstancesVMServiceSpec {
	this := VcenterNamespacesInstancesVMServiceSpec{}
	return &this
}

// GetContentLibraries returns the ContentLibraries field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesVMServiceSpec) GetContentLibraries() []string {
	if o == nil || o.ContentLibraries == nil {
		var ret []string
		return ret
	}
	return *o.ContentLibraries
}

// GetContentLibrariesOk returns a tuple with the ContentLibraries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesVMServiceSpec) GetContentLibrariesOk() (*[]string, bool) {
	if o == nil || o.ContentLibraries == nil {
		return nil, false
	}
	return o.ContentLibraries, true
}

// HasContentLibraries returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesVMServiceSpec) HasContentLibraries() bool {
	if o != nil && o.ContentLibraries != nil {
		return true
	}

	return false
}

// SetContentLibraries gets a reference to the given []string and assigns it to the ContentLibraries field.
func (o *VcenterNamespacesInstancesVMServiceSpec) SetContentLibraries(v []string) {
	o.ContentLibraries = &v
}

// GetVmClasses returns the VmClasses field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesVMServiceSpec) GetVmClasses() []string {
	if o == nil || o.VmClasses == nil {
		var ret []string
		return ret
	}
	return *o.VmClasses
}

// GetVmClassesOk returns a tuple with the VmClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesVMServiceSpec) GetVmClassesOk() (*[]string, bool) {
	if o == nil || o.VmClasses == nil {
		return nil, false
	}
	return o.VmClasses, true
}

// HasVmClasses returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesVMServiceSpec) HasVmClasses() bool {
	if o != nil && o.VmClasses != nil {
		return true
	}

	return false
}

// SetVmClasses gets a reference to the given []string and assigns it to the VmClasses field.
func (o *VcenterNamespacesInstancesVMServiceSpec) SetVmClasses(v []string) {
	o.VmClasses = &v
}

func (o VcenterNamespacesInstancesVMServiceSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContentLibraries != nil {
		toSerialize["content_libraries"] = o.ContentLibraries
	}
	if o.VmClasses != nil {
		toSerialize["vm_classes"] = o.VmClasses
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespacesInstancesVMServiceSpec struct {
	value *VcenterNamespacesInstancesVMServiceSpec
	isSet bool
}

func (v NullableVcenterNamespacesInstancesVMServiceSpec) Get() *VcenterNamespacesInstancesVMServiceSpec {
	return v.value
}

func (v *NullableVcenterNamespacesInstancesVMServiceSpec) Set(val *VcenterNamespacesInstancesVMServiceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesInstancesVMServiceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesInstancesVMServiceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesInstancesVMServiceSpec(val *VcenterNamespacesInstancesVMServiceSpec) *NullableVcenterNamespacesInstancesVMServiceSpec {
	return &NullableVcenterNamespacesInstancesVMServiceSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespacesInstancesVMServiceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesInstancesVMServiceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


