/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestNetworkingInfo struct for VcenterVmGuestNetworkingInfo
type VcenterVmGuestNetworkingInfo struct {
	DnsValues *VcenterVmGuestDnsAssignedValues `json:"dns_values,omitempty"`
	Dns *VcenterVmGuestDnsConfigInfo `json:"dns,omitempty"`
}

// NewVcenterVmGuestNetworkingInfo instantiates a new VcenterVmGuestNetworkingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestNetworkingInfo() *VcenterVmGuestNetworkingInfo {
	this := VcenterVmGuestNetworkingInfo{}
	return &this
}

// NewVcenterVmGuestNetworkingInfoWithDefaults instantiates a new VcenterVmGuestNetworkingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestNetworkingInfoWithDefaults() *VcenterVmGuestNetworkingInfo {
	this := VcenterVmGuestNetworkingInfo{}
	return &this
}

// GetDnsValues returns the DnsValues field value if set, zero value otherwise.
func (o *VcenterVmGuestNetworkingInfo) GetDnsValues() VcenterVmGuestDnsAssignedValues {
	if o == nil || o.DnsValues == nil {
		var ret VcenterVmGuestDnsAssignedValues
		return ret
	}
	return *o.DnsValues
}

// GetDnsValuesOk returns a tuple with the DnsValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingInfo) GetDnsValuesOk() (*VcenterVmGuestDnsAssignedValues, bool) {
	if o == nil || o.DnsValues == nil {
		return nil, false
	}
	return o.DnsValues, true
}

// HasDnsValues returns a boolean if a field has been set.
func (o *VcenterVmGuestNetworkingInfo) HasDnsValues() bool {
	if o != nil && o.DnsValues != nil {
		return true
	}

	return false
}

// SetDnsValues gets a reference to the given VcenterVmGuestDnsAssignedValues and assigns it to the DnsValues field.
func (o *VcenterVmGuestNetworkingInfo) SetDnsValues(v VcenterVmGuestDnsAssignedValues) {
	o.DnsValues = &v
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *VcenterVmGuestNetworkingInfo) GetDns() VcenterVmGuestDnsConfigInfo {
	if o == nil || o.Dns == nil {
		var ret VcenterVmGuestDnsConfigInfo
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingInfo) GetDnsOk() (*VcenterVmGuestDnsConfigInfo, bool) {
	if o == nil || o.Dns == nil {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *VcenterVmGuestNetworkingInfo) HasDns() bool {
	if o != nil && o.Dns != nil {
		return true
	}

	return false
}

// SetDns gets a reference to the given VcenterVmGuestDnsConfigInfo and assigns it to the Dns field.
func (o *VcenterVmGuestNetworkingInfo) SetDns(v VcenterVmGuestDnsConfigInfo) {
	o.Dns = &v
}

func (o VcenterVmGuestNetworkingInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DnsValues != nil {
		toSerialize["dns_values"] = o.DnsValues
	}
	if o.Dns != nil {
		toSerialize["dns"] = o.Dns
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestNetworkingInfo struct {
	value *VcenterVmGuestNetworkingInfo
	isSet bool
}

func (v NullableVcenterVmGuestNetworkingInfo) Get() *VcenterVmGuestNetworkingInfo {
	return v.value
}

func (v *NullableVcenterVmGuestNetworkingInfo) Set(val *VcenterVmGuestNetworkingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestNetworkingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestNetworkingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestNetworkingInfo(val *VcenterVmGuestNetworkingInfo) *NullableVcenterVmGuestNetworkingInfo {
	return &NullableVcenterVmGuestNetworkingInfo{value: val, isSet: true}
}

func (v NullableVcenterVmGuestNetworkingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestNetworkingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


