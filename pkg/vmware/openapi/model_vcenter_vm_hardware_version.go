/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareVersion The Hardware.Version enumerated type defines the valid virtual hardware versions for a virtual machine. See https://kb.vmware.com/s/article/1003746 (Virtual machine hardware versions (1003746)).
type VcenterVmHardwareVersion string

// List of vcenter.vm.hardware.version
const (
	VCENTERVMHARDWAREVERSION__03 VcenterVmHardwareVersion = "VMX_03"
	VCENTERVMHARDWAREVERSION__04 VcenterVmHardwareVersion = "VMX_04"
	VCENTERVMHARDWAREVERSION__06 VcenterVmHardwareVersion = "VMX_06"
	VCENTERVMHARDWAREVERSION__07 VcenterVmHardwareVersion = "VMX_07"
	VCENTERVMHARDWAREVERSION__08 VcenterVmHardwareVersion = "VMX_08"
	VCENTERVMHARDWAREVERSION__09 VcenterVmHardwareVersion = "VMX_09"
	VCENTERVMHARDWAREVERSION__10 VcenterVmHardwareVersion = "VMX_10"
	VCENTERVMHARDWAREVERSION__11 VcenterVmHardwareVersion = "VMX_11"
	VCENTERVMHARDWAREVERSION__12 VcenterVmHardwareVersion = "VMX_12"
	VCENTERVMHARDWAREVERSION__13 VcenterVmHardwareVersion = "VMX_13"
	VCENTERVMHARDWAREVERSION__14 VcenterVmHardwareVersion = "VMX_14"
	VCENTERVMHARDWAREVERSION__15 VcenterVmHardwareVersion = "VMX_15"
	VCENTERVMHARDWAREVERSION__16 VcenterVmHardwareVersion = "VMX_16"
	VCENTERVMHARDWAREVERSION__17 VcenterVmHardwareVersion = "VMX_17"
	VCENTERVMHARDWAREVERSION__18 VcenterVmHardwareVersion = "VMX_18"
	VCENTERVMHARDWAREVERSION__19 VcenterVmHardwareVersion = "VMX_19"
)

// All allowed values of VcenterVmHardwareVersion enum
var AllowedVcenterVmHardwareVersionEnumValues = []VcenterVmHardwareVersion{
	"VMX_03",
	"VMX_04",
	"VMX_06",
	"VMX_07",
	"VMX_08",
	"VMX_09",
	"VMX_10",
	"VMX_11",
	"VMX_12",
	"VMX_13",
	"VMX_14",
	"VMX_15",
	"VMX_16",
	"VMX_17",
	"VMX_18",
	"VMX_19",
}

func (v *VcenterVmHardwareVersion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareVersion(value)
	for _, existing := range AllowedVcenterVmHardwareVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareVersion", value)
}

// NewVcenterVmHardwareVersionFromValue returns a pointer to a valid VcenterVmHardwareVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareVersionFromValue(v string) (*VcenterVmHardwareVersion, error) {
	ev := VcenterVmHardwareVersion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareVersion: valid values are %v", v, AllowedVcenterVmHardwareVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareVersion) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.version value
func (v VcenterVmHardwareVersion) Ptr() *VcenterVmHardwareVersion {
	return &v
}

type NullableVcenterVmHardwareVersion struct {
	value *VcenterVmHardwareVersion
	isSet bool
}

func (v NullableVcenterVmHardwareVersion) Get() *VcenterVmHardwareVersion {
	return v.value
}

func (v *NullableVcenterVmHardwareVersion) Set(val *VcenterVmHardwareVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareVersion(val *VcenterVmHardwareVersion) *NullableVcenterVmHardwareVersion {
	return &NullableVcenterVmHardwareVersion{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

