/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsCheckOutsSummary struct for VcenterVmTemplateLibraryItemsCheckOutsSummary
type VcenterVmTemplateLibraryItemsCheckOutsSummary struct {
	// Identifier of the checked out virtual machine.
	Vm string `json:"vm"`
}

// NewVcenterVmTemplateLibraryItemsCheckOutsSummary instantiates a new VcenterVmTemplateLibraryItemsCheckOutsSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsCheckOutsSummary(vm string) *VcenterVmTemplateLibraryItemsCheckOutsSummary {
	this := VcenterVmTemplateLibraryItemsCheckOutsSummary{}
	this.Vm = vm
	return &this
}

// NewVcenterVmTemplateLibraryItemsCheckOutsSummaryWithDefaults instantiates a new VcenterVmTemplateLibraryItemsCheckOutsSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsCheckOutsSummaryWithDefaults() *VcenterVmTemplateLibraryItemsCheckOutsSummary {
	this := VcenterVmTemplateLibraryItemsCheckOutsSummary{}
	return &this
}

// GetVm returns the Vm field value
func (o *VcenterVmTemplateLibraryItemsCheckOutsSummary) GetVm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vm
}

// GetVmOk returns a tuple with the Vm field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCheckOutsSummary) GetVmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Vm, true
}

// SetVm sets field value
func (o *VcenterVmTemplateLibraryItemsCheckOutsSummary) SetVm(v string) {
	o.Vm = v
}

func (o VcenterVmTemplateLibraryItemsCheckOutsSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["vm"] = o.Vm
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsCheckOutsSummary struct {
	value *VcenterVmTemplateLibraryItemsCheckOutsSummary
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsCheckOutsSummary) Get() *VcenterVmTemplateLibraryItemsCheckOutsSummary {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsCheckOutsSummary) Set(val *VcenterVmTemplateLibraryItemsCheckOutsSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsCheckOutsSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsCheckOutsSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsCheckOutsSummary(val *VcenterVmTemplateLibraryItemsCheckOutsSummary) *NullableVcenterVmTemplateLibraryItemsCheckOutsSummary {
	return &NullableVcenterVmTemplateLibraryItemsCheckOutsSummary{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsCheckOutsSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsCheckOutsSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


