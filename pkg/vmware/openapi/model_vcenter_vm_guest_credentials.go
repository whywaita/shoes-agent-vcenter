/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestCredentials struct for VcenterVmGuestCredentials
type VcenterVmGuestCredentials struct {
	// If set, the operation will interact with the logged-in desktop session in the guest. This requires that the logged-on user matches the user specified by the Credentials. This is currently only supported for USERNAME_PASSWORD.
	InteractiveSession bool `json:"interactive_session"`
	Type VcenterVmGuestCredentialsType `json:"type"`
	// For SAML_BEARER_TOKEN, this is the guest user to be associated with the credentials. For USERNAME_PASSWORD this is the guest username. If no user is specified for SAML_BEARER_TOKEN, a guest dependent mapping will decide what guest user account is applied.
	UserName *string `json:"user_name,omitempty"`
	// password This field is optional and it is only relevant when the value of Credentials.type is USERNAME_PASSWORD.
	Password *string `json:"password,omitempty"`
	// SAML Bearer Token This field is optional and it is only relevant when the value of Credentials.type is SAML_BEARER_TOKEN.
	SamlToken *string `json:"saml_token,omitempty"`
}

// NewVcenterVmGuestCredentials instantiates a new VcenterVmGuestCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestCredentials(interactiveSession bool, type_ VcenterVmGuestCredentialsType) *VcenterVmGuestCredentials {
	this := VcenterVmGuestCredentials{}
	this.InteractiveSession = interactiveSession
	this.Type = type_
	return &this
}

// NewVcenterVmGuestCredentialsWithDefaults instantiates a new VcenterVmGuestCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestCredentialsWithDefaults() *VcenterVmGuestCredentials {
	this := VcenterVmGuestCredentials{}
	return &this
}

// GetInteractiveSession returns the InteractiveSession field value
func (o *VcenterVmGuestCredentials) GetInteractiveSession() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InteractiveSession
}

// GetInteractiveSessionOk returns a tuple with the InteractiveSession field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestCredentials) GetInteractiveSessionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InteractiveSession, true
}

// SetInteractiveSession sets field value
func (o *VcenterVmGuestCredentials) SetInteractiveSession(v bool) {
	o.InteractiveSession = v
}

// GetType returns the Type field value
func (o *VcenterVmGuestCredentials) GetType() VcenterVmGuestCredentialsType {
	if o == nil {
		var ret VcenterVmGuestCredentialsType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestCredentials) GetTypeOk() (*VcenterVmGuestCredentialsType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmGuestCredentials) SetType(v VcenterVmGuestCredentialsType) {
	o.Type = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *VcenterVmGuestCredentials) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestCredentials) GetUserNameOk() (*string, bool) {
	if o == nil || o.UserName == nil {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *VcenterVmGuestCredentials) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *VcenterVmGuestCredentials) SetUserName(v string) {
	o.UserName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *VcenterVmGuestCredentials) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestCredentials) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *VcenterVmGuestCredentials) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *VcenterVmGuestCredentials) SetPassword(v string) {
	o.Password = &v
}

// GetSamlToken returns the SamlToken field value if set, zero value otherwise.
func (o *VcenterVmGuestCredentials) GetSamlToken() string {
	if o == nil || o.SamlToken == nil {
		var ret string
		return ret
	}
	return *o.SamlToken
}

// GetSamlTokenOk returns a tuple with the SamlToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestCredentials) GetSamlTokenOk() (*string, bool) {
	if o == nil || o.SamlToken == nil {
		return nil, false
	}
	return o.SamlToken, true
}

// HasSamlToken returns a boolean if a field has been set.
func (o *VcenterVmGuestCredentials) HasSamlToken() bool {
	if o != nil && o.SamlToken != nil {
		return true
	}

	return false
}

// SetSamlToken gets a reference to the given string and assigns it to the SamlToken field.
func (o *VcenterVmGuestCredentials) SetSamlToken(v string) {
	o.SamlToken = &v
}

func (o VcenterVmGuestCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["interactive_session"] = o.InteractiveSession
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.UserName != nil {
		toSerialize["user_name"] = o.UserName
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.SamlToken != nil {
		toSerialize["saml_token"] = o.SamlToken
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestCredentials struct {
	value *VcenterVmGuestCredentials
	isSet bool
}

func (v NullableVcenterVmGuestCredentials) Get() *VcenterVmGuestCredentials {
	return v.value
}

func (v *NullableVcenterVmGuestCredentials) Set(val *VcenterVmGuestCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestCredentials(val *VcenterVmGuestCredentials) *NullableVcenterVmGuestCredentials {
	return &NullableVcenterVmGuestCredentials{value: val, isSet: true}
}

func (v NullableVcenterVmGuestCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


