/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementSoftwareClustersResultRes The Clusters.Result.Res enumerated type represents the upgrade invocation result for each cluster.
type VcenterNamespaceManagementSoftwareClustersResultRes string

// List of VcenterNamespaceManagementSoftwareClustersResultRes
const (
	VCENTERNAMESPACEMANAGEMENTSOFTWARECLUSTERSRESULTRES_STARTED VcenterNamespaceManagementSoftwareClustersResultRes = "STARTED"
	VCENTERNAMESPACEMANAGEMENTSOFTWARECLUSTERSRESULTRES_REJECTED VcenterNamespaceManagementSoftwareClustersResultRes = "REJECTED"
)

// All allowed values of VcenterNamespaceManagementSoftwareClustersResultRes enum
var AllowedVcenterNamespaceManagementSoftwareClustersResultResEnumValues = []VcenterNamespaceManagementSoftwareClustersResultRes{
	"STARTED",
	"REJECTED",
}

func (v *VcenterNamespaceManagementSoftwareClustersResultRes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementSoftwareClustersResultRes(value)
	for _, existing := range AllowedVcenterNamespaceManagementSoftwareClustersResultResEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementSoftwareClustersResultRes", value)
}

// NewVcenterNamespaceManagementSoftwareClustersResultResFromValue returns a pointer to a valid VcenterNamespaceManagementSoftwareClustersResultRes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementSoftwareClustersResultResFromValue(v string) (*VcenterNamespaceManagementSoftwareClustersResultRes, error) {
	ev := VcenterNamespaceManagementSoftwareClustersResultRes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementSoftwareClustersResultRes: valid values are %v", v, AllowedVcenterNamespaceManagementSoftwareClustersResultResEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementSoftwareClustersResultRes) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementSoftwareClustersResultResEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementSoftwareClustersResultRes value
func (v VcenterNamespaceManagementSoftwareClustersResultRes) Ptr() *VcenterNamespaceManagementSoftwareClustersResultRes {
	return &v
}

type NullableVcenterNamespaceManagementSoftwareClustersResultRes struct {
	value *VcenterNamespaceManagementSoftwareClustersResultRes
	isSet bool
}

func (v NullableVcenterNamespaceManagementSoftwareClustersResultRes) Get() *VcenterNamespaceManagementSoftwareClustersResultRes {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersResultRes) Set(val *VcenterNamespaceManagementSoftwareClustersResultRes) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSoftwareClustersResultRes) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersResultRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSoftwareClustersResultRes(val *VcenterNamespaceManagementSoftwareClustersResultRes) *NullableVcenterNamespaceManagementSoftwareClustersResultRes {
	return &NullableVcenterNamespaceManagementSoftwareClustersResultRes{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSoftwareClustersResultRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersResultRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

