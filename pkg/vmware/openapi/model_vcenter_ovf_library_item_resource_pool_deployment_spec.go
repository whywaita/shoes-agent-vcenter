/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterOvfLibraryItemResourcePoolDeploymentSpec struct for VcenterOvfLibraryItemResourcePoolDeploymentSpec
type VcenterOvfLibraryItemResourcePoolDeploymentSpec struct {
	// Name assigned to the deployed target virtual machine or virtual appliance.
	Name *string `json:"name,omitempty"`
	// Annotation assigned to the deployed target virtual machine or virtual appliance.
	Annotation *string `json:"annotation,omitempty"`
	// Whether to accept all End User License Agreements. See {@link OvfSummary#eulas}.
	AcceptAllEULA bool `json:"accept_all_EULA"`
	// Specification of the target network to use for sections of type ovf:NetworkSection in the OVF descriptor. The key in the {@term map} is the section identifier of the ovf:NetworkSection section in the OVF descriptor and the value is the target network to be used for deployment.
	NetworkMappings *[]VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings `json:"network_mappings,omitempty"`
	// Specification of the target storage to use for sections of type vmw:StorageGroupSection in the OVF descriptor. The key in the {@term map} is the section identifier of the ovf:StorageGroupSection section in the OVF descriptor and the value is the target storage specification to be used for deployment. See {@link StorageGroupMapping}.
	StorageMappings *[]VcenterOvfLibraryItemResourcePoolDeploymentSpecStorageMappings `json:"storage_mappings,omitempty"`
	StorageProvisioning *VcenterOvfDiskProvisioningType `json:"storage_provisioning,omitempty"`
	// Default storage profile to use for all sections of type vmw:StorageSection in the OVF descriptor.
	StorageProfileId *string `json:"storage_profile_id,omitempty"`
	// The locale to use for parsing the OVF descriptor.
	Locale *string `json:"locale,omitempty"`
	// Flags to be use for deployment. The supported flag values can be obtained using {@link ImportFlag#list}.
	Flags *[]string `json:"flags,omitempty"`
	// Additional OVF parameters that may be needed for the deployment. Additional OVF parameters may be required by the OVF descriptor of the OVF package in the library item. Examples of OVF parameters that can be specified through this {@term field} include, but are not limited to: <ul> <li>{@link DeploymentOptionParams}</li> <li>{@link ExtraConfigParams}</li> <li>{@link IpAllocationParams}</li> <li>{@link PropertyParams}</li> <li>{@link ScaleOutParams}</li> <li>{@link VcenterExtensionParams}</li> </ul>
	AdditionalParameters *[]map[string]interface{} `json:"additional_parameters,omitempty"`
	// Default datastore to use for all sections of type vmw:StorageSection in the OVF descriptor.
	DefaultDatastoreId *string `json:"default_datastore_id,omitempty"`
}

// NewVcenterOvfLibraryItemResourcePoolDeploymentSpec instantiates a new VcenterOvfLibraryItemResourcePoolDeploymentSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterOvfLibraryItemResourcePoolDeploymentSpec(acceptAllEULA bool) *VcenterOvfLibraryItemResourcePoolDeploymentSpec {
	this := VcenterOvfLibraryItemResourcePoolDeploymentSpec{}
	this.AcceptAllEULA = acceptAllEULA
	return &this
}

// NewVcenterOvfLibraryItemResourcePoolDeploymentSpecWithDefaults instantiates a new VcenterOvfLibraryItemResourcePoolDeploymentSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterOvfLibraryItemResourcePoolDeploymentSpecWithDefaults() *VcenterOvfLibraryItemResourcePoolDeploymentSpec {
	this := VcenterOvfLibraryItemResourcePoolDeploymentSpec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetName(v string) {
	o.Name = &v
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetAnnotation() string {
	if o == nil || o.Annotation == nil {
		var ret string
		return ret
	}
	return *o.Annotation
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetAnnotationOk() (*string, bool) {
	if o == nil || o.Annotation == nil {
		return nil, false
	}
	return o.Annotation, true
}

// HasAnnotation returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) HasAnnotation() bool {
	if o != nil && o.Annotation != nil {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given string and assigns it to the Annotation field.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetAnnotation(v string) {
	o.Annotation = &v
}

// GetAcceptAllEULA returns the AcceptAllEULA field value
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetAcceptAllEULA() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AcceptAllEULA
}

// GetAcceptAllEULAOk returns a tuple with the AcceptAllEULA field value
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetAcceptAllEULAOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AcceptAllEULA, true
}

// SetAcceptAllEULA sets field value
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetAcceptAllEULA(v bool) {
	o.AcceptAllEULA = v
}

// GetNetworkMappings returns the NetworkMappings field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetNetworkMappings() []VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings {
	if o == nil || o.NetworkMappings == nil {
		var ret []VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings
		return ret
	}
	return *o.NetworkMappings
}

// GetNetworkMappingsOk returns a tuple with the NetworkMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetNetworkMappingsOk() (*[]VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings, bool) {
	if o == nil || o.NetworkMappings == nil {
		return nil, false
	}
	return o.NetworkMappings, true
}

// HasNetworkMappings returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) HasNetworkMappings() bool {
	if o != nil && o.NetworkMappings != nil {
		return true
	}

	return false
}

// SetNetworkMappings gets a reference to the given []VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings and assigns it to the NetworkMappings field.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetNetworkMappings(v []VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings) {
	o.NetworkMappings = &v
}

// GetStorageMappings returns the StorageMappings field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetStorageMappings() []VcenterOvfLibraryItemResourcePoolDeploymentSpecStorageMappings {
	if o == nil || o.StorageMappings == nil {
		var ret []VcenterOvfLibraryItemResourcePoolDeploymentSpecStorageMappings
		return ret
	}
	return *o.StorageMappings
}

// GetStorageMappingsOk returns a tuple with the StorageMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetStorageMappingsOk() (*[]VcenterOvfLibraryItemResourcePoolDeploymentSpecStorageMappings, bool) {
	if o == nil || o.StorageMappings == nil {
		return nil, false
	}
	return o.StorageMappings, true
}

// HasStorageMappings returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) HasStorageMappings() bool {
	if o != nil && o.StorageMappings != nil {
		return true
	}

	return false
}

// SetStorageMappings gets a reference to the given []VcenterOvfLibraryItemResourcePoolDeploymentSpecStorageMappings and assigns it to the StorageMappings field.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetStorageMappings(v []VcenterOvfLibraryItemResourcePoolDeploymentSpecStorageMappings) {
	o.StorageMappings = &v
}

// GetStorageProvisioning returns the StorageProvisioning field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetStorageProvisioning() VcenterOvfDiskProvisioningType {
	if o == nil || o.StorageProvisioning == nil {
		var ret VcenterOvfDiskProvisioningType
		return ret
	}
	return *o.StorageProvisioning
}

// GetStorageProvisioningOk returns a tuple with the StorageProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetStorageProvisioningOk() (*VcenterOvfDiskProvisioningType, bool) {
	if o == nil || o.StorageProvisioning == nil {
		return nil, false
	}
	return o.StorageProvisioning, true
}

// HasStorageProvisioning returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) HasStorageProvisioning() bool {
	if o != nil && o.StorageProvisioning != nil {
		return true
	}

	return false
}

// SetStorageProvisioning gets a reference to the given VcenterOvfDiskProvisioningType and assigns it to the StorageProvisioning field.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetStorageProvisioning(v VcenterOvfDiskProvisioningType) {
	o.StorageProvisioning = &v
}

// GetStorageProfileId returns the StorageProfileId field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetStorageProfileId() string {
	if o == nil || o.StorageProfileId == nil {
		var ret string
		return ret
	}
	return *o.StorageProfileId
}

// GetStorageProfileIdOk returns a tuple with the StorageProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetStorageProfileIdOk() (*string, bool) {
	if o == nil || o.StorageProfileId == nil {
		return nil, false
	}
	return o.StorageProfileId, true
}

// HasStorageProfileId returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) HasStorageProfileId() bool {
	if o != nil && o.StorageProfileId != nil {
		return true
	}

	return false
}

// SetStorageProfileId gets a reference to the given string and assigns it to the StorageProfileId field.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetStorageProfileId(v string) {
	o.StorageProfileId = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetLocale() string {
	if o == nil || o.Locale == nil {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetLocaleOk() (*string, bool) {
	if o == nil || o.Locale == nil {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) HasLocale() bool {
	if o != nil && o.Locale != nil {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetLocale(v string) {
	o.Locale = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetFlags() []string {
	if o == nil || o.Flags == nil {
		var ret []string
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetFlagsOk() (*[]string, bool) {
	if o == nil || o.Flags == nil {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) HasFlags() bool {
	if o != nil && o.Flags != nil {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []string and assigns it to the Flags field.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetFlags(v []string) {
	o.Flags = &v
}

// GetAdditionalParameters returns the AdditionalParameters field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetAdditionalParameters() []map[string]interface{} {
	if o == nil || o.AdditionalParameters == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.AdditionalParameters
}

// GetAdditionalParametersOk returns a tuple with the AdditionalParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetAdditionalParametersOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.AdditionalParameters == nil {
		return nil, false
	}
	return o.AdditionalParameters, true
}

// HasAdditionalParameters returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) HasAdditionalParameters() bool {
	if o != nil && o.AdditionalParameters != nil {
		return true
	}

	return false
}

// SetAdditionalParameters gets a reference to the given []map[string]interface{} and assigns it to the AdditionalParameters field.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetAdditionalParameters(v []map[string]interface{}) {
	o.AdditionalParameters = &v
}

// GetDefaultDatastoreId returns the DefaultDatastoreId field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetDefaultDatastoreId() string {
	if o == nil || o.DefaultDatastoreId == nil {
		var ret string
		return ret
	}
	return *o.DefaultDatastoreId
}

// GetDefaultDatastoreIdOk returns a tuple with the DefaultDatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) GetDefaultDatastoreIdOk() (*string, bool) {
	if o == nil || o.DefaultDatastoreId == nil {
		return nil, false
	}
	return o.DefaultDatastoreId, true
}

// HasDefaultDatastoreId returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) HasDefaultDatastoreId() bool {
	if o != nil && o.DefaultDatastoreId != nil {
		return true
	}

	return false
}

// SetDefaultDatastoreId gets a reference to the given string and assigns it to the DefaultDatastoreId field.
func (o *VcenterOvfLibraryItemResourcePoolDeploymentSpec) SetDefaultDatastoreId(v string) {
	o.DefaultDatastoreId = &v
}

func (o VcenterOvfLibraryItemResourcePoolDeploymentSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Annotation != nil {
		toSerialize["annotation"] = o.Annotation
	}
	if true {
		toSerialize["accept_all_EULA"] = o.AcceptAllEULA
	}
	if o.NetworkMappings != nil {
		toSerialize["network_mappings"] = o.NetworkMappings
	}
	if o.StorageMappings != nil {
		toSerialize["storage_mappings"] = o.StorageMappings
	}
	if o.StorageProvisioning != nil {
		toSerialize["storage_provisioning"] = o.StorageProvisioning
	}
	if o.StorageProfileId != nil {
		toSerialize["storage_profile_id"] = o.StorageProfileId
	}
	if o.Locale != nil {
		toSerialize["locale"] = o.Locale
	}
	if o.Flags != nil {
		toSerialize["flags"] = o.Flags
	}
	if o.AdditionalParameters != nil {
		toSerialize["additional_parameters"] = o.AdditionalParameters
	}
	if o.DefaultDatastoreId != nil {
		toSerialize["default_datastore_id"] = o.DefaultDatastoreId
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterOvfLibraryItemResourcePoolDeploymentSpec struct {
	value *VcenterOvfLibraryItemResourcePoolDeploymentSpec
	isSet bool
}

func (v NullableVcenterOvfLibraryItemResourcePoolDeploymentSpec) Get() *VcenterOvfLibraryItemResourcePoolDeploymentSpec {
	return v.value
}

func (v *NullableVcenterOvfLibraryItemResourcePoolDeploymentSpec) Set(val *VcenterOvfLibraryItemResourcePoolDeploymentSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterOvfLibraryItemResourcePoolDeploymentSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterOvfLibraryItemResourcePoolDeploymentSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterOvfLibraryItemResourcePoolDeploymentSpec(val *VcenterOvfLibraryItemResourcePoolDeploymentSpec) *NullableVcenterOvfLibraryItemResourcePoolDeploymentSpec {
	return &NullableVcenterOvfLibraryItemResourcePoolDeploymentSpec{value: val, isSet: true}
}

func (v NullableVcenterOvfLibraryItemResourcePoolDeploymentSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterOvfLibraryItemResourcePoolDeploymentSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


