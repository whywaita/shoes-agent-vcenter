/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterCryptoManagerHostsKmsProvidersHealth the model 'VcenterCryptoManagerHostsKmsProvidersHealth'
type VcenterCryptoManagerHostsKmsProvidersHealth string

// List of VcenterCryptoManagerHostsKmsProvidersHealth
const (
	VCENTERCRYPTOMANAGERHOSTSKMSPROVIDERSHEALTH_NONE VcenterCryptoManagerHostsKmsProvidersHealth = "NONE"
	VCENTERCRYPTOMANAGERHOSTSKMSPROVIDERSHEALTH_OK VcenterCryptoManagerHostsKmsProvidersHealth = "OK"
	VCENTERCRYPTOMANAGERHOSTSKMSPROVIDERSHEALTH_WARNING VcenterCryptoManagerHostsKmsProvidersHealth = "WARNING"
	VCENTERCRYPTOMANAGERHOSTSKMSPROVIDERSHEALTH_ERROR VcenterCryptoManagerHostsKmsProvidersHealth = "ERROR"
)

// All allowed values of VcenterCryptoManagerHostsKmsProvidersHealth enum
var AllowedVcenterCryptoManagerHostsKmsProvidersHealthEnumValues = []VcenterCryptoManagerHostsKmsProvidersHealth{
	"NONE",
	"OK",
	"WARNING",
	"ERROR",
}

func (v *VcenterCryptoManagerHostsKmsProvidersHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterCryptoManagerHostsKmsProvidersHealth(value)
	for _, existing := range AllowedVcenterCryptoManagerHostsKmsProvidersHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterCryptoManagerHostsKmsProvidersHealth", value)
}

// NewVcenterCryptoManagerHostsKmsProvidersHealthFromValue returns a pointer to a valid VcenterCryptoManagerHostsKmsProvidersHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterCryptoManagerHostsKmsProvidersHealthFromValue(v string) (*VcenterCryptoManagerHostsKmsProvidersHealth, error) {
	ev := VcenterCryptoManagerHostsKmsProvidersHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterCryptoManagerHostsKmsProvidersHealth: valid values are %v", v, AllowedVcenterCryptoManagerHostsKmsProvidersHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterCryptoManagerHostsKmsProvidersHealth) IsValid() bool {
	for _, existing := range AllowedVcenterCryptoManagerHostsKmsProvidersHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterCryptoManagerHostsKmsProvidersHealth value
func (v VcenterCryptoManagerHostsKmsProvidersHealth) Ptr() *VcenterCryptoManagerHostsKmsProvidersHealth {
	return &v
}

type NullableVcenterCryptoManagerHostsKmsProvidersHealth struct {
	value *VcenterCryptoManagerHostsKmsProvidersHealth
	isSet bool
}

func (v NullableVcenterCryptoManagerHostsKmsProvidersHealth) Get() *VcenterCryptoManagerHostsKmsProvidersHealth {
	return v.value
}

func (v *NullableVcenterCryptoManagerHostsKmsProvidersHealth) Set(val *VcenterCryptoManagerHostsKmsProvidersHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerHostsKmsProvidersHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerHostsKmsProvidersHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerHostsKmsProvidersHealth(val *VcenterCryptoManagerHostsKmsProvidersHealth) *NullableVcenterCryptoManagerHostsKmsProvidersHealth {
	return &NullableVcenterCryptoManagerHostsKmsProvidersHealth{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerHostsKmsProvidersHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerHostsKmsProvidersHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

