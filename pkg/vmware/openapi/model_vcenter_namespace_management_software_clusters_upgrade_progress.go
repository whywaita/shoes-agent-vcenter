/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSoftwareClustersUpgradeProgress struct for VcenterNamespaceManagementSoftwareClustersUpgradeProgress
type VcenterNamespaceManagementSoftwareClustersUpgradeProgress struct {
	// Total amount of the work for the operation. The work here represents the number of master nodes in the cluster need to be upgraded.
	Total int64 `json:"total"`
	// The amount of work completed for the operation. The value can only be incremented. The number or master nodes which upgrade completed.
	Completed int64 `json:"completed"`
	Message VapiStdLocalizableMessage `json:"message"`
}

// NewVcenterNamespaceManagementSoftwareClustersUpgradeProgress instantiates a new VcenterNamespaceManagementSoftwareClustersUpgradeProgress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSoftwareClustersUpgradeProgress(total int64, completed int64, message VapiStdLocalizableMessage) *VcenterNamespaceManagementSoftwareClustersUpgradeProgress {
	this := VcenterNamespaceManagementSoftwareClustersUpgradeProgress{}
	this.Total = total
	this.Completed = completed
	this.Message = message
	return &this
}

// NewVcenterNamespaceManagementSoftwareClustersUpgradeProgressWithDefaults instantiates a new VcenterNamespaceManagementSoftwareClustersUpgradeProgress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSoftwareClustersUpgradeProgressWithDefaults() *VcenterNamespaceManagementSoftwareClustersUpgradeProgress {
	this := VcenterNamespaceManagementSoftwareClustersUpgradeProgress{}
	return &this
}

// GetTotal returns the Total field value
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) SetTotal(v int64) {
	o.Total = v
}

// GetCompleted returns the Completed field value
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) GetCompleted() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) GetCompletedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) SetCompleted(v int64) {
	o.Completed = v
}

// GetMessage returns the Message field value
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) GetMessage() VapiStdLocalizableMessage {
	if o == nil {
		var ret VapiStdLocalizableMessage
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) GetMessageOk() (*VapiStdLocalizableMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) SetMessage(v VapiStdLocalizableMessage) {
	o.Message = v
}

func (o VcenterNamespaceManagementSoftwareClustersUpgradeProgress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["completed"] = o.Completed
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSoftwareClustersUpgradeProgress struct {
	value *VcenterNamespaceManagementSoftwareClustersUpgradeProgress
	isSet bool
}

func (v NullableVcenterNamespaceManagementSoftwareClustersUpgradeProgress) Get() *VcenterNamespaceManagementSoftwareClustersUpgradeProgress {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersUpgradeProgress) Set(val *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSoftwareClustersUpgradeProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersUpgradeProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSoftwareClustersUpgradeProgress(val *VcenterNamespaceManagementSoftwareClustersUpgradeProgress) *NullableVcenterNamespaceManagementSoftwareClustersUpgradeProgress {
	return &NullableVcenterNamespaceManagementSoftwareClustersUpgradeProgress{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSoftwareClustersUpgradeProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersUpgradeProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


