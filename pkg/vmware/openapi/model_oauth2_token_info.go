/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Oauth2TokenInfo struct for Oauth2TokenInfo
type Oauth2TokenInfo struct {
	// The access token issued by the authorization server.
	AccessToken string `json:"access_token"`
	// A case-insensitive value specifying the method of using the access token issued.
	TokenType string `json:"token_type"`
	// The validity lifetime, in seconds, of the token issued by the server. unset if not applicable for issued token.
	ExpiresIn *int64 `json:"expires_in,omitempty"`
	// Scope of the issued access token. The value of the scope parameter is expressed as a list of space- delimited, case-sensitive strings. The strings are defined by the authorization server. If the value contains multiple space-delimited strings, their order does not matter, and each string adds an additional access range to the requested scope. unset if the scope of the issued security token is identical to the scope requested by the client.
	Scope *string `json:"scope,omitempty"`
	// The refresh token, which can be used to obtain new access tokens. unset if not applicable to the specific request.
	RefreshToken *string `json:"refresh_token,omitempty"`
	// An identifier which indicates the type of the access token in the TokenInfo.access-token field. unset if not the result of a token-exchange invocation; otherwise, required.
	IssuedTokenType *string `json:"issued_token_type,omitempty"`
}

// NewOauth2TokenInfo instantiates a new Oauth2TokenInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauth2TokenInfo(accessToken string, tokenType string) *Oauth2TokenInfo {
	this := Oauth2TokenInfo{}
	this.AccessToken = accessToken
	this.TokenType = tokenType
	return &this
}

// NewOauth2TokenInfoWithDefaults instantiates a new Oauth2TokenInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauth2TokenInfoWithDefaults() *Oauth2TokenInfo {
	this := Oauth2TokenInfo{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *Oauth2TokenInfo) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenInfo) GetAccessTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *Oauth2TokenInfo) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetTokenType returns the TokenType field value
func (o *Oauth2TokenInfo) GetTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value
// and a boolean to check if the value has been set.
func (o *Oauth2TokenInfo) GetTokenTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TokenType, true
}

// SetTokenType sets field value
func (o *Oauth2TokenInfo) SetTokenType(v string) {
	o.TokenType = v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *Oauth2TokenInfo) GetExpiresIn() int64 {
	if o == nil || o.ExpiresIn == nil {
		var ret int64
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2TokenInfo) GetExpiresInOk() (*int64, bool) {
	if o == nil || o.ExpiresIn == nil {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *Oauth2TokenInfo) HasExpiresIn() bool {
	if o != nil && o.ExpiresIn != nil {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int64 and assigns it to the ExpiresIn field.
func (o *Oauth2TokenInfo) SetExpiresIn(v int64) {
	o.ExpiresIn = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *Oauth2TokenInfo) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2TokenInfo) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *Oauth2TokenInfo) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *Oauth2TokenInfo) SetScope(v string) {
	o.Scope = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *Oauth2TokenInfo) GetRefreshToken() string {
	if o == nil || o.RefreshToken == nil {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2TokenInfo) GetRefreshTokenOk() (*string, bool) {
	if o == nil || o.RefreshToken == nil {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *Oauth2TokenInfo) HasRefreshToken() bool {
	if o != nil && o.RefreshToken != nil {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *Oauth2TokenInfo) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetIssuedTokenType returns the IssuedTokenType field value if set, zero value otherwise.
func (o *Oauth2TokenInfo) GetIssuedTokenType() string {
	if o == nil || o.IssuedTokenType == nil {
		var ret string
		return ret
	}
	return *o.IssuedTokenType
}

// GetIssuedTokenTypeOk returns a tuple with the IssuedTokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2TokenInfo) GetIssuedTokenTypeOk() (*string, bool) {
	if o == nil || o.IssuedTokenType == nil {
		return nil, false
	}
	return o.IssuedTokenType, true
}

// HasIssuedTokenType returns a boolean if a field has been set.
func (o *Oauth2TokenInfo) HasIssuedTokenType() bool {
	if o != nil && o.IssuedTokenType != nil {
		return true
	}

	return false
}

// SetIssuedTokenType gets a reference to the given string and assigns it to the IssuedTokenType field.
func (o *Oauth2TokenInfo) SetIssuedTokenType(v string) {
	o.IssuedTokenType = &v
}

func (o Oauth2TokenInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["access_token"] = o.AccessToken
	}
	if true {
		toSerialize["token_type"] = o.TokenType
	}
	if o.ExpiresIn != nil {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.RefreshToken != nil {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if o.IssuedTokenType != nil {
		toSerialize["issued_token_type"] = o.IssuedTokenType
	}
	return json.Marshal(toSerialize)
}

type NullableOauth2TokenInfo struct {
	value *Oauth2TokenInfo
	isSet bool
}

func (v NullableOauth2TokenInfo) Get() *Oauth2TokenInfo {
	return v.value
}

func (v *NullableOauth2TokenInfo) Set(val *Oauth2TokenInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2TokenInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2TokenInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2TokenInfo(val *Oauth2TokenInfo) *NullableOauth2TokenInfo {
	return &NullableOauth2TokenInfo{value: val, isSet: true}
}

func (v NullableOauth2TokenInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2TokenInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


