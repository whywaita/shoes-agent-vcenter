/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementStatsTimeSeriesSpec struct for VcenterNamespaceManagementStatsTimeSeriesSpec
type VcenterNamespaceManagementStatsTimeSeriesSpec struct {
	ObjType VcenterNamespaceManagementStatsTimeSeriesSpecObjType `json:"obj_type"`
	Pod *VcenterNamespaceManagementStatsTimeSeriesPodIdentifier `json:"pod,omitempty"`
	// Namespace name for queries for a namespace. This field is optional and it is only relevant when the value of TimeSeries.Spec.obj-type is NAMESPACE. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.
	Namespace *string `json:"namespace,omitempty"`
	// Cluster identifier for queries for a cluster. This field is optional and it is only relevant when the value of TimeSeries.Spec.obj-type is CLUSTER. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.
	Cluster *string `json:"cluster,omitempty"`
	// UNIX timestamp value indicating when the requested series of statistical samples should begin. https://en.wikipedia.org/wiki/Unix_time
	Start int64 `json:"start"`
	// UNIX timestamp value indicating when the requested series of statistical samples should end. https://en.wikipedia.org/wiki/Unix_time
	End int64 `json:"end"`
}

// NewVcenterNamespaceManagementStatsTimeSeriesSpec instantiates a new VcenterNamespaceManagementStatsTimeSeriesSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementStatsTimeSeriesSpec(objType VcenterNamespaceManagementStatsTimeSeriesSpecObjType, start int64, end int64) *VcenterNamespaceManagementStatsTimeSeriesSpec {
	this := VcenterNamespaceManagementStatsTimeSeriesSpec{}
	this.ObjType = objType
	this.Start = start
	this.End = end
	return &this
}

// NewVcenterNamespaceManagementStatsTimeSeriesSpecWithDefaults instantiates a new VcenterNamespaceManagementStatsTimeSeriesSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementStatsTimeSeriesSpecWithDefaults() *VcenterNamespaceManagementStatsTimeSeriesSpec {
	this := VcenterNamespaceManagementStatsTimeSeriesSpec{}
	return &this
}

// GetObjType returns the ObjType field value
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetObjType() VcenterNamespaceManagementStatsTimeSeriesSpecObjType {
	if o == nil {
		var ret VcenterNamespaceManagementStatsTimeSeriesSpecObjType
		return ret
	}

	return o.ObjType
}

// GetObjTypeOk returns a tuple with the ObjType field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetObjTypeOk() (*VcenterNamespaceManagementStatsTimeSeriesSpecObjType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ObjType, true
}

// SetObjType sets field value
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) SetObjType(v VcenterNamespaceManagementStatsTimeSeriesSpecObjType) {
	o.ObjType = v
}

// GetPod returns the Pod field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetPod() VcenterNamespaceManagementStatsTimeSeriesPodIdentifier {
	if o == nil || o.Pod == nil {
		var ret VcenterNamespaceManagementStatsTimeSeriesPodIdentifier
		return ret
	}
	return *o.Pod
}

// GetPodOk returns a tuple with the Pod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetPodOk() (*VcenterNamespaceManagementStatsTimeSeriesPodIdentifier, bool) {
	if o == nil || o.Pod == nil {
		return nil, false
	}
	return o.Pod, true
}

// HasPod returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) HasPod() bool {
	if o != nil && o.Pod != nil {
		return true
	}

	return false
}

// SetPod gets a reference to the given VcenterNamespaceManagementStatsTimeSeriesPodIdentifier and assigns it to the Pod field.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) SetPod(v VcenterNamespaceManagementStatsTimeSeriesPodIdentifier) {
	o.Pod = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) SetNamespace(v string) {
	o.Namespace = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetCluster() string {
	if o == nil || o.Cluster == nil {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetClusterOk() (*string, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) HasCluster() bool {
	if o != nil && o.Cluster != nil {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) SetCluster(v string) {
	o.Cluster = &v
}

// GetStart returns the Start field value
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetStart() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetStartOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) SetStart(v int64) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetEnd() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) GetEndOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *VcenterNamespaceManagementStatsTimeSeriesSpec) SetEnd(v int64) {
	o.End = v
}

func (o VcenterNamespaceManagementStatsTimeSeriesSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["obj_type"] = o.ObjType
	}
	if o.Pod != nil {
		toSerialize["pod"] = o.Pod
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Cluster != nil {
		toSerialize["cluster"] = o.Cluster
	}
	if true {
		toSerialize["start"] = o.Start
	}
	if true {
		toSerialize["end"] = o.End
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementStatsTimeSeriesSpec struct {
	value *VcenterNamespaceManagementStatsTimeSeriesSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementStatsTimeSeriesSpec) Get() *VcenterNamespaceManagementStatsTimeSeriesSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementStatsTimeSeriesSpec) Set(val *VcenterNamespaceManagementStatsTimeSeriesSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementStatsTimeSeriesSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementStatsTimeSeriesSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementStatsTimeSeriesSpec(val *VcenterNamespaceManagementStatsTimeSeriesSpec) *NullableVcenterNamespaceManagementStatsTimeSeriesSpec {
	return &NullableVcenterNamespaceManagementStatsTimeSeriesSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementStatsTimeSeriesSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementStatsTimeSeriesSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


