/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterOvfLibraryItemStorageGroupMappingType The {@name Type} {@term enumerated type} defines the supported types of storage targets for sections of type vmw:StorageGroupSection in the OVF descriptor.
type VcenterOvfLibraryItemStorageGroupMappingType string

// List of vcenter.ovf.library_item.storage_group_mapping.type
const (
	VCENTEROVFLIBRARYITEMSTORAGEGROUPMAPPINGTYPE_DATASTORE VcenterOvfLibraryItemStorageGroupMappingType = "DATASTORE"
	VCENTEROVFLIBRARYITEMSTORAGEGROUPMAPPINGTYPE_STORAGE_PROFILE VcenterOvfLibraryItemStorageGroupMappingType = "STORAGE_PROFILE"
)

// All allowed values of VcenterOvfLibraryItemStorageGroupMappingType enum
var AllowedVcenterOvfLibraryItemStorageGroupMappingTypeEnumValues = []VcenterOvfLibraryItemStorageGroupMappingType{
	"DATASTORE",
	"STORAGE_PROFILE",
}

func (v *VcenterOvfLibraryItemStorageGroupMappingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterOvfLibraryItemStorageGroupMappingType(value)
	for _, existing := range AllowedVcenterOvfLibraryItemStorageGroupMappingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterOvfLibraryItemStorageGroupMappingType", value)
}

// NewVcenterOvfLibraryItemStorageGroupMappingTypeFromValue returns a pointer to a valid VcenterOvfLibraryItemStorageGroupMappingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterOvfLibraryItemStorageGroupMappingTypeFromValue(v string) (*VcenterOvfLibraryItemStorageGroupMappingType, error) {
	ev := VcenterOvfLibraryItemStorageGroupMappingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterOvfLibraryItemStorageGroupMappingType: valid values are %v", v, AllowedVcenterOvfLibraryItemStorageGroupMappingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterOvfLibraryItemStorageGroupMappingType) IsValid() bool {
	for _, existing := range AllowedVcenterOvfLibraryItemStorageGroupMappingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.ovf.library_item.storage_group_mapping.type value
func (v VcenterOvfLibraryItemStorageGroupMappingType) Ptr() *VcenterOvfLibraryItemStorageGroupMappingType {
	return &v
}

type NullableVcenterOvfLibraryItemStorageGroupMappingType struct {
	value *VcenterOvfLibraryItemStorageGroupMappingType
	isSet bool
}

func (v NullableVcenterOvfLibraryItemStorageGroupMappingType) Get() *VcenterOvfLibraryItemStorageGroupMappingType {
	return v.value
}

func (v *NullableVcenterOvfLibraryItemStorageGroupMappingType) Set(val *VcenterOvfLibraryItemStorageGroupMappingType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterOvfLibraryItemStorageGroupMappingType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterOvfLibraryItemStorageGroupMappingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterOvfLibraryItemStorageGroupMappingType(val *VcenterOvfLibraryItemStorageGroupMappingType) *NullableVcenterOvfLibraryItemStorageGroupMappingType {
	return &NullableVcenterOvfLibraryItemStorageGroupMappingType{value: val, isSet: true}
}

func (v NullableVcenterOvfLibraryItemStorageGroupMappingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterOvfLibraryItemStorageGroupMappingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

