/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsDiskInfo struct for VcenterVmTemplateLibraryItemsDiskInfo
type VcenterVmTemplateLibraryItemsDiskInfo struct {
	// Capacity of the virtual disk in bytes.
	Capacity *int64 `json:"capacity,omitempty"`
	DiskStorage VcenterVmTemplateLibraryItemsDiskStorageInfo `json:"disk_storage"`
}

// NewVcenterVmTemplateLibraryItemsDiskInfo instantiates a new VcenterVmTemplateLibraryItemsDiskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsDiskInfo(diskStorage VcenterVmTemplateLibraryItemsDiskStorageInfo) *VcenterVmTemplateLibraryItemsDiskInfo {
	this := VcenterVmTemplateLibraryItemsDiskInfo{}
	this.DiskStorage = diskStorage
	return &this
}

// NewVcenterVmTemplateLibraryItemsDiskInfoWithDefaults instantiates a new VcenterVmTemplateLibraryItemsDiskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsDiskInfoWithDefaults() *VcenterVmTemplateLibraryItemsDiskInfo {
	this := VcenterVmTemplateLibraryItemsDiskInfo{}
	return &this
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsDiskInfo) GetCapacity() int64 {
	if o == nil || o.Capacity == nil {
		var ret int64
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDiskInfo) GetCapacityOk() (*int64, bool) {
	if o == nil || o.Capacity == nil {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsDiskInfo) HasCapacity() bool {
	if o != nil && o.Capacity != nil {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int64 and assigns it to the Capacity field.
func (o *VcenterVmTemplateLibraryItemsDiskInfo) SetCapacity(v int64) {
	o.Capacity = &v
}

// GetDiskStorage returns the DiskStorage field value
func (o *VcenterVmTemplateLibraryItemsDiskInfo) GetDiskStorage() VcenterVmTemplateLibraryItemsDiskStorageInfo {
	if o == nil {
		var ret VcenterVmTemplateLibraryItemsDiskStorageInfo
		return ret
	}

	return o.DiskStorage
}

// GetDiskStorageOk returns a tuple with the DiskStorage field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDiskInfo) GetDiskStorageOk() (*VcenterVmTemplateLibraryItemsDiskStorageInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DiskStorage, true
}

// SetDiskStorage sets field value
func (o *VcenterVmTemplateLibraryItemsDiskInfo) SetDiskStorage(v VcenterVmTemplateLibraryItemsDiskStorageInfo) {
	o.DiskStorage = v
}

func (o VcenterVmTemplateLibraryItemsDiskInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Capacity != nil {
		toSerialize["capacity"] = o.Capacity
	}
	if true {
		toSerialize["disk_storage"] = o.DiskStorage
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsDiskInfo struct {
	value *VcenterVmTemplateLibraryItemsDiskInfo
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsDiskInfo) Get() *VcenterVmTemplateLibraryItemsDiskInfo {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsDiskInfo) Set(val *VcenterVmTemplateLibraryItemsDiskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsDiskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsDiskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsDiskInfo(val *VcenterVmTemplateLibraryItemsDiskInfo) *NullableVcenterVmTemplateLibraryItemsDiskInfo {
	return &NullableVcenterVmTemplateLibraryItemsDiskInfo{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsDiskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsDiskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


