/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// VcenterNamespaceManagementSoftwareClustersInfo struct for VcenterNamespaceManagementSoftwareClustersInfo
type VcenterNamespaceManagementSoftwareClustersInfo struct {
	// Current version of the cluster.
	CurrentVersion string `json:"current_version"`
	// Set of available versions can be upgraded to.
	AvailableVersions []string `json:"available_versions"`
	// Date of last successful upgrade. If unset, the cluster has not yet been upgraded.
	LastUpgradedDate *time.Time `json:"last_upgraded_date,omitempty"`
	// Current set of messages associated with the cluster version.
	Messages []VcenterNamespaceManagementSoftwareClustersMessage `json:"messages"`
	State VcenterNamespaceManagementSoftwareClustersState `json:"state"`
	UpgradeStatus *VcenterNamespaceManagementSoftwareClustersUpgradeStatus `json:"upgrade_status,omitempty"`
}

// NewVcenterNamespaceManagementSoftwareClustersInfo instantiates a new VcenterNamespaceManagementSoftwareClustersInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSoftwareClustersInfo(currentVersion string, availableVersions []string, messages []VcenterNamespaceManagementSoftwareClustersMessage, state VcenterNamespaceManagementSoftwareClustersState) *VcenterNamespaceManagementSoftwareClustersInfo {
	this := VcenterNamespaceManagementSoftwareClustersInfo{}
	this.CurrentVersion = currentVersion
	this.AvailableVersions = availableVersions
	this.Messages = messages
	this.State = state
	return &this
}

// NewVcenterNamespaceManagementSoftwareClustersInfoWithDefaults instantiates a new VcenterNamespaceManagementSoftwareClustersInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSoftwareClustersInfoWithDefaults() *VcenterNamespaceManagementSoftwareClustersInfo {
	this := VcenterNamespaceManagementSoftwareClustersInfo{}
	return &this
}

// GetCurrentVersion returns the CurrentVersion field value
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetCurrentVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetCurrentVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CurrentVersion, true
}

// SetCurrentVersion sets field value
func (o *VcenterNamespaceManagementSoftwareClustersInfo) SetCurrentVersion(v string) {
	o.CurrentVersion = v
}

// GetAvailableVersions returns the AvailableVersions field value
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetAvailableVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AvailableVersions
}

// GetAvailableVersionsOk returns a tuple with the AvailableVersions field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetAvailableVersionsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AvailableVersions, true
}

// SetAvailableVersions sets field value
func (o *VcenterNamespaceManagementSoftwareClustersInfo) SetAvailableVersions(v []string) {
	o.AvailableVersions = v
}

// GetLastUpgradedDate returns the LastUpgradedDate field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetLastUpgradedDate() time.Time {
	if o == nil || o.LastUpgradedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpgradedDate
}

// GetLastUpgradedDateOk returns a tuple with the LastUpgradedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetLastUpgradedDateOk() (*time.Time, bool) {
	if o == nil || o.LastUpgradedDate == nil {
		return nil, false
	}
	return o.LastUpgradedDate, true
}

// HasLastUpgradedDate returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) HasLastUpgradedDate() bool {
	if o != nil && o.LastUpgradedDate != nil {
		return true
	}

	return false
}

// SetLastUpgradedDate gets a reference to the given time.Time and assigns it to the LastUpgradedDate field.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) SetLastUpgradedDate(v time.Time) {
	o.LastUpgradedDate = &v
}

// GetMessages returns the Messages field value
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetMessages() []VcenterNamespaceManagementSoftwareClustersMessage {
	if o == nil {
		var ret []VcenterNamespaceManagementSoftwareClustersMessage
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetMessagesOk() (*[]VcenterNamespaceManagementSoftwareClustersMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Messages, true
}

// SetMessages sets field value
func (o *VcenterNamespaceManagementSoftwareClustersInfo) SetMessages(v []VcenterNamespaceManagementSoftwareClustersMessage) {
	o.Messages = v
}

// GetState returns the State field value
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetState() VcenterNamespaceManagementSoftwareClustersState {
	if o == nil {
		var ret VcenterNamespaceManagementSoftwareClustersState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetStateOk() (*VcenterNamespaceManagementSoftwareClustersState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VcenterNamespaceManagementSoftwareClustersInfo) SetState(v VcenterNamespaceManagementSoftwareClustersState) {
	o.State = v
}

// GetUpgradeStatus returns the UpgradeStatus field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetUpgradeStatus() VcenterNamespaceManagementSoftwareClustersUpgradeStatus {
	if o == nil || o.UpgradeStatus == nil {
		var ret VcenterNamespaceManagementSoftwareClustersUpgradeStatus
		return ret
	}
	return *o.UpgradeStatus
}

// GetUpgradeStatusOk returns a tuple with the UpgradeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) GetUpgradeStatusOk() (*VcenterNamespaceManagementSoftwareClustersUpgradeStatus, bool) {
	if o == nil || o.UpgradeStatus == nil {
		return nil, false
	}
	return o.UpgradeStatus, true
}

// HasUpgradeStatus returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) HasUpgradeStatus() bool {
	if o != nil && o.UpgradeStatus != nil {
		return true
	}

	return false
}

// SetUpgradeStatus gets a reference to the given VcenterNamespaceManagementSoftwareClustersUpgradeStatus and assigns it to the UpgradeStatus field.
func (o *VcenterNamespaceManagementSoftwareClustersInfo) SetUpgradeStatus(v VcenterNamespaceManagementSoftwareClustersUpgradeStatus) {
	o.UpgradeStatus = &v
}

func (o VcenterNamespaceManagementSoftwareClustersInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["current_version"] = o.CurrentVersion
	}
	if true {
		toSerialize["available_versions"] = o.AvailableVersions
	}
	if o.LastUpgradedDate != nil {
		toSerialize["last_upgraded_date"] = o.LastUpgradedDate
	}
	if true {
		toSerialize["messages"] = o.Messages
	}
	if true {
		toSerialize["state"] = o.State
	}
	if o.UpgradeStatus != nil {
		toSerialize["upgrade_status"] = o.UpgradeStatus
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSoftwareClustersInfo struct {
	value *VcenterNamespaceManagementSoftwareClustersInfo
	isSet bool
}

func (v NullableVcenterNamespaceManagementSoftwareClustersInfo) Get() *VcenterNamespaceManagementSoftwareClustersInfo {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersInfo) Set(val *VcenterNamespaceManagementSoftwareClustersInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSoftwareClustersInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSoftwareClustersInfo(val *VcenterNamespaceManagementSoftwareClustersInfo) *NullableVcenterNamespaceManagementSoftwareClustersInfo {
	return &NullableVcenterNamespaceManagementSoftwareClustersInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSoftwareClustersInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


