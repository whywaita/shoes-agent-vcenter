/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec struct for VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec
type VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec struct {
	// Identifier of the vSphere Distributed Portgroup backing the vSphere network object. If the network object is associated with a Namespace or is Clusters.WorkloadNetworksEnableSpec.supervisor-primary-workload-network, then modification to existing portgroup will result in the operation failing with a ResourceInUse error. If unset, the current value will be retained. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network.
	Portgroup *string `json:"portgroup,omitempty"`
	// Usable IP pools on this network. If the network object is associated with a Namespace or is Clusters.WorkloadNetworksEnableSpec.supervisor-primary-workload-network, then replacement of or modification to any existing range in this list will result in operation failing with a ResourceInUse error. To add new address ranges to the list, existing address ranges have to be passed in without modifications. If unset, the current value will be retained.
	AddressRanges *[]VcenterNamespaceManagementIPRange `json:"address_ranges,omitempty"`
	// Gateway for the network. If the network object is associated with a Namespace or is Clusters.WorkloadNetworksEnableSpec.supervisor-primary-workload-network, then modification to existing gateway will result in the operation failing with a ResourceInUse error. If unset, the current value will be retained.
	Gateway *string `json:"gateway,omitempty"`
	// Subnet mask of the network. If the network object is associated with a Namespace or is Clusters.WorkloadNetworksEnableSpec.supervisor-primary-workload-network, then modification to existing subnet mask will result in the operation failing with a ResourceInUse error. If unset, the current value will be retained.
	SubnetMask *string `json:"subnet_mask,omitempty"`
}

// NewVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec instantiates a new VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec() *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec {
	this := VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec{}
	return &this
}

// NewVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpecWithDefaults instantiates a new VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpecWithDefaults() *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec {
	this := VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec{}
	return &this
}

// GetPortgroup returns the Portgroup field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) GetPortgroup() string {
	if o == nil || o.Portgroup == nil {
		var ret string
		return ret
	}
	return *o.Portgroup
}

// GetPortgroupOk returns a tuple with the Portgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) GetPortgroupOk() (*string, bool) {
	if o == nil || o.Portgroup == nil {
		return nil, false
	}
	return o.Portgroup, true
}

// HasPortgroup returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) HasPortgroup() bool {
	if o != nil && o.Portgroup != nil {
		return true
	}

	return false
}

// SetPortgroup gets a reference to the given string and assigns it to the Portgroup field.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) SetPortgroup(v string) {
	o.Portgroup = &v
}

// GetAddressRanges returns the AddressRanges field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) GetAddressRanges() []VcenterNamespaceManagementIPRange {
	if o == nil || o.AddressRanges == nil {
		var ret []VcenterNamespaceManagementIPRange
		return ret
	}
	return *o.AddressRanges
}

// GetAddressRangesOk returns a tuple with the AddressRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) GetAddressRangesOk() (*[]VcenterNamespaceManagementIPRange, bool) {
	if o == nil || o.AddressRanges == nil {
		return nil, false
	}
	return o.AddressRanges, true
}

// HasAddressRanges returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) HasAddressRanges() bool {
	if o != nil && o.AddressRanges != nil {
		return true
	}

	return false
}

// SetAddressRanges gets a reference to the given []VcenterNamespaceManagementIPRange and assigns it to the AddressRanges field.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) SetAddressRanges(v []VcenterNamespaceManagementIPRange) {
	o.AddressRanges = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) GetGateway() string {
	if o == nil || o.Gateway == nil {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) GetGatewayOk() (*string, bool) {
	if o == nil || o.Gateway == nil {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) HasGateway() bool {
	if o != nil && o.Gateway != nil {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) SetGateway(v string) {
	o.Gateway = &v
}

// GetSubnetMask returns the SubnetMask field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) GetSubnetMask() string {
	if o == nil || o.SubnetMask == nil {
		var ret string
		return ret
	}
	return *o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) GetSubnetMaskOk() (*string, bool) {
	if o == nil || o.SubnetMask == nil {
		return nil, false
	}
	return o.SubnetMask, true
}

// HasSubnetMask returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) HasSubnetMask() bool {
	if o != nil && o.SubnetMask != nil {
		return true
	}

	return false
}

// SetSubnetMask gets a reference to the given string and assigns it to the SubnetMask field.
func (o *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) SetSubnetMask(v string) {
	o.SubnetMask = &v
}

func (o VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Portgroup != nil {
		toSerialize["portgroup"] = o.Portgroup
	}
	if o.AddressRanges != nil {
		toSerialize["address_ranges"] = o.AddressRanges
	}
	if o.Gateway != nil {
		toSerialize["gateway"] = o.Gateway
	}
	if o.SubnetMask != nil {
		toSerialize["subnet_mask"] = o.SubnetMask
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec struct {
	value *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) Get() *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) Set(val *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec(val *VcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) *NullableVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec {
	return &NullableVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementNetworksVsphereDVPGNetworkUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


