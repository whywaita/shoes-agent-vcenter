/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType The {@name MacAddressType} {@term enumerated type} defines the valid MAC address origins for a virtual Ethernet adapter.
type VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType string

// List of vcenter.vm_template.library_items.ethernet_info.mac_address_type
const (
	VCENTERVMTEMPLATELIBRARYITEMSETHERNETINFOMACADDRESSTYPE_MANUAL VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType = "MANUAL"
	VCENTERVMTEMPLATELIBRARYITEMSETHERNETINFOMACADDRESSTYPE_GENERATED VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType = "GENERATED"
	VCENTERVMTEMPLATELIBRARYITEMSETHERNETINFOMACADDRESSTYPE_ASSIGNED VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType = "ASSIGNED"
)

// All allowed values of VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType enum
var AllowedVcenterVmTemplateLibraryItemsEthernetInfoMacAddressTypeEnumValues = []VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType{
	"MANUAL",
	"GENERATED",
	"ASSIGNED",
}

func (v *VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType(value)
	for _, existing := range AllowedVcenterVmTemplateLibraryItemsEthernetInfoMacAddressTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType", value)
}

// NewVcenterVmTemplateLibraryItemsEthernetInfoMacAddressTypeFromValue returns a pointer to a valid VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmTemplateLibraryItemsEthernetInfoMacAddressTypeFromValue(v string) (*VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType, error) {
	ev := VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType: valid values are %v", v, AllowedVcenterVmTemplateLibraryItemsEthernetInfoMacAddressTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) IsValid() bool {
	for _, existing := range AllowedVcenterVmTemplateLibraryItemsEthernetInfoMacAddressTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm_template.library_items.ethernet_info.mac_address_type value
func (v VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) Ptr() *VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType {
	return &v
}

type NullableVcenterVmTemplateLibraryItemsEthernetInfoMacAddressType struct {
	value *VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) Get() *VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) Set(val *VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsEthernetInfoMacAddressType(val *VcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) *NullableVcenterVmTemplateLibraryItemsEthernetInfoMacAddressType {
	return &NullableVcenterVmTemplateLibraryItemsEthernetInfoMacAddressType{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsEthernetInfoMacAddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

