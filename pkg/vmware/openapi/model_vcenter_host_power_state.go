/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterHostPowerState The Host.PowerState enumerated type defines the power states of a host.
type VcenterHostPowerState string

// List of vcenter.host.power_state
const (
	VCENTERHOSTPOWERSTATE_POWERED_ON VcenterHostPowerState = "POWERED_ON"
	VCENTERHOSTPOWERSTATE_POWERED_OFF VcenterHostPowerState = "POWERED_OFF"
	VCENTERHOSTPOWERSTATE_STANDBY VcenterHostPowerState = "STANDBY"
)

// All allowed values of VcenterHostPowerState enum
var AllowedVcenterHostPowerStateEnumValues = []VcenterHostPowerState{
	"POWERED_ON",
	"POWERED_OFF",
	"STANDBY",
}

func (v *VcenterHostPowerState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterHostPowerState(value)
	for _, existing := range AllowedVcenterHostPowerStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterHostPowerState", value)
}

// NewVcenterHostPowerStateFromValue returns a pointer to a valid VcenterHostPowerState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterHostPowerStateFromValue(v string) (*VcenterHostPowerState, error) {
	ev := VcenterHostPowerState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterHostPowerState: valid values are %v", v, AllowedVcenterHostPowerStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterHostPowerState) IsValid() bool {
	for _, existing := range AllowedVcenterHostPowerStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.host.power_state value
func (v VcenterHostPowerState) Ptr() *VcenterHostPowerState {
	return &v
}

type NullableVcenterHostPowerState struct {
	value *VcenterHostPowerState
	isSet bool
}

func (v NullableVcenterHostPowerState) Get() *VcenterHostPowerState {
	return v.value
}

func (v *NullableVcenterHostPowerState) Set(val *VcenterHostPowerState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterHostPowerState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterHostPowerState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterHostPowerState(val *VcenterHostPowerState) *NullableVcenterHostPowerState {
	return &NullableVcenterHostPowerState{value: val, isSet: true}
}

func (v NullableVcenterHostPowerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterHostPowerState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

