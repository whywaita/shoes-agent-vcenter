/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmStoragePolicyInfo struct for VcenterVmStoragePolicyInfo
type VcenterVmStoragePolicyInfo struct {
	// Storage Policy associated with virtual machine home. Ifunset, the virtual machine's home directory doesn't have any storage policy. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.StoragePolicy.
	VmHome *string `json:"vm_home,omitempty"`
	// Storage policies associated with virtual disks. The values in this map are storage policy identifiers. They will be identifiers for the resource type:vcenter.StoragePolicy If the map is empty, the virtual machine does not have any disks or its disks are not associated with a storage policy. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.
	Disks []VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings `json:"disks"`
}

// NewVcenterVmStoragePolicyInfo instantiates a new VcenterVmStoragePolicyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmStoragePolicyInfo(disks []VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings) *VcenterVmStoragePolicyInfo {
	this := VcenterVmStoragePolicyInfo{}
	this.Disks = disks
	return &this
}

// NewVcenterVmStoragePolicyInfoWithDefaults instantiates a new VcenterVmStoragePolicyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmStoragePolicyInfoWithDefaults() *VcenterVmStoragePolicyInfo {
	this := VcenterVmStoragePolicyInfo{}
	return &this
}

// GetVmHome returns the VmHome field value if set, zero value otherwise.
func (o *VcenterVmStoragePolicyInfo) GetVmHome() string {
	if o == nil || o.VmHome == nil {
		var ret string
		return ret
	}
	return *o.VmHome
}

// GetVmHomeOk returns a tuple with the VmHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmStoragePolicyInfo) GetVmHomeOk() (*string, bool) {
	if o == nil || o.VmHome == nil {
		return nil, false
	}
	return o.VmHome, true
}

// HasVmHome returns a boolean if a field has been set.
func (o *VcenterVmStoragePolicyInfo) HasVmHome() bool {
	if o != nil && o.VmHome != nil {
		return true
	}

	return false
}

// SetVmHome gets a reference to the given string and assigns it to the VmHome field.
func (o *VcenterVmStoragePolicyInfo) SetVmHome(v string) {
	o.VmHome = &v
}

// GetDisks returns the Disks field value
func (o *VcenterVmStoragePolicyInfo) GetDisks() []VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings {
	if o == nil {
		var ret []VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *VcenterVmStoragePolicyInfo) GetDisksOk() (*[]VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Disks, true
}

// SetDisks sets field value
func (o *VcenterVmStoragePolicyInfo) SetDisks(v []VcenterOvfLibraryItemResourcePoolDeploymentSpecNetworkMappings) {
	o.Disks = v
}

func (o VcenterVmStoragePolicyInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VmHome != nil {
		toSerialize["vm_home"] = o.VmHome
	}
	if true {
		toSerialize["disks"] = o.Disks
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmStoragePolicyInfo struct {
	value *VcenterVmStoragePolicyInfo
	isSet bool
}

func (v NullableVcenterVmStoragePolicyInfo) Get() *VcenterVmStoragePolicyInfo {
	return v.value
}

func (v *NullableVcenterVmStoragePolicyInfo) Set(val *VcenterVmStoragePolicyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmStoragePolicyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmStoragePolicyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmStoragePolicyInfo(val *VcenterVmStoragePolicyInfo) *NullableVcenterVmStoragePolicyInfo {
	return &NullableVcenterVmStoragePolicyInfo{value: val, isSet: true}
}

func (v NullableVcenterVmStoragePolicyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmStoragePolicyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


