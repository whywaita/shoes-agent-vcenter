/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterGuestIpv4Type The Ipv4.Type enumerated type specifies different types of the IPv4 configuration.
type VcenterGuestIpv4Type string

// List of vcenter.guest.ipv4.type
const (
	VCENTERGUESTIPV4TYPE_DHCP VcenterGuestIpv4Type = "DHCP"
	VCENTERGUESTIPV4TYPE_STATIC VcenterGuestIpv4Type = "STATIC"
	VCENTERGUESTIPV4TYPE_USER_INPUT_REQUIRED VcenterGuestIpv4Type = "USER_INPUT_REQUIRED"
)

// All allowed values of VcenterGuestIpv4Type enum
var AllowedVcenterGuestIpv4TypeEnumValues = []VcenterGuestIpv4Type{
	"DHCP",
	"STATIC",
	"USER_INPUT_REQUIRED",
}

func (v *VcenterGuestIpv4Type) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterGuestIpv4Type(value)
	for _, existing := range AllowedVcenterGuestIpv4TypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterGuestIpv4Type", value)
}

// NewVcenterGuestIpv4TypeFromValue returns a pointer to a valid VcenterGuestIpv4Type
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterGuestIpv4TypeFromValue(v string) (*VcenterGuestIpv4Type, error) {
	ev := VcenterGuestIpv4Type(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterGuestIpv4Type: valid values are %v", v, AllowedVcenterGuestIpv4TypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterGuestIpv4Type) IsValid() bool {
	for _, existing := range AllowedVcenterGuestIpv4TypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.guest.ipv4.type value
func (v VcenterGuestIpv4Type) Ptr() *VcenterGuestIpv4Type {
	return &v
}

type NullableVcenterGuestIpv4Type struct {
	value *VcenterGuestIpv4Type
	isSet bool
}

func (v NullableVcenterGuestIpv4Type) Get() *VcenterGuestIpv4Type {
	return v.value
}

func (v *NullableVcenterGuestIpv4Type) Set(val *VcenterGuestIpv4Type) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestIpv4Type) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestIpv4Type) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestIpv4Type(val *VcenterGuestIpv4Type) *NullableVcenterGuestIpv4Type {
	return &NullableVcenterGuestIpv4Type{value: val, isSet: true}
}

func (v NullableVcenterGuestIpv4Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestIpv4Type) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

