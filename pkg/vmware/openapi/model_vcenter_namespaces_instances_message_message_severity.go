/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespacesInstancesMessageMessageSeverity The Instances.Message.MessageSeverity enumerated type represents the severity of the message.
type VcenterNamespacesInstancesMessageMessageSeverity string

// List of VcenterNamespacesInstancesMessageMessageSeverity
const (
	VCENTERNAMESPACESINSTANCESMESSAGEMESSAGESEVERITY_INFO VcenterNamespacesInstancesMessageMessageSeverity = "INFO"
	VCENTERNAMESPACESINSTANCESMESSAGEMESSAGESEVERITY_WARNING VcenterNamespacesInstancesMessageMessageSeverity = "WARNING"
	VCENTERNAMESPACESINSTANCESMESSAGEMESSAGESEVERITY_ERROR VcenterNamespacesInstancesMessageMessageSeverity = "ERROR"
)

// All allowed values of VcenterNamespacesInstancesMessageMessageSeverity enum
var AllowedVcenterNamespacesInstancesMessageMessageSeverityEnumValues = []VcenterNamespacesInstancesMessageMessageSeverity{
	"INFO",
	"WARNING",
	"ERROR",
}

func (v *VcenterNamespacesInstancesMessageMessageSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespacesInstancesMessageMessageSeverity(value)
	for _, existing := range AllowedVcenterNamespacesInstancesMessageMessageSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespacesInstancesMessageMessageSeverity", value)
}

// NewVcenterNamespacesInstancesMessageMessageSeverityFromValue returns a pointer to a valid VcenterNamespacesInstancesMessageMessageSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespacesInstancesMessageMessageSeverityFromValue(v string) (*VcenterNamespacesInstancesMessageMessageSeverity, error) {
	ev := VcenterNamespacesInstancesMessageMessageSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespacesInstancesMessageMessageSeverity: valid values are %v", v, AllowedVcenterNamespacesInstancesMessageMessageSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespacesInstancesMessageMessageSeverity) IsValid() bool {
	for _, existing := range AllowedVcenterNamespacesInstancesMessageMessageSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespacesInstancesMessageMessageSeverity value
func (v VcenterNamespacesInstancesMessageMessageSeverity) Ptr() *VcenterNamespacesInstancesMessageMessageSeverity {
	return &v
}

type NullableVcenterNamespacesInstancesMessageMessageSeverity struct {
	value *VcenterNamespacesInstancesMessageMessageSeverity
	isSet bool
}

func (v NullableVcenterNamespacesInstancesMessageMessageSeverity) Get() *VcenterNamespacesInstancesMessageMessageSeverity {
	return v.value
}

func (v *NullableVcenterNamespacesInstancesMessageMessageSeverity) Set(val *VcenterNamespacesInstancesMessageMessageSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesInstancesMessageMessageSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesInstancesMessageMessageSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesInstancesMessageMessageSeverity(val *VcenterNamespacesInstancesMessageMessageSeverity) *NullableVcenterNamespacesInstancesMessageMessageSeverity {
	return &NullableVcenterNamespacesInstancesMessageMessageSeverity{value: val, isSet: true}
}

func (v NullableVcenterNamespacesInstancesMessageMessageSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesInstancesMessageMessageSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

