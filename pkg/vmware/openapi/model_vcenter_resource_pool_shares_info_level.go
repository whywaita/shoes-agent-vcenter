/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterResourcePoolSharesInfoLevel The ResourcePool.SharesInfo.Level enumerated type defines the possible values for the allocation level.
type VcenterResourcePoolSharesInfoLevel string

// List of vcenter.resource_pool.shares_info.level
const (
	VCENTERRESOURCEPOOLSHARESINFOLEVEL_LOW VcenterResourcePoolSharesInfoLevel = "LOW"
	VCENTERRESOURCEPOOLSHARESINFOLEVEL_NORMAL VcenterResourcePoolSharesInfoLevel = "NORMAL"
	VCENTERRESOURCEPOOLSHARESINFOLEVEL_HIGH VcenterResourcePoolSharesInfoLevel = "HIGH"
	VCENTERRESOURCEPOOLSHARESINFOLEVEL_CUSTOM VcenterResourcePoolSharesInfoLevel = "CUSTOM"
)

// All allowed values of VcenterResourcePoolSharesInfoLevel enum
var AllowedVcenterResourcePoolSharesInfoLevelEnumValues = []VcenterResourcePoolSharesInfoLevel{
	"LOW",
	"NORMAL",
	"HIGH",
	"CUSTOM",
}

func (v *VcenterResourcePoolSharesInfoLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterResourcePoolSharesInfoLevel(value)
	for _, existing := range AllowedVcenterResourcePoolSharesInfoLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterResourcePoolSharesInfoLevel", value)
}

// NewVcenterResourcePoolSharesInfoLevelFromValue returns a pointer to a valid VcenterResourcePoolSharesInfoLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterResourcePoolSharesInfoLevelFromValue(v string) (*VcenterResourcePoolSharesInfoLevel, error) {
	ev := VcenterResourcePoolSharesInfoLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterResourcePoolSharesInfoLevel: valid values are %v", v, AllowedVcenterResourcePoolSharesInfoLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterResourcePoolSharesInfoLevel) IsValid() bool {
	for _, existing := range AllowedVcenterResourcePoolSharesInfoLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.resource_pool.shares_info.level value
func (v VcenterResourcePoolSharesInfoLevel) Ptr() *VcenterResourcePoolSharesInfoLevel {
	return &v
}

type NullableVcenterResourcePoolSharesInfoLevel struct {
	value *VcenterResourcePoolSharesInfoLevel
	isSet bool
}

func (v NullableVcenterResourcePoolSharesInfoLevel) Get() *VcenterResourcePoolSharesInfoLevel {
	return v.value
}

func (v *NullableVcenterResourcePoolSharesInfoLevel) Set(val *VcenterResourcePoolSharesInfoLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterResourcePoolSharesInfoLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterResourcePoolSharesInfoLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterResourcePoolSharesInfoLevel(val *VcenterResourcePoolSharesInfoLevel) *NullableVcenterResourcePoolSharesInfoLevel {
	return &NullableVcenterResourcePoolSharesInfoLevel{value: val, isSet: true}
}

func (v NullableVcenterResourcePoolSharesInfoLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterResourcePoolSharesInfoLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

