/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterContentRegistriesHarborProjectsCreateSpec struct for VcenterContentRegistriesHarborProjectsCreateSpec
type VcenterContentRegistriesHarborProjectsCreateSpec struct {
	// Name of the Harbor project. Should be between 1-63 characters long alphanumeric string and may contain the following characters: a-z,0-9, and '-'. Must be starting with characters or numbers, with the '-' character allowed anywhere except the first or last character.
	Name string `json:"name"`
	Scope VcenterContentRegistriesHarborProjectsScope `json:"scope"`
}

// NewVcenterContentRegistriesHarborProjectsCreateSpec instantiates a new VcenterContentRegistriesHarborProjectsCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterContentRegistriesHarborProjectsCreateSpec(name string, scope VcenterContentRegistriesHarborProjectsScope) *VcenterContentRegistriesHarborProjectsCreateSpec {
	this := VcenterContentRegistriesHarborProjectsCreateSpec{}
	this.Name = name
	this.Scope = scope
	return &this
}

// NewVcenterContentRegistriesHarborProjectsCreateSpecWithDefaults instantiates a new VcenterContentRegistriesHarborProjectsCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterContentRegistriesHarborProjectsCreateSpecWithDefaults() *VcenterContentRegistriesHarborProjectsCreateSpec {
	this := VcenterContentRegistriesHarborProjectsCreateSpec{}
	return &this
}

// GetName returns the Name field value
func (o *VcenterContentRegistriesHarborProjectsCreateSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborProjectsCreateSpec) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterContentRegistriesHarborProjectsCreateSpec) SetName(v string) {
	o.Name = v
}

// GetScope returns the Scope field value
func (o *VcenterContentRegistriesHarborProjectsCreateSpec) GetScope() VcenterContentRegistriesHarborProjectsScope {
	if o == nil {
		var ret VcenterContentRegistriesHarborProjectsScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborProjectsCreateSpec) GetScopeOk() (*VcenterContentRegistriesHarborProjectsScope, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *VcenterContentRegistriesHarborProjectsCreateSpec) SetScope(v VcenterContentRegistriesHarborProjectsScope) {
	o.Scope = v
}

func (o VcenterContentRegistriesHarborProjectsCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["scope"] = o.Scope
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterContentRegistriesHarborProjectsCreateSpec struct {
	value *VcenterContentRegistriesHarborProjectsCreateSpec
	isSet bool
}

func (v NullableVcenterContentRegistriesHarborProjectsCreateSpec) Get() *VcenterContentRegistriesHarborProjectsCreateSpec {
	return v.value
}

func (v *NullableVcenterContentRegistriesHarborProjectsCreateSpec) Set(val *VcenterContentRegistriesHarborProjectsCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterContentRegistriesHarborProjectsCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterContentRegistriesHarborProjectsCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterContentRegistriesHarborProjectsCreateSpec(val *VcenterContentRegistriesHarborProjectsCreateSpec) *NullableVcenterContentRegistriesHarborProjectsCreateSpec {
	return &NullableVcenterContentRegistriesHarborProjectsCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterContentRegistriesHarborProjectsCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterContentRegistriesHarborProjectsCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


