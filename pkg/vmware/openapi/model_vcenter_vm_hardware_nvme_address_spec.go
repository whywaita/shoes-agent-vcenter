/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareNvmeAddressSpec struct for VcenterVmHardwareNvmeAddressSpec
type VcenterVmHardwareNvmeAddressSpec struct {
	// Bus number of the adapter to which the device should be attached.
	Bus int64 `json:"bus"`
	// Unit number of the device. If unset, the server will choose an available unit number on the specified adapter. If there are no available connections on the adapter, the request will be rejected.
	Unit *int64 `json:"unit,omitempty"`
}

// NewVcenterVmHardwareNvmeAddressSpec instantiates a new VcenterVmHardwareNvmeAddressSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareNvmeAddressSpec(bus int64) *VcenterVmHardwareNvmeAddressSpec {
	this := VcenterVmHardwareNvmeAddressSpec{}
	this.Bus = bus
	return &this
}

// NewVcenterVmHardwareNvmeAddressSpecWithDefaults instantiates a new VcenterVmHardwareNvmeAddressSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareNvmeAddressSpecWithDefaults() *VcenterVmHardwareNvmeAddressSpec {
	this := VcenterVmHardwareNvmeAddressSpec{}
	return &this
}

// GetBus returns the Bus field value
func (o *VcenterVmHardwareNvmeAddressSpec) GetBus() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Bus
}

// GetBusOk returns a tuple with the Bus field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareNvmeAddressSpec) GetBusOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Bus, true
}

// SetBus sets field value
func (o *VcenterVmHardwareNvmeAddressSpec) SetBus(v int64) {
	o.Bus = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *VcenterVmHardwareNvmeAddressSpec) GetUnit() int64 {
	if o == nil || o.Unit == nil {
		var ret int64
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareNvmeAddressSpec) GetUnitOk() (*int64, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *VcenterVmHardwareNvmeAddressSpec) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given int64 and assigns it to the Unit field.
func (o *VcenterVmHardwareNvmeAddressSpec) SetUnit(v int64) {
	o.Unit = &v
}

func (o VcenterVmHardwareNvmeAddressSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bus"] = o.Bus
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareNvmeAddressSpec struct {
	value *VcenterVmHardwareNvmeAddressSpec
	isSet bool
}

func (v NullableVcenterVmHardwareNvmeAddressSpec) Get() *VcenterVmHardwareNvmeAddressSpec {
	return v.value
}

func (v *NullableVcenterVmHardwareNvmeAddressSpec) Set(val *VcenterVmHardwareNvmeAddressSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareNvmeAddressSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareNvmeAddressSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareNvmeAddressSpec(val *VcenterVmHardwareNvmeAddressSpec) *NullableVcenterVmHardwareNvmeAddressSpec {
	return &NullableVcenterVmHardwareNvmeAddressSpec{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareNvmeAddressSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareNvmeAddressSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


