/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterServicesServiceStartupType The Service.StartupType enumerated type defines valid Startup Type for vCenter Server services.
type VcenterServicesServiceStartupType string

// List of vcenter.services.service.startup_type
const (
	VCENTERSERVICESSERVICESTARTUPTYPE_MANUAL VcenterServicesServiceStartupType = "MANUAL"
	VCENTERSERVICESSERVICESTARTUPTYPE_AUTOMATIC VcenterServicesServiceStartupType = "AUTOMATIC"
	VCENTERSERVICESSERVICESTARTUPTYPE_DISABLED VcenterServicesServiceStartupType = "DISABLED"
)

// All allowed values of VcenterServicesServiceStartupType enum
var AllowedVcenterServicesServiceStartupTypeEnumValues = []VcenterServicesServiceStartupType{
	"MANUAL",
	"AUTOMATIC",
	"DISABLED",
}

func (v *VcenterServicesServiceStartupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterServicesServiceStartupType(value)
	for _, existing := range AllowedVcenterServicesServiceStartupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterServicesServiceStartupType", value)
}

// NewVcenterServicesServiceStartupTypeFromValue returns a pointer to a valid VcenterServicesServiceStartupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterServicesServiceStartupTypeFromValue(v string) (*VcenterServicesServiceStartupType, error) {
	ev := VcenterServicesServiceStartupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterServicesServiceStartupType: valid values are %v", v, AllowedVcenterServicesServiceStartupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterServicesServiceStartupType) IsValid() bool {
	for _, existing := range AllowedVcenterServicesServiceStartupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.services.service.startup_type value
func (v VcenterServicesServiceStartupType) Ptr() *VcenterServicesServiceStartupType {
	return &v
}

type NullableVcenterServicesServiceStartupType struct {
	value *VcenterServicesServiceStartupType
	isSet bool
}

func (v NullableVcenterServicesServiceStartupType) Get() *VcenterServicesServiceStartupType {
	return v.value
}

func (v *NullableVcenterServicesServiceStartupType) Set(val *VcenterServicesServiceStartupType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterServicesServiceStartupType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterServicesServiceStartupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterServicesServiceStartupType(val *VcenterServicesServiceStartupType) *NullableVcenterServicesServiceStartupType {
	return &NullableVcenterServicesServiceStartupType{value: val, isSet: true}
}

func (v NullableVcenterServicesServiceStartupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterServicesServiceStartupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

