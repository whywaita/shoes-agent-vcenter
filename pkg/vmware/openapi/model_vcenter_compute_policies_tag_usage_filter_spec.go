/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterComputePoliciesTagUsageFilterSpec struct for VcenterComputePoliciesTagUsageFilterSpec
type VcenterComputePoliciesTagUsageFilterSpec struct {
	// Identifiers that compute policies must have to match the filter.
	Policies *[]string `json:"policies,omitempty"`
	// Identifiers that tags must have to match the filter.
	Tags *[]string `json:"tags,omitempty"`
	// Identifiers that tag types must have to match the filter.
	TagTypes *[]string `json:"tag_types,omitempty"`
}

// NewVcenterComputePoliciesTagUsageFilterSpec instantiates a new VcenterComputePoliciesTagUsageFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterComputePoliciesTagUsageFilterSpec() *VcenterComputePoliciesTagUsageFilterSpec {
	this := VcenterComputePoliciesTagUsageFilterSpec{}
	return &this
}

// NewVcenterComputePoliciesTagUsageFilterSpecWithDefaults instantiates a new VcenterComputePoliciesTagUsageFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterComputePoliciesTagUsageFilterSpecWithDefaults() *VcenterComputePoliciesTagUsageFilterSpec {
	this := VcenterComputePoliciesTagUsageFilterSpec{}
	return &this
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *VcenterComputePoliciesTagUsageFilterSpec) GetPolicies() []string {
	if o == nil || o.Policies == nil {
		var ret []string
		return ret
	}
	return *o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterComputePoliciesTagUsageFilterSpec) GetPoliciesOk() (*[]string, bool) {
	if o == nil || o.Policies == nil {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *VcenterComputePoliciesTagUsageFilterSpec) HasPolicies() bool {
	if o != nil && o.Policies != nil {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []string and assigns it to the Policies field.
func (o *VcenterComputePoliciesTagUsageFilterSpec) SetPolicies(v []string) {
	o.Policies = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VcenterComputePoliciesTagUsageFilterSpec) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterComputePoliciesTagUsageFilterSpec) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VcenterComputePoliciesTagUsageFilterSpec) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VcenterComputePoliciesTagUsageFilterSpec) SetTags(v []string) {
	o.Tags = &v
}

// GetTagTypes returns the TagTypes field value if set, zero value otherwise.
func (o *VcenterComputePoliciesTagUsageFilterSpec) GetTagTypes() []string {
	if o == nil || o.TagTypes == nil {
		var ret []string
		return ret
	}
	return *o.TagTypes
}

// GetTagTypesOk returns a tuple with the TagTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterComputePoliciesTagUsageFilterSpec) GetTagTypesOk() (*[]string, bool) {
	if o == nil || o.TagTypes == nil {
		return nil, false
	}
	return o.TagTypes, true
}

// HasTagTypes returns a boolean if a field has been set.
func (o *VcenterComputePoliciesTagUsageFilterSpec) HasTagTypes() bool {
	if o != nil && o.TagTypes != nil {
		return true
	}

	return false
}

// SetTagTypes gets a reference to the given []string and assigns it to the TagTypes field.
func (o *VcenterComputePoliciesTagUsageFilterSpec) SetTagTypes(v []string) {
	o.TagTypes = &v
}

func (o VcenterComputePoliciesTagUsageFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TagTypes != nil {
		toSerialize["tag_types"] = o.TagTypes
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterComputePoliciesTagUsageFilterSpec struct {
	value *VcenterComputePoliciesTagUsageFilterSpec
	isSet bool
}

func (v NullableVcenterComputePoliciesTagUsageFilterSpec) Get() *VcenterComputePoliciesTagUsageFilterSpec {
	return v.value
}

func (v *NullableVcenterComputePoliciesTagUsageFilterSpec) Set(val *VcenterComputePoliciesTagUsageFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterComputePoliciesTagUsageFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterComputePoliciesTagUsageFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterComputePoliciesTagUsageFilterSpec(val *VcenterComputePoliciesTagUsageFilterSpec) *NullableVcenterComputePoliciesTagUsageFilterSpec {
	return &NullableVcenterComputePoliciesTagUsageFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterComputePoliciesTagUsageFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterComputePoliciesTagUsageFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


