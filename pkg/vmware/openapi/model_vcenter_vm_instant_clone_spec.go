/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMInstantCloneSpec struct for VcenterVMInstantCloneSpec
type VcenterVMInstantCloneSpec struct {
	// Virtual machine to InstantClone from. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will be an identifier for the resource type: VirtualMachine.
	Source string `json:"source"`
	// Name of the new virtual machine.
	Name string `json:"name"`
	Placement *VcenterVMInstantClonePlacementSpec `json:"placement,omitempty"`
	// Map of NICs to update. If unset, no NICs will be updated. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Ethernet.
	NicsToUpdate *[]VcenterVMInstantCloneSpecNicsToUpdate `json:"nics_to_update,omitempty"`
	// Indicates whether all NICs on the destination virtual machine should be disconnected from the newtwork If unset, connection status of all NICs on the destination virtual machine will be the same as on the source virtual machine.
	DisconnectAllNics *bool `json:"disconnect_all_nics,omitempty"`
	// Map of parallel ports to Update. If unset, no parallel ports will be updated. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.
	ParallelPortsToUpdate *[]VcenterVMInstantCloneSpecParallelPortsToUpdate `json:"parallel_ports_to_update,omitempty"`
	// Map of serial ports to Update. If unset, no serial ports will be updated. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.SerialPort. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.SerialPort.
	SerialPortsToUpdate *[]VcenterVMInstantCloneSpecSerialPortsToUpdate `json:"serial_ports_to_update,omitempty"`
	// 128-bit SMBIOS UUID of a virtual machine represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format. If unset, will be generated.
	BiosUuid *string `json:"bios_uuid,omitempty"`
}

// NewVcenterVMInstantCloneSpec instantiates a new VcenterVMInstantCloneSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMInstantCloneSpec(source string, name string) *VcenterVMInstantCloneSpec {
	this := VcenterVMInstantCloneSpec{}
	this.Source = source
	this.Name = name
	return &this
}

// NewVcenterVMInstantCloneSpecWithDefaults instantiates a new VcenterVMInstantCloneSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMInstantCloneSpecWithDefaults() *VcenterVMInstantCloneSpec {
	this := VcenterVMInstantCloneSpec{}
	return &this
}

// GetSource returns the Source field value
func (o *VcenterVMInstantCloneSpec) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantCloneSpec) GetSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *VcenterVMInstantCloneSpec) SetSource(v string) {
	o.Source = v
}

// GetName returns the Name field value
func (o *VcenterVMInstantCloneSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantCloneSpec) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterVMInstantCloneSpec) SetName(v string) {
	o.Name = v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *VcenterVMInstantCloneSpec) GetPlacement() VcenterVMInstantClonePlacementSpec {
	if o == nil || o.Placement == nil {
		var ret VcenterVMInstantClonePlacementSpec
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantCloneSpec) GetPlacementOk() (*VcenterVMInstantClonePlacementSpec, bool) {
	if o == nil || o.Placement == nil {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *VcenterVMInstantCloneSpec) HasPlacement() bool {
	if o != nil && o.Placement != nil {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given VcenterVMInstantClonePlacementSpec and assigns it to the Placement field.
func (o *VcenterVMInstantCloneSpec) SetPlacement(v VcenterVMInstantClonePlacementSpec) {
	o.Placement = &v
}

// GetNicsToUpdate returns the NicsToUpdate field value if set, zero value otherwise.
func (o *VcenterVMInstantCloneSpec) GetNicsToUpdate() []VcenterVMInstantCloneSpecNicsToUpdate {
	if o == nil || o.NicsToUpdate == nil {
		var ret []VcenterVMInstantCloneSpecNicsToUpdate
		return ret
	}
	return *o.NicsToUpdate
}

// GetNicsToUpdateOk returns a tuple with the NicsToUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantCloneSpec) GetNicsToUpdateOk() (*[]VcenterVMInstantCloneSpecNicsToUpdate, bool) {
	if o == nil || o.NicsToUpdate == nil {
		return nil, false
	}
	return o.NicsToUpdate, true
}

// HasNicsToUpdate returns a boolean if a field has been set.
func (o *VcenterVMInstantCloneSpec) HasNicsToUpdate() bool {
	if o != nil && o.NicsToUpdate != nil {
		return true
	}

	return false
}

// SetNicsToUpdate gets a reference to the given []VcenterVMInstantCloneSpecNicsToUpdate and assigns it to the NicsToUpdate field.
func (o *VcenterVMInstantCloneSpec) SetNicsToUpdate(v []VcenterVMInstantCloneSpecNicsToUpdate) {
	o.NicsToUpdate = &v
}

// GetDisconnectAllNics returns the DisconnectAllNics field value if set, zero value otherwise.
func (o *VcenterVMInstantCloneSpec) GetDisconnectAllNics() bool {
	if o == nil || o.DisconnectAllNics == nil {
		var ret bool
		return ret
	}
	return *o.DisconnectAllNics
}

// GetDisconnectAllNicsOk returns a tuple with the DisconnectAllNics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantCloneSpec) GetDisconnectAllNicsOk() (*bool, bool) {
	if o == nil || o.DisconnectAllNics == nil {
		return nil, false
	}
	return o.DisconnectAllNics, true
}

// HasDisconnectAllNics returns a boolean if a field has been set.
func (o *VcenterVMInstantCloneSpec) HasDisconnectAllNics() bool {
	if o != nil && o.DisconnectAllNics != nil {
		return true
	}

	return false
}

// SetDisconnectAllNics gets a reference to the given bool and assigns it to the DisconnectAllNics field.
func (o *VcenterVMInstantCloneSpec) SetDisconnectAllNics(v bool) {
	o.DisconnectAllNics = &v
}

// GetParallelPortsToUpdate returns the ParallelPortsToUpdate field value if set, zero value otherwise.
func (o *VcenterVMInstantCloneSpec) GetParallelPortsToUpdate() []VcenterVMInstantCloneSpecParallelPortsToUpdate {
	if o == nil || o.ParallelPortsToUpdate == nil {
		var ret []VcenterVMInstantCloneSpecParallelPortsToUpdate
		return ret
	}
	return *o.ParallelPortsToUpdate
}

// GetParallelPortsToUpdateOk returns a tuple with the ParallelPortsToUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantCloneSpec) GetParallelPortsToUpdateOk() (*[]VcenterVMInstantCloneSpecParallelPortsToUpdate, bool) {
	if o == nil || o.ParallelPortsToUpdate == nil {
		return nil, false
	}
	return o.ParallelPortsToUpdate, true
}

// HasParallelPortsToUpdate returns a boolean if a field has been set.
func (o *VcenterVMInstantCloneSpec) HasParallelPortsToUpdate() bool {
	if o != nil && o.ParallelPortsToUpdate != nil {
		return true
	}

	return false
}

// SetParallelPortsToUpdate gets a reference to the given []VcenterVMInstantCloneSpecParallelPortsToUpdate and assigns it to the ParallelPortsToUpdate field.
func (o *VcenterVMInstantCloneSpec) SetParallelPortsToUpdate(v []VcenterVMInstantCloneSpecParallelPortsToUpdate) {
	o.ParallelPortsToUpdate = &v
}

// GetSerialPortsToUpdate returns the SerialPortsToUpdate field value if set, zero value otherwise.
func (o *VcenterVMInstantCloneSpec) GetSerialPortsToUpdate() []VcenterVMInstantCloneSpecSerialPortsToUpdate {
	if o == nil || o.SerialPortsToUpdate == nil {
		var ret []VcenterVMInstantCloneSpecSerialPortsToUpdate
		return ret
	}
	return *o.SerialPortsToUpdate
}

// GetSerialPortsToUpdateOk returns a tuple with the SerialPortsToUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantCloneSpec) GetSerialPortsToUpdateOk() (*[]VcenterVMInstantCloneSpecSerialPortsToUpdate, bool) {
	if o == nil || o.SerialPortsToUpdate == nil {
		return nil, false
	}
	return o.SerialPortsToUpdate, true
}

// HasSerialPortsToUpdate returns a boolean if a field has been set.
func (o *VcenterVMInstantCloneSpec) HasSerialPortsToUpdate() bool {
	if o != nil && o.SerialPortsToUpdate != nil {
		return true
	}

	return false
}

// SetSerialPortsToUpdate gets a reference to the given []VcenterVMInstantCloneSpecSerialPortsToUpdate and assigns it to the SerialPortsToUpdate field.
func (o *VcenterVMInstantCloneSpec) SetSerialPortsToUpdate(v []VcenterVMInstantCloneSpecSerialPortsToUpdate) {
	o.SerialPortsToUpdate = &v
}

// GetBiosUuid returns the BiosUuid field value if set, zero value otherwise.
func (o *VcenterVMInstantCloneSpec) GetBiosUuid() string {
	if o == nil || o.BiosUuid == nil {
		var ret string
		return ret
	}
	return *o.BiosUuid
}

// GetBiosUuidOk returns a tuple with the BiosUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantCloneSpec) GetBiosUuidOk() (*string, bool) {
	if o == nil || o.BiosUuid == nil {
		return nil, false
	}
	return o.BiosUuid, true
}

// HasBiosUuid returns a boolean if a field has been set.
func (o *VcenterVMInstantCloneSpec) HasBiosUuid() bool {
	if o != nil && o.BiosUuid != nil {
		return true
	}

	return false
}

// SetBiosUuid gets a reference to the given string and assigns it to the BiosUuid field.
func (o *VcenterVMInstantCloneSpec) SetBiosUuid(v string) {
	o.BiosUuid = &v
}

func (o VcenterVMInstantCloneSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	if o.NicsToUpdate != nil {
		toSerialize["nics_to_update"] = o.NicsToUpdate
	}
	if o.DisconnectAllNics != nil {
		toSerialize["disconnect_all_nics"] = o.DisconnectAllNics
	}
	if o.ParallelPortsToUpdate != nil {
		toSerialize["parallel_ports_to_update"] = o.ParallelPortsToUpdate
	}
	if o.SerialPortsToUpdate != nil {
		toSerialize["serial_ports_to_update"] = o.SerialPortsToUpdate
	}
	if o.BiosUuid != nil {
		toSerialize["bios_uuid"] = o.BiosUuid
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMInstantCloneSpec struct {
	value *VcenterVMInstantCloneSpec
	isSet bool
}

func (v NullableVcenterVMInstantCloneSpec) Get() *VcenterVMInstantCloneSpec {
	return v.value
}

func (v *NullableVcenterVMInstantCloneSpec) Set(val *VcenterVMInstantCloneSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMInstantCloneSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMInstantCloneSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMInstantCloneSpec(val *VcenterVMInstantCloneSpec) *NullableVcenterVMInstantCloneSpec {
	return &NullableVcenterVMInstantCloneSpec{value: val, isSet: true}
}

func (v NullableVcenterVMInstantCloneSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMInstantCloneSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


