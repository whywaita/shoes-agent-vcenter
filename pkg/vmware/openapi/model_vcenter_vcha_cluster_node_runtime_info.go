/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterNodeRuntimeInfo struct for VcenterVchaClusterNodeRuntimeInfo
type VcenterVchaClusterNodeRuntimeInfo struct {
	State *VcenterVchaClusterNodeState `json:"state,omitempty"`
	Role *VcenterVchaClusterNodeRole `json:"role,omitempty"`
	Placement *VcenterVchaPlacementInfo `json:"placement,omitempty"`
}

// NewVcenterVchaClusterNodeRuntimeInfo instantiates a new VcenterVchaClusterNodeRuntimeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterNodeRuntimeInfo() *VcenterVchaClusterNodeRuntimeInfo {
	this := VcenterVchaClusterNodeRuntimeInfo{}
	return &this
}

// NewVcenterVchaClusterNodeRuntimeInfoWithDefaults instantiates a new VcenterVchaClusterNodeRuntimeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterNodeRuntimeInfoWithDefaults() *VcenterVchaClusterNodeRuntimeInfo {
	this := VcenterVchaClusterNodeRuntimeInfo{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *VcenterVchaClusterNodeRuntimeInfo) GetState() VcenterVchaClusterNodeState {
	if o == nil || o.State == nil {
		var ret VcenterVchaClusterNodeState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterNodeRuntimeInfo) GetStateOk() (*VcenterVchaClusterNodeState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *VcenterVchaClusterNodeRuntimeInfo) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given VcenterVchaClusterNodeState and assigns it to the State field.
func (o *VcenterVchaClusterNodeRuntimeInfo) SetState(v VcenterVchaClusterNodeState) {
	o.State = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *VcenterVchaClusterNodeRuntimeInfo) GetRole() VcenterVchaClusterNodeRole {
	if o == nil || o.Role == nil {
		var ret VcenterVchaClusterNodeRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterNodeRuntimeInfo) GetRoleOk() (*VcenterVchaClusterNodeRole, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *VcenterVchaClusterNodeRuntimeInfo) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given VcenterVchaClusterNodeRole and assigns it to the Role field.
func (o *VcenterVchaClusterNodeRuntimeInfo) SetRole(v VcenterVchaClusterNodeRole) {
	o.Role = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *VcenterVchaClusterNodeRuntimeInfo) GetPlacement() VcenterVchaPlacementInfo {
	if o == nil || o.Placement == nil {
		var ret VcenterVchaPlacementInfo
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterNodeRuntimeInfo) GetPlacementOk() (*VcenterVchaPlacementInfo, bool) {
	if o == nil || o.Placement == nil {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *VcenterVchaClusterNodeRuntimeInfo) HasPlacement() bool {
	if o != nil && o.Placement != nil {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given VcenterVchaPlacementInfo and assigns it to the Placement field.
func (o *VcenterVchaClusterNodeRuntimeInfo) SetPlacement(v VcenterVchaPlacementInfo) {
	o.Placement = &v
}

func (o VcenterVchaClusterNodeRuntimeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterNodeRuntimeInfo struct {
	value *VcenterVchaClusterNodeRuntimeInfo
	isSet bool
}

func (v NullableVcenterVchaClusterNodeRuntimeInfo) Get() *VcenterVchaClusterNodeRuntimeInfo {
	return v.value
}

func (v *NullableVcenterVchaClusterNodeRuntimeInfo) Set(val *VcenterVchaClusterNodeRuntimeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterNodeRuntimeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterNodeRuntimeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterNodeRuntimeInfo(val *VcenterVchaClusterNodeRuntimeInfo) *NullableVcenterVchaClusterNodeRuntimeInfo {
	return &NullableVcenterVchaClusterNodeRuntimeInfo{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterNodeRuntimeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterNodeRuntimeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


