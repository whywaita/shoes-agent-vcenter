/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls struct for VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls
type VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls struct {
	// The duration (in days) of the new TLS certificate. The duration should be less than or equal to 730 days. If unset, the duration will be 730 days (two years).
	Duration *int64 `json:"duration,omitempty"`
}

// NewVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls instantiates a new VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls() *VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls {
	this := VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls{}
	return &this
}

// NewVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTlsWithDefaults instantiates a new VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTlsWithDefaults() *VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls {
	this := VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls{}
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) GetDuration() int64 {
	if o == nil || o.Duration == nil {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) GetDurationOk() (*int64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) SetDuration(v int64) {
	o.Duration = &v
}

func (o VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls struct {
	value *VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls
	isSet bool
}

func (v NullableVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) Get() *VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls {
	return v.value
}

func (v *NullableVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) Set(val *VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls(val *VcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) *NullableVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls {
	return &NullableVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls{value: val, isSet: true}
}

func (v NullableVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCertificateManagementVcenterTlsRenewCertificateManagementVcenterTls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


