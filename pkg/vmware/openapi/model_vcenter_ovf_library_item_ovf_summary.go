/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterOvfLibraryItemOvfSummary struct for VcenterOvfLibraryItemOvfSummary
type VcenterOvfLibraryItemOvfSummary struct {
	// Default name for the virtual machine or virtual appliance.
	Name *string `json:"name,omitempty"`
	// Default annotation for the virtual machine or virtual appliance.
	Annotation *string `json:"annotation,omitempty"`
	// End User License Agreements specified in the OVF descriptor. All end user license agreements must be accepted in order for the {@name LibraryItem#deploy} {@term operation} to succeed. See {@link ResourcePoolDeploymentSpec#acceptAllEula}.
	EULAs []string `json:"EULAs"`
	// Section identifiers for sections of type ovf:NetworkSection in the OVF descriptor. These identifiers can be used as keys in {@link ResourcePoolDeploymentSpec#networkMappings}.
	Networks *[]string `json:"networks,omitempty"`
	// Section identifiers for sections of type vmw:StorageGroupSection in the OVF descriptor. These identifiers can be used as keys in {@link ResourcePoolDeploymentSpec#storageMappings}.
	StorageGroups *[]string `json:"storage_groups,omitempty"`
	// Additional OVF parameters which can be specified for the deployment target. These OVF parameters can be inspected, optionally modified, and used as values in {@link ResourcePoolDeploymentSpec#additionalParameters} for the {@name LibraryItem#deploy} {@term operation}.
	AdditionalParams *[]map[string]interface{} `json:"additional_params,omitempty"`
}

// NewVcenterOvfLibraryItemOvfSummary instantiates a new VcenterOvfLibraryItemOvfSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterOvfLibraryItemOvfSummary(eULAs []string) *VcenterOvfLibraryItemOvfSummary {
	this := VcenterOvfLibraryItemOvfSummary{}
	this.EULAs = eULAs
	return &this
}

// NewVcenterOvfLibraryItemOvfSummaryWithDefaults instantiates a new VcenterOvfLibraryItemOvfSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterOvfLibraryItemOvfSummaryWithDefaults() *VcenterOvfLibraryItemOvfSummary {
	this := VcenterOvfLibraryItemOvfSummary{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemOvfSummary) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemOvfSummary) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemOvfSummary) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VcenterOvfLibraryItemOvfSummary) SetName(v string) {
	o.Name = &v
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemOvfSummary) GetAnnotation() string {
	if o == nil || o.Annotation == nil {
		var ret string
		return ret
	}
	return *o.Annotation
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemOvfSummary) GetAnnotationOk() (*string, bool) {
	if o == nil || o.Annotation == nil {
		return nil, false
	}
	return o.Annotation, true
}

// HasAnnotation returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemOvfSummary) HasAnnotation() bool {
	if o != nil && o.Annotation != nil {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given string and assigns it to the Annotation field.
func (o *VcenterOvfLibraryItemOvfSummary) SetAnnotation(v string) {
	o.Annotation = &v
}

// GetEULAs returns the EULAs field value
func (o *VcenterOvfLibraryItemOvfSummary) GetEULAs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EULAs
}

// GetEULAsOk returns a tuple with the EULAs field value
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemOvfSummary) GetEULAsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EULAs, true
}

// SetEULAs sets field value
func (o *VcenterOvfLibraryItemOvfSummary) SetEULAs(v []string) {
	o.EULAs = v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemOvfSummary) GetNetworks() []string {
	if o == nil || o.Networks == nil {
		var ret []string
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemOvfSummary) GetNetworksOk() (*[]string, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemOvfSummary) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *VcenterOvfLibraryItemOvfSummary) SetNetworks(v []string) {
	o.Networks = &v
}

// GetStorageGroups returns the StorageGroups field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemOvfSummary) GetStorageGroups() []string {
	if o == nil || o.StorageGroups == nil {
		var ret []string
		return ret
	}
	return *o.StorageGroups
}

// GetStorageGroupsOk returns a tuple with the StorageGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemOvfSummary) GetStorageGroupsOk() (*[]string, bool) {
	if o == nil || o.StorageGroups == nil {
		return nil, false
	}
	return o.StorageGroups, true
}

// HasStorageGroups returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemOvfSummary) HasStorageGroups() bool {
	if o != nil && o.StorageGroups != nil {
		return true
	}

	return false
}

// SetStorageGroups gets a reference to the given []string and assigns it to the StorageGroups field.
func (o *VcenterOvfLibraryItemOvfSummary) SetStorageGroups(v []string) {
	o.StorageGroups = &v
}

// GetAdditionalParams returns the AdditionalParams field value if set, zero value otherwise.
func (o *VcenterOvfLibraryItemOvfSummary) GetAdditionalParams() []map[string]interface{} {
	if o == nil || o.AdditionalParams == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.AdditionalParams
}

// GetAdditionalParamsOk returns a tuple with the AdditionalParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterOvfLibraryItemOvfSummary) GetAdditionalParamsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.AdditionalParams == nil {
		return nil, false
	}
	return o.AdditionalParams, true
}

// HasAdditionalParams returns a boolean if a field has been set.
func (o *VcenterOvfLibraryItemOvfSummary) HasAdditionalParams() bool {
	if o != nil && o.AdditionalParams != nil {
		return true
	}

	return false
}

// SetAdditionalParams gets a reference to the given []map[string]interface{} and assigns it to the AdditionalParams field.
func (o *VcenterOvfLibraryItemOvfSummary) SetAdditionalParams(v []map[string]interface{}) {
	o.AdditionalParams = &v
}

func (o VcenterOvfLibraryItemOvfSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Annotation != nil {
		toSerialize["annotation"] = o.Annotation
	}
	if true {
		toSerialize["EULAs"] = o.EULAs
	}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	if o.StorageGroups != nil {
		toSerialize["storage_groups"] = o.StorageGroups
	}
	if o.AdditionalParams != nil {
		toSerialize["additional_params"] = o.AdditionalParams
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterOvfLibraryItemOvfSummary struct {
	value *VcenterOvfLibraryItemOvfSummary
	isSet bool
}

func (v NullableVcenterOvfLibraryItemOvfSummary) Get() *VcenterOvfLibraryItemOvfSummary {
	return v.value
}

func (v *NullableVcenterOvfLibraryItemOvfSummary) Set(val *VcenterOvfLibraryItemOvfSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterOvfLibraryItemOvfSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterOvfLibraryItemOvfSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterOvfLibraryItemOvfSummary(val *VcenterOvfLibraryItemOvfSummary) *NullableVcenterOvfLibraryItemOvfSummary {
	return &NullableVcenterOvfLibraryItemOvfSummary{value: val, isSet: true}
}

func (v NullableVcenterOvfLibraryItemOvfSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterOvfLibraryItemOvfSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


