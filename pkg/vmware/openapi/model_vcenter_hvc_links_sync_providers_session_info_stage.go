/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterHvcLinksSyncProvidersSessionInfoStage The {@name Stage} {@term structure} defines the different stages of Sync. *Warning:* This enumeration is available as Technology Preview. These are early access APIs provided to test, automate and provide feedback on the feature. Since this can change based on feedback, VMware does not guarantee backwards compatibility and recommends against using them in production environments. Some Technology Preview APIs might only be applicable to specific environments.
type VcenterHvcLinksSyncProvidersSessionInfoStage string

// List of vcenter.hvc.links.sync.providers.session_info.stage
const (
	VCENTERHVCLINKSSYNCPROVIDERSSESSIONINFOSTAGE_CHANGE_DETECTION VcenterHvcLinksSyncProvidersSessionInfoStage = "CHANGE_DETECTION"
	VCENTERHVCLINKSSYNCPROVIDERSSESSIONINFOSTAGE_CHANGE_ENUMERATION VcenterHvcLinksSyncProvidersSessionInfoStage = "CHANGE_ENUMERATION"
	VCENTERHVCLINKSSYNCPROVIDERSSESSIONINFOSTAGE_CHANGE_APPLICATION VcenterHvcLinksSyncProvidersSessionInfoStage = "CHANGE_APPLICATION"
	VCENTERHVCLINKSSYNCPROVIDERSSESSIONINFOSTAGE_COMPLETED VcenterHvcLinksSyncProvidersSessionInfoStage = "COMPLETED"
	VCENTERHVCLINKSSYNCPROVIDERSSESSIONINFOSTAGE_FAILED VcenterHvcLinksSyncProvidersSessionInfoStage = "FAILED"
	VCENTERHVCLINKSSYNCPROVIDERSSESSIONINFOSTAGE_WAITING VcenterHvcLinksSyncProvidersSessionInfoStage = "WAITING"
)

// All allowed values of VcenterHvcLinksSyncProvidersSessionInfoStage enum
var AllowedVcenterHvcLinksSyncProvidersSessionInfoStageEnumValues = []VcenterHvcLinksSyncProvidersSessionInfoStage{
	"CHANGE_DETECTION",
	"CHANGE_ENUMERATION",
	"CHANGE_APPLICATION",
	"COMPLETED",
	"FAILED",
	"WAITING",
}

func (v *VcenterHvcLinksSyncProvidersSessionInfoStage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterHvcLinksSyncProvidersSessionInfoStage(value)
	for _, existing := range AllowedVcenterHvcLinksSyncProvidersSessionInfoStageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterHvcLinksSyncProvidersSessionInfoStage", value)
}

// NewVcenterHvcLinksSyncProvidersSessionInfoStageFromValue returns a pointer to a valid VcenterHvcLinksSyncProvidersSessionInfoStage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterHvcLinksSyncProvidersSessionInfoStageFromValue(v string) (*VcenterHvcLinksSyncProvidersSessionInfoStage, error) {
	ev := VcenterHvcLinksSyncProvidersSessionInfoStage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterHvcLinksSyncProvidersSessionInfoStage: valid values are %v", v, AllowedVcenterHvcLinksSyncProvidersSessionInfoStageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterHvcLinksSyncProvidersSessionInfoStage) IsValid() bool {
	for _, existing := range AllowedVcenterHvcLinksSyncProvidersSessionInfoStageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.hvc.links.sync.providers.session_info.stage value
func (v VcenterHvcLinksSyncProvidersSessionInfoStage) Ptr() *VcenterHvcLinksSyncProvidersSessionInfoStage {
	return &v
}

type NullableVcenterHvcLinksSyncProvidersSessionInfoStage struct {
	value *VcenterHvcLinksSyncProvidersSessionInfoStage
	isSet bool
}

func (v NullableVcenterHvcLinksSyncProvidersSessionInfoStage) Get() *VcenterHvcLinksSyncProvidersSessionInfoStage {
	return v.value
}

func (v *NullableVcenterHvcLinksSyncProvidersSessionInfoStage) Set(val *VcenterHvcLinksSyncProvidersSessionInfoStage) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterHvcLinksSyncProvidersSessionInfoStage) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterHvcLinksSyncProvidersSessionInfoStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterHvcLinksSyncProvidersSessionInfoStage(val *VcenterHvcLinksSyncProvidersSessionInfoStage) *NullableVcenterHvcLinksSyncProvidersSessionInfoStage {
	return &NullableVcenterHvcLinksSyncProvidersSessionInfoStage{value: val, isSet: true}
}

func (v NullableVcenterHvcLinksSyncProvidersSessionInfoStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterHvcLinksSyncProvidersSessionInfoStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

