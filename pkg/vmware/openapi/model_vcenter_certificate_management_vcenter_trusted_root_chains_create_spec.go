/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec struct for VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec
type VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec struct {
	CertChain VcenterCertificateManagementX509CertChain `json:"cert_chain"`
	// Unique identifier for this trusted root. Client can specify at creation as long as it is unique, otherwise one will be generated. An example of a client providing the identifier would be if this trusted root is associated with a VC trust. In this case the identifier would be the domain id. A unique id will be generated if not given.
	Chain *string `json:"chain,omitempty"`
}

// NewVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec instantiates a new VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec(certChain VcenterCertificateManagementX509CertChain) *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec {
	this := VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec{}
	this.CertChain = certChain
	return &this
}

// NewVcenterCertificateManagementVcenterTrustedRootChainsCreateSpecWithDefaults instantiates a new VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCertificateManagementVcenterTrustedRootChainsCreateSpecWithDefaults() *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec {
	this := VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec{}
	return &this
}

// GetCertChain returns the CertChain field value
func (o *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) GetCertChain() VcenterCertificateManagementX509CertChain {
	if o == nil {
		var ret VcenterCertificateManagementX509CertChain
		return ret
	}

	return o.CertChain
}

// GetCertChainOk returns a tuple with the CertChain field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) GetCertChainOk() (*VcenterCertificateManagementX509CertChain, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CertChain, true
}

// SetCertChain sets field value
func (o *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) SetCertChain(v VcenterCertificateManagementX509CertChain) {
	o.CertChain = v
}

// GetChain returns the Chain field value if set, zero value otherwise.
func (o *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) GetChain() string {
	if o == nil || o.Chain == nil {
		var ret string
		return ret
	}
	return *o.Chain
}

// GetChainOk returns a tuple with the Chain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) GetChainOk() (*string, bool) {
	if o == nil || o.Chain == nil {
		return nil, false
	}
	return o.Chain, true
}

// HasChain returns a boolean if a field has been set.
func (o *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) HasChain() bool {
	if o != nil && o.Chain != nil {
		return true
	}

	return false
}

// SetChain gets a reference to the given string and assigns it to the Chain field.
func (o *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) SetChain(v string) {
	o.Chain = &v
}

func (o VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cert_chain"] = o.CertChain
	}
	if o.Chain != nil {
		toSerialize["chain"] = o.Chain
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec struct {
	value *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec
	isSet bool
}

func (v NullableVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) Get() *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec {
	return v.value
}

func (v *NullableVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) Set(val *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec(val *VcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) *NullableVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec {
	return &NullableVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCertificateManagementVcenterTrustedRootChainsCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


