/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmConsoleTicketsSummary struct for VcenterVmConsoleTicketsSummary
type VcenterVmConsoleTicketsSummary struct {
	// Console ticket URI
	Ticket string `json:"ticket"`
}

// NewVcenterVmConsoleTicketsSummary instantiates a new VcenterVmConsoleTicketsSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmConsoleTicketsSummary(ticket string) *VcenterVmConsoleTicketsSummary {
	this := VcenterVmConsoleTicketsSummary{}
	this.Ticket = ticket
	return &this
}

// NewVcenterVmConsoleTicketsSummaryWithDefaults instantiates a new VcenterVmConsoleTicketsSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmConsoleTicketsSummaryWithDefaults() *VcenterVmConsoleTicketsSummary {
	this := VcenterVmConsoleTicketsSummary{}
	return &this
}

// GetTicket returns the Ticket field value
func (o *VcenterVmConsoleTicketsSummary) GetTicket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value
// and a boolean to check if the value has been set.
func (o *VcenterVmConsoleTicketsSummary) GetTicketOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ticket, true
}

// SetTicket sets field value
func (o *VcenterVmConsoleTicketsSummary) SetTicket(v string) {
	o.Ticket = v
}

func (o VcenterVmConsoleTicketsSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ticket"] = o.Ticket
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmConsoleTicketsSummary struct {
	value *VcenterVmConsoleTicketsSummary
	isSet bool
}

func (v NullableVcenterVmConsoleTicketsSummary) Get() *VcenterVmConsoleTicketsSummary {
	return v.value
}

func (v *NullableVcenterVmConsoleTicketsSummary) Set(val *VcenterVmConsoleTicketsSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmConsoleTicketsSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmConsoleTicketsSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmConsoleTicketsSummary(val *VcenterVmConsoleTicketsSummary) *NullableVcenterVmConsoleTicketsSummary {
	return &NullableVcenterVmConsoleTicketsSummary{value: val, isSet: true}
}

func (v NullableVcenterVmConsoleTicketsSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmConsoleTicketsSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


