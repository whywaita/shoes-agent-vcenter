/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterLcmDiscoveryProductCatalogSummary struct for VcenterLcmDiscoveryProductCatalogSummary
type VcenterLcmDiscoveryProductCatalogSummary struct {
	// A product name that the customer is aware of.
	Name string `json:"name"`
	// List of versions the customer can select from.
	Versions []string `json:"versions"`
}

// NewVcenterLcmDiscoveryProductCatalogSummary instantiates a new VcenterLcmDiscoveryProductCatalogSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterLcmDiscoveryProductCatalogSummary(name string, versions []string) *VcenterLcmDiscoveryProductCatalogSummary {
	this := VcenterLcmDiscoveryProductCatalogSummary{}
	this.Name = name
	this.Versions = versions
	return &this
}

// NewVcenterLcmDiscoveryProductCatalogSummaryWithDefaults instantiates a new VcenterLcmDiscoveryProductCatalogSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterLcmDiscoveryProductCatalogSummaryWithDefaults() *VcenterLcmDiscoveryProductCatalogSummary {
	this := VcenterLcmDiscoveryProductCatalogSummary{}
	return &this
}

// GetName returns the Name field value
func (o *VcenterLcmDiscoveryProductCatalogSummary) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterLcmDiscoveryProductCatalogSummary) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterLcmDiscoveryProductCatalogSummary) SetName(v string) {
	o.Name = v
}

// GetVersions returns the Versions field value
func (o *VcenterLcmDiscoveryProductCatalogSummary) GetVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *VcenterLcmDiscoveryProductCatalogSummary) GetVersionsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Versions, true
}

// SetVersions sets field value
func (o *VcenterLcmDiscoveryProductCatalogSummary) SetVersions(v []string) {
	o.Versions = v
}

func (o VcenterLcmDiscoveryProductCatalogSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["versions"] = o.Versions
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterLcmDiscoveryProductCatalogSummary struct {
	value *VcenterLcmDiscoveryProductCatalogSummary
	isSet bool
}

func (v NullableVcenterLcmDiscoveryProductCatalogSummary) Get() *VcenterLcmDiscoveryProductCatalogSummary {
	return v.value
}

func (v *NullableVcenterLcmDiscoveryProductCatalogSummary) Set(val *VcenterLcmDiscoveryProductCatalogSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterLcmDiscoveryProductCatalogSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterLcmDiscoveryProductCatalogSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterLcmDiscoveryProductCatalogSummary(val *VcenterLcmDiscoveryProductCatalogSummary) *NullableVcenterLcmDiscoveryProductCatalogSummary {
	return &NullableVcenterLcmDiscoveryProductCatalogSummary{value: val, isSet: true}
}

func (v NullableVcenterLcmDiscoveryProductCatalogSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterLcmDiscoveryProductCatalogSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


