/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec struct for VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec
type VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec struct {
	SupervisorPrimaryWorkloadNetwork VcenterNamespaceManagementNetworksCreateSpec `json:"supervisor_primary_workload_network"`
	// CreateSpecs structurees for additional list of vSphere Namespaces networks to be associated with this cluster.
	NetworkList *[]VcenterNamespaceManagementNetworksCreateSpec `json:"network_list,omitempty"`
}

// NewVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec instantiates a new VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec(supervisorPrimaryWorkloadNetwork VcenterNamespaceManagementNetworksCreateSpec) *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec {
	this := VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec{}
	this.SupervisorPrimaryWorkloadNetwork = supervisorPrimaryWorkloadNetwork
	return &this
}

// NewVcenterNamespaceManagementClustersWorkloadNetworksEnableSpecWithDefaults instantiates a new VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClustersWorkloadNetworksEnableSpecWithDefaults() *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec {
	this := VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec{}
	return &this
}

// GetSupervisorPrimaryWorkloadNetwork returns the SupervisorPrimaryWorkloadNetwork field value
func (o *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) GetSupervisorPrimaryWorkloadNetwork() VcenterNamespaceManagementNetworksCreateSpec {
	if o == nil {
		var ret VcenterNamespaceManagementNetworksCreateSpec
		return ret
	}

	return o.SupervisorPrimaryWorkloadNetwork
}

// GetSupervisorPrimaryWorkloadNetworkOk returns a tuple with the SupervisorPrimaryWorkloadNetwork field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) GetSupervisorPrimaryWorkloadNetworkOk() (*VcenterNamespaceManagementNetworksCreateSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupervisorPrimaryWorkloadNetwork, true
}

// SetSupervisorPrimaryWorkloadNetwork sets field value
func (o *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) SetSupervisorPrimaryWorkloadNetwork(v VcenterNamespaceManagementNetworksCreateSpec) {
	o.SupervisorPrimaryWorkloadNetwork = v
}

// GetNetworkList returns the NetworkList field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) GetNetworkList() []VcenterNamespaceManagementNetworksCreateSpec {
	if o == nil || o.NetworkList == nil {
		var ret []VcenterNamespaceManagementNetworksCreateSpec
		return ret
	}
	return *o.NetworkList
}

// GetNetworkListOk returns a tuple with the NetworkList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) GetNetworkListOk() (*[]VcenterNamespaceManagementNetworksCreateSpec, bool) {
	if o == nil || o.NetworkList == nil {
		return nil, false
	}
	return o.NetworkList, true
}

// HasNetworkList returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) HasNetworkList() bool {
	if o != nil && o.NetworkList != nil {
		return true
	}

	return false
}

// SetNetworkList gets a reference to the given []VcenterNamespaceManagementNetworksCreateSpec and assigns it to the NetworkList field.
func (o *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) SetNetworkList(v []VcenterNamespaceManagementNetworksCreateSpec) {
	o.NetworkList = &v
}

func (o VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["supervisor_primary_workload_network"] = o.SupervisorPrimaryWorkloadNetwork
	}
	if o.NetworkList != nil {
		toSerialize["network_list"] = o.NetworkList
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec struct {
	value *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) Get() *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) Set(val *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec(val *VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) *NullableVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec {
	return &NullableVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersWorkloadNetworksEnableSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


