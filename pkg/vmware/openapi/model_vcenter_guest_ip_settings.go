/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestIPSettings struct for VcenterGuestIPSettings
type VcenterGuestIPSettings struct {
	Ipv4 *VcenterGuestIpv4 `json:"ipv4,omitempty"`
	Ipv6 *VcenterGuestIpv6 `json:"ipv6,omitempty"`
	Windows *VcenterGuestWindowsNetworkAdapterSettings `json:"windows,omitempty"`
}

// NewVcenterGuestIPSettings instantiates a new VcenterGuestIPSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestIPSettings() *VcenterGuestIPSettings {
	this := VcenterGuestIPSettings{}
	return &this
}

// NewVcenterGuestIPSettingsWithDefaults instantiates a new VcenterGuestIPSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestIPSettingsWithDefaults() *VcenterGuestIPSettings {
	this := VcenterGuestIPSettings{}
	return &this
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *VcenterGuestIPSettings) GetIpv4() VcenterGuestIpv4 {
	if o == nil || o.Ipv4 == nil {
		var ret VcenterGuestIpv4
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestIPSettings) GetIpv4Ok() (*VcenterGuestIpv4, bool) {
	if o == nil || o.Ipv4 == nil {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *VcenterGuestIPSettings) HasIpv4() bool {
	if o != nil && o.Ipv4 != nil {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given VcenterGuestIpv4 and assigns it to the Ipv4 field.
func (o *VcenterGuestIPSettings) SetIpv4(v VcenterGuestIpv4) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *VcenterGuestIPSettings) GetIpv6() VcenterGuestIpv6 {
	if o == nil || o.Ipv6 == nil {
		var ret VcenterGuestIpv6
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestIPSettings) GetIpv6Ok() (*VcenterGuestIpv6, bool) {
	if o == nil || o.Ipv6 == nil {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *VcenterGuestIPSettings) HasIpv6() bool {
	if o != nil && o.Ipv6 != nil {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given VcenterGuestIpv6 and assigns it to the Ipv6 field.
func (o *VcenterGuestIPSettings) SetIpv6(v VcenterGuestIpv6) {
	o.Ipv6 = &v
}

// GetWindows returns the Windows field value if set, zero value otherwise.
func (o *VcenterGuestIPSettings) GetWindows() VcenterGuestWindowsNetworkAdapterSettings {
	if o == nil || o.Windows == nil {
		var ret VcenterGuestWindowsNetworkAdapterSettings
		return ret
	}
	return *o.Windows
}

// GetWindowsOk returns a tuple with the Windows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestIPSettings) GetWindowsOk() (*VcenterGuestWindowsNetworkAdapterSettings, bool) {
	if o == nil || o.Windows == nil {
		return nil, false
	}
	return o.Windows, true
}

// HasWindows returns a boolean if a field has been set.
func (o *VcenterGuestIPSettings) HasWindows() bool {
	if o != nil && o.Windows != nil {
		return true
	}

	return false
}

// SetWindows gets a reference to the given VcenterGuestWindowsNetworkAdapterSettings and assigns it to the Windows field.
func (o *VcenterGuestIPSettings) SetWindows(v VcenterGuestWindowsNetworkAdapterSettings) {
	o.Windows = &v
}

func (o VcenterGuestIPSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ipv4 != nil {
		toSerialize["ipv4"] = o.Ipv4
	}
	if o.Ipv6 != nil {
		toSerialize["ipv6"] = o.Ipv6
	}
	if o.Windows != nil {
		toSerialize["windows"] = o.Windows
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestIPSettings struct {
	value *VcenterGuestIPSettings
	isSet bool
}

func (v NullableVcenterGuestIPSettings) Get() *VcenterGuestIPSettings {
	return v.value
}

func (v *NullableVcenterGuestIPSettings) Set(val *VcenterGuestIPSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestIPSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestIPSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestIPSettings(val *VcenterGuestIPSettings) *NullableVcenterGuestIPSettings {
	return &NullableVcenterGuestIPSettings{value: val, isSet: true}
}

func (v NullableVcenterGuestIPSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestIPSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


