/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec struct for VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec
type VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec struct {
	// Name of the virtual machine to check out of the library item.
	Name *string `json:"name,omitempty"`
	Placement *VcenterVmTemplateLibraryItemsCheckOutsPlacementSpec `json:"placement,omitempty"`
	// Specifies whether the virtual machine should be powered on after check out.
	PoweredOn *bool `json:"powered_on,omitempty"`
}

// NewVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec instantiates a new VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec() *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec {
	this := VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec{}
	return &this
}

// NewVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpecWithDefaults instantiates a new VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpecWithDefaults() *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec {
	this := VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) SetName(v string) {
	o.Name = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) GetPlacement() VcenterVmTemplateLibraryItemsCheckOutsPlacementSpec {
	if o == nil || o.Placement == nil {
		var ret VcenterVmTemplateLibraryItemsCheckOutsPlacementSpec
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) GetPlacementOk() (*VcenterVmTemplateLibraryItemsCheckOutsPlacementSpec, bool) {
	if o == nil || o.Placement == nil {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) HasPlacement() bool {
	if o != nil && o.Placement != nil {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given VcenterVmTemplateLibraryItemsCheckOutsPlacementSpec and assigns it to the Placement field.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) SetPlacement(v VcenterVmTemplateLibraryItemsCheckOutsPlacementSpec) {
	o.Placement = &v
}

// GetPoweredOn returns the PoweredOn field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) GetPoweredOn() bool {
	if o == nil || o.PoweredOn == nil {
		var ret bool
		return ret
	}
	return *o.PoweredOn
}

// GetPoweredOnOk returns a tuple with the PoweredOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) GetPoweredOnOk() (*bool, bool) {
	if o == nil || o.PoweredOn == nil {
		return nil, false
	}
	return o.PoweredOn, true
}

// HasPoweredOn returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) HasPoweredOn() bool {
	if o != nil && o.PoweredOn != nil {
		return true
	}

	return false
}

// SetPoweredOn gets a reference to the given bool and assigns it to the PoweredOn field.
func (o *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) SetPoweredOn(v bool) {
	o.PoweredOn = &v
}

func (o VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	if o.PoweredOn != nil {
		toSerialize["powered_on"] = o.PoweredOn
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec struct {
	value *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) Get() *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) Set(val *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec(val *VcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) *NullableVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec {
	return &NullableVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsCheckOutsCheckOutSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


