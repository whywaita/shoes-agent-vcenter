/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestHostnameGenerator struct for VcenterGuestHostnameGenerator
type VcenterGuestHostnameGenerator struct {
	Type VcenterGuestHostnameGeneratorType `json:"type"`
	// The virtual machine name specified by the client. This field is optional and it is only relevant when the value of HostnameGenerator.type is FIXED.
	FixedName *string `json:"fixed_name,omitempty"`
	// Base prefix, to which a unique number is appended. This field is optional and it is only relevant when the value of HostnameGenerator.type is PREFIX.
	Prefix *string `json:"prefix,omitempty"`
}

// NewVcenterGuestHostnameGenerator instantiates a new VcenterGuestHostnameGenerator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestHostnameGenerator(type_ VcenterGuestHostnameGeneratorType) *VcenterGuestHostnameGenerator {
	this := VcenterGuestHostnameGenerator{}
	this.Type = type_
	return &this
}

// NewVcenterGuestHostnameGeneratorWithDefaults instantiates a new VcenterGuestHostnameGenerator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestHostnameGeneratorWithDefaults() *VcenterGuestHostnameGenerator {
	this := VcenterGuestHostnameGenerator{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterGuestHostnameGenerator) GetType() VcenterGuestHostnameGeneratorType {
	if o == nil {
		var ret VcenterGuestHostnameGeneratorType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterGuestHostnameGenerator) GetTypeOk() (*VcenterGuestHostnameGeneratorType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterGuestHostnameGenerator) SetType(v VcenterGuestHostnameGeneratorType) {
	o.Type = v
}

// GetFixedName returns the FixedName field value if set, zero value otherwise.
func (o *VcenterGuestHostnameGenerator) GetFixedName() string {
	if o == nil || o.FixedName == nil {
		var ret string
		return ret
	}
	return *o.FixedName
}

// GetFixedNameOk returns a tuple with the FixedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestHostnameGenerator) GetFixedNameOk() (*string, bool) {
	if o == nil || o.FixedName == nil {
		return nil, false
	}
	return o.FixedName, true
}

// HasFixedName returns a boolean if a field has been set.
func (o *VcenterGuestHostnameGenerator) HasFixedName() bool {
	if o != nil && o.FixedName != nil {
		return true
	}

	return false
}

// SetFixedName gets a reference to the given string and assigns it to the FixedName field.
func (o *VcenterGuestHostnameGenerator) SetFixedName(v string) {
	o.FixedName = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *VcenterGuestHostnameGenerator) GetPrefix() string {
	if o == nil || o.Prefix == nil {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestHostnameGenerator) GetPrefixOk() (*string, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *VcenterGuestHostnameGenerator) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *VcenterGuestHostnameGenerator) SetPrefix(v string) {
	o.Prefix = &v
}

func (o VcenterGuestHostnameGenerator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.FixedName != nil {
		toSerialize["fixed_name"] = o.FixedName
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestHostnameGenerator struct {
	value *VcenterGuestHostnameGenerator
	isSet bool
}

func (v NullableVcenterGuestHostnameGenerator) Get() *VcenterGuestHostnameGenerator {
	return v.value
}

func (v *NullableVcenterGuestHostnameGenerator) Set(val *VcenterGuestHostnameGenerator) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestHostnameGenerator) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestHostnameGenerator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestHostnameGenerator(val *VcenterGuestHostnameGenerator) *NullableVcenterGuestHostnameGenerator {
	return &NullableVcenterGuestHostnameGenerator{value: val, isSet: true}
}

func (v NullableVcenterGuestHostnameGenerator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestHostnameGenerator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


