/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespacesInstancesSetSpec struct for VcenterNamespacesInstancesSetSpec
type VcenterNamespacesInstancesSetSpec struct {
	// Description for the namespace. If unset, the description of the namespace will be cleared.
	Description *string `json:"description,omitempty"`
	// Resource quota for the namespace. This will replace the existing resource constraints on the namespace in entirety. Refer to vcenter.namespace_management.NamespaceResourceOptions.Info#createResourceQuotaType and use vcenter.namespace_management.NamespaceResourceOptions#get for retrieving the type for the value for this field. For an example of this, see ResourceQuotaOptionsV1. If unset, the resource constraints on the namespace will be cleared.
	ResourceSpec *map[string]interface{} `json:"resource_spec,omitempty"`
	// Access control associated with the namespace. If unset, the existing access controls on the namespace will be removed and users will not be able to access this namespace to create new pods. Existing pods from users will continue to run.
	AccessList *[]VcenterNamespacesInstancesAccess `json:"access_list,omitempty"`
	// Storage associated with the namespace. If unset, the existing storage policies will be disassociated with the namespace and existing limits will be cleared. Pods which are already using persistent storage from the earlier version of storage policies will be able to access them till the datastores are attached to the worker nodes.
	StorageSpecs *[]VcenterNamespacesInstancesStorageSpec `json:"storage_specs,omitempty"`
	VmServiceSpec *VcenterNamespacesInstancesVMServiceSpec `json:"vm_service_spec,omitempty"`
}

// NewVcenterNamespacesInstancesSetSpec instantiates a new VcenterNamespacesInstancesSetSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespacesInstancesSetSpec() *VcenterNamespacesInstancesSetSpec {
	this := VcenterNamespacesInstancesSetSpec{}
	return &this
}

// NewVcenterNamespacesInstancesSetSpecWithDefaults instantiates a new VcenterNamespacesInstancesSetSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespacesInstancesSetSpecWithDefaults() *VcenterNamespacesInstancesSetSpec {
	this := VcenterNamespacesInstancesSetSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesSetSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesSetSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesSetSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VcenterNamespacesInstancesSetSpec) SetDescription(v string) {
	o.Description = &v
}

// GetResourceSpec returns the ResourceSpec field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesSetSpec) GetResourceSpec() map[string]interface{} {
	if o == nil || o.ResourceSpec == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ResourceSpec
}

// GetResourceSpecOk returns a tuple with the ResourceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesSetSpec) GetResourceSpecOk() (*map[string]interface{}, bool) {
	if o == nil || o.ResourceSpec == nil {
		return nil, false
	}
	return o.ResourceSpec, true
}

// HasResourceSpec returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesSetSpec) HasResourceSpec() bool {
	if o != nil && o.ResourceSpec != nil {
		return true
	}

	return false
}

// SetResourceSpec gets a reference to the given map[string]interface{} and assigns it to the ResourceSpec field.
func (o *VcenterNamespacesInstancesSetSpec) SetResourceSpec(v map[string]interface{}) {
	o.ResourceSpec = &v
}

// GetAccessList returns the AccessList field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesSetSpec) GetAccessList() []VcenterNamespacesInstancesAccess {
	if o == nil || o.AccessList == nil {
		var ret []VcenterNamespacesInstancesAccess
		return ret
	}
	return *o.AccessList
}

// GetAccessListOk returns a tuple with the AccessList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesSetSpec) GetAccessListOk() (*[]VcenterNamespacesInstancesAccess, bool) {
	if o == nil || o.AccessList == nil {
		return nil, false
	}
	return o.AccessList, true
}

// HasAccessList returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesSetSpec) HasAccessList() bool {
	if o != nil && o.AccessList != nil {
		return true
	}

	return false
}

// SetAccessList gets a reference to the given []VcenterNamespacesInstancesAccess and assigns it to the AccessList field.
func (o *VcenterNamespacesInstancesSetSpec) SetAccessList(v []VcenterNamespacesInstancesAccess) {
	o.AccessList = &v
}

// GetStorageSpecs returns the StorageSpecs field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesSetSpec) GetStorageSpecs() []VcenterNamespacesInstancesStorageSpec {
	if o == nil || o.StorageSpecs == nil {
		var ret []VcenterNamespacesInstancesStorageSpec
		return ret
	}
	return *o.StorageSpecs
}

// GetStorageSpecsOk returns a tuple with the StorageSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesSetSpec) GetStorageSpecsOk() (*[]VcenterNamespacesInstancesStorageSpec, bool) {
	if o == nil || o.StorageSpecs == nil {
		return nil, false
	}
	return o.StorageSpecs, true
}

// HasStorageSpecs returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesSetSpec) HasStorageSpecs() bool {
	if o != nil && o.StorageSpecs != nil {
		return true
	}

	return false
}

// SetStorageSpecs gets a reference to the given []VcenterNamespacesInstancesStorageSpec and assigns it to the StorageSpecs field.
func (o *VcenterNamespacesInstancesSetSpec) SetStorageSpecs(v []VcenterNamespacesInstancesStorageSpec) {
	o.StorageSpecs = &v
}

// GetVmServiceSpec returns the VmServiceSpec field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesSetSpec) GetVmServiceSpec() VcenterNamespacesInstancesVMServiceSpec {
	if o == nil || o.VmServiceSpec == nil {
		var ret VcenterNamespacesInstancesVMServiceSpec
		return ret
	}
	return *o.VmServiceSpec
}

// GetVmServiceSpecOk returns a tuple with the VmServiceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesSetSpec) GetVmServiceSpecOk() (*VcenterNamespacesInstancesVMServiceSpec, bool) {
	if o == nil || o.VmServiceSpec == nil {
		return nil, false
	}
	return o.VmServiceSpec, true
}

// HasVmServiceSpec returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesSetSpec) HasVmServiceSpec() bool {
	if o != nil && o.VmServiceSpec != nil {
		return true
	}

	return false
}

// SetVmServiceSpec gets a reference to the given VcenterNamespacesInstancesVMServiceSpec and assigns it to the VmServiceSpec field.
func (o *VcenterNamespacesInstancesSetSpec) SetVmServiceSpec(v VcenterNamespacesInstancesVMServiceSpec) {
	o.VmServiceSpec = &v
}

func (o VcenterNamespacesInstancesSetSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ResourceSpec != nil {
		toSerialize["resource_spec"] = o.ResourceSpec
	}
	if o.AccessList != nil {
		toSerialize["access_list"] = o.AccessList
	}
	if o.StorageSpecs != nil {
		toSerialize["storage_specs"] = o.StorageSpecs
	}
	if o.VmServiceSpec != nil {
		toSerialize["vm_service_spec"] = o.VmServiceSpec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespacesInstancesSetSpec struct {
	value *VcenterNamespacesInstancesSetSpec
	isSet bool
}

func (v NullableVcenterNamespacesInstancesSetSpec) Get() *VcenterNamespacesInstancesSetSpec {
	return v.value
}

func (v *NullableVcenterNamespacesInstancesSetSpec) Set(val *VcenterNamespacesInstancesSetSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesInstancesSetSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesInstancesSetSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesInstancesSetSpec(val *VcenterNamespacesInstancesSetSpec) *NullableVcenterNamespacesInstancesSetSpec {
	return &NullableVcenterNamespacesInstancesSetSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespacesInstancesSetSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesInstancesSetSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


