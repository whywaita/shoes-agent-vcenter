/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMInfoNics struct for VcenterVMInfoNics
type VcenterVMInfoNics struct {
	Key *string `json:"key,omitempty"`
	Value *VcenterVmHardwareEthernetInfo `json:"value,omitempty"`
}

// NewVcenterVMInfoNics instantiates a new VcenterVMInfoNics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMInfoNics() *VcenterVMInfoNics {
	this := VcenterVMInfoNics{}
	return &this
}

// NewVcenterVMInfoNicsWithDefaults instantiates a new VcenterVMInfoNics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMInfoNicsWithDefaults() *VcenterVMInfoNics {
	this := VcenterVMInfoNics{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *VcenterVMInfoNics) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInfoNics) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *VcenterVMInfoNics) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *VcenterVMInfoNics) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VcenterVMInfoNics) GetValue() VcenterVmHardwareEthernetInfo {
	if o == nil || o.Value == nil {
		var ret VcenterVmHardwareEthernetInfo
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInfoNics) GetValueOk() (*VcenterVmHardwareEthernetInfo, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VcenterVMInfoNics) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given VcenterVmHardwareEthernetInfo and assigns it to the Value field.
func (o *VcenterVMInfoNics) SetValue(v VcenterVmHardwareEthernetInfo) {
	o.Value = &v
}

func (o VcenterVMInfoNics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMInfoNics struct {
	value *VcenterVMInfoNics
	isSet bool
}

func (v NullableVcenterVMInfoNics) Get() *VcenterVMInfoNics {
	return v.value
}

func (v *NullableVcenterVMInfoNics) Set(val *VcenterVMInfoNics) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMInfoNics) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMInfoNics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMInfoNics(val *VcenterVMInfoNics) *NullableVcenterVMInfoNics {
	return &NullableVcenterVMInfoNics{value: val, isSet: true}
}

func (v NullableVcenterVMInfoNics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMInfoNics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


