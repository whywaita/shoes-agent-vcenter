/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterGuestDomainType The Domain.Type enumerated type defines the types of network the virtual machine should join to after the customization is completed.
type VcenterGuestDomainType string

// List of vcenter.guest.domain.type
const (
	VCENTERGUESTDOMAINTYPE_WORKGROUP VcenterGuestDomainType = "WORKGROUP"
	VCENTERGUESTDOMAINTYPE_DOMAIN VcenterGuestDomainType = "DOMAIN"
)

// All allowed values of VcenterGuestDomainType enum
var AllowedVcenterGuestDomainTypeEnumValues = []VcenterGuestDomainType{
	"WORKGROUP",
	"DOMAIN",
}

func (v *VcenterGuestDomainType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterGuestDomainType(value)
	for _, existing := range AllowedVcenterGuestDomainTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterGuestDomainType", value)
}

// NewVcenterGuestDomainTypeFromValue returns a pointer to a valid VcenterGuestDomainType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterGuestDomainTypeFromValue(v string) (*VcenterGuestDomainType, error) {
	ev := VcenterGuestDomainType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterGuestDomainType: valid values are %v", v, AllowedVcenterGuestDomainTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterGuestDomainType) IsValid() bool {
	for _, existing := range AllowedVcenterGuestDomainTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.guest.domain.type value
func (v VcenterGuestDomainType) Ptr() *VcenterGuestDomainType {
	return &v
}

type NullableVcenterGuestDomainType struct {
	value *VcenterGuestDomainType
	isSet bool
}

func (v NullableVcenterGuestDomainType) Get() *VcenterGuestDomainType {
	return v.value
}

func (v *NullableVcenterGuestDomainType) Set(val *VcenterGuestDomainType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestDomainType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestDomainType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestDomainType(val *VcenterGuestDomainType) *NullableVcenterGuestDomainType {
	return &NullableVcenterGuestDomainType{value: val, isSet: true}
}

func (v NullableVcenterGuestDomainType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestDomainType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

