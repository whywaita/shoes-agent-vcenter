/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMDiskCloneSpec struct for VcenterVMDiskCloneSpec
type VcenterVMDiskCloneSpec struct {
	// Destination datastore to clone disk. This field is currently required. In the future, if this field is unset disk will be copied to the datastore specified in the VM.ClonePlacementSpec.datastore field of VM.CloneSpec.placement. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.
	Datastore *string `json:"datastore,omitempty"`
}

// NewVcenterVMDiskCloneSpec instantiates a new VcenterVMDiskCloneSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMDiskCloneSpec() *VcenterVMDiskCloneSpec {
	this := VcenterVMDiskCloneSpec{}
	return &this
}

// NewVcenterVMDiskCloneSpecWithDefaults instantiates a new VcenterVMDiskCloneSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMDiskCloneSpecWithDefaults() *VcenterVMDiskCloneSpec {
	this := VcenterVMDiskCloneSpec{}
	return &this
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *VcenterVMDiskCloneSpec) GetDatastore() string {
	if o == nil || o.Datastore == nil {
		var ret string
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMDiskCloneSpec) GetDatastoreOk() (*string, bool) {
	if o == nil || o.Datastore == nil {
		return nil, false
	}
	return o.Datastore, true
}

// HasDatastore returns a boolean if a field has been set.
func (o *VcenterVMDiskCloneSpec) HasDatastore() bool {
	if o != nil && o.Datastore != nil {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given string and assigns it to the Datastore field.
func (o *VcenterVMDiskCloneSpec) SetDatastore(v string) {
	o.Datastore = &v
}

func (o VcenterVMDiskCloneSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Datastore != nil {
		toSerialize["datastore"] = o.Datastore
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMDiskCloneSpec struct {
	value *VcenterVMDiskCloneSpec
	isSet bool
}

func (v NullableVcenterVMDiskCloneSpec) Get() *VcenterVMDiskCloneSpec {
	return v.value
}

func (v *NullableVcenterVMDiskCloneSpec) Set(val *VcenterVMDiskCloneSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMDiskCloneSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMDiskCloneSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMDiskCloneSpec(val *VcenterVMDiskCloneSpec) *NullableVcenterVMDiskCloneSpec {
	return &NullableVcenterVMDiskCloneSpec{value: val, isSet: true}
}

func (v NullableVcenterVMDiskCloneSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMDiskCloneSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


