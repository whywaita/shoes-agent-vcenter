/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespacesNamespaceTemplatesInfo struct for VcenterNamespacesNamespaceTemplatesInfo
type VcenterNamespacesNamespaceTemplatesInfo struct {
	// Identifier for the cluster associated with namespace template. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.
	Cluster string `json:"cluster"`
	// Name of the namespace template. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate.
	Template string `json:"template"`
	// Resource quotas that this template defines. Quotas on the namespace resources. Refer to vcenter.namespace_management.NamespaceResourceOptions#get for the type of the value for this field. If unset, no resource constraints are defined in the namespace template.
	ResourceSpec *map[string]interface{} `json:"resource_spec,omitempty"`
	// Storage that this template defines and will be associated with a namespace after namespace realization.
	StorageSpecs []VcenterNamespacesInstancesStorageSpec `json:"storage_specs"`
	// vSphere Networks that this template captures and are associated with the namespace after namespace realization. This field is unset if the cluster hosting this namespace uses NSXT_CONTAINER_PLUGIN as its network provider. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.
	Networks *[]string `json:"networks,omitempty"`
	// Permissions associated with namespace template. If unset, only users with the Administrator role can use this template; for example, this template is applied to the namespace created by self-service-users with the Administrator role.
	Permissions *[]VcenterNamespacesNamespaceTemplatesSubject `json:"permissions,omitempty"`
}

// NewVcenterNamespacesNamespaceTemplatesInfo instantiates a new VcenterNamespacesNamespaceTemplatesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespacesNamespaceTemplatesInfo(cluster string, template string, storageSpecs []VcenterNamespacesInstancesStorageSpec) *VcenterNamespacesNamespaceTemplatesInfo {
	this := VcenterNamespacesNamespaceTemplatesInfo{}
	this.Cluster = cluster
	this.Template = template
	this.StorageSpecs = storageSpecs
	return &this
}

// NewVcenterNamespacesNamespaceTemplatesInfoWithDefaults instantiates a new VcenterNamespacesNamespaceTemplatesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespacesNamespaceTemplatesInfoWithDefaults() *VcenterNamespacesNamespaceTemplatesInfo {
	this := VcenterNamespacesNamespaceTemplatesInfo{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetClusterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *VcenterNamespacesNamespaceTemplatesInfo) SetCluster(v string) {
	o.Cluster = v
}

// GetTemplate returns the Template field value
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetTemplateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Template, true
}

// SetTemplate sets field value
func (o *VcenterNamespacesNamespaceTemplatesInfo) SetTemplate(v string) {
	o.Template = v
}

// GetResourceSpec returns the ResourceSpec field value if set, zero value otherwise.
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetResourceSpec() map[string]interface{} {
	if o == nil || o.ResourceSpec == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ResourceSpec
}

// GetResourceSpecOk returns a tuple with the ResourceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetResourceSpecOk() (*map[string]interface{}, bool) {
	if o == nil || o.ResourceSpec == nil {
		return nil, false
	}
	return o.ResourceSpec, true
}

// HasResourceSpec returns a boolean if a field has been set.
func (o *VcenterNamespacesNamespaceTemplatesInfo) HasResourceSpec() bool {
	if o != nil && o.ResourceSpec != nil {
		return true
	}

	return false
}

// SetResourceSpec gets a reference to the given map[string]interface{} and assigns it to the ResourceSpec field.
func (o *VcenterNamespacesNamespaceTemplatesInfo) SetResourceSpec(v map[string]interface{}) {
	o.ResourceSpec = &v
}

// GetStorageSpecs returns the StorageSpecs field value
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetStorageSpecs() []VcenterNamespacesInstancesStorageSpec {
	if o == nil {
		var ret []VcenterNamespacesInstancesStorageSpec
		return ret
	}

	return o.StorageSpecs
}

// GetStorageSpecsOk returns a tuple with the StorageSpecs field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetStorageSpecsOk() (*[]VcenterNamespacesInstancesStorageSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StorageSpecs, true
}

// SetStorageSpecs sets field value
func (o *VcenterNamespacesNamespaceTemplatesInfo) SetStorageSpecs(v []VcenterNamespacesInstancesStorageSpec) {
	o.StorageSpecs = v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetNetworks() []string {
	if o == nil || o.Networks == nil {
		var ret []string
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetNetworksOk() (*[]string, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *VcenterNamespacesNamespaceTemplatesInfo) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *VcenterNamespacesNamespaceTemplatesInfo) SetNetworks(v []string) {
	o.Networks = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetPermissions() []VcenterNamespacesNamespaceTemplatesSubject {
	if o == nil || o.Permissions == nil {
		var ret []VcenterNamespacesNamespaceTemplatesSubject
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesInfo) GetPermissionsOk() (*[]VcenterNamespacesNamespaceTemplatesSubject, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *VcenterNamespacesNamespaceTemplatesInfo) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []VcenterNamespacesNamespaceTemplatesSubject and assigns it to the Permissions field.
func (o *VcenterNamespacesNamespaceTemplatesInfo) SetPermissions(v []VcenterNamespacesNamespaceTemplatesSubject) {
	o.Permissions = &v
}

func (o VcenterNamespacesNamespaceTemplatesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cluster"] = o.Cluster
	}
	if true {
		toSerialize["template"] = o.Template
	}
	if o.ResourceSpec != nil {
		toSerialize["resource_spec"] = o.ResourceSpec
	}
	if true {
		toSerialize["storage_specs"] = o.StorageSpecs
	}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespacesNamespaceTemplatesInfo struct {
	value *VcenterNamespacesNamespaceTemplatesInfo
	isSet bool
}

func (v NullableVcenterNamespacesNamespaceTemplatesInfo) Get() *VcenterNamespacesNamespaceTemplatesInfo {
	return v.value
}

func (v *NullableVcenterNamespacesNamespaceTemplatesInfo) Set(val *VcenterNamespacesNamespaceTemplatesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesNamespaceTemplatesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesNamespaceTemplatesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesNamespaceTemplatesInfo(val *VcenterNamespacesNamespaceTemplatesInfo) *NullableVcenterNamespacesNamespaceTemplatesInfo {
	return &NullableVcenterNamespacesNamespaceTemplatesInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespacesNamespaceTemplatesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesNamespaceTemplatesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


