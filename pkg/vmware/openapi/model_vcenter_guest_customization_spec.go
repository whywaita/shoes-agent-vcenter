/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestCustomizationSpec struct for VcenterGuestCustomizationSpec
type VcenterGuestCustomizationSpec struct {
	ConfigurationSpec VcenterGuestConfigurationSpec `json:"configuration_spec"`
	GlobalDNSSettings VcenterGuestGlobalDNSSettings `json:"global_DNS_settings"`
	// IP settings that are specific to a particular virtual network adapter. The AdapterMapping structure maps a network adapter's MAC address to its IPSettings. May be empty if there are no network adapters, else should match number of network adapters configured for the VM.
	Interfaces []VcenterGuestAdapterMapping `json:"interfaces"`
}

// NewVcenterGuestCustomizationSpec instantiates a new VcenterGuestCustomizationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestCustomizationSpec(configurationSpec VcenterGuestConfigurationSpec, globalDNSSettings VcenterGuestGlobalDNSSettings, interfaces []VcenterGuestAdapterMapping) *VcenterGuestCustomizationSpec {
	this := VcenterGuestCustomizationSpec{}
	this.ConfigurationSpec = configurationSpec
	this.GlobalDNSSettings = globalDNSSettings
	this.Interfaces = interfaces
	return &this
}

// NewVcenterGuestCustomizationSpecWithDefaults instantiates a new VcenterGuestCustomizationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestCustomizationSpecWithDefaults() *VcenterGuestCustomizationSpec {
	this := VcenterGuestCustomizationSpec{}
	return &this
}

// GetConfigurationSpec returns the ConfigurationSpec field value
func (o *VcenterGuestCustomizationSpec) GetConfigurationSpec() VcenterGuestConfigurationSpec {
	if o == nil {
		var ret VcenterGuestConfigurationSpec
		return ret
	}

	return o.ConfigurationSpec
}

// GetConfigurationSpecOk returns a tuple with the ConfigurationSpec field value
// and a boolean to check if the value has been set.
func (o *VcenterGuestCustomizationSpec) GetConfigurationSpecOk() (*VcenterGuestConfigurationSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigurationSpec, true
}

// SetConfigurationSpec sets field value
func (o *VcenterGuestCustomizationSpec) SetConfigurationSpec(v VcenterGuestConfigurationSpec) {
	o.ConfigurationSpec = v
}

// GetGlobalDNSSettings returns the GlobalDNSSettings field value
func (o *VcenterGuestCustomizationSpec) GetGlobalDNSSettings() VcenterGuestGlobalDNSSettings {
	if o == nil {
		var ret VcenterGuestGlobalDNSSettings
		return ret
	}

	return o.GlobalDNSSettings
}

// GetGlobalDNSSettingsOk returns a tuple with the GlobalDNSSettings field value
// and a boolean to check if the value has been set.
func (o *VcenterGuestCustomizationSpec) GetGlobalDNSSettingsOk() (*VcenterGuestGlobalDNSSettings, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GlobalDNSSettings, true
}

// SetGlobalDNSSettings sets field value
func (o *VcenterGuestCustomizationSpec) SetGlobalDNSSettings(v VcenterGuestGlobalDNSSettings) {
	o.GlobalDNSSettings = v
}

// GetInterfaces returns the Interfaces field value
func (o *VcenterGuestCustomizationSpec) GetInterfaces() []VcenterGuestAdapterMapping {
	if o == nil {
		var ret []VcenterGuestAdapterMapping
		return ret
	}

	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value
// and a boolean to check if the value has been set.
func (o *VcenterGuestCustomizationSpec) GetInterfacesOk() (*[]VcenterGuestAdapterMapping, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Interfaces, true
}

// SetInterfaces sets field value
func (o *VcenterGuestCustomizationSpec) SetInterfaces(v []VcenterGuestAdapterMapping) {
	o.Interfaces = v
}

func (o VcenterGuestCustomizationSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["configuration_spec"] = o.ConfigurationSpec
	}
	if true {
		toSerialize["global_DNS_settings"] = o.GlobalDNSSettings
	}
	if true {
		toSerialize["interfaces"] = o.Interfaces
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestCustomizationSpec struct {
	value *VcenterGuestCustomizationSpec
	isSet bool
}

func (v NullableVcenterGuestCustomizationSpec) Get() *VcenterGuestCustomizationSpec {
	return v.value
}

func (v *NullableVcenterGuestCustomizationSpec) Set(val *VcenterGuestCustomizationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestCustomizationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestCustomizationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestCustomizationSpec(val *VcenterGuestCustomizationSpec) *NullableVcenterGuestCustomizationSpec {
	return &NullableVcenterGuestCustomizationSpec{value: val, isSet: true}
}

func (v NullableVcenterGuestCustomizationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestCustomizationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


