/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCertificateManagementVcenterTlsCsrInfo struct for VcenterCertificateManagementVcenterTlsCsrInfo
type VcenterCertificateManagementVcenterTlsCsrInfo struct {
	// Certificate Signing Request in PEM format.
	Csr string `json:"csr"`
}

// NewVcenterCertificateManagementVcenterTlsCsrInfo instantiates a new VcenterCertificateManagementVcenterTlsCsrInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCertificateManagementVcenterTlsCsrInfo(csr string) *VcenterCertificateManagementVcenterTlsCsrInfo {
	this := VcenterCertificateManagementVcenterTlsCsrInfo{}
	this.Csr = csr
	return &this
}

// NewVcenterCertificateManagementVcenterTlsCsrInfoWithDefaults instantiates a new VcenterCertificateManagementVcenterTlsCsrInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCertificateManagementVcenterTlsCsrInfoWithDefaults() *VcenterCertificateManagementVcenterTlsCsrInfo {
	this := VcenterCertificateManagementVcenterTlsCsrInfo{}
	return &this
}

// GetCsr returns the Csr field value
func (o *VcenterCertificateManagementVcenterTlsCsrInfo) GetCsr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Csr
}

// GetCsrOk returns a tuple with the Csr field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsCsrInfo) GetCsrOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Csr, true
}

// SetCsr sets field value
func (o *VcenterCertificateManagementVcenterTlsCsrInfo) SetCsr(v string) {
	o.Csr = v
}

func (o VcenterCertificateManagementVcenterTlsCsrInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["csr"] = o.Csr
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCertificateManagementVcenterTlsCsrInfo struct {
	value *VcenterCertificateManagementVcenterTlsCsrInfo
	isSet bool
}

func (v NullableVcenterCertificateManagementVcenterTlsCsrInfo) Get() *VcenterCertificateManagementVcenterTlsCsrInfo {
	return v.value
}

func (v *NullableVcenterCertificateManagementVcenterTlsCsrInfo) Set(val *VcenterCertificateManagementVcenterTlsCsrInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCertificateManagementVcenterTlsCsrInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCertificateManagementVcenterTlsCsrInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCertificateManagementVcenterTlsCsrInfo(val *VcenterCertificateManagementVcenterTlsCsrInfo) *NullableVcenterCertificateManagementVcenterTlsCsrInfo {
	return &NullableVcenterCertificateManagementVcenterTlsCsrInfo{value: val, isSet: true}
}

func (v NullableVcenterCertificateManagementVcenterTlsCsrInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCertificateManagementVcenterTlsCsrInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


