/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestNetworkingRoutesInfo struct for VcenterVmGuestNetworkingRoutesInfo
type VcenterVmGuestNetworkingRoutesInfo struct {
	// IP Address of the destination IP network. IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit specified using as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.
	Network string `json:"network"`
	// The prefix length. For IPv4 the value range is 0-32. For IPv6 prefixLength is a decimal value range 0-128. The property represents the number of contiguous, higher-order bits of the address that make up the network portion of the IP address.
	PrefixLength int64 `json:"prefix_length"`
	// Where to send the packets for this route. Unicast IP Address of the next hop router. IPv4 address is specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit specified using as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373. If unset no gateway is set for the route.
	GatewayAddress *string `json:"gateway_address,omitempty"`
	// The network interface associated with this route. This is an index into the result of Interfaces.list The index refers to the relative position of an element in a list. For example, an index of 0 refers to the first element in the list while an index of 1 refers to the second element. If unset the route is not associated with a network interface.
	InterfaceIndex *int64 `json:"interface_index,omitempty"`
}

// NewVcenterVmGuestNetworkingRoutesInfo instantiates a new VcenterVmGuestNetworkingRoutesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestNetworkingRoutesInfo(network string, prefixLength int64) *VcenterVmGuestNetworkingRoutesInfo {
	this := VcenterVmGuestNetworkingRoutesInfo{}
	this.Network = network
	this.PrefixLength = prefixLength
	return &this
}

// NewVcenterVmGuestNetworkingRoutesInfoWithDefaults instantiates a new VcenterVmGuestNetworkingRoutesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestNetworkingRoutesInfoWithDefaults() *VcenterVmGuestNetworkingRoutesInfo {
	this := VcenterVmGuestNetworkingRoutesInfo{}
	return &this
}

// GetNetwork returns the Network field value
func (o *VcenterVmGuestNetworkingRoutesInfo) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingRoutesInfo) GetNetworkOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *VcenterVmGuestNetworkingRoutesInfo) SetNetwork(v string) {
	o.Network = v
}

// GetPrefixLength returns the PrefixLength field value
func (o *VcenterVmGuestNetworkingRoutesInfo) GetPrefixLength() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingRoutesInfo) GetPrefixLengthOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PrefixLength, true
}

// SetPrefixLength sets field value
func (o *VcenterVmGuestNetworkingRoutesInfo) SetPrefixLength(v int64) {
	o.PrefixLength = v
}

// GetGatewayAddress returns the GatewayAddress field value if set, zero value otherwise.
func (o *VcenterVmGuestNetworkingRoutesInfo) GetGatewayAddress() string {
	if o == nil || o.GatewayAddress == nil {
		var ret string
		return ret
	}
	return *o.GatewayAddress
}

// GetGatewayAddressOk returns a tuple with the GatewayAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingRoutesInfo) GetGatewayAddressOk() (*string, bool) {
	if o == nil || o.GatewayAddress == nil {
		return nil, false
	}
	return o.GatewayAddress, true
}

// HasGatewayAddress returns a boolean if a field has been set.
func (o *VcenterVmGuestNetworkingRoutesInfo) HasGatewayAddress() bool {
	if o != nil && o.GatewayAddress != nil {
		return true
	}

	return false
}

// SetGatewayAddress gets a reference to the given string and assigns it to the GatewayAddress field.
func (o *VcenterVmGuestNetworkingRoutesInfo) SetGatewayAddress(v string) {
	o.GatewayAddress = &v
}

// GetInterfaceIndex returns the InterfaceIndex field value if set, zero value otherwise.
func (o *VcenterVmGuestNetworkingRoutesInfo) GetInterfaceIndex() int64 {
	if o == nil || o.InterfaceIndex == nil {
		var ret int64
		return ret
	}
	return *o.InterfaceIndex
}

// GetInterfaceIndexOk returns a tuple with the InterfaceIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestNetworkingRoutesInfo) GetInterfaceIndexOk() (*int64, bool) {
	if o == nil || o.InterfaceIndex == nil {
		return nil, false
	}
	return o.InterfaceIndex, true
}

// HasInterfaceIndex returns a boolean if a field has been set.
func (o *VcenterVmGuestNetworkingRoutesInfo) HasInterfaceIndex() bool {
	if o != nil && o.InterfaceIndex != nil {
		return true
	}

	return false
}

// SetInterfaceIndex gets a reference to the given int64 and assigns it to the InterfaceIndex field.
func (o *VcenterVmGuestNetworkingRoutesInfo) SetInterfaceIndex(v int64) {
	o.InterfaceIndex = &v
}

func (o VcenterVmGuestNetworkingRoutesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["network"] = o.Network
	}
	if true {
		toSerialize["prefix_length"] = o.PrefixLength
	}
	if o.GatewayAddress != nil {
		toSerialize["gateway_address"] = o.GatewayAddress
	}
	if o.InterfaceIndex != nil {
		toSerialize["interface_index"] = o.InterfaceIndex
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestNetworkingRoutesInfo struct {
	value *VcenterVmGuestNetworkingRoutesInfo
	isSet bool
}

func (v NullableVcenterVmGuestNetworkingRoutesInfo) Get() *VcenterVmGuestNetworkingRoutesInfo {
	return v.value
}

func (v *NullableVcenterVmGuestNetworkingRoutesInfo) Set(val *VcenterVmGuestNetworkingRoutesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestNetworkingRoutesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestNetworkingRoutesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestNetworkingRoutesInfo(val *VcenterVmGuestNetworkingRoutesInfo) *NullableVcenterVmGuestNetworkingRoutesInfo {
	return &NullableVcenterVmGuestNetworkingRoutesInfo{value: val, isSet: true}
}

func (v NullableVcenterVmGuestNetworkingRoutesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestNetworkingRoutesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


