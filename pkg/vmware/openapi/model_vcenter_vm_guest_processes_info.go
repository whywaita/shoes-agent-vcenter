/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// VcenterVmGuestProcessesInfo struct for VcenterVmGuestProcessesInfo
type VcenterVmGuestProcessesInfo struct {
	// The process name.
	Name string `json:"name"`
	// The process owner.
	Owner string `json:"owner"`
	// The full command line of the process.
	Command string `json:"command"`
	// The start time of the process.
	Started time.Time `json:"started"`
	// If the process was started using Processes.create then the process completion time will be available if queried within 5 minutes after it completes. Set if the process was started with Processes.create and has recently exited.
	Finished *time.Time `json:"finished,omitempty"`
	// If the process was started using Processes.create then the process exit code will be available if queried within 5 minutes after it completes. Set if the process was started with Processes.create and has recently exited.
	ExitCode *int64 `json:"exit_code,omitempty"`
}

// NewVcenterVmGuestProcessesInfo instantiates a new VcenterVmGuestProcessesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestProcessesInfo(name string, owner string, command string, started time.Time) *VcenterVmGuestProcessesInfo {
	this := VcenterVmGuestProcessesInfo{}
	this.Name = name
	this.Owner = owner
	this.Command = command
	this.Started = started
	return &this
}

// NewVcenterVmGuestProcessesInfoWithDefaults instantiates a new VcenterVmGuestProcessesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestProcessesInfoWithDefaults() *VcenterVmGuestProcessesInfo {
	this := VcenterVmGuestProcessesInfo{}
	return &this
}

// GetName returns the Name field value
func (o *VcenterVmGuestProcessesInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterVmGuestProcessesInfo) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value
func (o *VcenterVmGuestProcessesInfo) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesInfo) GetOwnerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *VcenterVmGuestProcessesInfo) SetOwner(v string) {
	o.Owner = v
}

// GetCommand returns the Command field value
func (o *VcenterVmGuestProcessesInfo) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesInfo) GetCommandOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *VcenterVmGuestProcessesInfo) SetCommand(v string) {
	o.Command = v
}

// GetStarted returns the Started field value
func (o *VcenterVmGuestProcessesInfo) GetStarted() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Started
}

// GetStartedOk returns a tuple with the Started field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesInfo) GetStartedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Started, true
}

// SetStarted sets field value
func (o *VcenterVmGuestProcessesInfo) SetStarted(v time.Time) {
	o.Started = v
}

// GetFinished returns the Finished field value if set, zero value otherwise.
func (o *VcenterVmGuestProcessesInfo) GetFinished() time.Time {
	if o == nil || o.Finished == nil {
		var ret time.Time
		return ret
	}
	return *o.Finished
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesInfo) GetFinishedOk() (*time.Time, bool) {
	if o == nil || o.Finished == nil {
		return nil, false
	}
	return o.Finished, true
}

// HasFinished returns a boolean if a field has been set.
func (o *VcenterVmGuestProcessesInfo) HasFinished() bool {
	if o != nil && o.Finished != nil {
		return true
	}

	return false
}

// SetFinished gets a reference to the given time.Time and assigns it to the Finished field.
func (o *VcenterVmGuestProcessesInfo) SetFinished(v time.Time) {
	o.Finished = &v
}

// GetExitCode returns the ExitCode field value if set, zero value otherwise.
func (o *VcenterVmGuestProcessesInfo) GetExitCode() int64 {
	if o == nil || o.ExitCode == nil {
		var ret int64
		return ret
	}
	return *o.ExitCode
}

// GetExitCodeOk returns a tuple with the ExitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesInfo) GetExitCodeOk() (*int64, bool) {
	if o == nil || o.ExitCode == nil {
		return nil, false
	}
	return o.ExitCode, true
}

// HasExitCode returns a boolean if a field has been set.
func (o *VcenterVmGuestProcessesInfo) HasExitCode() bool {
	if o != nil && o.ExitCode != nil {
		return true
	}

	return false
}

// SetExitCode gets a reference to the given int64 and assigns it to the ExitCode field.
func (o *VcenterVmGuestProcessesInfo) SetExitCode(v int64) {
	o.ExitCode = &v
}

func (o VcenterVmGuestProcessesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["command"] = o.Command
	}
	if true {
		toSerialize["started"] = o.Started
	}
	if o.Finished != nil {
		toSerialize["finished"] = o.Finished
	}
	if o.ExitCode != nil {
		toSerialize["exit_code"] = o.ExitCode
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestProcessesInfo struct {
	value *VcenterVmGuestProcessesInfo
	isSet bool
}

func (v NullableVcenterVmGuestProcessesInfo) Get() *VcenterVmGuestProcessesInfo {
	return v.value
}

func (v *NullableVcenterVmGuestProcessesInfo) Set(val *VcenterVmGuestProcessesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestProcessesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestProcessesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestProcessesInfo(val *VcenterVmGuestProcessesInfo) *NullableVcenterVmGuestProcessesInfo {
	return &NullableVcenterVmGuestProcessesInfo{value: val, isSet: true}
}

func (v NullableVcenterVmGuestProcessesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestProcessesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


