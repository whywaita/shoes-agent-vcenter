/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterHostFilterSpec struct for VcenterHostFilterSpec
type VcenterHostFilterSpec struct {
	// Identifiers of hosts that can match the filter. If unset or empty, hosts with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.
	Hosts *[]string `json:"hosts,omitempty"`
	// Names that hosts must have to match the filter (see Host.Summary.name). If unset or empty, hosts with any name match the filter.
	Names *[]string `json:"names,omitempty"`
	// Folders that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.
	Folders *[]string `json:"folders,omitempty"`
	// Datacenters that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.
	Datacenters *[]string `json:"datacenters,omitempty"`
	// If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter. If unset Hosts can match filter independent of whether they are part of a cluster or not. If this field is true and Host.FilterSpec.clusters os not empty, no hosts will match the filter.
	Standalone *bool `json:"standalone,omitempty"`
	// Clusters that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any cluster and hosts that are not in a cluster match the filter. If this field is not empty and Host.FilterSpec.standalone is true, no hosts will match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.
	Clusters *[]string `json:"clusters,omitempty"`
	// Connection states that a host must be in to match the filter (see Host.Summary.connection-state. If unset or empty, hosts in any connection state match the filter.
	ConnectionStates *[]VcenterHostConnectionState `json:"connection_states,omitempty"`
}

// NewVcenterHostFilterSpec instantiates a new VcenterHostFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterHostFilterSpec() *VcenterHostFilterSpec {
	this := VcenterHostFilterSpec{}
	return &this
}

// NewVcenterHostFilterSpecWithDefaults instantiates a new VcenterHostFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterHostFilterSpecWithDefaults() *VcenterHostFilterSpec {
	this := VcenterHostFilterSpec{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *VcenterHostFilterSpec) GetHosts() []string {
	if o == nil || o.Hosts == nil {
		var ret []string
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostFilterSpec) GetHostsOk() (*[]string, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *VcenterHostFilterSpec) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *VcenterHostFilterSpec) SetHosts(v []string) {
	o.Hosts = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *VcenterHostFilterSpec) GetNames() []string {
	if o == nil || o.Names == nil {
		var ret []string
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostFilterSpec) GetNamesOk() (*[]string, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *VcenterHostFilterSpec) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *VcenterHostFilterSpec) SetNames(v []string) {
	o.Names = &v
}

// GetFolders returns the Folders field value if set, zero value otherwise.
func (o *VcenterHostFilterSpec) GetFolders() []string {
	if o == nil || o.Folders == nil {
		var ret []string
		return ret
	}
	return *o.Folders
}

// GetFoldersOk returns a tuple with the Folders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostFilterSpec) GetFoldersOk() (*[]string, bool) {
	if o == nil || o.Folders == nil {
		return nil, false
	}
	return o.Folders, true
}

// HasFolders returns a boolean if a field has been set.
func (o *VcenterHostFilterSpec) HasFolders() bool {
	if o != nil && o.Folders != nil {
		return true
	}

	return false
}

// SetFolders gets a reference to the given []string and assigns it to the Folders field.
func (o *VcenterHostFilterSpec) SetFolders(v []string) {
	o.Folders = &v
}

// GetDatacenters returns the Datacenters field value if set, zero value otherwise.
func (o *VcenterHostFilterSpec) GetDatacenters() []string {
	if o == nil || o.Datacenters == nil {
		var ret []string
		return ret
	}
	return *o.Datacenters
}

// GetDatacentersOk returns a tuple with the Datacenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostFilterSpec) GetDatacentersOk() (*[]string, bool) {
	if o == nil || o.Datacenters == nil {
		return nil, false
	}
	return o.Datacenters, true
}

// HasDatacenters returns a boolean if a field has been set.
func (o *VcenterHostFilterSpec) HasDatacenters() bool {
	if o != nil && o.Datacenters != nil {
		return true
	}

	return false
}

// SetDatacenters gets a reference to the given []string and assigns it to the Datacenters field.
func (o *VcenterHostFilterSpec) SetDatacenters(v []string) {
	o.Datacenters = &v
}

// GetStandalone returns the Standalone field value if set, zero value otherwise.
func (o *VcenterHostFilterSpec) GetStandalone() bool {
	if o == nil || o.Standalone == nil {
		var ret bool
		return ret
	}
	return *o.Standalone
}

// GetStandaloneOk returns a tuple with the Standalone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostFilterSpec) GetStandaloneOk() (*bool, bool) {
	if o == nil || o.Standalone == nil {
		return nil, false
	}
	return o.Standalone, true
}

// HasStandalone returns a boolean if a field has been set.
func (o *VcenterHostFilterSpec) HasStandalone() bool {
	if o != nil && o.Standalone != nil {
		return true
	}

	return false
}

// SetStandalone gets a reference to the given bool and assigns it to the Standalone field.
func (o *VcenterHostFilterSpec) SetStandalone(v bool) {
	o.Standalone = &v
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *VcenterHostFilterSpec) GetClusters() []string {
	if o == nil || o.Clusters == nil {
		var ret []string
		return ret
	}
	return *o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostFilterSpec) GetClustersOk() (*[]string, bool) {
	if o == nil || o.Clusters == nil {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *VcenterHostFilterSpec) HasClusters() bool {
	if o != nil && o.Clusters != nil {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []string and assigns it to the Clusters field.
func (o *VcenterHostFilterSpec) SetClusters(v []string) {
	o.Clusters = &v
}

// GetConnectionStates returns the ConnectionStates field value if set, zero value otherwise.
func (o *VcenterHostFilterSpec) GetConnectionStates() []VcenterHostConnectionState {
	if o == nil || o.ConnectionStates == nil {
		var ret []VcenterHostConnectionState
		return ret
	}
	return *o.ConnectionStates
}

// GetConnectionStatesOk returns a tuple with the ConnectionStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostFilterSpec) GetConnectionStatesOk() (*[]VcenterHostConnectionState, bool) {
	if o == nil || o.ConnectionStates == nil {
		return nil, false
	}
	return o.ConnectionStates, true
}

// HasConnectionStates returns a boolean if a field has been set.
func (o *VcenterHostFilterSpec) HasConnectionStates() bool {
	if o != nil && o.ConnectionStates != nil {
		return true
	}

	return false
}

// SetConnectionStates gets a reference to the given []VcenterHostConnectionState and assigns it to the ConnectionStates field.
func (o *VcenterHostFilterSpec) SetConnectionStates(v []VcenterHostConnectionState) {
	o.ConnectionStates = &v
}

func (o VcenterHostFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	if o.Folders != nil {
		toSerialize["folders"] = o.Folders
	}
	if o.Datacenters != nil {
		toSerialize["datacenters"] = o.Datacenters
	}
	if o.Standalone != nil {
		toSerialize["standalone"] = o.Standalone
	}
	if o.Clusters != nil {
		toSerialize["clusters"] = o.Clusters
	}
	if o.ConnectionStates != nil {
		toSerialize["connection_states"] = o.ConnectionStates
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterHostFilterSpec struct {
	value *VcenterHostFilterSpec
	isSet bool
}

func (v NullableVcenterHostFilterSpec) Get() *VcenterHostFilterSpec {
	return v.value
}

func (v *NullableVcenterHostFilterSpec) Set(val *VcenterHostFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterHostFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterHostFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterHostFilterSpec(val *VcenterHostFilterSpec) *NullableVcenterHostFilterSpec {
	return &NullableVcenterHostFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterHostFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterHostFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


