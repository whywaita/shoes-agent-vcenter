/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDatastoreInfo struct for VcenterDatastoreInfo
type VcenterDatastoreInfo struct {
	// Name of the datastore.
	Name string `json:"name"`
	Type VcenterDatastoreType `json:"type"`
	// Whether or not this datastore is accessible.
	Accessible bool `json:"accessible"`
	// Available space of this datastore, in bytes.   The server periodically updates this value.  This field will be unset if the available space of this datastore is not known.
	FreeSpace *int64 `json:"free_space,omitempty"`
	// Whether or not more than one host in the datacenter has been configured with access to the datastore.
	MultipleHostAccess bool `json:"multiple_host_access"`
	// Whether or not the datastore supports thin provisioning on a per file basis. When thin provisioning is used, backing storage is lazily allocated.
	ThinProvisioningSupported bool `json:"thin_provisioning_supported"`
}

// NewVcenterDatastoreInfo instantiates a new VcenterDatastoreInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDatastoreInfo(name string, type_ VcenterDatastoreType, accessible bool, multipleHostAccess bool, thinProvisioningSupported bool) *VcenterDatastoreInfo {
	this := VcenterDatastoreInfo{}
	this.Name = name
	this.Type = type_
	this.Accessible = accessible
	this.MultipleHostAccess = multipleHostAccess
	this.ThinProvisioningSupported = thinProvisioningSupported
	return &this
}

// NewVcenterDatastoreInfoWithDefaults instantiates a new VcenterDatastoreInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDatastoreInfoWithDefaults() *VcenterDatastoreInfo {
	this := VcenterDatastoreInfo{}
	return &this
}

// GetName returns the Name field value
func (o *VcenterDatastoreInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterDatastoreInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterDatastoreInfo) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *VcenterDatastoreInfo) GetType() VcenterDatastoreType {
	if o == nil {
		var ret VcenterDatastoreType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterDatastoreInfo) GetTypeOk() (*VcenterDatastoreType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterDatastoreInfo) SetType(v VcenterDatastoreType) {
	o.Type = v
}

// GetAccessible returns the Accessible field value
func (o *VcenterDatastoreInfo) GetAccessible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Accessible
}

// GetAccessibleOk returns a tuple with the Accessible field value
// and a boolean to check if the value has been set.
func (o *VcenterDatastoreInfo) GetAccessibleOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Accessible, true
}

// SetAccessible sets field value
func (o *VcenterDatastoreInfo) SetAccessible(v bool) {
	o.Accessible = v
}

// GetFreeSpace returns the FreeSpace field value if set, zero value otherwise.
func (o *VcenterDatastoreInfo) GetFreeSpace() int64 {
	if o == nil || o.FreeSpace == nil {
		var ret int64
		return ret
	}
	return *o.FreeSpace
}

// GetFreeSpaceOk returns a tuple with the FreeSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDatastoreInfo) GetFreeSpaceOk() (*int64, bool) {
	if o == nil || o.FreeSpace == nil {
		return nil, false
	}
	return o.FreeSpace, true
}

// HasFreeSpace returns a boolean if a field has been set.
func (o *VcenterDatastoreInfo) HasFreeSpace() bool {
	if o != nil && o.FreeSpace != nil {
		return true
	}

	return false
}

// SetFreeSpace gets a reference to the given int64 and assigns it to the FreeSpace field.
func (o *VcenterDatastoreInfo) SetFreeSpace(v int64) {
	o.FreeSpace = &v
}

// GetMultipleHostAccess returns the MultipleHostAccess field value
func (o *VcenterDatastoreInfo) GetMultipleHostAccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MultipleHostAccess
}

// GetMultipleHostAccessOk returns a tuple with the MultipleHostAccess field value
// and a boolean to check if the value has been set.
func (o *VcenterDatastoreInfo) GetMultipleHostAccessOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MultipleHostAccess, true
}

// SetMultipleHostAccess sets field value
func (o *VcenterDatastoreInfo) SetMultipleHostAccess(v bool) {
	o.MultipleHostAccess = v
}

// GetThinProvisioningSupported returns the ThinProvisioningSupported field value
func (o *VcenterDatastoreInfo) GetThinProvisioningSupported() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ThinProvisioningSupported
}

// GetThinProvisioningSupportedOk returns a tuple with the ThinProvisioningSupported field value
// and a boolean to check if the value has been set.
func (o *VcenterDatastoreInfo) GetThinProvisioningSupportedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ThinProvisioningSupported, true
}

// SetThinProvisioningSupported sets field value
func (o *VcenterDatastoreInfo) SetThinProvisioningSupported(v bool) {
	o.ThinProvisioningSupported = v
}

func (o VcenterDatastoreInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["accessible"] = o.Accessible
	}
	if o.FreeSpace != nil {
		toSerialize["free_space"] = o.FreeSpace
	}
	if true {
		toSerialize["multiple_host_access"] = o.MultipleHostAccess
	}
	if true {
		toSerialize["thin_provisioning_supported"] = o.ThinProvisioningSupported
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDatastoreInfo struct {
	value *VcenterDatastoreInfo
	isSet bool
}

func (v NullableVcenterDatastoreInfo) Get() *VcenterDatastoreInfo {
	return v.value
}

func (v *NullableVcenterDatastoreInfo) Set(val *VcenterDatastoreInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDatastoreInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDatastoreInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDatastoreInfo(val *VcenterDatastoreInfo) *NullableVcenterDatastoreInfo {
	return &NullableVcenterDatastoreInfo{value: val, isSet: true}
}

func (v NullableVcenterDatastoreInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDatastoreInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


