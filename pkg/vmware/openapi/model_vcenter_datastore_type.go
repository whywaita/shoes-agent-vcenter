/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterDatastoreType the model 'VcenterDatastoreType'
type VcenterDatastoreType string

// List of vcenter.datastore.type
const (
	VCENTERDATASTORETYPE_VMFS VcenterDatastoreType = "VMFS"
	VCENTERDATASTORETYPE_NFS VcenterDatastoreType = "NFS"
	VCENTERDATASTORETYPE_NFS41 VcenterDatastoreType = "NFS41"
	VCENTERDATASTORETYPE_CIFS VcenterDatastoreType = "CIFS"
	VCENTERDATASTORETYPE_VSAN VcenterDatastoreType = "VSAN"
	VCENTERDATASTORETYPE_VFFS VcenterDatastoreType = "VFFS"
	VCENTERDATASTORETYPE_VVOL VcenterDatastoreType = "VVOL"
)

// All allowed values of VcenterDatastoreType enum
var AllowedVcenterDatastoreTypeEnumValues = []VcenterDatastoreType{
	"VMFS",
	"NFS",
	"NFS41",
	"CIFS",
	"VSAN",
	"VFFS",
	"VVOL",
}

func (v *VcenterDatastoreType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterDatastoreType(value)
	for _, existing := range AllowedVcenterDatastoreTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterDatastoreType", value)
}

// NewVcenterDatastoreTypeFromValue returns a pointer to a valid VcenterDatastoreType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterDatastoreTypeFromValue(v string) (*VcenterDatastoreType, error) {
	ev := VcenterDatastoreType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterDatastoreType: valid values are %v", v, AllowedVcenterDatastoreTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterDatastoreType) IsValid() bool {
	for _, existing := range AllowedVcenterDatastoreTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.datastore.type value
func (v VcenterDatastoreType) Ptr() *VcenterDatastoreType {
	return &v
}

type NullableVcenterDatastoreType struct {
	value *VcenterDatastoreType
	isSet bool
}

func (v NullableVcenterDatastoreType) Get() *VcenterDatastoreType {
	return v.value
}

func (v *NullableVcenterDatastoreType) Set(val *VcenterDatastoreType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDatastoreType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDatastoreType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDatastoreType(val *VcenterDatastoreType) *NullableVcenterDatastoreType {
	return &NullableVcenterDatastoreType{value: val, isSet: true}
}

func (v NullableVcenterDatastoreType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDatastoreType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

