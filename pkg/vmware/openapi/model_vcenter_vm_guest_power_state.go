/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmGuestPowerState Possible guest power states.
type VcenterVmGuestPowerState string

// List of vcenter.vm.guest.power.state
const (
	VCENTERVMGUESTPOWERSTATE_RUNNING VcenterVmGuestPowerState = "RUNNING"
	VCENTERVMGUESTPOWERSTATE_SHUTTING_DOWN VcenterVmGuestPowerState = "SHUTTING_DOWN"
	VCENTERVMGUESTPOWERSTATE_RESETTING VcenterVmGuestPowerState = "RESETTING"
	VCENTERVMGUESTPOWERSTATE_STANDBY VcenterVmGuestPowerState = "STANDBY"
	VCENTERVMGUESTPOWERSTATE_NOT_RUNNING VcenterVmGuestPowerState = "NOT_RUNNING"
	VCENTERVMGUESTPOWERSTATE_UNAVAILABLE VcenterVmGuestPowerState = "UNAVAILABLE"
)

// All allowed values of VcenterVmGuestPowerState enum
var AllowedVcenterVmGuestPowerStateEnumValues = []VcenterVmGuestPowerState{
	"RUNNING",
	"SHUTTING_DOWN",
	"RESETTING",
	"STANDBY",
	"NOT_RUNNING",
	"UNAVAILABLE",
}

func (v *VcenterVmGuestPowerState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmGuestPowerState(value)
	for _, existing := range AllowedVcenterVmGuestPowerStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmGuestPowerState", value)
}

// NewVcenterVmGuestPowerStateFromValue returns a pointer to a valid VcenterVmGuestPowerState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmGuestPowerStateFromValue(v string) (*VcenterVmGuestPowerState, error) {
	ev := VcenterVmGuestPowerState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmGuestPowerState: valid values are %v", v, AllowedVcenterVmGuestPowerStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmGuestPowerState) IsValid() bool {
	for _, existing := range AllowedVcenterVmGuestPowerStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.guest.power.state value
func (v VcenterVmGuestPowerState) Ptr() *VcenterVmGuestPowerState {
	return &v
}

type NullableVcenterVmGuestPowerState struct {
	value *VcenterVmGuestPowerState
	isSet bool
}

func (v NullableVcenterVmGuestPowerState) Get() *VcenterVmGuestPowerState {
	return v.value
}

func (v *NullableVcenterVmGuestPowerState) Set(val *VcenterVmGuestPowerState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestPowerState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestPowerState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestPowerState(val *VcenterVmGuestPowerState) *NullableVcenterVmGuestPowerState {
	return &NullableVcenterVmGuestPowerState{value: val, isSet: true}
}

func (v NullableVcenterVmGuestPowerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestPowerState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

