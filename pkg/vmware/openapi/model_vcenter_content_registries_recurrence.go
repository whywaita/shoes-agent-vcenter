/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterContentRegistriesRecurrence The {@name Recurrence} {@term enumerated type} defines the supported values for how often to run a specific operation for a container registry.
type VcenterContentRegistriesRecurrence string

// List of vcenter.content.registries.recurrence
const (
	VCENTERCONTENTREGISTRIESRECURRENCE_NONE VcenterContentRegistriesRecurrence = "NONE"
	VCENTERCONTENTREGISTRIESRECURRENCE_DAILY VcenterContentRegistriesRecurrence = "DAILY"
	VCENTERCONTENTREGISTRIESRECURRENCE_WEEKLY VcenterContentRegistriesRecurrence = "WEEKLY"
)

// All allowed values of VcenterContentRegistriesRecurrence enum
var AllowedVcenterContentRegistriesRecurrenceEnumValues = []VcenterContentRegistriesRecurrence{
	"NONE",
	"DAILY",
	"WEEKLY",
}

func (v *VcenterContentRegistriesRecurrence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterContentRegistriesRecurrence(value)
	for _, existing := range AllowedVcenterContentRegistriesRecurrenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterContentRegistriesRecurrence", value)
}

// NewVcenterContentRegistriesRecurrenceFromValue returns a pointer to a valid VcenterContentRegistriesRecurrence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterContentRegistriesRecurrenceFromValue(v string) (*VcenterContentRegistriesRecurrence, error) {
	ev := VcenterContentRegistriesRecurrence(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterContentRegistriesRecurrence: valid values are %v", v, AllowedVcenterContentRegistriesRecurrenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterContentRegistriesRecurrence) IsValid() bool {
	for _, existing := range AllowedVcenterContentRegistriesRecurrenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.content.registries.recurrence value
func (v VcenterContentRegistriesRecurrence) Ptr() *VcenterContentRegistriesRecurrence {
	return &v
}

type NullableVcenterContentRegistriesRecurrence struct {
	value *VcenterContentRegistriesRecurrence
	isSet bool
}

func (v NullableVcenterContentRegistriesRecurrence) Get() *VcenterContentRegistriesRecurrence {
	return v.value
}

func (v *NullableVcenterContentRegistriesRecurrence) Set(val *VcenterContentRegistriesRecurrence) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterContentRegistriesRecurrence) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterContentRegistriesRecurrence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterContentRegistriesRecurrence(val *VcenterContentRegistriesRecurrence) *NullableVcenterContentRegistriesRecurrence {
	return &NullableVcenterContentRegistriesRecurrence{value: val, isSet: true}
}

func (v NullableVcenterContentRegistriesRecurrence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterContentRegistriesRecurrence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

