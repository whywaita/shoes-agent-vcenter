/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterContentRegistriesHarborProjectsSummary struct for VcenterContentRegistriesHarborProjectsSummary
type VcenterContentRegistriesHarborProjectsSummary struct {
	// Identifier of the harbor project.
	Project string `json:"project"`
	// Name of the Harbor project. Should be between 1-63 characters long alphanumeric string and may contain the following characters: a-z,0-9, and '-'. Must be starting with characters or numbers, with the '-' character allowed anywhere except the first or last character.
	Name string `json:"name"`
	Scope VcenterContentRegistriesHarborProjectsScope `json:"scope"`
}

// NewVcenterContentRegistriesHarborProjectsSummary instantiates a new VcenterContentRegistriesHarborProjectsSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterContentRegistriesHarborProjectsSummary(project string, name string, scope VcenterContentRegistriesHarborProjectsScope) *VcenterContentRegistriesHarborProjectsSummary {
	this := VcenterContentRegistriesHarborProjectsSummary{}
	this.Project = project
	this.Name = name
	this.Scope = scope
	return &this
}

// NewVcenterContentRegistriesHarborProjectsSummaryWithDefaults instantiates a new VcenterContentRegistriesHarborProjectsSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterContentRegistriesHarborProjectsSummaryWithDefaults() *VcenterContentRegistriesHarborProjectsSummary {
	this := VcenterContentRegistriesHarborProjectsSummary{}
	return &this
}

// GetProject returns the Project field value
func (o *VcenterContentRegistriesHarborProjectsSummary) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborProjectsSummary) GetProjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *VcenterContentRegistriesHarborProjectsSummary) SetProject(v string) {
	o.Project = v
}

// GetName returns the Name field value
func (o *VcenterContentRegistriesHarborProjectsSummary) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborProjectsSummary) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterContentRegistriesHarborProjectsSummary) SetName(v string) {
	o.Name = v
}

// GetScope returns the Scope field value
func (o *VcenterContentRegistriesHarborProjectsSummary) GetScope() VcenterContentRegistriesHarborProjectsScope {
	if o == nil {
		var ret VcenterContentRegistriesHarborProjectsScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborProjectsSummary) GetScopeOk() (*VcenterContentRegistriesHarborProjectsScope, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *VcenterContentRegistriesHarborProjectsSummary) SetScope(v VcenterContentRegistriesHarborProjectsScope) {
	o.Scope = v
}

func (o VcenterContentRegistriesHarborProjectsSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["project"] = o.Project
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["scope"] = o.Scope
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterContentRegistriesHarborProjectsSummary struct {
	value *VcenterContentRegistriesHarborProjectsSummary
	isSet bool
}

func (v NullableVcenterContentRegistriesHarborProjectsSummary) Get() *VcenterContentRegistriesHarborProjectsSummary {
	return v.value
}

func (v *NullableVcenterContentRegistriesHarborProjectsSummary) Set(val *VcenterContentRegistriesHarborProjectsSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterContentRegistriesHarborProjectsSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterContentRegistriesHarborProjectsSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterContentRegistriesHarborProjectsSummary(val *VcenterContentRegistriesHarborProjectsSummary) *NullableVcenterContentRegistriesHarborProjectsSummary {
	return &NullableVcenterContentRegistriesHarborProjectsSummary{value: val, isSet: true}
}

func (v NullableVcenterContentRegistriesHarborProjectsSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterContentRegistriesHarborProjectsSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


