/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestDnsConfigInfo struct for VcenterVmGuestDnsConfigInfo
type VcenterVmGuestDnsConfigInfo struct {
	// The IP addresses of the DNS servers in order of use. IPv4 addresses are specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.
	IpAddresses []string `json:"ip_addresses"`
	// The domain in which to search for hosts, placed in order of preference. These are the domain name portion of the DNS names.
	SearchDomains []string `json:"search_domains"`
}

// NewVcenterVmGuestDnsConfigInfo instantiates a new VcenterVmGuestDnsConfigInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestDnsConfigInfo(ipAddresses []string, searchDomains []string) *VcenterVmGuestDnsConfigInfo {
	this := VcenterVmGuestDnsConfigInfo{}
	this.IpAddresses = ipAddresses
	this.SearchDomains = searchDomains
	return &this
}

// NewVcenterVmGuestDnsConfigInfoWithDefaults instantiates a new VcenterVmGuestDnsConfigInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestDnsConfigInfoWithDefaults() *VcenterVmGuestDnsConfigInfo {
	this := VcenterVmGuestDnsConfigInfo{}
	return &this
}

// GetIpAddresses returns the IpAddresses field value
func (o *VcenterVmGuestDnsConfigInfo) GetIpAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestDnsConfigInfo) GetIpAddressesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpAddresses, true
}

// SetIpAddresses sets field value
func (o *VcenterVmGuestDnsConfigInfo) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

// GetSearchDomains returns the SearchDomains field value
func (o *VcenterVmGuestDnsConfigInfo) GetSearchDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SearchDomains
}

// GetSearchDomainsOk returns a tuple with the SearchDomains field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestDnsConfigInfo) GetSearchDomainsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SearchDomains, true
}

// SetSearchDomains sets field value
func (o *VcenterVmGuestDnsConfigInfo) SetSearchDomains(v []string) {
	o.SearchDomains = v
}

func (o VcenterVmGuestDnsConfigInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ip_addresses"] = o.IpAddresses
	}
	if true {
		toSerialize["search_domains"] = o.SearchDomains
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestDnsConfigInfo struct {
	value *VcenterVmGuestDnsConfigInfo
	isSet bool
}

func (v NullableVcenterVmGuestDnsConfigInfo) Get() *VcenterVmGuestDnsConfigInfo {
	return v.value
}

func (v *NullableVcenterVmGuestDnsConfigInfo) Set(val *VcenterVmGuestDnsConfigInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestDnsConfigInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestDnsConfigInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestDnsConfigInfo(val *VcenterVmGuestDnsConfigInfo) *NullableVcenterVmGuestDnsConfigInfo {
	return &NullableVcenterVmGuestDnsConfigInfo{value: val, isSet: true}
}

func (v NullableVcenterVmGuestDnsConfigInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestDnsConfigInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


