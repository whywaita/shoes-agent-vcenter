/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCertificateManagementVcenterSigningCertificateInfo struct for VcenterCertificateManagementVcenterSigningCertificateInfo
type VcenterCertificateManagementVcenterSigningCertificateInfo struct {
	ActiveCertChain VcenterCertificateManagementX509CertChain `json:"active_cert_chain"`
	// List of signing certificate chains for validating vCenter-issued tokens. The list contains X509 certificate chains, each of which is ordered and contains the leaf, intermediate and root certs needed for the complete chain of trust. The leaf certificate is first in the chain and should be used for verifying vCenter-issued tokens.
	SigningCertChains []VcenterCertificateManagementX509CertChain `json:"signing_cert_chains"`
}

// NewVcenterCertificateManagementVcenterSigningCertificateInfo instantiates a new VcenterCertificateManagementVcenterSigningCertificateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCertificateManagementVcenterSigningCertificateInfo(activeCertChain VcenterCertificateManagementX509CertChain, signingCertChains []VcenterCertificateManagementX509CertChain) *VcenterCertificateManagementVcenterSigningCertificateInfo {
	this := VcenterCertificateManagementVcenterSigningCertificateInfo{}
	this.ActiveCertChain = activeCertChain
	this.SigningCertChains = signingCertChains
	return &this
}

// NewVcenterCertificateManagementVcenterSigningCertificateInfoWithDefaults instantiates a new VcenterCertificateManagementVcenterSigningCertificateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCertificateManagementVcenterSigningCertificateInfoWithDefaults() *VcenterCertificateManagementVcenterSigningCertificateInfo {
	this := VcenterCertificateManagementVcenterSigningCertificateInfo{}
	return &this
}

// GetActiveCertChain returns the ActiveCertChain field value
func (o *VcenterCertificateManagementVcenterSigningCertificateInfo) GetActiveCertChain() VcenterCertificateManagementX509CertChain {
	if o == nil {
		var ret VcenterCertificateManagementX509CertChain
		return ret
	}

	return o.ActiveCertChain
}

// GetActiveCertChainOk returns a tuple with the ActiveCertChain field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterSigningCertificateInfo) GetActiveCertChainOk() (*VcenterCertificateManagementX509CertChain, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ActiveCertChain, true
}

// SetActiveCertChain sets field value
func (o *VcenterCertificateManagementVcenterSigningCertificateInfo) SetActiveCertChain(v VcenterCertificateManagementX509CertChain) {
	o.ActiveCertChain = v
}

// GetSigningCertChains returns the SigningCertChains field value
func (o *VcenterCertificateManagementVcenterSigningCertificateInfo) GetSigningCertChains() []VcenterCertificateManagementX509CertChain {
	if o == nil {
		var ret []VcenterCertificateManagementX509CertChain
		return ret
	}

	return o.SigningCertChains
}

// GetSigningCertChainsOk returns a tuple with the SigningCertChains field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterSigningCertificateInfo) GetSigningCertChainsOk() (*[]VcenterCertificateManagementX509CertChain, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SigningCertChains, true
}

// SetSigningCertChains sets field value
func (o *VcenterCertificateManagementVcenterSigningCertificateInfo) SetSigningCertChains(v []VcenterCertificateManagementX509CertChain) {
	o.SigningCertChains = v
}

func (o VcenterCertificateManagementVcenterSigningCertificateInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["active_cert_chain"] = o.ActiveCertChain
	}
	if true {
		toSerialize["signing_cert_chains"] = o.SigningCertChains
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCertificateManagementVcenterSigningCertificateInfo struct {
	value *VcenterCertificateManagementVcenterSigningCertificateInfo
	isSet bool
}

func (v NullableVcenterCertificateManagementVcenterSigningCertificateInfo) Get() *VcenterCertificateManagementVcenterSigningCertificateInfo {
	return v.value
}

func (v *NullableVcenterCertificateManagementVcenterSigningCertificateInfo) Set(val *VcenterCertificateManagementVcenterSigningCertificateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCertificateManagementVcenterSigningCertificateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCertificateManagementVcenterSigningCertificateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCertificateManagementVcenterSigningCertificateInfo(val *VcenterCertificateManagementVcenterSigningCertificateInfo) *NullableVcenterCertificateManagementVcenterSigningCertificateInfo {
	return &NullableVcenterCertificateManagementVcenterSigningCertificateInfo{value: val, isSet: true}
}

func (v NullableVcenterCertificateManagementVcenterSigningCertificateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCertificateManagementVcenterSigningCertificateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


