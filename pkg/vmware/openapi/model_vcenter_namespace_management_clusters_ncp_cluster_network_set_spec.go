/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec struct for VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec
type VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec struct {
	// CIDR blocks from which Kubernetes allocates pod IP addresses. This range should not overlap with those in vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkSetSpec.ingress-cidrs, Clusters.NCPClusterNetworkSetSpec.egress-cidrs, or other services running in the datacenter. A set operation only allows for addition of new CIDR blocks to the existing list. All Pod CIDR blocks must be of at least subnet size /23.
	PodCidrs []VcenterNamespaceManagementIpv4Cidr `json:"pod_cidrs"`
	// CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer. These ranges should not overlap with those in Clusters.NCPClusterNetworkSetSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkSetSpec.egress-cidrs, or other services running in the datacenter. A set operation only allows for addition of new CIDR blocks to the existing list.
	IngressCidrs []VcenterNamespaceManagementIpv4Cidr `json:"ingress_cidrs"`
	// CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs. These ranges should not overlap with those in Clusters.NCPClusterNetworkSetSpec.pod-cidrs, vcenter.namespace_management.EnableSpec#serviceCidr, Clusters.NCPClusterNetworkSetSpec.ingress-cidrs, or other services running in the datacenter. A set operation only allows for addition of new CIDR blocks to the existing list.
	EgressCidrs []VcenterNamespaceManagementIpv4Cidr `json:"egress_cidrs"`
	// PEM-encoded x509 certificate used by NSX as a default fallback certificate for Kubernetes Ingress services.
	DefaultIngressTlsCertificate string `json:"default_ingress_tls_certificate"`
}

// NewVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec instantiates a new VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec(podCidrs []VcenterNamespaceManagementIpv4Cidr, ingressCidrs []VcenterNamespaceManagementIpv4Cidr, egressCidrs []VcenterNamespaceManagementIpv4Cidr, defaultIngressTlsCertificate string) *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec {
	this := VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec{}
	this.PodCidrs = podCidrs
	this.IngressCidrs = ingressCidrs
	this.EgressCidrs = egressCidrs
	this.DefaultIngressTlsCertificate = defaultIngressTlsCertificate
	return &this
}

// NewVcenterNamespaceManagementClustersNCPClusterNetworkSetSpecWithDefaults instantiates a new VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClustersNCPClusterNetworkSetSpecWithDefaults() *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec {
	this := VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec{}
	return &this
}

// GetPodCidrs returns the PodCidrs field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) GetPodCidrs() []VcenterNamespaceManagementIpv4Cidr {
	if o == nil {
		var ret []VcenterNamespaceManagementIpv4Cidr
		return ret
	}

	return o.PodCidrs
}

// GetPodCidrsOk returns a tuple with the PodCidrs field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) GetPodCidrsOk() (*[]VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PodCidrs, true
}

// SetPodCidrs sets field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) SetPodCidrs(v []VcenterNamespaceManagementIpv4Cidr) {
	o.PodCidrs = v
}

// GetIngressCidrs returns the IngressCidrs field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) GetIngressCidrs() []VcenterNamespaceManagementIpv4Cidr {
	if o == nil {
		var ret []VcenterNamespaceManagementIpv4Cidr
		return ret
	}

	return o.IngressCidrs
}

// GetIngressCidrsOk returns a tuple with the IngressCidrs field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) GetIngressCidrsOk() (*[]VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IngressCidrs, true
}

// SetIngressCidrs sets field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) SetIngressCidrs(v []VcenterNamespaceManagementIpv4Cidr) {
	o.IngressCidrs = v
}

// GetEgressCidrs returns the EgressCidrs field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) GetEgressCidrs() []VcenterNamespaceManagementIpv4Cidr {
	if o == nil {
		var ret []VcenterNamespaceManagementIpv4Cidr
		return ret
	}

	return o.EgressCidrs
}

// GetEgressCidrsOk returns a tuple with the EgressCidrs field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) GetEgressCidrsOk() (*[]VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EgressCidrs, true
}

// SetEgressCidrs sets field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) SetEgressCidrs(v []VcenterNamespaceManagementIpv4Cidr) {
	o.EgressCidrs = v
}

// GetDefaultIngressTlsCertificate returns the DefaultIngressTlsCertificate field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) GetDefaultIngressTlsCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultIngressTlsCertificate
}

// GetDefaultIngressTlsCertificateOk returns a tuple with the DefaultIngressTlsCertificate field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) GetDefaultIngressTlsCertificateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DefaultIngressTlsCertificate, true
}

// SetDefaultIngressTlsCertificate sets field value
func (o *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) SetDefaultIngressTlsCertificate(v string) {
	o.DefaultIngressTlsCertificate = v
}

func (o VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pod_cidrs"] = o.PodCidrs
	}
	if true {
		toSerialize["ingress_cidrs"] = o.IngressCidrs
	}
	if true {
		toSerialize["egress_cidrs"] = o.EgressCidrs
	}
	if true {
		toSerialize["default_ingress_tls_certificate"] = o.DefaultIngressTlsCertificate
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec struct {
	value *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) Get() *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) Set(val *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec(val *VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) *NullableVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec {
	return &NullableVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersNCPClusterNetworkSetSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


