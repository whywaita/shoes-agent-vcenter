/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMCreateSpec struct for VcenterVMCreateSpec
type VcenterVMCreateSpec struct {
	GuestOS VcenterVmGuestOS `json:"guest_OS"`
	// Virtual machine name. If unset, a default name will be generated by the server.
	Name *string `json:"name,omitempty"`
	Placement *VcenterVMPlacementSpec `json:"placement,omitempty"`
	HardwareVersion *VcenterVmHardwareVersion `json:"hardware_version,omitempty"`
	Boot *VcenterVmHardwareBootCreateSpec `json:"boot,omitempty"`
	// Boot device configuration. If unset, a server-specific boot sequence will be used.
	BootDevices *[]VcenterVmHardwareBootDeviceEntryCreateSpec `json:"boot_devices,omitempty"`
	Cpu *VcenterVmHardwareCpuUpdateSpec `json:"cpu,omitempty"`
	Memory *VcenterVmHardwareMemoryUpdateSpec `json:"memory,omitempty"`
	// List of disks. If unset, a single blank virtual disk of a guest-specific size will be created on the same storage as the virtual machine configuration, and will use a guest-specific host bus adapter type. If the guest-specific size is 0, no virtual disk will be created.
	Disks *[]VcenterVmHardwareDiskCreateSpec `json:"disks,omitempty"`
	// List of Ethernet adapters. If unset, no Ethernet adapters will be created.
	Nics *[]VcenterVmHardwareEthernetCreateSpec `json:"nics,omitempty"`
	// List of CD-ROMs. If unset, no CD-ROM devices will be created.
	Cdroms *[]VcenterVmHardwareCdromCreateSpec `json:"cdroms,omitempty"`
	// List of floppy drives. If unset, no floppy drives will be created.
	Floppies *[]VcenterVmHardwareFloppyCreateSpec `json:"floppies,omitempty"`
	// List of parallel ports. If unset, no parallel ports will be created.
	ParallelPorts *[]VcenterVmHardwareParallelCreateSpec `json:"parallel_ports,omitempty"`
	// List of serial ports. If unset, no serial ports will be created.
	SerialPorts *[]VcenterVmHardwareSerialCreateSpec `json:"serial_ports,omitempty"`
	// List of SATA adapters. If unset, any adapters necessary to connect the virtual machine's storage devices will be created; this includes any devices that explicitly specify a SATA host bus adapter, as well as any devices that do not specify a host bus adapter if the guest's preferred adapter type is SATA.
	SataAdapters *[]VcenterVmHardwareAdapterSataCreateSpec `json:"sata_adapters,omitempty"`
	// List of SCSI adapters. If unset, any adapters necessary to connect the virtual machine's storage devices will be created; this includes any devices that explicitly specify a SCSI host bus adapter, as well as any devices that do not specify a host bus adapter if the guest's preferred adapter type is SCSI. The type of the SCSI adapter will be a guest-specific default type.
	ScsiAdapters *[]VcenterVmHardwareAdapterScsiCreateSpec `json:"scsi_adapters,omitempty"`
	// List of NVMe adapters. If unset, any adapters necessary to connect the virtual machine's storage devices will be created; this includes any devices that explicitly specify a NVMe host bus adapter, as well as any devices that do not specify a host bus adapter if the guest's preferred adapter type is NVMe.
	NvmeAdapters *[]VcenterVmHardwareAdapterNvmeCreateSpec `json:"nvme_adapters,omitempty"`
	StoragePolicy *VcenterVMStoragePolicySpec `json:"storage_policy,omitempty"`
}

// NewVcenterVMCreateSpec instantiates a new VcenterVMCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMCreateSpec(guestOS VcenterVmGuestOS) *VcenterVMCreateSpec {
	this := VcenterVMCreateSpec{}
	this.GuestOS = guestOS
	return &this
}

// NewVcenterVMCreateSpecWithDefaults instantiates a new VcenterVMCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMCreateSpecWithDefaults() *VcenterVMCreateSpec {
	this := VcenterVMCreateSpec{}
	return &this
}

// GetGuestOS returns the GuestOS field value
func (o *VcenterVMCreateSpec) GetGuestOS() VcenterVmGuestOS {
	if o == nil {
		var ret VcenterVmGuestOS
		return ret
	}

	return o.GuestOS
}

// GetGuestOSOk returns a tuple with the GuestOS field value
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetGuestOSOk() (*VcenterVmGuestOS, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GuestOS, true
}

// SetGuestOS sets field value
func (o *VcenterVMCreateSpec) SetGuestOS(v VcenterVmGuestOS) {
	o.GuestOS = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VcenterVMCreateSpec) SetName(v string) {
	o.Name = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetPlacement() VcenterVMPlacementSpec {
	if o == nil || o.Placement == nil {
		var ret VcenterVMPlacementSpec
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetPlacementOk() (*VcenterVMPlacementSpec, bool) {
	if o == nil || o.Placement == nil {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasPlacement() bool {
	if o != nil && o.Placement != nil {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given VcenterVMPlacementSpec and assigns it to the Placement field.
func (o *VcenterVMCreateSpec) SetPlacement(v VcenterVMPlacementSpec) {
	o.Placement = &v
}

// GetHardwareVersion returns the HardwareVersion field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetHardwareVersion() VcenterVmHardwareVersion {
	if o == nil || o.HardwareVersion == nil {
		var ret VcenterVmHardwareVersion
		return ret
	}
	return *o.HardwareVersion
}

// GetHardwareVersionOk returns a tuple with the HardwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetHardwareVersionOk() (*VcenterVmHardwareVersion, bool) {
	if o == nil || o.HardwareVersion == nil {
		return nil, false
	}
	return o.HardwareVersion, true
}

// HasHardwareVersion returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasHardwareVersion() bool {
	if o != nil && o.HardwareVersion != nil {
		return true
	}

	return false
}

// SetHardwareVersion gets a reference to the given VcenterVmHardwareVersion and assigns it to the HardwareVersion field.
func (o *VcenterVMCreateSpec) SetHardwareVersion(v VcenterVmHardwareVersion) {
	o.HardwareVersion = &v
}

// GetBoot returns the Boot field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetBoot() VcenterVmHardwareBootCreateSpec {
	if o == nil || o.Boot == nil {
		var ret VcenterVmHardwareBootCreateSpec
		return ret
	}
	return *o.Boot
}

// GetBootOk returns a tuple with the Boot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetBootOk() (*VcenterVmHardwareBootCreateSpec, bool) {
	if o == nil || o.Boot == nil {
		return nil, false
	}
	return o.Boot, true
}

// HasBoot returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasBoot() bool {
	if o != nil && o.Boot != nil {
		return true
	}

	return false
}

// SetBoot gets a reference to the given VcenterVmHardwareBootCreateSpec and assigns it to the Boot field.
func (o *VcenterVMCreateSpec) SetBoot(v VcenterVmHardwareBootCreateSpec) {
	o.Boot = &v
}

// GetBootDevices returns the BootDevices field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetBootDevices() []VcenterVmHardwareBootDeviceEntryCreateSpec {
	if o == nil || o.BootDevices == nil {
		var ret []VcenterVmHardwareBootDeviceEntryCreateSpec
		return ret
	}
	return *o.BootDevices
}

// GetBootDevicesOk returns a tuple with the BootDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetBootDevicesOk() (*[]VcenterVmHardwareBootDeviceEntryCreateSpec, bool) {
	if o == nil || o.BootDevices == nil {
		return nil, false
	}
	return o.BootDevices, true
}

// HasBootDevices returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasBootDevices() bool {
	if o != nil && o.BootDevices != nil {
		return true
	}

	return false
}

// SetBootDevices gets a reference to the given []VcenterVmHardwareBootDeviceEntryCreateSpec and assigns it to the BootDevices field.
func (o *VcenterVMCreateSpec) SetBootDevices(v []VcenterVmHardwareBootDeviceEntryCreateSpec) {
	o.BootDevices = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetCpu() VcenterVmHardwareCpuUpdateSpec {
	if o == nil || o.Cpu == nil {
		var ret VcenterVmHardwareCpuUpdateSpec
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetCpuOk() (*VcenterVmHardwareCpuUpdateSpec, bool) {
	if o == nil || o.Cpu == nil {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasCpu() bool {
	if o != nil && o.Cpu != nil {
		return true
	}

	return false
}

// SetCpu gets a reference to the given VcenterVmHardwareCpuUpdateSpec and assigns it to the Cpu field.
func (o *VcenterVMCreateSpec) SetCpu(v VcenterVmHardwareCpuUpdateSpec) {
	o.Cpu = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetMemory() VcenterVmHardwareMemoryUpdateSpec {
	if o == nil || o.Memory == nil {
		var ret VcenterVmHardwareMemoryUpdateSpec
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetMemoryOk() (*VcenterVmHardwareMemoryUpdateSpec, bool) {
	if o == nil || o.Memory == nil {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasMemory() bool {
	if o != nil && o.Memory != nil {
		return true
	}

	return false
}

// SetMemory gets a reference to the given VcenterVmHardwareMemoryUpdateSpec and assigns it to the Memory field.
func (o *VcenterVMCreateSpec) SetMemory(v VcenterVmHardwareMemoryUpdateSpec) {
	o.Memory = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetDisks() []VcenterVmHardwareDiskCreateSpec {
	if o == nil || o.Disks == nil {
		var ret []VcenterVmHardwareDiskCreateSpec
		return ret
	}
	return *o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetDisksOk() (*[]VcenterVmHardwareDiskCreateSpec, bool) {
	if o == nil || o.Disks == nil {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasDisks() bool {
	if o != nil && o.Disks != nil {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []VcenterVmHardwareDiskCreateSpec and assigns it to the Disks field.
func (o *VcenterVMCreateSpec) SetDisks(v []VcenterVmHardwareDiskCreateSpec) {
	o.Disks = &v
}

// GetNics returns the Nics field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetNics() []VcenterVmHardwareEthernetCreateSpec {
	if o == nil || o.Nics == nil {
		var ret []VcenterVmHardwareEthernetCreateSpec
		return ret
	}
	return *o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetNicsOk() (*[]VcenterVmHardwareEthernetCreateSpec, bool) {
	if o == nil || o.Nics == nil {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasNics() bool {
	if o != nil && o.Nics != nil {
		return true
	}

	return false
}

// SetNics gets a reference to the given []VcenterVmHardwareEthernetCreateSpec and assigns it to the Nics field.
func (o *VcenterVMCreateSpec) SetNics(v []VcenterVmHardwareEthernetCreateSpec) {
	o.Nics = &v
}

// GetCdroms returns the Cdroms field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetCdroms() []VcenterVmHardwareCdromCreateSpec {
	if o == nil || o.Cdroms == nil {
		var ret []VcenterVmHardwareCdromCreateSpec
		return ret
	}
	return *o.Cdroms
}

// GetCdromsOk returns a tuple with the Cdroms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetCdromsOk() (*[]VcenterVmHardwareCdromCreateSpec, bool) {
	if o == nil || o.Cdroms == nil {
		return nil, false
	}
	return o.Cdroms, true
}

// HasCdroms returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasCdroms() bool {
	if o != nil && o.Cdroms != nil {
		return true
	}

	return false
}

// SetCdroms gets a reference to the given []VcenterVmHardwareCdromCreateSpec and assigns it to the Cdroms field.
func (o *VcenterVMCreateSpec) SetCdroms(v []VcenterVmHardwareCdromCreateSpec) {
	o.Cdroms = &v
}

// GetFloppies returns the Floppies field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetFloppies() []VcenterVmHardwareFloppyCreateSpec {
	if o == nil || o.Floppies == nil {
		var ret []VcenterVmHardwareFloppyCreateSpec
		return ret
	}
	return *o.Floppies
}

// GetFloppiesOk returns a tuple with the Floppies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetFloppiesOk() (*[]VcenterVmHardwareFloppyCreateSpec, bool) {
	if o == nil || o.Floppies == nil {
		return nil, false
	}
	return o.Floppies, true
}

// HasFloppies returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasFloppies() bool {
	if o != nil && o.Floppies != nil {
		return true
	}

	return false
}

// SetFloppies gets a reference to the given []VcenterVmHardwareFloppyCreateSpec and assigns it to the Floppies field.
func (o *VcenterVMCreateSpec) SetFloppies(v []VcenterVmHardwareFloppyCreateSpec) {
	o.Floppies = &v
}

// GetParallelPorts returns the ParallelPorts field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetParallelPorts() []VcenterVmHardwareParallelCreateSpec {
	if o == nil || o.ParallelPorts == nil {
		var ret []VcenterVmHardwareParallelCreateSpec
		return ret
	}
	return *o.ParallelPorts
}

// GetParallelPortsOk returns a tuple with the ParallelPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetParallelPortsOk() (*[]VcenterVmHardwareParallelCreateSpec, bool) {
	if o == nil || o.ParallelPorts == nil {
		return nil, false
	}
	return o.ParallelPorts, true
}

// HasParallelPorts returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasParallelPorts() bool {
	if o != nil && o.ParallelPorts != nil {
		return true
	}

	return false
}

// SetParallelPorts gets a reference to the given []VcenterVmHardwareParallelCreateSpec and assigns it to the ParallelPorts field.
func (o *VcenterVMCreateSpec) SetParallelPorts(v []VcenterVmHardwareParallelCreateSpec) {
	o.ParallelPorts = &v
}

// GetSerialPorts returns the SerialPorts field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetSerialPorts() []VcenterVmHardwareSerialCreateSpec {
	if o == nil || o.SerialPorts == nil {
		var ret []VcenterVmHardwareSerialCreateSpec
		return ret
	}
	return *o.SerialPorts
}

// GetSerialPortsOk returns a tuple with the SerialPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetSerialPortsOk() (*[]VcenterVmHardwareSerialCreateSpec, bool) {
	if o == nil || o.SerialPorts == nil {
		return nil, false
	}
	return o.SerialPorts, true
}

// HasSerialPorts returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasSerialPorts() bool {
	if o != nil && o.SerialPorts != nil {
		return true
	}

	return false
}

// SetSerialPorts gets a reference to the given []VcenterVmHardwareSerialCreateSpec and assigns it to the SerialPorts field.
func (o *VcenterVMCreateSpec) SetSerialPorts(v []VcenterVmHardwareSerialCreateSpec) {
	o.SerialPorts = &v
}

// GetSataAdapters returns the SataAdapters field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetSataAdapters() []VcenterVmHardwareAdapterSataCreateSpec {
	if o == nil || o.SataAdapters == nil {
		var ret []VcenterVmHardwareAdapterSataCreateSpec
		return ret
	}
	return *o.SataAdapters
}

// GetSataAdaptersOk returns a tuple with the SataAdapters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetSataAdaptersOk() (*[]VcenterVmHardwareAdapterSataCreateSpec, bool) {
	if o == nil || o.SataAdapters == nil {
		return nil, false
	}
	return o.SataAdapters, true
}

// HasSataAdapters returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasSataAdapters() bool {
	if o != nil && o.SataAdapters != nil {
		return true
	}

	return false
}

// SetSataAdapters gets a reference to the given []VcenterVmHardwareAdapterSataCreateSpec and assigns it to the SataAdapters field.
func (o *VcenterVMCreateSpec) SetSataAdapters(v []VcenterVmHardwareAdapterSataCreateSpec) {
	o.SataAdapters = &v
}

// GetScsiAdapters returns the ScsiAdapters field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetScsiAdapters() []VcenterVmHardwareAdapterScsiCreateSpec {
	if o == nil || o.ScsiAdapters == nil {
		var ret []VcenterVmHardwareAdapterScsiCreateSpec
		return ret
	}
	return *o.ScsiAdapters
}

// GetScsiAdaptersOk returns a tuple with the ScsiAdapters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetScsiAdaptersOk() (*[]VcenterVmHardwareAdapterScsiCreateSpec, bool) {
	if o == nil || o.ScsiAdapters == nil {
		return nil, false
	}
	return o.ScsiAdapters, true
}

// HasScsiAdapters returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasScsiAdapters() bool {
	if o != nil && o.ScsiAdapters != nil {
		return true
	}

	return false
}

// SetScsiAdapters gets a reference to the given []VcenterVmHardwareAdapterScsiCreateSpec and assigns it to the ScsiAdapters field.
func (o *VcenterVMCreateSpec) SetScsiAdapters(v []VcenterVmHardwareAdapterScsiCreateSpec) {
	o.ScsiAdapters = &v
}

// GetNvmeAdapters returns the NvmeAdapters field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetNvmeAdapters() []VcenterVmHardwareAdapterNvmeCreateSpec {
	if o == nil || o.NvmeAdapters == nil {
		var ret []VcenterVmHardwareAdapterNvmeCreateSpec
		return ret
	}
	return *o.NvmeAdapters
}

// GetNvmeAdaptersOk returns a tuple with the NvmeAdapters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetNvmeAdaptersOk() (*[]VcenterVmHardwareAdapterNvmeCreateSpec, bool) {
	if o == nil || o.NvmeAdapters == nil {
		return nil, false
	}
	return o.NvmeAdapters, true
}

// HasNvmeAdapters returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasNvmeAdapters() bool {
	if o != nil && o.NvmeAdapters != nil {
		return true
	}

	return false
}

// SetNvmeAdapters gets a reference to the given []VcenterVmHardwareAdapterNvmeCreateSpec and assigns it to the NvmeAdapters field.
func (o *VcenterVMCreateSpec) SetNvmeAdapters(v []VcenterVmHardwareAdapterNvmeCreateSpec) {
	o.NvmeAdapters = &v
}

// GetStoragePolicy returns the StoragePolicy field value if set, zero value otherwise.
func (o *VcenterVMCreateSpec) GetStoragePolicy() VcenterVMStoragePolicySpec {
	if o == nil || o.StoragePolicy == nil {
		var ret VcenterVMStoragePolicySpec
		return ret
	}
	return *o.StoragePolicy
}

// GetStoragePolicyOk returns a tuple with the StoragePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateSpec) GetStoragePolicyOk() (*VcenterVMStoragePolicySpec, bool) {
	if o == nil || o.StoragePolicy == nil {
		return nil, false
	}
	return o.StoragePolicy, true
}

// HasStoragePolicy returns a boolean if a field has been set.
func (o *VcenterVMCreateSpec) HasStoragePolicy() bool {
	if o != nil && o.StoragePolicy != nil {
		return true
	}

	return false
}

// SetStoragePolicy gets a reference to the given VcenterVMStoragePolicySpec and assigns it to the StoragePolicy field.
func (o *VcenterVMCreateSpec) SetStoragePolicy(v VcenterVMStoragePolicySpec) {
	o.StoragePolicy = &v
}

func (o VcenterVMCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["guest_OS"] = o.GuestOS
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	if o.HardwareVersion != nil {
		toSerialize["hardware_version"] = o.HardwareVersion
	}
	if o.Boot != nil {
		toSerialize["boot"] = o.Boot
	}
	if o.BootDevices != nil {
		toSerialize["boot_devices"] = o.BootDevices
	}
	if o.Cpu != nil {
		toSerialize["cpu"] = o.Cpu
	}
	if o.Memory != nil {
		toSerialize["memory"] = o.Memory
	}
	if o.Disks != nil {
		toSerialize["disks"] = o.Disks
	}
	if o.Nics != nil {
		toSerialize["nics"] = o.Nics
	}
	if o.Cdroms != nil {
		toSerialize["cdroms"] = o.Cdroms
	}
	if o.Floppies != nil {
		toSerialize["floppies"] = o.Floppies
	}
	if o.ParallelPorts != nil {
		toSerialize["parallel_ports"] = o.ParallelPorts
	}
	if o.SerialPorts != nil {
		toSerialize["serial_ports"] = o.SerialPorts
	}
	if o.SataAdapters != nil {
		toSerialize["sata_adapters"] = o.SataAdapters
	}
	if o.ScsiAdapters != nil {
		toSerialize["scsi_adapters"] = o.ScsiAdapters
	}
	if o.NvmeAdapters != nil {
		toSerialize["nvme_adapters"] = o.NvmeAdapters
	}
	if o.StoragePolicy != nil {
		toSerialize["storage_policy"] = o.StoragePolicy
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMCreateSpec struct {
	value *VcenterVMCreateSpec
	isSet bool
}

func (v NullableVcenterVMCreateSpec) Get() *VcenterVMCreateSpec {
	return v.value
}

func (v *NullableVcenterVMCreateSpec) Set(val *VcenterVMCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMCreateSpec(val *VcenterVMCreateSpec) *NullableVcenterVMCreateSpec {
	return &NullableVcenterVMCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterVMCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


