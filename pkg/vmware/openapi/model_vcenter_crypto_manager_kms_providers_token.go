/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// VcenterCryptoManagerKmsProvidersToken struct for VcenterCryptoManagerKmsProvidersToken
type VcenterCryptoManagerKmsProvidersToken struct {
	// A one-time, short-lived token required in \"Authorization\" field of the HTTP header of the request to the url.   After the token expires, any attempt to download the configuration with said token will fail. 
	Token string `json:"token"`
	// Expiry time of the token
	Expiry time.Time `json:"expiry"`
}

// NewVcenterCryptoManagerKmsProvidersToken instantiates a new VcenterCryptoManagerKmsProvidersToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCryptoManagerKmsProvidersToken(token string, expiry time.Time) *VcenterCryptoManagerKmsProvidersToken {
	this := VcenterCryptoManagerKmsProvidersToken{}
	this.Token = token
	this.Expiry = expiry
	return &this
}

// NewVcenterCryptoManagerKmsProvidersTokenWithDefaults instantiates a new VcenterCryptoManagerKmsProvidersToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCryptoManagerKmsProvidersTokenWithDefaults() *VcenterCryptoManagerKmsProvidersToken {
	this := VcenterCryptoManagerKmsProvidersToken{}
	return &this
}

// GetToken returns the Token field value
func (o *VcenterCryptoManagerKmsProvidersToken) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersToken) GetTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *VcenterCryptoManagerKmsProvidersToken) SetToken(v string) {
	o.Token = v
}

// GetExpiry returns the Expiry field value
func (o *VcenterCryptoManagerKmsProvidersToken) GetExpiry() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersToken) GetExpiryOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Expiry, true
}

// SetExpiry sets field value
func (o *VcenterCryptoManagerKmsProvidersToken) SetExpiry(v time.Time) {
	o.Expiry = v
}

func (o VcenterCryptoManagerKmsProvidersToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["token"] = o.Token
	}
	if true {
		toSerialize["expiry"] = o.Expiry
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCryptoManagerKmsProvidersToken struct {
	value *VcenterCryptoManagerKmsProvidersToken
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersToken) Get() *VcenterCryptoManagerKmsProvidersToken {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersToken) Set(val *VcenterCryptoManagerKmsProvidersToken) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersToken) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersToken(val *VcenterCryptoManagerKmsProvidersToken) *NullableVcenterCryptoManagerKmsProvidersToken {
	return &NullableVcenterCryptoManagerKmsProvidersToken{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


