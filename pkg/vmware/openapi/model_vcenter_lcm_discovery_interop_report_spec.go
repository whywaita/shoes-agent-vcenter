/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterLcmDiscoveryInteropReportSpec struct for VcenterLcmDiscoveryInteropReportSpec
type VcenterLcmDiscoveryInteropReportSpec struct {
	// The vCenter Server version.   It is used for checking against the other products registered with that instance of vCenter Server. 
	TargetVersion string `json:"target_version"`
}

// NewVcenterLcmDiscoveryInteropReportSpec instantiates a new VcenterLcmDiscoveryInteropReportSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterLcmDiscoveryInteropReportSpec(targetVersion string) *VcenterLcmDiscoveryInteropReportSpec {
	this := VcenterLcmDiscoveryInteropReportSpec{}
	this.TargetVersion = targetVersion
	return &this
}

// NewVcenterLcmDiscoveryInteropReportSpecWithDefaults instantiates a new VcenterLcmDiscoveryInteropReportSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterLcmDiscoveryInteropReportSpecWithDefaults() *VcenterLcmDiscoveryInteropReportSpec {
	this := VcenterLcmDiscoveryInteropReportSpec{}
	return &this
}

// GetTargetVersion returns the TargetVersion field value
func (o *VcenterLcmDiscoveryInteropReportSpec) GetTargetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetVersion
}

// GetTargetVersionOk returns a tuple with the TargetVersion field value
// and a boolean to check if the value has been set.
func (o *VcenterLcmDiscoveryInteropReportSpec) GetTargetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetVersion, true
}

// SetTargetVersion sets field value
func (o *VcenterLcmDiscoveryInteropReportSpec) SetTargetVersion(v string) {
	o.TargetVersion = v
}

func (o VcenterLcmDiscoveryInteropReportSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["target_version"] = o.TargetVersion
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterLcmDiscoveryInteropReportSpec struct {
	value *VcenterLcmDiscoveryInteropReportSpec
	isSet bool
}

func (v NullableVcenterLcmDiscoveryInteropReportSpec) Get() *VcenterLcmDiscoveryInteropReportSpec {
	return v.value
}

func (v *NullableVcenterLcmDiscoveryInteropReportSpec) Set(val *VcenterLcmDiscoveryInteropReportSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterLcmDiscoveryInteropReportSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterLcmDiscoveryInteropReportSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterLcmDiscoveryInteropReportSpec(val *VcenterLcmDiscoveryInteropReportSpec) *NullableVcenterLcmDiscoveryInteropReportSpec {
	return &NullableVcenterLcmDiscoveryInteropReportSpec{value: val, isSet: true}
}

func (v NullableVcenterLcmDiscoveryInteropReportSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterLcmDiscoveryInteropReportSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


