/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClusterCompatibilityFilterSpec struct for VcenterNamespaceManagementClusterCompatibilityFilterSpec
type VcenterNamespaceManagementClusterCompatibilityFilterSpec struct {
	// Compatibility criteria for matching the filter. If true, only clusters which are compatible for Namespaces match the filter. If false, all clusters match the filter. If unset, both compatible and incompatible clusters match the filter.
	Compatible *bool `json:"compatible,omitempty"`
	NetworkProvider *VcenterNamespaceManagementClustersNetworkProvider `json:"network_provider,omitempty"`
}

// NewVcenterNamespaceManagementClusterCompatibilityFilterSpec instantiates a new VcenterNamespaceManagementClusterCompatibilityFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClusterCompatibilityFilterSpec() *VcenterNamespaceManagementClusterCompatibilityFilterSpec {
	this := VcenterNamespaceManagementClusterCompatibilityFilterSpec{}
	return &this
}

// NewVcenterNamespaceManagementClusterCompatibilityFilterSpecWithDefaults instantiates a new VcenterNamespaceManagementClusterCompatibilityFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClusterCompatibilityFilterSpecWithDefaults() *VcenterNamespaceManagementClusterCompatibilityFilterSpec {
	this := VcenterNamespaceManagementClusterCompatibilityFilterSpec{}
	return &this
}

// GetCompatible returns the Compatible field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClusterCompatibilityFilterSpec) GetCompatible() bool {
	if o == nil || o.Compatible == nil {
		var ret bool
		return ret
	}
	return *o.Compatible
}

// GetCompatibleOk returns a tuple with the Compatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterCompatibilityFilterSpec) GetCompatibleOk() (*bool, bool) {
	if o == nil || o.Compatible == nil {
		return nil, false
	}
	return o.Compatible, true
}

// HasCompatible returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClusterCompatibilityFilterSpec) HasCompatible() bool {
	if o != nil && o.Compatible != nil {
		return true
	}

	return false
}

// SetCompatible gets a reference to the given bool and assigns it to the Compatible field.
func (o *VcenterNamespaceManagementClusterCompatibilityFilterSpec) SetCompatible(v bool) {
	o.Compatible = &v
}

// GetNetworkProvider returns the NetworkProvider field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClusterCompatibilityFilterSpec) GetNetworkProvider() VcenterNamespaceManagementClustersNetworkProvider {
	if o == nil || o.NetworkProvider == nil {
		var ret VcenterNamespaceManagementClustersNetworkProvider
		return ret
	}
	return *o.NetworkProvider
}

// GetNetworkProviderOk returns a tuple with the NetworkProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterCompatibilityFilterSpec) GetNetworkProviderOk() (*VcenterNamespaceManagementClustersNetworkProvider, bool) {
	if o == nil || o.NetworkProvider == nil {
		return nil, false
	}
	return o.NetworkProvider, true
}

// HasNetworkProvider returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClusterCompatibilityFilterSpec) HasNetworkProvider() bool {
	if o != nil && o.NetworkProvider != nil {
		return true
	}

	return false
}

// SetNetworkProvider gets a reference to the given VcenterNamespaceManagementClustersNetworkProvider and assigns it to the NetworkProvider field.
func (o *VcenterNamespaceManagementClusterCompatibilityFilterSpec) SetNetworkProvider(v VcenterNamespaceManagementClustersNetworkProvider) {
	o.NetworkProvider = &v
}

func (o VcenterNamespaceManagementClusterCompatibilityFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Compatible != nil {
		toSerialize["compatible"] = o.Compatible
	}
	if o.NetworkProvider != nil {
		toSerialize["network_provider"] = o.NetworkProvider
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClusterCompatibilityFilterSpec struct {
	value *VcenterNamespaceManagementClusterCompatibilityFilterSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementClusterCompatibilityFilterSpec) Get() *VcenterNamespaceManagementClusterCompatibilityFilterSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClusterCompatibilityFilterSpec) Set(val *VcenterNamespaceManagementClusterCompatibilityFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClusterCompatibilityFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClusterCompatibilityFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClusterCompatibilityFilterSpec(val *VcenterNamespaceManagementClusterCompatibilityFilterSpec) *NullableVcenterNamespaceManagementClusterCompatibilityFilterSpec {
	return &NullableVcenterNamespaceManagementClusterCompatibilityFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClusterCompatibilityFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClusterCompatibilityFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


