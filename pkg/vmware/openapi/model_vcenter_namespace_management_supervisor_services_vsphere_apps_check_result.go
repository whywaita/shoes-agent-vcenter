/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult struct for VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult
type VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult struct {
	// The identifier of the Supervisor Service. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.SupervisorService.
	SupervisorService string `json:"supervisor_service"`
	// The identifier of the Supervisor Service version. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version.
	Version string `json:"version"`
	// A human readable name of the Supervisor Service version.
	DisplayName string `json:"display_name"`
	// A human readable description of the Supervisor Service version. If unset, no description is available for the Supervisor Service version.
	Description *string `json:"description,omitempty"`
	// The End User License Agreement (EULA) of the Supervisor Service version. If unset, no EULA is available for the Supervisor Service version.
	Eula *string `json:"eula,omitempty"`
}

// NewVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult instantiates a new VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult(supervisorService string, version string, displayName string) *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult {
	this := VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult{}
	this.SupervisorService = supervisorService
	this.Version = version
	this.DisplayName = displayName
	return &this
}

// NewVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResultWithDefaults instantiates a new VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResultWithDefaults() *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult {
	this := VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult{}
	return &this
}

// GetSupervisorService returns the SupervisorService field value
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) GetSupervisorService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SupervisorService
}

// GetSupervisorServiceOk returns a tuple with the SupervisorService field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) GetSupervisorServiceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupervisorService, true
}

// SetSupervisorService sets field value
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) SetSupervisorService(v string) {
	o.SupervisorService = v
}

// GetVersion returns the Version field value
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) SetVersion(v string) {
	o.Version = v
}

// GetDisplayName returns the DisplayName field value
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) SetDescription(v string) {
	o.Description = &v
}

// GetEula returns the Eula field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) GetEula() string {
	if o == nil || o.Eula == nil {
		var ret string
		return ret
	}
	return *o.Eula
}

// GetEulaOk returns a tuple with the Eula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) GetEulaOk() (*string, bool) {
	if o == nil || o.Eula == nil {
		return nil, false
	}
	return o.Eula, true
}

// HasEula returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) HasEula() bool {
	if o != nil && o.Eula != nil {
		return true
	}

	return false
}

// SetEula gets a reference to the given string and assigns it to the Eula field.
func (o *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) SetEula(v string) {
	o.Eula = &v
}

func (o VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["supervisor_service"] = o.SupervisorService
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Eula != nil {
		toSerialize["eula"] = o.Eula
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult struct {
	value *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) Get() *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) Set(val *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult(val *VcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) *NullableVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult {
	return &NullableVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVsphereAppsCheckResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


