/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareCpuUpdateSpec struct for VcenterVmHardwareCpuUpdateSpec
type VcenterVmHardwareCpuUpdateSpec struct {
	// New number of CPU cores. The number of CPU cores in the virtual machine must be a multiple of the number of cores per socket.   The supported range of CPU counts is constrained by the configured guest operating system and virtual hardware version of the virtual machine.    If the virtual machine is running, the number of CPU cores may only be increased if Cpu.Info.hot-add-enabled is true, and may only be decreased if Cpu.Info.hot-remove-enabled is true.  If unset, the value is unchanged.
	Count *int64 `json:"count,omitempty"`
	// New number of CPU cores per socket. The number of CPU cores in the virtual machine must be a multiple of the number of cores per socket. If unset, the value is unchanged.
	CoresPerSocket *int64 `json:"cores_per_socket,omitempty"`
	// Flag indicating whether adding CPUs while the virtual machine is running is enabled.   This field may only be modified if the virtual machine is powered off.  If unset, the value is unchanged.
	HotAddEnabled *bool `json:"hot_add_enabled,omitempty"`
	// Flag indicating whether removing CPUs while the virtual machine is running is enabled.   This field may only be modified if the virtual machine is powered off.  If unset, the value is unchanged.
	HotRemoveEnabled *bool `json:"hot_remove_enabled,omitempty"`
}

// NewVcenterVmHardwareCpuUpdateSpec instantiates a new VcenterVmHardwareCpuUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareCpuUpdateSpec() *VcenterVmHardwareCpuUpdateSpec {
	this := VcenterVmHardwareCpuUpdateSpec{}
	return &this
}

// NewVcenterVmHardwareCpuUpdateSpecWithDefaults instantiates a new VcenterVmHardwareCpuUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareCpuUpdateSpecWithDefaults() *VcenterVmHardwareCpuUpdateSpec {
	this := VcenterVmHardwareCpuUpdateSpec{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *VcenterVmHardwareCpuUpdateSpec) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCpuUpdateSpec) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *VcenterVmHardwareCpuUpdateSpec) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *VcenterVmHardwareCpuUpdateSpec) SetCount(v int64) {
	o.Count = &v
}

// GetCoresPerSocket returns the CoresPerSocket field value if set, zero value otherwise.
func (o *VcenterVmHardwareCpuUpdateSpec) GetCoresPerSocket() int64 {
	if o == nil || o.CoresPerSocket == nil {
		var ret int64
		return ret
	}
	return *o.CoresPerSocket
}

// GetCoresPerSocketOk returns a tuple with the CoresPerSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCpuUpdateSpec) GetCoresPerSocketOk() (*int64, bool) {
	if o == nil || o.CoresPerSocket == nil {
		return nil, false
	}
	return o.CoresPerSocket, true
}

// HasCoresPerSocket returns a boolean if a field has been set.
func (o *VcenterVmHardwareCpuUpdateSpec) HasCoresPerSocket() bool {
	if o != nil && o.CoresPerSocket != nil {
		return true
	}

	return false
}

// SetCoresPerSocket gets a reference to the given int64 and assigns it to the CoresPerSocket field.
func (o *VcenterVmHardwareCpuUpdateSpec) SetCoresPerSocket(v int64) {
	o.CoresPerSocket = &v
}

// GetHotAddEnabled returns the HotAddEnabled field value if set, zero value otherwise.
func (o *VcenterVmHardwareCpuUpdateSpec) GetHotAddEnabled() bool {
	if o == nil || o.HotAddEnabled == nil {
		var ret bool
		return ret
	}
	return *o.HotAddEnabled
}

// GetHotAddEnabledOk returns a tuple with the HotAddEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCpuUpdateSpec) GetHotAddEnabledOk() (*bool, bool) {
	if o == nil || o.HotAddEnabled == nil {
		return nil, false
	}
	return o.HotAddEnabled, true
}

// HasHotAddEnabled returns a boolean if a field has been set.
func (o *VcenterVmHardwareCpuUpdateSpec) HasHotAddEnabled() bool {
	if o != nil && o.HotAddEnabled != nil {
		return true
	}

	return false
}

// SetHotAddEnabled gets a reference to the given bool and assigns it to the HotAddEnabled field.
func (o *VcenterVmHardwareCpuUpdateSpec) SetHotAddEnabled(v bool) {
	o.HotAddEnabled = &v
}

// GetHotRemoveEnabled returns the HotRemoveEnabled field value if set, zero value otherwise.
func (o *VcenterVmHardwareCpuUpdateSpec) GetHotRemoveEnabled() bool {
	if o == nil || o.HotRemoveEnabled == nil {
		var ret bool
		return ret
	}
	return *o.HotRemoveEnabled
}

// GetHotRemoveEnabledOk returns a tuple with the HotRemoveEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCpuUpdateSpec) GetHotRemoveEnabledOk() (*bool, bool) {
	if o == nil || o.HotRemoveEnabled == nil {
		return nil, false
	}
	return o.HotRemoveEnabled, true
}

// HasHotRemoveEnabled returns a boolean if a field has been set.
func (o *VcenterVmHardwareCpuUpdateSpec) HasHotRemoveEnabled() bool {
	if o != nil && o.HotRemoveEnabled != nil {
		return true
	}

	return false
}

// SetHotRemoveEnabled gets a reference to the given bool and assigns it to the HotRemoveEnabled field.
func (o *VcenterVmHardwareCpuUpdateSpec) SetHotRemoveEnabled(v bool) {
	o.HotRemoveEnabled = &v
}

func (o VcenterVmHardwareCpuUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.CoresPerSocket != nil {
		toSerialize["cores_per_socket"] = o.CoresPerSocket
	}
	if o.HotAddEnabled != nil {
		toSerialize["hot_add_enabled"] = o.HotAddEnabled
	}
	if o.HotRemoveEnabled != nil {
		toSerialize["hot_remove_enabled"] = o.HotRemoveEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareCpuUpdateSpec struct {
	value *VcenterVmHardwareCpuUpdateSpec
	isSet bool
}

func (v NullableVcenterVmHardwareCpuUpdateSpec) Get() *VcenterVmHardwareCpuUpdateSpec {
	return v.value
}

func (v *NullableVcenterVmHardwareCpuUpdateSpec) Set(val *VcenterVmHardwareCpuUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareCpuUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareCpuUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareCpuUpdateSpec(val *VcenterVmHardwareCpuUpdateSpec) *NullableVcenterVmHardwareCpuUpdateSpec {
	return &NullableVcenterVmHardwareCpuUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareCpuUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareCpuUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


