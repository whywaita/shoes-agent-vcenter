/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterAuthenticationTokenIssueSpec struct for VcenterAuthenticationTokenIssueSpec
type VcenterAuthenticationTokenIssueSpec struct {
	// The value of urn:ietf:params:oauth:grant-type:token-exchange indicates that a token exchange is being performed. When clients pass a value of this structure as a parameter, the field must be one of urn:ietf:params:oauth:grant-type:token-exchange. When operations return a value of this structure as a result, the field will be one of urn:ietf:params:oauth:grant-type:token-exchange.
	GrantType string `json:"grant_type"`
	// Indicates the location of the target service or resource where the client intends to use the requested security token. If unset, it is inferred from other arguments.
	Resource *string `json:"resource,omitempty"`
	// The logical name of the target service where the client intends to use the requested security token. This serves a purpose similar to the Token.IssueSpec.resource field, but with the client providing a logical name rather than a location. If unset, it is inferred from other arguments.
	Audience *string `json:"audience,omitempty"`
	// A list of space-delimited, case-sensitive strings, that allow the client to specify the desired scope of the requested security token in the context of the service or resource where the token will be used. If unset, it is inferred from other arguments.
	Scope *string `json:"scope,omitempty"`
	// An identifier for the type of the requested security token. If the requested type is unspecified, the issued token type is at the discretion of the server and may be dictated by knowledge of the requirements of the service or resource indicated by the Token.IssueSpec.resource or Token.IssueSpec.audience field. If unset, it is inferred from other arguments.
	RequestedTokenType *string `json:"requested_token_type,omitempty"`
	// A security token that represents the identity of the party on behalf of whom exchange is being made. Typically, the subject of this token will be the subject of the security token issued. Token is base64-encoded.  The field is required when the value of the Token.IssueSpec.grant-type field is urn:ietf:params:oauth:grant-type:token-exchange.  This field is currently required. In the future, the structure may support grant-types other than urn:ietf:params:oauth:grant-type:token-exchange for which the value may be unset.
	SubjectToken *string `json:"subject_token,omitempty"`
	// An identifier, that indicates the type of the security token in the Token.IssueSpec.subject-token field.  The field is required when the value of the Token.IssueSpec.grant-type field is urn:ietf:params:oauth:grant-type:token-exchange.  This field is currently required. In the future, the structure may support grant-types other than urn:ietf:params:oauth:grant-type:token-exchange for which the value may be unset.
	SubjectTokenType *string `json:"subject_token_type,omitempty"`
	// A security token that represents the identity of the acting party. Typically, this will be the party that is authorized to use the requested security token and act on behalf of the subject. unset if not needed for the specific case of exchange.
	ActorToken *string `json:"actor_token,omitempty"`
	// An identifier, that indicates the type of the security token in the Token.IssueSpec.actor-token field. unset if Token.IssueSpec.actor-token field is not present.
	ActorTokenType *string `json:"actor_token_type,omitempty"`
}

// NewVcenterAuthenticationTokenIssueSpec instantiates a new VcenterAuthenticationTokenIssueSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterAuthenticationTokenIssueSpec(grantType string) *VcenterAuthenticationTokenIssueSpec {
	this := VcenterAuthenticationTokenIssueSpec{}
	this.GrantType = grantType
	return &this
}

// NewVcenterAuthenticationTokenIssueSpecWithDefaults instantiates a new VcenterAuthenticationTokenIssueSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterAuthenticationTokenIssueSpecWithDefaults() *VcenterAuthenticationTokenIssueSpec {
	this := VcenterAuthenticationTokenIssueSpec{}
	return &this
}

// GetGrantType returns the GrantType field value
func (o *VcenterAuthenticationTokenIssueSpec) GetGrantType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrantType
}

// GetGrantTypeOk returns a tuple with the GrantType field value
// and a boolean to check if the value has been set.
func (o *VcenterAuthenticationTokenIssueSpec) GetGrantTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GrantType, true
}

// SetGrantType sets field value
func (o *VcenterAuthenticationTokenIssueSpec) SetGrantType(v string) {
	o.GrantType = v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *VcenterAuthenticationTokenIssueSpec) GetResource() string {
	if o == nil || o.Resource == nil {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterAuthenticationTokenIssueSpec) GetResourceOk() (*string, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *VcenterAuthenticationTokenIssueSpec) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *VcenterAuthenticationTokenIssueSpec) SetResource(v string) {
	o.Resource = &v
}

// GetAudience returns the Audience field value if set, zero value otherwise.
func (o *VcenterAuthenticationTokenIssueSpec) GetAudience() string {
	if o == nil || o.Audience == nil {
		var ret string
		return ret
	}
	return *o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterAuthenticationTokenIssueSpec) GetAudienceOk() (*string, bool) {
	if o == nil || o.Audience == nil {
		return nil, false
	}
	return o.Audience, true
}

// HasAudience returns a boolean if a field has been set.
func (o *VcenterAuthenticationTokenIssueSpec) HasAudience() bool {
	if o != nil && o.Audience != nil {
		return true
	}

	return false
}

// SetAudience gets a reference to the given string and assigns it to the Audience field.
func (o *VcenterAuthenticationTokenIssueSpec) SetAudience(v string) {
	o.Audience = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *VcenterAuthenticationTokenIssueSpec) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterAuthenticationTokenIssueSpec) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *VcenterAuthenticationTokenIssueSpec) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *VcenterAuthenticationTokenIssueSpec) SetScope(v string) {
	o.Scope = &v
}

// GetRequestedTokenType returns the RequestedTokenType field value if set, zero value otherwise.
func (o *VcenterAuthenticationTokenIssueSpec) GetRequestedTokenType() string {
	if o == nil || o.RequestedTokenType == nil {
		var ret string
		return ret
	}
	return *o.RequestedTokenType
}

// GetRequestedTokenTypeOk returns a tuple with the RequestedTokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterAuthenticationTokenIssueSpec) GetRequestedTokenTypeOk() (*string, bool) {
	if o == nil || o.RequestedTokenType == nil {
		return nil, false
	}
	return o.RequestedTokenType, true
}

// HasRequestedTokenType returns a boolean if a field has been set.
func (o *VcenterAuthenticationTokenIssueSpec) HasRequestedTokenType() bool {
	if o != nil && o.RequestedTokenType != nil {
		return true
	}

	return false
}

// SetRequestedTokenType gets a reference to the given string and assigns it to the RequestedTokenType field.
func (o *VcenterAuthenticationTokenIssueSpec) SetRequestedTokenType(v string) {
	o.RequestedTokenType = &v
}

// GetSubjectToken returns the SubjectToken field value if set, zero value otherwise.
func (o *VcenterAuthenticationTokenIssueSpec) GetSubjectToken() string {
	if o == nil || o.SubjectToken == nil {
		var ret string
		return ret
	}
	return *o.SubjectToken
}

// GetSubjectTokenOk returns a tuple with the SubjectToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterAuthenticationTokenIssueSpec) GetSubjectTokenOk() (*string, bool) {
	if o == nil || o.SubjectToken == nil {
		return nil, false
	}
	return o.SubjectToken, true
}

// HasSubjectToken returns a boolean if a field has been set.
func (o *VcenterAuthenticationTokenIssueSpec) HasSubjectToken() bool {
	if o != nil && o.SubjectToken != nil {
		return true
	}

	return false
}

// SetSubjectToken gets a reference to the given string and assigns it to the SubjectToken field.
func (o *VcenterAuthenticationTokenIssueSpec) SetSubjectToken(v string) {
	o.SubjectToken = &v
}

// GetSubjectTokenType returns the SubjectTokenType field value if set, zero value otherwise.
func (o *VcenterAuthenticationTokenIssueSpec) GetSubjectTokenType() string {
	if o == nil || o.SubjectTokenType == nil {
		var ret string
		return ret
	}
	return *o.SubjectTokenType
}

// GetSubjectTokenTypeOk returns a tuple with the SubjectTokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterAuthenticationTokenIssueSpec) GetSubjectTokenTypeOk() (*string, bool) {
	if o == nil || o.SubjectTokenType == nil {
		return nil, false
	}
	return o.SubjectTokenType, true
}

// HasSubjectTokenType returns a boolean if a field has been set.
func (o *VcenterAuthenticationTokenIssueSpec) HasSubjectTokenType() bool {
	if o != nil && o.SubjectTokenType != nil {
		return true
	}

	return false
}

// SetSubjectTokenType gets a reference to the given string and assigns it to the SubjectTokenType field.
func (o *VcenterAuthenticationTokenIssueSpec) SetSubjectTokenType(v string) {
	o.SubjectTokenType = &v
}

// GetActorToken returns the ActorToken field value if set, zero value otherwise.
func (o *VcenterAuthenticationTokenIssueSpec) GetActorToken() string {
	if o == nil || o.ActorToken == nil {
		var ret string
		return ret
	}
	return *o.ActorToken
}

// GetActorTokenOk returns a tuple with the ActorToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterAuthenticationTokenIssueSpec) GetActorTokenOk() (*string, bool) {
	if o == nil || o.ActorToken == nil {
		return nil, false
	}
	return o.ActorToken, true
}

// HasActorToken returns a boolean if a field has been set.
func (o *VcenterAuthenticationTokenIssueSpec) HasActorToken() bool {
	if o != nil && o.ActorToken != nil {
		return true
	}

	return false
}

// SetActorToken gets a reference to the given string and assigns it to the ActorToken field.
func (o *VcenterAuthenticationTokenIssueSpec) SetActorToken(v string) {
	o.ActorToken = &v
}

// GetActorTokenType returns the ActorTokenType field value if set, zero value otherwise.
func (o *VcenterAuthenticationTokenIssueSpec) GetActorTokenType() string {
	if o == nil || o.ActorTokenType == nil {
		var ret string
		return ret
	}
	return *o.ActorTokenType
}

// GetActorTokenTypeOk returns a tuple with the ActorTokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterAuthenticationTokenIssueSpec) GetActorTokenTypeOk() (*string, bool) {
	if o == nil || o.ActorTokenType == nil {
		return nil, false
	}
	return o.ActorTokenType, true
}

// HasActorTokenType returns a boolean if a field has been set.
func (o *VcenterAuthenticationTokenIssueSpec) HasActorTokenType() bool {
	if o != nil && o.ActorTokenType != nil {
		return true
	}

	return false
}

// SetActorTokenType gets a reference to the given string and assigns it to the ActorTokenType field.
func (o *VcenterAuthenticationTokenIssueSpec) SetActorTokenType(v string) {
	o.ActorTokenType = &v
}

func (o VcenterAuthenticationTokenIssueSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["grant_type"] = o.GrantType
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	if o.Audience != nil {
		toSerialize["audience"] = o.Audience
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.RequestedTokenType != nil {
		toSerialize["requested_token_type"] = o.RequestedTokenType
	}
	if o.SubjectToken != nil {
		toSerialize["subject_token"] = o.SubjectToken
	}
	if o.SubjectTokenType != nil {
		toSerialize["subject_token_type"] = o.SubjectTokenType
	}
	if o.ActorToken != nil {
		toSerialize["actor_token"] = o.ActorToken
	}
	if o.ActorTokenType != nil {
		toSerialize["actor_token_type"] = o.ActorTokenType
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterAuthenticationTokenIssueSpec struct {
	value *VcenterAuthenticationTokenIssueSpec
	isSet bool
}

func (v NullableVcenterAuthenticationTokenIssueSpec) Get() *VcenterAuthenticationTokenIssueSpec {
	return v.value
}

func (v *NullableVcenterAuthenticationTokenIssueSpec) Set(val *VcenterAuthenticationTokenIssueSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterAuthenticationTokenIssueSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterAuthenticationTokenIssueSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterAuthenticationTokenIssueSpec(val *VcenterAuthenticationTokenIssueSpec) *NullableVcenterAuthenticationTokenIssueSpec {
	return &NullableVcenterAuthenticationTokenIssueSpec{value: val, isSet: true}
}

func (v NullableVcenterAuthenticationTokenIssueSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterAuthenticationTokenIssueSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


