/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterDeploymentHistoryMigrationOption The HistoryMigrationOption enumerated type defines the vCenter history migration option choices.
type VcenterDeploymentHistoryMigrationOption string

// List of vcenter.deployment.history_migration_option
const (
	VCENTERDEPLOYMENTHISTORYMIGRATIONOPTION_EVENTS_TASKS VcenterDeploymentHistoryMigrationOption = "EVENTS_TASKS"
	VCENTERDEPLOYMENTHISTORYMIGRATIONOPTION_ALL VcenterDeploymentHistoryMigrationOption = "ALL"
)

// All allowed values of VcenterDeploymentHistoryMigrationOption enum
var AllowedVcenterDeploymentHistoryMigrationOptionEnumValues = []VcenterDeploymentHistoryMigrationOption{
	"EVENTS_TASKS",
	"ALL",
}

func (v *VcenterDeploymentHistoryMigrationOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterDeploymentHistoryMigrationOption(value)
	for _, existing := range AllowedVcenterDeploymentHistoryMigrationOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterDeploymentHistoryMigrationOption", value)
}

// NewVcenterDeploymentHistoryMigrationOptionFromValue returns a pointer to a valid VcenterDeploymentHistoryMigrationOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterDeploymentHistoryMigrationOptionFromValue(v string) (*VcenterDeploymentHistoryMigrationOption, error) {
	ev := VcenterDeploymentHistoryMigrationOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterDeploymentHistoryMigrationOption: valid values are %v", v, AllowedVcenterDeploymentHistoryMigrationOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterDeploymentHistoryMigrationOption) IsValid() bool {
	for _, existing := range AllowedVcenterDeploymentHistoryMigrationOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.deployment.history_migration_option value
func (v VcenterDeploymentHistoryMigrationOption) Ptr() *VcenterDeploymentHistoryMigrationOption {
	return &v
}

type NullableVcenterDeploymentHistoryMigrationOption struct {
	value *VcenterDeploymentHistoryMigrationOption
	isSet bool
}

func (v NullableVcenterDeploymentHistoryMigrationOption) Get() *VcenterDeploymentHistoryMigrationOption {
	return v.value
}

func (v *NullableVcenterDeploymentHistoryMigrationOption) Set(val *VcenterDeploymentHistoryMigrationOption) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentHistoryMigrationOption) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentHistoryMigrationOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentHistoryMigrationOption(val *VcenterDeploymentHistoryMigrationOption) *NullableVcenterDeploymentHistoryMigrationOption {
	return &NullableVcenterDeploymentHistoryMigrationOption{value: val, isSet: true}
}

func (v NullableVcenterDeploymentHistoryMigrationOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentHistoryMigrationOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

