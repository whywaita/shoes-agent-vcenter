/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespacesNamespaceTemplatesCreateSpec struct for VcenterNamespacesNamespaceTemplatesCreateSpec
type VcenterNamespacesNamespaceTemplatesCreateSpec struct {
	// Name of the namespace template. The name is unique within the cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.
	Template string `json:"template"`
	// Resource quotas that this template defines. Resource quota on the namespace. Refer to vcenter.namespace_management.NamespaceResourceOptions.Info#createResourceQuotaType and use vcenter.namespace_management.NamespaceResourceOptions#get for retrieving the type for the value for this field. For an example of this, see ResourceQuotaOptionsV1.
	ResourceSpec map[string]interface{} `json:"resource_spec"`
	// Storage that this template defines and will be associated with a namespace after namespace realization. This field should not be empty and at least one policy should be supplied. The {link create} throws {term InvalidArgument} exception if this field is set empty.
	StorageSpecs []VcenterNamespacesInstancesStorageSpec `json:"storage_specs"`
	// vSphere Networks that this template captures and are associated with the namespace after namespace realization. vSphere Namespaces network objects to be associated with the namespace. The values of this list need to reference names of pre-existing Networks.Info structures. The field must be left unset if the cluster hosting the namespace uses NSXT_CONTAINER_PLUGIN as the network provider, since the network(s) for this namespace will be managed by NSX-T Container Plugin. If field is unset when the cluster hosting the namespace uses VSPHERE_NETWORK as its network provider, the namespace will automatically be associated with the cluster's Supervisor Primary Workload Network. The field currently accepts at most only 1 vSphere Namespaces network object reference. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.
	Networks *[]string `json:"networks,omitempty"`
	// Permissions associated with namespace template. If unset, only users with the Administrator role can use this template; for example, this template is applied to the namespace created by self-service-users with the Administrator role.
	Permissions *[]VcenterNamespacesNamespaceTemplatesSubject `json:"permissions,omitempty"`
}

// NewVcenterNamespacesNamespaceTemplatesCreateSpec instantiates a new VcenterNamespacesNamespaceTemplatesCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespacesNamespaceTemplatesCreateSpec(template string, resourceSpec map[string]interface{}, storageSpecs []VcenterNamespacesInstancesStorageSpec) *VcenterNamespacesNamespaceTemplatesCreateSpec {
	this := VcenterNamespacesNamespaceTemplatesCreateSpec{}
	this.Template = template
	this.ResourceSpec = resourceSpec
	this.StorageSpecs = storageSpecs
	return &this
}

// NewVcenterNamespacesNamespaceTemplatesCreateSpecWithDefaults instantiates a new VcenterNamespacesNamespaceTemplatesCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespacesNamespaceTemplatesCreateSpecWithDefaults() *VcenterNamespacesNamespaceTemplatesCreateSpec {
	this := VcenterNamespacesNamespaceTemplatesCreateSpec{}
	return &this
}

// GetTemplate returns the Template field value
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) GetTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) GetTemplateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Template, true
}

// SetTemplate sets field value
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) SetTemplate(v string) {
	o.Template = v
}

// GetResourceSpec returns the ResourceSpec field value
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) GetResourceSpec() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ResourceSpec
}

// GetResourceSpecOk returns a tuple with the ResourceSpec field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) GetResourceSpecOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceSpec, true
}

// SetResourceSpec sets field value
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) SetResourceSpec(v map[string]interface{}) {
	o.ResourceSpec = v
}

// GetStorageSpecs returns the StorageSpecs field value
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) GetStorageSpecs() []VcenterNamespacesInstancesStorageSpec {
	if o == nil {
		var ret []VcenterNamespacesInstancesStorageSpec
		return ret
	}

	return o.StorageSpecs
}

// GetStorageSpecsOk returns a tuple with the StorageSpecs field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) GetStorageSpecsOk() (*[]VcenterNamespacesInstancesStorageSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StorageSpecs, true
}

// SetStorageSpecs sets field value
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) SetStorageSpecs(v []VcenterNamespacesInstancesStorageSpec) {
	o.StorageSpecs = v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) GetNetworks() []string {
	if o == nil || o.Networks == nil {
		var ret []string
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) GetNetworksOk() (*[]string, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) SetNetworks(v []string) {
	o.Networks = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) GetPermissions() []VcenterNamespacesNamespaceTemplatesSubject {
	if o == nil || o.Permissions == nil {
		var ret []VcenterNamespacesNamespaceTemplatesSubject
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) GetPermissionsOk() (*[]VcenterNamespacesNamespaceTemplatesSubject, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []VcenterNamespacesNamespaceTemplatesSubject and assigns it to the Permissions field.
func (o *VcenterNamespacesNamespaceTemplatesCreateSpec) SetPermissions(v []VcenterNamespacesNamespaceTemplatesSubject) {
	o.Permissions = &v
}

func (o VcenterNamespacesNamespaceTemplatesCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["template"] = o.Template
	}
	if true {
		toSerialize["resource_spec"] = o.ResourceSpec
	}
	if true {
		toSerialize["storage_specs"] = o.StorageSpecs
	}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespacesNamespaceTemplatesCreateSpec struct {
	value *VcenterNamespacesNamespaceTemplatesCreateSpec
	isSet bool
}

func (v NullableVcenterNamespacesNamespaceTemplatesCreateSpec) Get() *VcenterNamespacesNamespaceTemplatesCreateSpec {
	return v.value
}

func (v *NullableVcenterNamespacesNamespaceTemplatesCreateSpec) Set(val *VcenterNamespacesNamespaceTemplatesCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesNamespaceTemplatesCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesNamespaceTemplatesCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesNamespaceTemplatesCreateSpec(val *VcenterNamespacesNamespaceTemplatesCreateSpec) *NullableVcenterNamespacesNamespaceTemplatesCreateSpec {
	return &NullableVcenterNamespacesNamespaceTemplatesCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespacesNamespaceTemplatesCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesNamespaceTemplatesCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


