/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMRelocateSpec struct for VcenterVMRelocateSpec
type VcenterVMRelocateSpec struct {
	Placement *VcenterVMRelocatePlacementSpec `json:"placement,omitempty"`
	// Individual disk relocation map. If unset, all disks will migrate to the datastore specified in the VM.RelocatePlacementSpec.datastore field of VM.RelocateSpec.placement. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.
	Disks *[]VcenterVMRelocateSpecDisks `json:"disks,omitempty"`
}

// NewVcenterVMRelocateSpec instantiates a new VcenterVMRelocateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMRelocateSpec() *VcenterVMRelocateSpec {
	this := VcenterVMRelocateSpec{}
	return &this
}

// NewVcenterVMRelocateSpecWithDefaults instantiates a new VcenterVMRelocateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMRelocateSpecWithDefaults() *VcenterVMRelocateSpec {
	this := VcenterVMRelocateSpec{}
	return &this
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *VcenterVMRelocateSpec) GetPlacement() VcenterVMRelocatePlacementSpec {
	if o == nil || o.Placement == nil {
		var ret VcenterVMRelocatePlacementSpec
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMRelocateSpec) GetPlacementOk() (*VcenterVMRelocatePlacementSpec, bool) {
	if o == nil || o.Placement == nil {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *VcenterVMRelocateSpec) HasPlacement() bool {
	if o != nil && o.Placement != nil {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given VcenterVMRelocatePlacementSpec and assigns it to the Placement field.
func (o *VcenterVMRelocateSpec) SetPlacement(v VcenterVMRelocatePlacementSpec) {
	o.Placement = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *VcenterVMRelocateSpec) GetDisks() []VcenterVMRelocateSpecDisks {
	if o == nil || o.Disks == nil {
		var ret []VcenterVMRelocateSpecDisks
		return ret
	}
	return *o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMRelocateSpec) GetDisksOk() (*[]VcenterVMRelocateSpecDisks, bool) {
	if o == nil || o.Disks == nil {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *VcenterVMRelocateSpec) HasDisks() bool {
	if o != nil && o.Disks != nil {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []VcenterVMRelocateSpecDisks and assigns it to the Disks field.
func (o *VcenterVMRelocateSpec) SetDisks(v []VcenterVMRelocateSpecDisks) {
	o.Disks = &v
}

func (o VcenterVMRelocateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	if o.Disks != nil {
		toSerialize["disks"] = o.Disks
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMRelocateSpec struct {
	value *VcenterVMRelocateSpec
	isSet bool
}

func (v NullableVcenterVMRelocateSpec) Get() *VcenterVMRelocateSpec {
	return v.value
}

func (v *NullableVcenterVMRelocateSpec) Set(val *VcenterVMRelocateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMRelocateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMRelocateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMRelocateSpec(val *VcenterVMRelocateSpec) *NullableVcenterVMRelocateSpec {
	return &NullableVcenterVMRelocateSpec{value: val, isSet: true}
}

func (v NullableVcenterVMRelocateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMRelocateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


