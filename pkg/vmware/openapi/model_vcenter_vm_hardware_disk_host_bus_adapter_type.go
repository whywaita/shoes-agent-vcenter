/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareDiskHostBusAdapterType The Disk.HostBusAdapterType enumerated type defines the valid types of host bus adapters that may be used for attaching a virtual storage device to a virtual machine.
type VcenterVmHardwareDiskHostBusAdapterType string

// List of vcenter.vm.hardware.disk.host_bus_adapter_type
const (
	VCENTERVMHARDWAREDISKHOSTBUSADAPTERTYPE_IDE VcenterVmHardwareDiskHostBusAdapterType = "IDE"
	VCENTERVMHARDWAREDISKHOSTBUSADAPTERTYPE_SCSI VcenterVmHardwareDiskHostBusAdapterType = "SCSI"
	VCENTERVMHARDWAREDISKHOSTBUSADAPTERTYPE_SATA VcenterVmHardwareDiskHostBusAdapterType = "SATA"
	VCENTERVMHARDWAREDISKHOSTBUSADAPTERTYPE_NVME VcenterVmHardwareDiskHostBusAdapterType = "NVME"
)

// All allowed values of VcenterVmHardwareDiskHostBusAdapterType enum
var AllowedVcenterVmHardwareDiskHostBusAdapterTypeEnumValues = []VcenterVmHardwareDiskHostBusAdapterType{
	"IDE",
	"SCSI",
	"SATA",
	"NVME",
}

func (v *VcenterVmHardwareDiskHostBusAdapterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareDiskHostBusAdapterType(value)
	for _, existing := range AllowedVcenterVmHardwareDiskHostBusAdapterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareDiskHostBusAdapterType", value)
}

// NewVcenterVmHardwareDiskHostBusAdapterTypeFromValue returns a pointer to a valid VcenterVmHardwareDiskHostBusAdapterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareDiskHostBusAdapterTypeFromValue(v string) (*VcenterVmHardwareDiskHostBusAdapterType, error) {
	ev := VcenterVmHardwareDiskHostBusAdapterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareDiskHostBusAdapterType: valid values are %v", v, AllowedVcenterVmHardwareDiskHostBusAdapterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareDiskHostBusAdapterType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareDiskHostBusAdapterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.disk.host_bus_adapter_type value
func (v VcenterVmHardwareDiskHostBusAdapterType) Ptr() *VcenterVmHardwareDiskHostBusAdapterType {
	return &v
}

type NullableVcenterVmHardwareDiskHostBusAdapterType struct {
	value *VcenterVmHardwareDiskHostBusAdapterType
	isSet bool
}

func (v NullableVcenterVmHardwareDiskHostBusAdapterType) Get() *VcenterVmHardwareDiskHostBusAdapterType {
	return v.value
}

func (v *NullableVcenterVmHardwareDiskHostBusAdapterType) Set(val *VcenterVmHardwareDiskHostBusAdapterType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareDiskHostBusAdapterType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareDiskHostBusAdapterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareDiskHostBusAdapterType(val *VcenterVmHardwareDiskHostBusAdapterType) *NullableVcenterVmHardwareDiskHostBusAdapterType {
	return &NullableVcenterVmHardwareDiskHostBusAdapterType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareDiskHostBusAdapterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareDiskHostBusAdapterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

