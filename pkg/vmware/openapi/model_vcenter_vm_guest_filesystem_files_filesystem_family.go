/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmGuestFilesystemFilesFilesystemFamily The Files.FilesystemFamily enumerated type defines the types of guest operating fllesystem.
type VcenterVmGuestFilesystemFilesFilesystemFamily string

// List of VcenterVmGuestFilesystemFilesFilesystemFamily
const (
	VCENTERVMGUESTFILESYSTEMFILESFILESYSTEMFAMILY_WINDOWS VcenterVmGuestFilesystemFilesFilesystemFamily = "WINDOWS"
	VCENTERVMGUESTFILESYSTEMFILESFILESYSTEMFAMILY_POSIX VcenterVmGuestFilesystemFilesFilesystemFamily = "POSIX"
)

// All allowed values of VcenterVmGuestFilesystemFilesFilesystemFamily enum
var AllowedVcenterVmGuestFilesystemFilesFilesystemFamilyEnumValues = []VcenterVmGuestFilesystemFilesFilesystemFamily{
	"WINDOWS",
	"POSIX",
}

func (v *VcenterVmGuestFilesystemFilesFilesystemFamily) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmGuestFilesystemFilesFilesystemFamily(value)
	for _, existing := range AllowedVcenterVmGuestFilesystemFilesFilesystemFamilyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmGuestFilesystemFilesFilesystemFamily", value)
}

// NewVcenterVmGuestFilesystemFilesFilesystemFamilyFromValue returns a pointer to a valid VcenterVmGuestFilesystemFilesFilesystemFamily
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmGuestFilesystemFilesFilesystemFamilyFromValue(v string) (*VcenterVmGuestFilesystemFilesFilesystemFamily, error) {
	ev := VcenterVmGuestFilesystemFilesFilesystemFamily(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmGuestFilesystemFilesFilesystemFamily: valid values are %v", v, AllowedVcenterVmGuestFilesystemFilesFilesystemFamilyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmGuestFilesystemFilesFilesystemFamily) IsValid() bool {
	for _, existing := range AllowedVcenterVmGuestFilesystemFilesFilesystemFamilyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterVmGuestFilesystemFilesFilesystemFamily value
func (v VcenterVmGuestFilesystemFilesFilesystemFamily) Ptr() *VcenterVmGuestFilesystemFilesFilesystemFamily {
	return &v
}

type NullableVcenterVmGuestFilesystemFilesFilesystemFamily struct {
	value *VcenterVmGuestFilesystemFilesFilesystemFamily
	isSet bool
}

func (v NullableVcenterVmGuestFilesystemFilesFilesystemFamily) Get() *VcenterVmGuestFilesystemFilesFilesystemFamily {
	return v.value
}

func (v *NullableVcenterVmGuestFilesystemFilesFilesystemFamily) Set(val *VcenterVmGuestFilesystemFilesFilesystemFamily) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestFilesystemFilesFilesystemFamily) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestFilesystemFilesFilesystemFamily) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestFilesystemFilesFilesystemFamily(val *VcenterVmGuestFilesystemFilesFilesystemFamily) *NullableVcenterVmGuestFilesystemFilesFilesystemFamily {
	return &NullableVcenterVmGuestFilesystemFilesFilesystemFamily{value: val, isSet: true}
}

func (v NullableVcenterVmGuestFilesystemFilesFilesystemFamily) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestFilesystemFilesFilesystemFamily) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

