/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterOvfDiskProvisioningType The {@name DiskProvisioningType} {@term enumerated type} defines the virtual disk provisioning types that can be set for a disk on the target platform.
type VcenterOvfDiskProvisioningType string

// List of vcenter.ovf.disk_provisioning_type
const (
	VCENTEROVFDISKPROVISIONINGTYPE_THIN VcenterOvfDiskProvisioningType = "thin"
	VCENTEROVFDISKPROVISIONINGTYPE_THICK VcenterOvfDiskProvisioningType = "thick"
	VCENTEROVFDISKPROVISIONINGTYPE_EAGER_ZEROED_THICK VcenterOvfDiskProvisioningType = "eagerZeroedThick"
)

// All allowed values of VcenterOvfDiskProvisioningType enum
var AllowedVcenterOvfDiskProvisioningTypeEnumValues = []VcenterOvfDiskProvisioningType{
	"thin",
	"thick",
	"eagerZeroedThick",
}

func (v *VcenterOvfDiskProvisioningType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterOvfDiskProvisioningType(value)
	for _, existing := range AllowedVcenterOvfDiskProvisioningTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterOvfDiskProvisioningType", value)
}

// NewVcenterOvfDiskProvisioningTypeFromValue returns a pointer to a valid VcenterOvfDiskProvisioningType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterOvfDiskProvisioningTypeFromValue(v string) (*VcenterOvfDiskProvisioningType, error) {
	ev := VcenterOvfDiskProvisioningType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterOvfDiskProvisioningType: valid values are %v", v, AllowedVcenterOvfDiskProvisioningTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterOvfDiskProvisioningType) IsValid() bool {
	for _, existing := range AllowedVcenterOvfDiskProvisioningTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.ovf.disk_provisioning_type value
func (v VcenterOvfDiskProvisioningType) Ptr() *VcenterOvfDiskProvisioningType {
	return &v
}

type NullableVcenterOvfDiskProvisioningType struct {
	value *VcenterOvfDiskProvisioningType
	isSet bool
}

func (v NullableVcenterOvfDiskProvisioningType) Get() *VcenterOvfDiskProvisioningType {
	return v.value
}

func (v *NullableVcenterOvfDiskProvisioningType) Set(val *VcenterOvfDiskProvisioningType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterOvfDiskProvisioningType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterOvfDiskProvisioningType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterOvfDiskProvisioningType(val *VcenterOvfDiskProvisioningType) *NullableVcenterOvfDiskProvisioningType {
	return &NullableVcenterOvfDiskProvisioningType{value: val, isSet: true}
}

func (v NullableVcenterOvfDiskProvisioningType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterOvfDiskProvisioningType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

