/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmGuestNetworkingInterfacesIpAddressOrigin The Interfaces.IpAddressOrigin enumerated type specifies how an IP address was obtained for an interface. See RFC 4293 IpAddressOriginTC.
type VcenterVmGuestNetworkingInterfacesIpAddressOrigin string

// List of vcenter.vm.guest.networking.interfaces.ip_address_origin
const (
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSORIGIN_OTHER VcenterVmGuestNetworkingInterfacesIpAddressOrigin = "OTHER"
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSORIGIN_MANUAL VcenterVmGuestNetworkingInterfacesIpAddressOrigin = "MANUAL"
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSORIGIN_DHCP VcenterVmGuestNetworkingInterfacesIpAddressOrigin = "DHCP"
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSORIGIN_LINKLAYER VcenterVmGuestNetworkingInterfacesIpAddressOrigin = "LINKLAYER"
	VCENTERVMGUESTNETWORKINGINTERFACESIPADDRESSORIGIN_RANDOM VcenterVmGuestNetworkingInterfacesIpAddressOrigin = "RANDOM"
)

// All allowed values of VcenterVmGuestNetworkingInterfacesIpAddressOrigin enum
var AllowedVcenterVmGuestNetworkingInterfacesIpAddressOriginEnumValues = []VcenterVmGuestNetworkingInterfacesIpAddressOrigin{
	"OTHER",
	"MANUAL",
	"DHCP",
	"LINKLAYER",
	"RANDOM",
}

func (v *VcenterVmGuestNetworkingInterfacesIpAddressOrigin) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmGuestNetworkingInterfacesIpAddressOrigin(value)
	for _, existing := range AllowedVcenterVmGuestNetworkingInterfacesIpAddressOriginEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmGuestNetworkingInterfacesIpAddressOrigin", value)
}

// NewVcenterVmGuestNetworkingInterfacesIpAddressOriginFromValue returns a pointer to a valid VcenterVmGuestNetworkingInterfacesIpAddressOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmGuestNetworkingInterfacesIpAddressOriginFromValue(v string) (*VcenterVmGuestNetworkingInterfacesIpAddressOrigin, error) {
	ev := VcenterVmGuestNetworkingInterfacesIpAddressOrigin(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmGuestNetworkingInterfacesIpAddressOrigin: valid values are %v", v, AllowedVcenterVmGuestNetworkingInterfacesIpAddressOriginEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmGuestNetworkingInterfacesIpAddressOrigin) IsValid() bool {
	for _, existing := range AllowedVcenterVmGuestNetworkingInterfacesIpAddressOriginEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.guest.networking.interfaces.ip_address_origin value
func (v VcenterVmGuestNetworkingInterfacesIpAddressOrigin) Ptr() *VcenterVmGuestNetworkingInterfacesIpAddressOrigin {
	return &v
}

type NullableVcenterVmGuestNetworkingInterfacesIpAddressOrigin struct {
	value *VcenterVmGuestNetworkingInterfacesIpAddressOrigin
	isSet bool
}

func (v NullableVcenterVmGuestNetworkingInterfacesIpAddressOrigin) Get() *VcenterVmGuestNetworkingInterfacesIpAddressOrigin {
	return v.value
}

func (v *NullableVcenterVmGuestNetworkingInterfacesIpAddressOrigin) Set(val *VcenterVmGuestNetworkingInterfacesIpAddressOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestNetworkingInterfacesIpAddressOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestNetworkingInterfacesIpAddressOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestNetworkingInterfacesIpAddressOrigin(val *VcenterVmGuestNetworkingInterfacesIpAddressOrigin) *NullableVcenterVmGuestNetworkingInterfacesIpAddressOrigin {
	return &NullableVcenterVmGuestNetworkingInterfacesIpAddressOrigin{value: val, isSet: true}
}

func (v NullableVcenterVmGuestNetworkingInterfacesIpAddressOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestNetworkingInterfacesIpAddressOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

