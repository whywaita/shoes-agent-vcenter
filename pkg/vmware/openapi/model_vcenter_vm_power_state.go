/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmPowerState the model 'VcenterVmPowerState'
type VcenterVmPowerState string

// List of vcenter.vm.power.state
const (
	VCENTERVMPOWERSTATE_POWERED_OFF VcenterVmPowerState = "POWERED_OFF"
	VCENTERVMPOWERSTATE_POWERED_ON VcenterVmPowerState = "POWERED_ON"
	VCENTERVMPOWERSTATE_SUSPENDED VcenterVmPowerState = "SUSPENDED"
)

// All allowed values of VcenterVmPowerState enum
var AllowedVcenterVmPowerStateEnumValues = []VcenterVmPowerState{
	"POWERED_OFF",
	"POWERED_ON",
	"SUSPENDED",
}

func (v *VcenterVmPowerState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmPowerState(value)
	for _, existing := range AllowedVcenterVmPowerStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmPowerState", value)
}

// NewVcenterVmPowerStateFromValue returns a pointer to a valid VcenterVmPowerState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmPowerStateFromValue(v string) (*VcenterVmPowerState, error) {
	ev := VcenterVmPowerState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmPowerState: valid values are %v", v, AllowedVcenterVmPowerStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmPowerState) IsValid() bool {
	for _, existing := range AllowedVcenterVmPowerStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.power.state value
func (v VcenterVmPowerState) Ptr() *VcenterVmPowerState {
	return &v
}

type NullableVcenterVmPowerState struct {
	value *VcenterVmPowerState
	isSet bool
}

func (v NullableVcenterVmPowerState) Get() *VcenterVmPowerState {
	return v.value
}

func (v *NullableVcenterVmPowerState) Set(val *VcenterVmPowerState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmPowerState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmPowerState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmPowerState(val *VcenterVmPowerState) *NullableVcenterVmPowerState {
	return &NullableVcenterVmPowerState{value: val, isSet: true}
}

func (v NullableVcenterVmPowerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmPowerState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

