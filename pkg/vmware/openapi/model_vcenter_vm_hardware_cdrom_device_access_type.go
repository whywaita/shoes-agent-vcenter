/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareCdromDeviceAccessType The Cdrom.DeviceAccessType enumerated type defines the valid device access types for a physical device packing of a virtual CD-ROM device.
type VcenterVmHardwareCdromDeviceAccessType string

// List of vcenter.vm.hardware.cdrom.device_access_type
const (
	VCENTERVMHARDWARECDROMDEVICEACCESSTYPE_EMULATION VcenterVmHardwareCdromDeviceAccessType = "EMULATION"
	VCENTERVMHARDWARECDROMDEVICEACCESSTYPE_PASSTHRU VcenterVmHardwareCdromDeviceAccessType = "PASSTHRU"
	VCENTERVMHARDWARECDROMDEVICEACCESSTYPE_PASSTHRU_EXCLUSIVE VcenterVmHardwareCdromDeviceAccessType = "PASSTHRU_EXCLUSIVE"
)

// All allowed values of VcenterVmHardwareCdromDeviceAccessType enum
var AllowedVcenterVmHardwareCdromDeviceAccessTypeEnumValues = []VcenterVmHardwareCdromDeviceAccessType{
	"EMULATION",
	"PASSTHRU",
	"PASSTHRU_EXCLUSIVE",
}

func (v *VcenterVmHardwareCdromDeviceAccessType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareCdromDeviceAccessType(value)
	for _, existing := range AllowedVcenterVmHardwareCdromDeviceAccessTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareCdromDeviceAccessType", value)
}

// NewVcenterVmHardwareCdromDeviceAccessTypeFromValue returns a pointer to a valid VcenterVmHardwareCdromDeviceAccessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareCdromDeviceAccessTypeFromValue(v string) (*VcenterVmHardwareCdromDeviceAccessType, error) {
	ev := VcenterVmHardwareCdromDeviceAccessType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareCdromDeviceAccessType: valid values are %v", v, AllowedVcenterVmHardwareCdromDeviceAccessTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareCdromDeviceAccessType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareCdromDeviceAccessTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.cdrom.device_access_type value
func (v VcenterVmHardwareCdromDeviceAccessType) Ptr() *VcenterVmHardwareCdromDeviceAccessType {
	return &v
}

type NullableVcenterVmHardwareCdromDeviceAccessType struct {
	value *VcenterVmHardwareCdromDeviceAccessType
	isSet bool
}

func (v NullableVcenterVmHardwareCdromDeviceAccessType) Get() *VcenterVmHardwareCdromDeviceAccessType {
	return v.value
}

func (v *NullableVcenterVmHardwareCdromDeviceAccessType) Set(val *VcenterVmHardwareCdromDeviceAccessType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareCdromDeviceAccessType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareCdromDeviceAccessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareCdromDeviceAccessType(val *VcenterVmHardwareCdromDeviceAccessType) *NullableVcenterVmHardwareCdromDeviceAccessType {
	return &NullableVcenterVmHardwareCdromDeviceAccessType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareCdromDeviceAccessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareCdromDeviceAccessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

