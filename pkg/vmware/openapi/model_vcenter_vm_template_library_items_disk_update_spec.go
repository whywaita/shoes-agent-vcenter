/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsDiskUpdateSpec struct for VcenterVmTemplateLibraryItemsDiskUpdateSpec
type VcenterVmTemplateLibraryItemsDiskUpdateSpec struct {
	// Updated capacity of the virtual disk backing in bytes. This value has to be larger than the original capacity of the disk.
	Capacity int64 `json:"capacity"`
}

// NewVcenterVmTemplateLibraryItemsDiskUpdateSpec instantiates a new VcenterVmTemplateLibraryItemsDiskUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsDiskUpdateSpec(capacity int64) *VcenterVmTemplateLibraryItemsDiskUpdateSpec {
	this := VcenterVmTemplateLibraryItemsDiskUpdateSpec{}
	this.Capacity = capacity
	return &this
}

// NewVcenterVmTemplateLibraryItemsDiskUpdateSpecWithDefaults instantiates a new VcenterVmTemplateLibraryItemsDiskUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsDiskUpdateSpecWithDefaults() *VcenterVmTemplateLibraryItemsDiskUpdateSpec {
	this := VcenterVmTemplateLibraryItemsDiskUpdateSpec{}
	return &this
}

// GetCapacity returns the Capacity field value
func (o *VcenterVmTemplateLibraryItemsDiskUpdateSpec) GetCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsDiskUpdateSpec) GetCapacityOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *VcenterVmTemplateLibraryItemsDiskUpdateSpec) SetCapacity(v int64) {
	o.Capacity = v
}

func (o VcenterVmTemplateLibraryItemsDiskUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["capacity"] = o.Capacity
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsDiskUpdateSpec struct {
	value *VcenterVmTemplateLibraryItemsDiskUpdateSpec
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsDiskUpdateSpec) Get() *VcenterVmTemplateLibraryItemsDiskUpdateSpec {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsDiskUpdateSpec) Set(val *VcenterVmTemplateLibraryItemsDiskUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsDiskUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsDiskUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsDiskUpdateSpec(val *VcenterVmTemplateLibraryItemsDiskUpdateSpec) *NullableVcenterVmTemplateLibraryItemsDiskUpdateSpec {
	return &NullableVcenterVmTemplateLibraryItemsDiskUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsDiskUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsDiskUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


