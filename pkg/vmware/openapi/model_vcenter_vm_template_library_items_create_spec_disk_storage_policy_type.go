/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType Policy type for a virtual machine template's disk.
type VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType string

// List of vcenter.vm_template.library_items.create_spec_disk_storage_policy.type
const (
	VCENTERVMTEMPLATELIBRARYITEMSCREATESPECDISKSTORAGEPOLICYTYPE_USE_SPECIFIED_POLICY VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType = "USE_SPECIFIED_POLICY"
)

// All allowed values of VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType enum
var AllowedVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyTypeEnumValues = []VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType{
	"USE_SPECIFIED_POLICY",
}

func (v *VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType(value)
	for _, existing := range AllowedVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType", value)
}

// NewVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyTypeFromValue returns a pointer to a valid VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyTypeFromValue(v string) (*VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType, error) {
	ev := VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType: valid values are %v", v, AllowedVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) IsValid() bool {
	for _, existing := range AllowedVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm_template.library_items.create_spec_disk_storage_policy.type value
func (v VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) Ptr() *VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType {
	return &v
}

type NullableVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType struct {
	value *VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) Get() *VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) Set(val *VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType(val *VcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) *NullableVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType {
	return &NullableVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsCreateSpecDiskStoragePolicyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

