/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsCreateSpec struct for VcenterVmTemplateLibraryItemsCreateSpec
type VcenterVmTemplateLibraryItemsCreateSpec struct {
	// Identifier of the source virtual machine to create the library item from.
	SourceVm string `json:"source_vm"`
	// Name of the library item.
	Name string `json:"name"`
	// Description of the library item.
	Description *string `json:"description,omitempty"`
	// Identifier of the library in which the new library item should be created.
	Library string `json:"library"`
	VmHomeStorage *VcenterVmTemplateLibraryItemsCreateSpecVmHomeStorage `json:"vm_home_storage,omitempty"`
	DiskStorage *VcenterVmTemplateLibraryItemsCreateSpecDiskStorage `json:"disk_storage,omitempty"`
	// Storage specification for individual disks in the virtual machine template. This is specified as a mapping between disk identifiers in the source virtual machine and their respective storage specifications.
	DiskStorageOverrides *[]VcenterVmTemplateLibraryItemsCreateSpecDiskStorageOverrides `json:"disk_storage_overrides,omitempty"`
	Placement *VcenterVmTemplateLibraryItemsCreatePlacementSpec `json:"placement,omitempty"`
}

// NewVcenterVmTemplateLibraryItemsCreateSpec instantiates a new VcenterVmTemplateLibraryItemsCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsCreateSpec(sourceVm string, name string, library string) *VcenterVmTemplateLibraryItemsCreateSpec {
	this := VcenterVmTemplateLibraryItemsCreateSpec{}
	this.SourceVm = sourceVm
	this.Name = name
	this.Library = library
	return &this
}

// NewVcenterVmTemplateLibraryItemsCreateSpecWithDefaults instantiates a new VcenterVmTemplateLibraryItemsCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsCreateSpecWithDefaults() *VcenterVmTemplateLibraryItemsCreateSpec {
	this := VcenterVmTemplateLibraryItemsCreateSpec{}
	return &this
}

// GetSourceVm returns the SourceVm field value
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetSourceVm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceVm
}

// GetSourceVmOk returns a tuple with the SourceVm field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetSourceVmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceVm, true
}

// SetSourceVm sets field value
func (o *VcenterVmTemplateLibraryItemsCreateSpec) SetSourceVm(v string) {
	o.SourceVm = v
}

// GetName returns the Name field value
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterVmTemplateLibraryItemsCreateSpec) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetLibrary returns the Library field value
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetLibrary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Library
}

// GetLibraryOk returns a tuple with the Library field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetLibraryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Library, true
}

// SetLibrary sets field value
func (o *VcenterVmTemplateLibraryItemsCreateSpec) SetLibrary(v string) {
	o.Library = v
}

// GetVmHomeStorage returns the VmHomeStorage field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetVmHomeStorage() VcenterVmTemplateLibraryItemsCreateSpecVmHomeStorage {
	if o == nil || o.VmHomeStorage == nil {
		var ret VcenterVmTemplateLibraryItemsCreateSpecVmHomeStorage
		return ret
	}
	return *o.VmHomeStorage
}

// GetVmHomeStorageOk returns a tuple with the VmHomeStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetVmHomeStorageOk() (*VcenterVmTemplateLibraryItemsCreateSpecVmHomeStorage, bool) {
	if o == nil || o.VmHomeStorage == nil {
		return nil, false
	}
	return o.VmHomeStorage, true
}

// HasVmHomeStorage returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) HasVmHomeStorage() bool {
	if o != nil && o.VmHomeStorage != nil {
		return true
	}

	return false
}

// SetVmHomeStorage gets a reference to the given VcenterVmTemplateLibraryItemsCreateSpecVmHomeStorage and assigns it to the VmHomeStorage field.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) SetVmHomeStorage(v VcenterVmTemplateLibraryItemsCreateSpecVmHomeStorage) {
	o.VmHomeStorage = &v
}

// GetDiskStorage returns the DiskStorage field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetDiskStorage() VcenterVmTemplateLibraryItemsCreateSpecDiskStorage {
	if o == nil || o.DiskStorage == nil {
		var ret VcenterVmTemplateLibraryItemsCreateSpecDiskStorage
		return ret
	}
	return *o.DiskStorage
}

// GetDiskStorageOk returns a tuple with the DiskStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetDiskStorageOk() (*VcenterVmTemplateLibraryItemsCreateSpecDiskStorage, bool) {
	if o == nil || o.DiskStorage == nil {
		return nil, false
	}
	return o.DiskStorage, true
}

// HasDiskStorage returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) HasDiskStorage() bool {
	if o != nil && o.DiskStorage != nil {
		return true
	}

	return false
}

// SetDiskStorage gets a reference to the given VcenterVmTemplateLibraryItemsCreateSpecDiskStorage and assigns it to the DiskStorage field.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) SetDiskStorage(v VcenterVmTemplateLibraryItemsCreateSpecDiskStorage) {
	o.DiskStorage = &v
}

// GetDiskStorageOverrides returns the DiskStorageOverrides field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetDiskStorageOverrides() []VcenterVmTemplateLibraryItemsCreateSpecDiskStorageOverrides {
	if o == nil || o.DiskStorageOverrides == nil {
		var ret []VcenterVmTemplateLibraryItemsCreateSpecDiskStorageOverrides
		return ret
	}
	return *o.DiskStorageOverrides
}

// GetDiskStorageOverridesOk returns a tuple with the DiskStorageOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetDiskStorageOverridesOk() (*[]VcenterVmTemplateLibraryItemsCreateSpecDiskStorageOverrides, bool) {
	if o == nil || o.DiskStorageOverrides == nil {
		return nil, false
	}
	return o.DiskStorageOverrides, true
}

// HasDiskStorageOverrides returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) HasDiskStorageOverrides() bool {
	if o != nil && o.DiskStorageOverrides != nil {
		return true
	}

	return false
}

// SetDiskStorageOverrides gets a reference to the given []VcenterVmTemplateLibraryItemsCreateSpecDiskStorageOverrides and assigns it to the DiskStorageOverrides field.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) SetDiskStorageOverrides(v []VcenterVmTemplateLibraryItemsCreateSpecDiskStorageOverrides) {
	o.DiskStorageOverrides = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetPlacement() VcenterVmTemplateLibraryItemsCreatePlacementSpec {
	if o == nil || o.Placement == nil {
		var ret VcenterVmTemplateLibraryItemsCreatePlacementSpec
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) GetPlacementOk() (*VcenterVmTemplateLibraryItemsCreatePlacementSpec, bool) {
	if o == nil || o.Placement == nil {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) HasPlacement() bool {
	if o != nil && o.Placement != nil {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given VcenterVmTemplateLibraryItemsCreatePlacementSpec and assigns it to the Placement field.
func (o *VcenterVmTemplateLibraryItemsCreateSpec) SetPlacement(v VcenterVmTemplateLibraryItemsCreatePlacementSpec) {
	o.Placement = &v
}

func (o VcenterVmTemplateLibraryItemsCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source_vm"] = o.SourceVm
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["library"] = o.Library
	}
	if o.VmHomeStorage != nil {
		toSerialize["vm_home_storage"] = o.VmHomeStorage
	}
	if o.DiskStorage != nil {
		toSerialize["disk_storage"] = o.DiskStorage
	}
	if o.DiskStorageOverrides != nil {
		toSerialize["disk_storage_overrides"] = o.DiskStorageOverrides
	}
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsCreateSpec struct {
	value *VcenterVmTemplateLibraryItemsCreateSpec
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsCreateSpec) Get() *VcenterVmTemplateLibraryItemsCreateSpec {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsCreateSpec) Set(val *VcenterVmTemplateLibraryItemsCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsCreateSpec(val *VcenterVmTemplateLibraryItemsCreateSpec) *NullableVcenterVmTemplateLibraryItemsCreateSpec {
	return &NullableVcenterVmTemplateLibraryItemsCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


