/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementIPRange struct for VcenterNamespaceManagementIPRange
type VcenterNamespaceManagementIPRange struct {
	// The starting address of the range.
	Address string `json:"address"`
	// The number of IP addresses in the range.
	Count int64 `json:"count"`
}

// NewVcenterNamespaceManagementIPRange instantiates a new VcenterNamespaceManagementIPRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementIPRange(address string, count int64) *VcenterNamespaceManagementIPRange {
	this := VcenterNamespaceManagementIPRange{}
	this.Address = address
	this.Count = count
	return &this
}

// NewVcenterNamespaceManagementIPRangeWithDefaults instantiates a new VcenterNamespaceManagementIPRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementIPRangeWithDefaults() *VcenterNamespaceManagementIPRange {
	this := VcenterNamespaceManagementIPRange{}
	return &this
}

// GetAddress returns the Address field value
func (o *VcenterNamespaceManagementIPRange) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementIPRange) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *VcenterNamespaceManagementIPRange) SetAddress(v string) {
	o.Address = v
}

// GetCount returns the Count field value
func (o *VcenterNamespaceManagementIPRange) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementIPRange) GetCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *VcenterNamespaceManagementIPRange) SetCount(v int64) {
	o.Count = v
}

func (o VcenterNamespaceManagementIPRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementIPRange struct {
	value *VcenterNamespaceManagementIPRange
	isSet bool
}

func (v NullableVcenterNamespaceManagementIPRange) Get() *VcenterNamespaceManagementIPRange {
	return v.value
}

func (v *NullableVcenterNamespaceManagementIPRange) Set(val *VcenterNamespaceManagementIPRange) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementIPRange) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementIPRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementIPRange(val *VcenterNamespaceManagementIPRange) *NullableVcenterNamespaceManagementIPRange {
	return &NullableVcenterNamespaceManagementIPRange{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementIPRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementIPRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


