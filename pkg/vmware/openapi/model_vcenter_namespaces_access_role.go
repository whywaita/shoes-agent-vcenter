/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespacesAccessRole The Access.Role enumerated type lists the default roles which can be associated with a subject on a domain on the namespace.
type VcenterNamespacesAccessRole string

// List of VcenterNamespacesAccessRole
const (
	VCENTERNAMESPACESACCESSROLE_OWNER VcenterNamespacesAccessRole = "OWNER"
	VCENTERNAMESPACESACCESSROLE_EDIT VcenterNamespacesAccessRole = "EDIT"
	VCENTERNAMESPACESACCESSROLE_VIEW VcenterNamespacesAccessRole = "VIEW"
)

// All allowed values of VcenterNamespacesAccessRole enum
var AllowedVcenterNamespacesAccessRoleEnumValues = []VcenterNamespacesAccessRole{
	"OWNER",
	"EDIT",
	"VIEW",
}

func (v *VcenterNamespacesAccessRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespacesAccessRole(value)
	for _, existing := range AllowedVcenterNamespacesAccessRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespacesAccessRole", value)
}

// NewVcenterNamespacesAccessRoleFromValue returns a pointer to a valid VcenterNamespacesAccessRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespacesAccessRoleFromValue(v string) (*VcenterNamespacesAccessRole, error) {
	ev := VcenterNamespacesAccessRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespacesAccessRole: valid values are %v", v, AllowedVcenterNamespacesAccessRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespacesAccessRole) IsValid() bool {
	for _, existing := range AllowedVcenterNamespacesAccessRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespacesAccessRole value
func (v VcenterNamespacesAccessRole) Ptr() *VcenterNamespacesAccessRole {
	return &v
}

type NullableVcenterNamespacesAccessRole struct {
	value *VcenterNamespacesAccessRole
	isSet bool
}

func (v NullableVcenterNamespacesAccessRole) Get() *VcenterNamespacesAccessRole {
	return v.value
}

func (v *NullableVcenterNamespacesAccessRole) Set(val *VcenterNamespacesAccessRole) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesAccessRole) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesAccessRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesAccessRole(val *VcenterNamespacesAccessRole) *NullableVcenterNamespacesAccessRole {
	return &NullableVcenterNamespacesAccessRole{value: val, isSet: true}
}

func (v NullableVcenterNamespacesAccessRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesAccessRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

