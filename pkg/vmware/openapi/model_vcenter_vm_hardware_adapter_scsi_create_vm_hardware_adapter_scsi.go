/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi struct for VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi
type VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi struct {
	Spec *VcenterVmHardwareAdapterScsiCreateSpec `json:"spec,omitempty"`
}

// NewVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi instantiates a new VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi() *VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi {
	this := VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi{}
	return &this
}

// NewVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsiWithDefaults instantiates a new VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsiWithDefaults() *VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi {
	this := VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi{}
	return &this
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) GetSpec() VcenterVmHardwareAdapterScsiCreateSpec {
	if o == nil || o.Spec == nil {
		var ret VcenterVmHardwareAdapterScsiCreateSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) GetSpecOk() (*VcenterVmHardwareAdapterScsiCreateSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given VcenterVmHardwareAdapterScsiCreateSpec and assigns it to the Spec field.
func (o *VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) SetSpec(v VcenterVmHardwareAdapterScsiCreateSpec) {
	o.Spec = &v
}

func (o VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi struct {
	value *VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi
	isSet bool
}

func (v NullableVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) Get() *VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi {
	return v.value
}

func (v *NullableVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) Set(val *VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi(val *VcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) *NullableVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi {
	return &NullableVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareAdapterScsiCreateVmHardwareAdapterScsi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


