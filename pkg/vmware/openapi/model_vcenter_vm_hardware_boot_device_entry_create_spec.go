/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareBootDeviceEntryCreateSpec struct for VcenterVmHardwareBootDeviceEntryCreateSpec
type VcenterVmHardwareBootDeviceEntryCreateSpec struct {
	Type VcenterVmHardwareBootDeviceType `json:"type"`
}

// NewVcenterVmHardwareBootDeviceEntryCreateSpec instantiates a new VcenterVmHardwareBootDeviceEntryCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareBootDeviceEntryCreateSpec(type_ VcenterVmHardwareBootDeviceType) *VcenterVmHardwareBootDeviceEntryCreateSpec {
	this := VcenterVmHardwareBootDeviceEntryCreateSpec{}
	this.Type = type_
	return &this
}

// NewVcenterVmHardwareBootDeviceEntryCreateSpecWithDefaults instantiates a new VcenterVmHardwareBootDeviceEntryCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareBootDeviceEntryCreateSpecWithDefaults() *VcenterVmHardwareBootDeviceEntryCreateSpec {
	this := VcenterVmHardwareBootDeviceEntryCreateSpec{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterVmHardwareBootDeviceEntryCreateSpec) GetType() VcenterVmHardwareBootDeviceType {
	if o == nil {
		var ret VcenterVmHardwareBootDeviceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareBootDeviceEntryCreateSpec) GetTypeOk() (*VcenterVmHardwareBootDeviceType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmHardwareBootDeviceEntryCreateSpec) SetType(v VcenterVmHardwareBootDeviceType) {
	o.Type = v
}

func (o VcenterVmHardwareBootDeviceEntryCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareBootDeviceEntryCreateSpec struct {
	value *VcenterVmHardwareBootDeviceEntryCreateSpec
	isSet bool
}

func (v NullableVcenterVmHardwareBootDeviceEntryCreateSpec) Get() *VcenterVmHardwareBootDeviceEntryCreateSpec {
	return v.value
}

func (v *NullableVcenterVmHardwareBootDeviceEntryCreateSpec) Set(val *VcenterVmHardwareBootDeviceEntryCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareBootDeviceEntryCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareBootDeviceEntryCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareBootDeviceEntryCreateSpec(val *VcenterVmHardwareBootDeviceEntryCreateSpec) *NullableVcenterVmHardwareBootDeviceEntryCreateSpec {
	return &NullableVcenterVmHardwareBootDeviceEntryCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareBootDeviceEntryCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareBootDeviceEntryCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


