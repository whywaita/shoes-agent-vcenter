/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterStoragePoliciesComplianceVMStatus the model 'VcenterStoragePoliciesComplianceVMStatus'
type VcenterStoragePoliciesComplianceVMStatus string

// List of vcenter.storage.policies.compliance.VM.status
const (
	VCENTERSTORAGEPOLICIESCOMPLIANCEVMSTATUS_COMPLIANT VcenterStoragePoliciesComplianceVMStatus = "COMPLIANT"
	VCENTERSTORAGEPOLICIESCOMPLIANCEVMSTATUS_NON_COMPLIANT VcenterStoragePoliciesComplianceVMStatus = "NON_COMPLIANT"
	VCENTERSTORAGEPOLICIESCOMPLIANCEVMSTATUS_UNKNOWN_COMPLIANCE VcenterStoragePoliciesComplianceVMStatus = "UNKNOWN_COMPLIANCE"
	VCENTERSTORAGEPOLICIESCOMPLIANCEVMSTATUS_NOT_APPLICABLE VcenterStoragePoliciesComplianceVMStatus = "NOT_APPLICABLE"
	VCENTERSTORAGEPOLICIESCOMPLIANCEVMSTATUS_OUT_OF_DATE VcenterStoragePoliciesComplianceVMStatus = "OUT_OF_DATE"
)

// All allowed values of VcenterStoragePoliciesComplianceVMStatus enum
var AllowedVcenterStoragePoliciesComplianceVMStatusEnumValues = []VcenterStoragePoliciesComplianceVMStatus{
	"COMPLIANT",
	"NON_COMPLIANT",
	"UNKNOWN_COMPLIANCE",
	"NOT_APPLICABLE",
	"OUT_OF_DATE",
}

func (v *VcenterStoragePoliciesComplianceVMStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterStoragePoliciesComplianceVMStatus(value)
	for _, existing := range AllowedVcenterStoragePoliciesComplianceVMStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterStoragePoliciesComplianceVMStatus", value)
}

// NewVcenterStoragePoliciesComplianceVMStatusFromValue returns a pointer to a valid VcenterStoragePoliciesComplianceVMStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterStoragePoliciesComplianceVMStatusFromValue(v string) (*VcenterStoragePoliciesComplianceVMStatus, error) {
	ev := VcenterStoragePoliciesComplianceVMStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterStoragePoliciesComplianceVMStatus: valid values are %v", v, AllowedVcenterStoragePoliciesComplianceVMStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterStoragePoliciesComplianceVMStatus) IsValid() bool {
	for _, existing := range AllowedVcenterStoragePoliciesComplianceVMStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.storage.policies.compliance.VM.status value
func (v VcenterStoragePoliciesComplianceVMStatus) Ptr() *VcenterStoragePoliciesComplianceVMStatus {
	return &v
}

type NullableVcenterStoragePoliciesComplianceVMStatus struct {
	value *VcenterStoragePoliciesComplianceVMStatus
	isSet bool
}

func (v NullableVcenterStoragePoliciesComplianceVMStatus) Get() *VcenterStoragePoliciesComplianceVMStatus {
	return v.value
}

func (v *NullableVcenterStoragePoliciesComplianceVMStatus) Set(val *VcenterStoragePoliciesComplianceVMStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterStoragePoliciesComplianceVMStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterStoragePoliciesComplianceVMStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterStoragePoliciesComplianceVMStatus(val *VcenterStoragePoliciesComplianceVMStatus) *NullableVcenterStoragePoliciesComplianceVMStatus {
	return &NullableVcenterStoragePoliciesComplianceVMStatus{value: val, isSet: true}
}

func (v NullableVcenterStoragePoliciesComplianceVMStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterStoragePoliciesComplianceVMStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

