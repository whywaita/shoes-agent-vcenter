/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentMigrateActiveDirectoryCheckSpec struct for VcenterDeploymentMigrateActiveDirectoryCheckSpec
type VcenterDeploymentMigrateActiveDirectoryCheckSpec struct {
	// IP addresses of the DNS servers of the Active Directory server.
	DnsServers []string `json:"dns_servers"`
	// The domain name of the Active Directory server to which the migrated vCenter Server appliance should be joined.
	Domain string `json:"domain"`
	// Active Directory user that has permission to join the Active Directory after the vCenter Server is migrated to appliance.
	Username string `json:"username"`
	// Active Directory user password that has permission to join the Active Directory after the vCenter Server is migrated to appliance.
	Password string `json:"password"`
}

// NewVcenterDeploymentMigrateActiveDirectoryCheckSpec instantiates a new VcenterDeploymentMigrateActiveDirectoryCheckSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentMigrateActiveDirectoryCheckSpec(dnsServers []string, domain string, username string, password string) *VcenterDeploymentMigrateActiveDirectoryCheckSpec {
	this := VcenterDeploymentMigrateActiveDirectoryCheckSpec{}
	this.DnsServers = dnsServers
	this.Domain = domain
	this.Username = username
	this.Password = password
	return &this
}

// NewVcenterDeploymentMigrateActiveDirectoryCheckSpecWithDefaults instantiates a new VcenterDeploymentMigrateActiveDirectoryCheckSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentMigrateActiveDirectoryCheckSpecWithDefaults() *VcenterDeploymentMigrateActiveDirectoryCheckSpec {
	this := VcenterDeploymentMigrateActiveDirectoryCheckSpec{}
	return &this
}

// GetDnsServers returns the DnsServers field value
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) GetDnsServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) GetDnsServersOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DnsServers, true
}

// SetDnsServers sets field value
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) SetDnsServers(v []string) {
	o.DnsServers = v
}

// GetDomain returns the Domain field value
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) SetDomain(v string) {
	o.Domain = v
}

// GetUsername returns the Username field value
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *VcenterDeploymentMigrateActiveDirectoryCheckSpec) SetPassword(v string) {
	o.Password = v
}

func (o VcenterDeploymentMigrateActiveDirectoryCheckSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dns_servers"] = o.DnsServers
	}
	if true {
		toSerialize["domain"] = o.Domain
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentMigrateActiveDirectoryCheckSpec struct {
	value *VcenterDeploymentMigrateActiveDirectoryCheckSpec
	isSet bool
}

func (v NullableVcenterDeploymentMigrateActiveDirectoryCheckSpec) Get() *VcenterDeploymentMigrateActiveDirectoryCheckSpec {
	return v.value
}

func (v *NullableVcenterDeploymentMigrateActiveDirectoryCheckSpec) Set(val *VcenterDeploymentMigrateActiveDirectoryCheckSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentMigrateActiveDirectoryCheckSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentMigrateActiveDirectoryCheckSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentMigrateActiveDirectoryCheckSpec(val *VcenterDeploymentMigrateActiveDirectoryCheckSpec) *NullableVcenterDeploymentMigrateActiveDirectoryCheckSpec {
	return &NullableVcenterDeploymentMigrateActiveDirectoryCheckSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentMigrateActiveDirectoryCheckSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentMigrateActiveDirectoryCheckSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


