/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterIpv4Info struct for VcenterVchaClusterIpv4Info
type VcenterVchaClusterIpv4Info struct {
	// IP address of the configured network interface.
	Address string `json:"address"`
	// The subnet mask of the interface.
	SubnetMask string `json:"subnet_mask"`
	// The CIDR prefix of the interface. If unset , then the subnet mask is invalid.
	Prefix *int64 `json:"prefix,omitempty"`
}

// NewVcenterVchaClusterIpv4Info instantiates a new VcenterVchaClusterIpv4Info object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterIpv4Info(address string, subnetMask string) *VcenterVchaClusterIpv4Info {
	this := VcenterVchaClusterIpv4Info{}
	this.Address = address
	this.SubnetMask = subnetMask
	return &this
}

// NewVcenterVchaClusterIpv4InfoWithDefaults instantiates a new VcenterVchaClusterIpv4Info object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterIpv4InfoWithDefaults() *VcenterVchaClusterIpv4Info {
	this := VcenterVchaClusterIpv4Info{}
	return &this
}

// GetAddress returns the Address field value
func (o *VcenterVchaClusterIpv4Info) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterIpv4Info) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *VcenterVchaClusterIpv4Info) SetAddress(v string) {
	o.Address = v
}

// GetSubnetMask returns the SubnetMask field value
func (o *VcenterVchaClusterIpv4Info) GetSubnetMask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterIpv4Info) GetSubnetMaskOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SubnetMask, true
}

// SetSubnetMask sets field value
func (o *VcenterVchaClusterIpv4Info) SetSubnetMask(v string) {
	o.SubnetMask = v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *VcenterVchaClusterIpv4Info) GetPrefix() int64 {
	if o == nil || o.Prefix == nil {
		var ret int64
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterIpv4Info) GetPrefixOk() (*int64, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *VcenterVchaClusterIpv4Info) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given int64 and assigns it to the Prefix field.
func (o *VcenterVchaClusterIpv4Info) SetPrefix(v int64) {
	o.Prefix = &v
}

func (o VcenterVchaClusterIpv4Info) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["subnet_mask"] = o.SubnetMask
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterIpv4Info struct {
	value *VcenterVchaClusterIpv4Info
	isSet bool
}

func (v NullableVcenterVchaClusterIpv4Info) Get() *VcenterVchaClusterIpv4Info {
	return v.value
}

func (v *NullableVcenterVchaClusterIpv4Info) Set(val *VcenterVchaClusterIpv4Info) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterIpv4Info) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterIpv4Info) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterIpv4Info(val *VcenterVchaClusterIpv4Info) *NullableVcenterVchaClusterIpv4Info {
	return &NullableVcenterVchaClusterIpv4Info{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterIpv4Info) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterIpv4Info) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


