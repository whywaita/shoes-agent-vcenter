/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareBootNetworkProtocol The Boot.NetworkProtocol enumerated type defines the valid network boot protocols supported when booting a virtual machine with EFI firmware over the network.
type VcenterVmHardwareBootNetworkProtocol string

// List of vcenter.vm.hardware.boot.network_protocol
const (
	VCENTERVMHARDWAREBOOTNETWORKPROTOCOL_IPV4 VcenterVmHardwareBootNetworkProtocol = "IPV4"
	VCENTERVMHARDWAREBOOTNETWORKPROTOCOL_IPV6 VcenterVmHardwareBootNetworkProtocol = "IPV6"
)

// All allowed values of VcenterVmHardwareBootNetworkProtocol enum
var AllowedVcenterVmHardwareBootNetworkProtocolEnumValues = []VcenterVmHardwareBootNetworkProtocol{
	"IPV4",
	"IPV6",
}

func (v *VcenterVmHardwareBootNetworkProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareBootNetworkProtocol(value)
	for _, existing := range AllowedVcenterVmHardwareBootNetworkProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareBootNetworkProtocol", value)
}

// NewVcenterVmHardwareBootNetworkProtocolFromValue returns a pointer to a valid VcenterVmHardwareBootNetworkProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareBootNetworkProtocolFromValue(v string) (*VcenterVmHardwareBootNetworkProtocol, error) {
	ev := VcenterVmHardwareBootNetworkProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareBootNetworkProtocol: valid values are %v", v, AllowedVcenterVmHardwareBootNetworkProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareBootNetworkProtocol) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareBootNetworkProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.boot.network_protocol value
func (v VcenterVmHardwareBootNetworkProtocol) Ptr() *VcenterVmHardwareBootNetworkProtocol {
	return &v
}

type NullableVcenterVmHardwareBootNetworkProtocol struct {
	value *VcenterVmHardwareBootNetworkProtocol
	isSet bool
}

func (v NullableVcenterVmHardwareBootNetworkProtocol) Get() *VcenterVmHardwareBootNetworkProtocol {
	return v.value
}

func (v *NullableVcenterVmHardwareBootNetworkProtocol) Set(val *VcenterVmHardwareBootNetworkProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareBootNetworkProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareBootNetworkProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareBootNetworkProtocol(val *VcenterVmHardwareBootNetworkProtocol) *NullableVcenterVmHardwareBootNetworkProtocol {
	return &NullableVcenterVmHardwareBootNetworkProtocol{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareBootNetworkProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareBootNetworkProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

