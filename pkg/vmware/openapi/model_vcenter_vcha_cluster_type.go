/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVchaClusterType The Cluster.Type enumerated type defines the possible deployment types for a VCHA Cluster.
type VcenterVchaClusterType string

// List of vcenter.vcha.cluster.type
const (
	VCENTERVCHACLUSTERTYPE_AUTO VcenterVchaClusterType = "AUTO"
	VCENTERVCHACLUSTERTYPE_MANUAL VcenterVchaClusterType = "MANUAL"
)

// All allowed values of VcenterVchaClusterType enum
var AllowedVcenterVchaClusterTypeEnumValues = []VcenterVchaClusterType{
	"AUTO",
	"MANUAL",
}

func (v *VcenterVchaClusterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVchaClusterType(value)
	for _, existing := range AllowedVcenterVchaClusterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVchaClusterType", value)
}

// NewVcenterVchaClusterTypeFromValue returns a pointer to a valid VcenterVchaClusterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVchaClusterTypeFromValue(v string) (*VcenterVchaClusterType, error) {
	ev := VcenterVchaClusterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVchaClusterType: valid values are %v", v, AllowedVcenterVchaClusterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVchaClusterType) IsValid() bool {
	for _, existing := range AllowedVcenterVchaClusterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vcha.cluster.type value
func (v VcenterVchaClusterType) Ptr() *VcenterVchaClusterType {
	return &v
}

type NullableVcenterVchaClusterType struct {
	value *VcenterVchaClusterType
	isSet bool
}

func (v NullableVcenterVchaClusterType) Get() *VcenterVchaClusterType {
	return v.value
}

func (v *NullableVcenterVchaClusterType) Set(val *VcenterVchaClusterType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterType(val *VcenterVchaClusterType) *NullableVcenterVchaClusterType {
	return &NullableVcenterVchaClusterType{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

