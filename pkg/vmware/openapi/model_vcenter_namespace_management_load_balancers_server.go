/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementLoadBalancersServer struct for VcenterNamespaceManagementLoadBalancersServer
type VcenterNamespaceManagementLoadBalancersServer struct {
	// Load balancer hostname or IPv4 address.
	Host string `json:"host"`
	// Load balancer port.
	Port int64 `json:"port"`
}

// NewVcenterNamespaceManagementLoadBalancersServer instantiates a new VcenterNamespaceManagementLoadBalancersServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementLoadBalancersServer(host string, port int64) *VcenterNamespaceManagementLoadBalancersServer {
	this := VcenterNamespaceManagementLoadBalancersServer{}
	this.Host = host
	this.Port = port
	return &this
}

// NewVcenterNamespaceManagementLoadBalancersServerWithDefaults instantiates a new VcenterNamespaceManagementLoadBalancersServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementLoadBalancersServerWithDefaults() *VcenterNamespaceManagementLoadBalancersServer {
	this := VcenterNamespaceManagementLoadBalancersServer{}
	return &this
}

// GetHost returns the Host field value
func (o *VcenterNamespaceManagementLoadBalancersServer) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersServer) GetHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *VcenterNamespaceManagementLoadBalancersServer) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *VcenterNamespaceManagementLoadBalancersServer) GetPort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersServer) GetPortOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *VcenterNamespaceManagementLoadBalancersServer) SetPort(v int64) {
	o.Port = v
}

func (o VcenterNamespaceManagementLoadBalancersServer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["host"] = o.Host
	}
	if true {
		toSerialize["port"] = o.Port
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementLoadBalancersServer struct {
	value *VcenterNamespaceManagementLoadBalancersServer
	isSet bool
}

func (v NullableVcenterNamespaceManagementLoadBalancersServer) Get() *VcenterNamespaceManagementLoadBalancersServer {
	return v.value
}

func (v *NullableVcenterNamespaceManagementLoadBalancersServer) Set(val *VcenterNamespaceManagementLoadBalancersServer) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementLoadBalancersServer) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementLoadBalancersServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementLoadBalancersServer(val *VcenterNamespaceManagementLoadBalancersServer) *NullableVcenterNamespaceManagementLoadBalancersServer {
	return &NullableVcenterNamespaceManagementLoadBalancersServer{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementLoadBalancersServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementLoadBalancersServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


