/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterCryptoManagerKmsProvidersHealth the model 'VcenterCryptoManagerKmsProvidersHealth'
type VcenterCryptoManagerKmsProvidersHealth string

// List of VcenterCryptoManagerKmsProvidersHealth
const (
	VCENTERCRYPTOMANAGERKMSPROVIDERSHEALTH_NONE VcenterCryptoManagerKmsProvidersHealth = "NONE"
	VCENTERCRYPTOMANAGERKMSPROVIDERSHEALTH_OK VcenterCryptoManagerKmsProvidersHealth = "OK"
	VCENTERCRYPTOMANAGERKMSPROVIDERSHEALTH_WARNING VcenterCryptoManagerKmsProvidersHealth = "WARNING"
	VCENTERCRYPTOMANAGERKMSPROVIDERSHEALTH_ERROR VcenterCryptoManagerKmsProvidersHealth = "ERROR"
)

// All allowed values of VcenterCryptoManagerKmsProvidersHealth enum
var AllowedVcenterCryptoManagerKmsProvidersHealthEnumValues = []VcenterCryptoManagerKmsProvidersHealth{
	"NONE",
	"OK",
	"WARNING",
	"ERROR",
}

func (v *VcenterCryptoManagerKmsProvidersHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterCryptoManagerKmsProvidersHealth(value)
	for _, existing := range AllowedVcenterCryptoManagerKmsProvidersHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterCryptoManagerKmsProvidersHealth", value)
}

// NewVcenterCryptoManagerKmsProvidersHealthFromValue returns a pointer to a valid VcenterCryptoManagerKmsProvidersHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterCryptoManagerKmsProvidersHealthFromValue(v string) (*VcenterCryptoManagerKmsProvidersHealth, error) {
	ev := VcenterCryptoManagerKmsProvidersHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterCryptoManagerKmsProvidersHealth: valid values are %v", v, AllowedVcenterCryptoManagerKmsProvidersHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterCryptoManagerKmsProvidersHealth) IsValid() bool {
	for _, existing := range AllowedVcenterCryptoManagerKmsProvidersHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterCryptoManagerKmsProvidersHealth value
func (v VcenterCryptoManagerKmsProvidersHealth) Ptr() *VcenterCryptoManagerKmsProvidersHealth {
	return &v
}

type NullableVcenterCryptoManagerKmsProvidersHealth struct {
	value *VcenterCryptoManagerKmsProvidersHealth
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersHealth) Get() *VcenterCryptoManagerKmsProvidersHealth {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersHealth) Set(val *VcenterCryptoManagerKmsProvidersHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersHealth(val *VcenterCryptoManagerKmsProvidersHealth) *NullableVcenterCryptoManagerKmsProvidersHealth {
	return &NullableVcenterCryptoManagerKmsProvidersHealth{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

