/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterIdentityProvidersActiveDirectoryOverLdap struct for VcenterIdentityProvidersActiveDirectoryOverLdap
type VcenterIdentityProvidersActiveDirectoryOverLdap struct {
	// User name to connect to the active directory server.
	UserName string `json:"user_name"`
	// Password to connect to the active directory server.
	Password string `json:"password"`
	// Base distinguished name for users
	UsersBaseDn string `json:"users_base_dn"`
	// Base distinguished name for groups
	GroupsBaseDn string `json:"groups_base_dn"`
	// Active directory server endpoints. At least one active directory server endpoint must be set.
	ServerEndpoints []string `json:"server_endpoints"`
	CertChain *VcenterCertificateManagementX509CertChain `json:"cert_chain,omitempty"`
}

// NewVcenterIdentityProvidersActiveDirectoryOverLdap instantiates a new VcenterIdentityProvidersActiveDirectoryOverLdap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterIdentityProvidersActiveDirectoryOverLdap(userName string, password string, usersBaseDn string, groupsBaseDn string, serverEndpoints []string) *VcenterIdentityProvidersActiveDirectoryOverLdap {
	this := VcenterIdentityProvidersActiveDirectoryOverLdap{}
	this.UserName = userName
	this.Password = password
	this.UsersBaseDn = usersBaseDn
	this.GroupsBaseDn = groupsBaseDn
	this.ServerEndpoints = serverEndpoints
	return &this
}

// NewVcenterIdentityProvidersActiveDirectoryOverLdapWithDefaults instantiates a new VcenterIdentityProvidersActiveDirectoryOverLdap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterIdentityProvidersActiveDirectoryOverLdapWithDefaults() *VcenterIdentityProvidersActiveDirectoryOverLdap {
	this := VcenterIdentityProvidersActiveDirectoryOverLdap{}
	return &this
}

// GetUserName returns the UserName field value
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetUserNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) SetUserName(v string) {
	o.UserName = v
}

// GetPassword returns the Password field value
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) SetPassword(v string) {
	o.Password = v
}

// GetUsersBaseDn returns the UsersBaseDn field value
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetUsersBaseDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UsersBaseDn
}

// GetUsersBaseDnOk returns a tuple with the UsersBaseDn field value
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetUsersBaseDnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UsersBaseDn, true
}

// SetUsersBaseDn sets field value
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) SetUsersBaseDn(v string) {
	o.UsersBaseDn = v
}

// GetGroupsBaseDn returns the GroupsBaseDn field value
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetGroupsBaseDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupsBaseDn
}

// GetGroupsBaseDnOk returns a tuple with the GroupsBaseDn field value
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetGroupsBaseDnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GroupsBaseDn, true
}

// SetGroupsBaseDn sets field value
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) SetGroupsBaseDn(v string) {
	o.GroupsBaseDn = v
}

// GetServerEndpoints returns the ServerEndpoints field value
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetServerEndpoints() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ServerEndpoints
}

// GetServerEndpointsOk returns a tuple with the ServerEndpoints field value
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetServerEndpointsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServerEndpoints, true
}

// SetServerEndpoints sets field value
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) SetServerEndpoints(v []string) {
	o.ServerEndpoints = v
}

// GetCertChain returns the CertChain field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetCertChain() VcenterCertificateManagementX509CertChain {
	if o == nil || o.CertChain == nil {
		var ret VcenterCertificateManagementX509CertChain
		return ret
	}
	return *o.CertChain
}

// GetCertChainOk returns a tuple with the CertChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) GetCertChainOk() (*VcenterCertificateManagementX509CertChain, bool) {
	if o == nil || o.CertChain == nil {
		return nil, false
	}
	return o.CertChain, true
}

// HasCertChain returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) HasCertChain() bool {
	if o != nil && o.CertChain != nil {
		return true
	}

	return false
}

// SetCertChain gets a reference to the given VcenterCertificateManagementX509CertChain and assigns it to the CertChain field.
func (o *VcenterIdentityProvidersActiveDirectoryOverLdap) SetCertChain(v VcenterCertificateManagementX509CertChain) {
	o.CertChain = &v
}

func (o VcenterIdentityProvidersActiveDirectoryOverLdap) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["user_name"] = o.UserName
	}
	if true {
		toSerialize["password"] = o.Password
	}
	if true {
		toSerialize["users_base_dn"] = o.UsersBaseDn
	}
	if true {
		toSerialize["groups_base_dn"] = o.GroupsBaseDn
	}
	if true {
		toSerialize["server_endpoints"] = o.ServerEndpoints
	}
	if o.CertChain != nil {
		toSerialize["cert_chain"] = o.CertChain
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterIdentityProvidersActiveDirectoryOverLdap struct {
	value *VcenterIdentityProvidersActiveDirectoryOverLdap
	isSet bool
}

func (v NullableVcenterIdentityProvidersActiveDirectoryOverLdap) Get() *VcenterIdentityProvidersActiveDirectoryOverLdap {
	return v.value
}

func (v *NullableVcenterIdentityProvidersActiveDirectoryOverLdap) Set(val *VcenterIdentityProvidersActiveDirectoryOverLdap) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterIdentityProvidersActiveDirectoryOverLdap) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterIdentityProvidersActiveDirectoryOverLdap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterIdentityProvidersActiveDirectoryOverLdap(val *VcenterIdentityProvidersActiveDirectoryOverLdap) *NullableVcenterIdentityProvidersActiveDirectoryOverLdap {
	return &NullableVcenterIdentityProvidersActiveDirectoryOverLdap{value: val, isSet: true}
}

func (v NullableVcenterIdentityProvidersActiveDirectoryOverLdap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterIdentityProvidersActiveDirectoryOverLdap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


