/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterPassiveCheckSpec struct for VcenterVchaClusterPassiveCheckSpec
type VcenterVchaClusterPassiveCheckSpec struct {
	VcSpec *VcenterVchaCredentialsSpec `json:"vc_spec,omitempty"`
	Placement VcenterVchaPlacementSpec `json:"placement"`
}

// NewVcenterVchaClusterPassiveCheckSpec instantiates a new VcenterVchaClusterPassiveCheckSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterPassiveCheckSpec(placement VcenterVchaPlacementSpec) *VcenterVchaClusterPassiveCheckSpec {
	this := VcenterVchaClusterPassiveCheckSpec{}
	this.Placement = placement
	return &this
}

// NewVcenterVchaClusterPassiveCheckSpecWithDefaults instantiates a new VcenterVchaClusterPassiveCheckSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterPassiveCheckSpecWithDefaults() *VcenterVchaClusterPassiveCheckSpec {
	this := VcenterVchaClusterPassiveCheckSpec{}
	return &this
}

// GetVcSpec returns the VcSpec field value if set, zero value otherwise.
func (o *VcenterVchaClusterPassiveCheckSpec) GetVcSpec() VcenterVchaCredentialsSpec {
	if o == nil || o.VcSpec == nil {
		var ret VcenterVchaCredentialsSpec
		return ret
	}
	return *o.VcSpec
}

// GetVcSpecOk returns a tuple with the VcSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterPassiveCheckSpec) GetVcSpecOk() (*VcenterVchaCredentialsSpec, bool) {
	if o == nil || o.VcSpec == nil {
		return nil, false
	}
	return o.VcSpec, true
}

// HasVcSpec returns a boolean if a field has been set.
func (o *VcenterVchaClusterPassiveCheckSpec) HasVcSpec() bool {
	if o != nil && o.VcSpec != nil {
		return true
	}

	return false
}

// SetVcSpec gets a reference to the given VcenterVchaCredentialsSpec and assigns it to the VcSpec field.
func (o *VcenterVchaClusterPassiveCheckSpec) SetVcSpec(v VcenterVchaCredentialsSpec) {
	o.VcSpec = &v
}

// GetPlacement returns the Placement field value
func (o *VcenterVchaClusterPassiveCheckSpec) GetPlacement() VcenterVchaPlacementSpec {
	if o == nil {
		var ret VcenterVchaPlacementSpec
		return ret
	}

	return o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterPassiveCheckSpec) GetPlacementOk() (*VcenterVchaPlacementSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Placement, true
}

// SetPlacement sets field value
func (o *VcenterVchaClusterPassiveCheckSpec) SetPlacement(v VcenterVchaPlacementSpec) {
	o.Placement = v
}

func (o VcenterVchaClusterPassiveCheckSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VcSpec != nil {
		toSerialize["vc_spec"] = o.VcSpec
	}
	if true {
		toSerialize["placement"] = o.Placement
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterPassiveCheckSpec struct {
	value *VcenterVchaClusterPassiveCheckSpec
	isSet bool
}

func (v NullableVcenterVchaClusterPassiveCheckSpec) Get() *VcenterVchaClusterPassiveCheckSpec {
	return v.value
}

func (v *NullableVcenterVchaClusterPassiveCheckSpec) Set(val *VcenterVchaClusterPassiveCheckSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterPassiveCheckSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterPassiveCheckSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterPassiveCheckSpec(val *VcenterVchaClusterPassiveCheckSpec) *NullableVcenterVchaClusterPassiveCheckSpec {
	return &NullableVcenterVchaClusterPassiveCheckSpec{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterPassiveCheckSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterPassiveCheckSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


