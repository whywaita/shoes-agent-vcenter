/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterDeploymentApplianceState The ApplianceState enumerated type defines the various states the vCenter Appliance can be in.
type VcenterDeploymentApplianceState string

// List of vcenter.deployment.appliance_state
const (
	VCENTERDEPLOYMENTAPPLIANCESTATE_NOT_INITIALIZED VcenterDeploymentApplianceState = "NOT_INITIALIZED"
	VCENTERDEPLOYMENTAPPLIANCESTATE_INITIALIZED VcenterDeploymentApplianceState = "INITIALIZED"
	VCENTERDEPLOYMENTAPPLIANCESTATE_CONFIG_IN_PROGRESS VcenterDeploymentApplianceState = "CONFIG_IN_PROGRESS"
	VCENTERDEPLOYMENTAPPLIANCESTATE_QUESTION_RAISED VcenterDeploymentApplianceState = "QUESTION_RAISED"
	VCENTERDEPLOYMENTAPPLIANCESTATE_FAILED VcenterDeploymentApplianceState = "FAILED"
	VCENTERDEPLOYMENTAPPLIANCESTATE_CONFIGURED VcenterDeploymentApplianceState = "CONFIGURED"
)

// All allowed values of VcenterDeploymentApplianceState enum
var AllowedVcenterDeploymentApplianceStateEnumValues = []VcenterDeploymentApplianceState{
	"NOT_INITIALIZED",
	"INITIALIZED",
	"CONFIG_IN_PROGRESS",
	"QUESTION_RAISED",
	"FAILED",
	"CONFIGURED",
}

func (v *VcenterDeploymentApplianceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterDeploymentApplianceState(value)
	for _, existing := range AllowedVcenterDeploymentApplianceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterDeploymentApplianceState", value)
}

// NewVcenterDeploymentApplianceStateFromValue returns a pointer to a valid VcenterDeploymentApplianceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterDeploymentApplianceStateFromValue(v string) (*VcenterDeploymentApplianceState, error) {
	ev := VcenterDeploymentApplianceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterDeploymentApplianceState: valid values are %v", v, AllowedVcenterDeploymentApplianceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterDeploymentApplianceState) IsValid() bool {
	for _, existing := range AllowedVcenterDeploymentApplianceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.deployment.appliance_state value
func (v VcenterDeploymentApplianceState) Ptr() *VcenterDeploymentApplianceState {
	return &v
}

type NullableVcenterDeploymentApplianceState struct {
	value *VcenterDeploymentApplianceState
	isSet bool
}

func (v NullableVcenterDeploymentApplianceState) Get() *VcenterDeploymentApplianceState {
	return v.value
}

func (v *NullableVcenterDeploymentApplianceState) Set(val *VcenterDeploymentApplianceState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentApplianceState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentApplianceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentApplianceState(val *VcenterDeploymentApplianceState) *NullableVcenterDeploymentApplianceState {
	return &NullableVcenterDeploymentApplianceState{value: val, isSet: true}
}

func (v NullableVcenterDeploymentApplianceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentApplianceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

