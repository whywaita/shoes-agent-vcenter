/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmLibraryItemCheckOutInfo struct for VcenterVmLibraryItemCheckOutInfo
type VcenterVmLibraryItemCheckOutInfo struct {
	// Identifier of the library item that the virtual machine is checked out from. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.library.Item. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.library.Item.
	LibraryItem string `json:"library_item"`
}

// NewVcenterVmLibraryItemCheckOutInfo instantiates a new VcenterVmLibraryItemCheckOutInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmLibraryItemCheckOutInfo(libraryItem string) *VcenterVmLibraryItemCheckOutInfo {
	this := VcenterVmLibraryItemCheckOutInfo{}
	this.LibraryItem = libraryItem
	return &this
}

// NewVcenterVmLibraryItemCheckOutInfoWithDefaults instantiates a new VcenterVmLibraryItemCheckOutInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmLibraryItemCheckOutInfoWithDefaults() *VcenterVmLibraryItemCheckOutInfo {
	this := VcenterVmLibraryItemCheckOutInfo{}
	return &this
}

// GetLibraryItem returns the LibraryItem field value
func (o *VcenterVmLibraryItemCheckOutInfo) GetLibraryItem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LibraryItem
}

// GetLibraryItemOk returns a tuple with the LibraryItem field value
// and a boolean to check if the value has been set.
func (o *VcenterVmLibraryItemCheckOutInfo) GetLibraryItemOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LibraryItem, true
}

// SetLibraryItem sets field value
func (o *VcenterVmLibraryItemCheckOutInfo) SetLibraryItem(v string) {
	o.LibraryItem = v
}

func (o VcenterVmLibraryItemCheckOutInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["library_item"] = o.LibraryItem
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmLibraryItemCheckOutInfo struct {
	value *VcenterVmLibraryItemCheckOutInfo
	isSet bool
}

func (v NullableVcenterVmLibraryItemCheckOutInfo) Get() *VcenterVmLibraryItemCheckOutInfo {
	return v.value
}

func (v *NullableVcenterVmLibraryItemCheckOutInfo) Set(val *VcenterVmLibraryItemCheckOutInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmLibraryItemCheckOutInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmLibraryItemCheckOutInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmLibraryItemCheckOutInfo(val *VcenterVmLibraryItemCheckOutInfo) *NullableVcenterVmLibraryItemCheckOutInfo {
	return &NullableVcenterVmLibraryItemCheckOutInfo{value: val, isSet: true}
}

func (v NullableVcenterVmLibraryItemCheckOutInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmLibraryItemCheckOutInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


