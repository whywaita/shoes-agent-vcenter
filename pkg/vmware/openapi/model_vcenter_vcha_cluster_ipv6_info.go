/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterIpv6Info struct for VcenterVchaClusterIpv6Info
type VcenterVchaClusterIpv6Info struct {
	// IP address of the configured network interface.
	Address string `json:"address"`
	// The CIDR prefix of the interface.
	Prefix int64 `json:"prefix"`
}

// NewVcenterVchaClusterIpv6Info instantiates a new VcenterVchaClusterIpv6Info object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterIpv6Info(address string, prefix int64) *VcenterVchaClusterIpv6Info {
	this := VcenterVchaClusterIpv6Info{}
	this.Address = address
	this.Prefix = prefix
	return &this
}

// NewVcenterVchaClusterIpv6InfoWithDefaults instantiates a new VcenterVchaClusterIpv6Info object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterIpv6InfoWithDefaults() *VcenterVchaClusterIpv6Info {
	this := VcenterVchaClusterIpv6Info{}
	return &this
}

// GetAddress returns the Address field value
func (o *VcenterVchaClusterIpv6Info) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterIpv6Info) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *VcenterVchaClusterIpv6Info) SetAddress(v string) {
	o.Address = v
}

// GetPrefix returns the Prefix field value
func (o *VcenterVchaClusterIpv6Info) GetPrefix() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterIpv6Info) GetPrefixOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *VcenterVchaClusterIpv6Info) SetPrefix(v int64) {
	o.Prefix = v
}

func (o VcenterVchaClusterIpv6Info) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["prefix"] = o.Prefix
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterIpv6Info struct {
	value *VcenterVchaClusterIpv6Info
	isSet bool
}

func (v NullableVcenterVchaClusterIpv6Info) Get() *VcenterVchaClusterIpv6Info {
	return v.value
}

func (v *NullableVcenterVchaClusterIpv6Info) Set(val *VcenterVchaClusterIpv6Info) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterIpv6Info) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterIpv6Info) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterIpv6Info(val *VcenterVchaClusterIpv6Info) *NullableVcenterVchaClusterIpv6Info {
	return &NullableVcenterVchaClusterIpv6Info{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterIpv6Info) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterIpv6Info) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


