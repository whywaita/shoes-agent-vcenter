/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementVirtualMachineClassesConfigStatus ConfigStatus represents the config status of the VM class.
type VcenterNamespaceManagementVirtualMachineClassesConfigStatus string

// List of VcenterNamespaceManagementVirtualMachineClassesConfigStatus
const (
	VCENTERNAMESPACEMANAGEMENTVIRTUALMACHINECLASSESCONFIGSTATUS_READY VcenterNamespaceManagementVirtualMachineClassesConfigStatus = "READY"
	VCENTERNAMESPACEMANAGEMENTVIRTUALMACHINECLASSESCONFIGSTATUS_REMOVING VcenterNamespaceManagementVirtualMachineClassesConfigStatus = "REMOVING"
)

// All allowed values of VcenterNamespaceManagementVirtualMachineClassesConfigStatus enum
var AllowedVcenterNamespaceManagementVirtualMachineClassesConfigStatusEnumValues = []VcenterNamespaceManagementVirtualMachineClassesConfigStatus{
	"READY",
	"REMOVING",
}

func (v *VcenterNamespaceManagementVirtualMachineClassesConfigStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementVirtualMachineClassesConfigStatus(value)
	for _, existing := range AllowedVcenterNamespaceManagementVirtualMachineClassesConfigStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementVirtualMachineClassesConfigStatus", value)
}

// NewVcenterNamespaceManagementVirtualMachineClassesConfigStatusFromValue returns a pointer to a valid VcenterNamespaceManagementVirtualMachineClassesConfigStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementVirtualMachineClassesConfigStatusFromValue(v string) (*VcenterNamespaceManagementVirtualMachineClassesConfigStatus, error) {
	ev := VcenterNamespaceManagementVirtualMachineClassesConfigStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementVirtualMachineClassesConfigStatus: valid values are %v", v, AllowedVcenterNamespaceManagementVirtualMachineClassesConfigStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementVirtualMachineClassesConfigStatus) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementVirtualMachineClassesConfigStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementVirtualMachineClassesConfigStatus value
func (v VcenterNamespaceManagementVirtualMachineClassesConfigStatus) Ptr() *VcenterNamespaceManagementVirtualMachineClassesConfigStatus {
	return &v
}

type NullableVcenterNamespaceManagementVirtualMachineClassesConfigStatus struct {
	value *VcenterNamespaceManagementVirtualMachineClassesConfigStatus
	isSet bool
}

func (v NullableVcenterNamespaceManagementVirtualMachineClassesConfigStatus) Get() *VcenterNamespaceManagementVirtualMachineClassesConfigStatus {
	return v.value
}

func (v *NullableVcenterNamespaceManagementVirtualMachineClassesConfigStatus) Set(val *VcenterNamespaceManagementVirtualMachineClassesConfigStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementVirtualMachineClassesConfigStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementVirtualMachineClassesConfigStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementVirtualMachineClassesConfigStatus(val *VcenterNamespaceManagementVirtualMachineClassesConfigStatus) *NullableVcenterNamespaceManagementVirtualMachineClassesConfigStatus {
	return &NullableVcenterNamespaceManagementVirtualMachineClassesConfigStatus{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementVirtualMachineClassesConfigStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementVirtualMachineClassesConfigStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

