/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestProcessesCreateSpec struct for VcenterVmGuestProcessesCreateSpec
type VcenterVmGuestProcessesCreateSpec struct {
	// The absolute path to the program to start.   For Linux guest operating systems, /bin/bash is used to start the program.    For Solaris guest operating systems, if /bin/bash exists, its used to start the program, otherwise /bin/sh is used. If /bin/sh is used, then the process ID returned by Processes.create will be that of the shell used to start the program, rather than the program itself, due to the differences in how /bin/sh and /bin/bash work. This PID will still be usable for watching the process with Processes.list to find its exit code and elapsed time.    For Windows, no shell is used. Using a simple batch file instead by prepending c:\\windows\\system32\\cmd.exe /c will allow stdio redirection to work if passed in the Processes.CreateSpec.arguments parameter. 
	Path string `json:"path"`
	// The arguments to the program.   Characters which must be escaped to the shell should also be escaped in Processes.CreateSpec.arguments.    In Linux and Solaris guest operating systems, stdio redirection arguments may be used.    For Windows, stdio redirection can be added to the argments if Processes.CreateSpec.path is prefixed with c:\\windows\\system32\\cmd.exe /c.  If unset no arguments are passed to the program.
	Arguments *string `json:"arguments,omitempty"`
	// The absolute path of the working directory for the program to be run. VMware recommends explicitly setting the working directory for the program to be run.  If unset or is an empty string, the behavior depends on the guest operating system. For Linux guest operating systems, if unset or is an empty string, the working directory will be the home directory of the user associated with the guest authentication. For other guest operating systems, if unset, the behavior is unspecified.
	WorkingDirectory *string `json:"working_directory,omitempty"`
	// A map of environment variables, specified using the guest OS rules (for example PATH, c:\\bin;c:\\windows\\system32 or LD_LIBRARY_PATH,/usr/lib:/lib), to be set for the program being run. Note that these are not additions to the default environment variables; they define the complete set available to the program. If unset, the environment variables used are guest dependent defaults.
	EnvironmentVariables *map[string]string `json:"environment_variables,omitempty"`
	// Makes any program window start minimized in Windows operating systems. Returns an error if set for non-Windows guests. Defaults to false.
	StartMinimized *bool `json:"start_minimized,omitempty"`
}

// NewVcenterVmGuestProcessesCreateSpec instantiates a new VcenterVmGuestProcessesCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestProcessesCreateSpec(path string) *VcenterVmGuestProcessesCreateSpec {
	this := VcenterVmGuestProcessesCreateSpec{}
	this.Path = path
	return &this
}

// NewVcenterVmGuestProcessesCreateSpecWithDefaults instantiates a new VcenterVmGuestProcessesCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestProcessesCreateSpecWithDefaults() *VcenterVmGuestProcessesCreateSpec {
	this := VcenterVmGuestProcessesCreateSpec{}
	return &this
}

// GetPath returns the Path field value
func (o *VcenterVmGuestProcessesCreateSpec) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesCreateSpec) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *VcenterVmGuestProcessesCreateSpec) SetPath(v string) {
	o.Path = v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *VcenterVmGuestProcessesCreateSpec) GetArguments() string {
	if o == nil || o.Arguments == nil {
		var ret string
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesCreateSpec) GetArgumentsOk() (*string, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *VcenterVmGuestProcessesCreateSpec) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given string and assigns it to the Arguments field.
func (o *VcenterVmGuestProcessesCreateSpec) SetArguments(v string) {
	o.Arguments = &v
}

// GetWorkingDirectory returns the WorkingDirectory field value if set, zero value otherwise.
func (o *VcenterVmGuestProcessesCreateSpec) GetWorkingDirectory() string {
	if o == nil || o.WorkingDirectory == nil {
		var ret string
		return ret
	}
	return *o.WorkingDirectory
}

// GetWorkingDirectoryOk returns a tuple with the WorkingDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesCreateSpec) GetWorkingDirectoryOk() (*string, bool) {
	if o == nil || o.WorkingDirectory == nil {
		return nil, false
	}
	return o.WorkingDirectory, true
}

// HasWorkingDirectory returns a boolean if a field has been set.
func (o *VcenterVmGuestProcessesCreateSpec) HasWorkingDirectory() bool {
	if o != nil && o.WorkingDirectory != nil {
		return true
	}

	return false
}

// SetWorkingDirectory gets a reference to the given string and assigns it to the WorkingDirectory field.
func (o *VcenterVmGuestProcessesCreateSpec) SetWorkingDirectory(v string) {
	o.WorkingDirectory = &v
}

// GetEnvironmentVariables returns the EnvironmentVariables field value if set, zero value otherwise.
func (o *VcenterVmGuestProcessesCreateSpec) GetEnvironmentVariables() map[string]string {
	if o == nil || o.EnvironmentVariables == nil {
		var ret map[string]string
		return ret
	}
	return *o.EnvironmentVariables
}

// GetEnvironmentVariablesOk returns a tuple with the EnvironmentVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesCreateSpec) GetEnvironmentVariablesOk() (*map[string]string, bool) {
	if o == nil || o.EnvironmentVariables == nil {
		return nil, false
	}
	return o.EnvironmentVariables, true
}

// HasEnvironmentVariables returns a boolean if a field has been set.
func (o *VcenterVmGuestProcessesCreateSpec) HasEnvironmentVariables() bool {
	if o != nil && o.EnvironmentVariables != nil {
		return true
	}

	return false
}

// SetEnvironmentVariables gets a reference to the given map[string]string and assigns it to the EnvironmentVariables field.
func (o *VcenterVmGuestProcessesCreateSpec) SetEnvironmentVariables(v map[string]string) {
	o.EnvironmentVariables = &v
}

// GetStartMinimized returns the StartMinimized field value if set, zero value otherwise.
func (o *VcenterVmGuestProcessesCreateSpec) GetStartMinimized() bool {
	if o == nil || o.StartMinimized == nil {
		var ret bool
		return ret
	}
	return *o.StartMinimized
}

// GetStartMinimizedOk returns a tuple with the StartMinimized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestProcessesCreateSpec) GetStartMinimizedOk() (*bool, bool) {
	if o == nil || o.StartMinimized == nil {
		return nil, false
	}
	return o.StartMinimized, true
}

// HasStartMinimized returns a boolean if a field has been set.
func (o *VcenterVmGuestProcessesCreateSpec) HasStartMinimized() bool {
	if o != nil && o.StartMinimized != nil {
		return true
	}

	return false
}

// SetStartMinimized gets a reference to the given bool and assigns it to the StartMinimized field.
func (o *VcenterVmGuestProcessesCreateSpec) SetStartMinimized(v bool) {
	o.StartMinimized = &v
}

func (o VcenterVmGuestProcessesCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["path"] = o.Path
	}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if o.WorkingDirectory != nil {
		toSerialize["working_directory"] = o.WorkingDirectory
	}
	if o.EnvironmentVariables != nil {
		toSerialize["environment_variables"] = o.EnvironmentVariables
	}
	if o.StartMinimized != nil {
		toSerialize["start_minimized"] = o.StartMinimized
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestProcessesCreateSpec struct {
	value *VcenterVmGuestProcessesCreateSpec
	isSet bool
}

func (v NullableVcenterVmGuestProcessesCreateSpec) Get() *VcenterVmGuestProcessesCreateSpec {
	return v.value
}

func (v *NullableVcenterVmGuestProcessesCreateSpec) Set(val *VcenterVmGuestProcessesCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestProcessesCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestProcessesCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestProcessesCreateSpec(val *VcenterVmGuestProcessesCreateSpec) *NullableVcenterVmGuestProcessesCreateSpec {
	return &NullableVcenterVmGuestProcessesCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmGuestProcessesCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestProcessesCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


