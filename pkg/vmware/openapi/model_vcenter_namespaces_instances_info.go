/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespacesInstancesInfo struct for VcenterNamespacesInstancesInfo
type VcenterNamespacesInstancesInfo struct {
	// Identifier for the cluster hosting the namespace. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.
	Cluster string `json:"cluster"`
	ConfigStatus VcenterNamespacesInstancesConfigStatus `json:"config_status"`
	// Current set of messages associated with the object.
	Messages []VcenterNamespacesInstancesMessage `json:"messages"`
	Stats VcenterNamespacesInstancesStats `json:"stats"`
	// Description of the namespace.
	Description string `json:"description"`
	// Quotas on the namespace resources. Refer to vcenter.namespace_management.NamespaceResourceOptions#get for the type of the value for this field. If unset, no resource constraints are associated with the namespace.
	ResourceSpec *map[string]interface{} `json:"resource_spec,omitempty"`
	// Access controls associated with the namespace.
	AccessList []VcenterNamespacesInstancesAccess `json:"access_list"`
	// Storage associated with the namespace.
	StorageSpecs []VcenterNamespacesInstancesStorageSpec `json:"storage_specs"`
	// vSphere Networks associated with the namespace. This field is unset if the cluster hosting this namespace uses NSXT_CONTAINER_PLUGIN as its network provider. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.namespaces.Instance.
	Networks *[]string `json:"networks,omitempty"`
	VmServiceSpec *VcenterNamespacesInstancesVMServiceSpec `json:"vm_service_spec,omitempty"`
	Creator *VcenterNamespacesInstancesPrincipal `json:"creator,omitempty"`
	// Flag to indicate the self service namespace. If unset, the namespace is not marked as self service namespace.
	SelfServiceNamespace *bool `json:"self_service_namespace,omitempty"`
}

// NewVcenterNamespacesInstancesInfo instantiates a new VcenterNamespacesInstancesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespacesInstancesInfo(cluster string, configStatus VcenterNamespacesInstancesConfigStatus, messages []VcenterNamespacesInstancesMessage, stats VcenterNamespacesInstancesStats, description string, accessList []VcenterNamespacesInstancesAccess, storageSpecs []VcenterNamespacesInstancesStorageSpec) *VcenterNamespacesInstancesInfo {
	this := VcenterNamespacesInstancesInfo{}
	this.Cluster = cluster
	this.ConfigStatus = configStatus
	this.Messages = messages
	this.Stats = stats
	this.Description = description
	this.AccessList = accessList
	this.StorageSpecs = storageSpecs
	return &this
}

// NewVcenterNamespacesInstancesInfoWithDefaults instantiates a new VcenterNamespacesInstancesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespacesInstancesInfoWithDefaults() *VcenterNamespacesInstancesInfo {
	this := VcenterNamespacesInstancesInfo{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *VcenterNamespacesInstancesInfo) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetClusterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *VcenterNamespacesInstancesInfo) SetCluster(v string) {
	o.Cluster = v
}

// GetConfigStatus returns the ConfigStatus field value
func (o *VcenterNamespacesInstancesInfo) GetConfigStatus() VcenterNamespacesInstancesConfigStatus {
	if o == nil {
		var ret VcenterNamespacesInstancesConfigStatus
		return ret
	}

	return o.ConfigStatus
}

// GetConfigStatusOk returns a tuple with the ConfigStatus field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetConfigStatusOk() (*VcenterNamespacesInstancesConfigStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigStatus, true
}

// SetConfigStatus sets field value
func (o *VcenterNamespacesInstancesInfo) SetConfigStatus(v VcenterNamespacesInstancesConfigStatus) {
	o.ConfigStatus = v
}

// GetMessages returns the Messages field value
func (o *VcenterNamespacesInstancesInfo) GetMessages() []VcenterNamespacesInstancesMessage {
	if o == nil {
		var ret []VcenterNamespacesInstancesMessage
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetMessagesOk() (*[]VcenterNamespacesInstancesMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Messages, true
}

// SetMessages sets field value
func (o *VcenterNamespacesInstancesInfo) SetMessages(v []VcenterNamespacesInstancesMessage) {
	o.Messages = v
}

// GetStats returns the Stats field value
func (o *VcenterNamespacesInstancesInfo) GetStats() VcenterNamespacesInstancesStats {
	if o == nil {
		var ret VcenterNamespacesInstancesStats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetStatsOk() (*VcenterNamespacesInstancesStats, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *VcenterNamespacesInstancesInfo) SetStats(v VcenterNamespacesInstancesStats) {
	o.Stats = v
}

// GetDescription returns the Description field value
func (o *VcenterNamespacesInstancesInfo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *VcenterNamespacesInstancesInfo) SetDescription(v string) {
	o.Description = v
}

// GetResourceSpec returns the ResourceSpec field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesInfo) GetResourceSpec() map[string]interface{} {
	if o == nil || o.ResourceSpec == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ResourceSpec
}

// GetResourceSpecOk returns a tuple with the ResourceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetResourceSpecOk() (*map[string]interface{}, bool) {
	if o == nil || o.ResourceSpec == nil {
		return nil, false
	}
	return o.ResourceSpec, true
}

// HasResourceSpec returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesInfo) HasResourceSpec() bool {
	if o != nil && o.ResourceSpec != nil {
		return true
	}

	return false
}

// SetResourceSpec gets a reference to the given map[string]interface{} and assigns it to the ResourceSpec field.
func (o *VcenterNamespacesInstancesInfo) SetResourceSpec(v map[string]interface{}) {
	o.ResourceSpec = &v
}

// GetAccessList returns the AccessList field value
func (o *VcenterNamespacesInstancesInfo) GetAccessList() []VcenterNamespacesInstancesAccess {
	if o == nil {
		var ret []VcenterNamespacesInstancesAccess
		return ret
	}

	return o.AccessList
}

// GetAccessListOk returns a tuple with the AccessList field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetAccessListOk() (*[]VcenterNamespacesInstancesAccess, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccessList, true
}

// SetAccessList sets field value
func (o *VcenterNamespacesInstancesInfo) SetAccessList(v []VcenterNamespacesInstancesAccess) {
	o.AccessList = v
}

// GetStorageSpecs returns the StorageSpecs field value
func (o *VcenterNamespacesInstancesInfo) GetStorageSpecs() []VcenterNamespacesInstancesStorageSpec {
	if o == nil {
		var ret []VcenterNamespacesInstancesStorageSpec
		return ret
	}

	return o.StorageSpecs
}

// GetStorageSpecsOk returns a tuple with the StorageSpecs field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetStorageSpecsOk() (*[]VcenterNamespacesInstancesStorageSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StorageSpecs, true
}

// SetStorageSpecs sets field value
func (o *VcenterNamespacesInstancesInfo) SetStorageSpecs(v []VcenterNamespacesInstancesStorageSpec) {
	o.StorageSpecs = v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesInfo) GetNetworks() []string {
	if o == nil || o.Networks == nil {
		var ret []string
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetNetworksOk() (*[]string, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesInfo) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *VcenterNamespacesInstancesInfo) SetNetworks(v []string) {
	o.Networks = &v
}

// GetVmServiceSpec returns the VmServiceSpec field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesInfo) GetVmServiceSpec() VcenterNamespacesInstancesVMServiceSpec {
	if o == nil || o.VmServiceSpec == nil {
		var ret VcenterNamespacesInstancesVMServiceSpec
		return ret
	}
	return *o.VmServiceSpec
}

// GetVmServiceSpecOk returns a tuple with the VmServiceSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetVmServiceSpecOk() (*VcenterNamespacesInstancesVMServiceSpec, bool) {
	if o == nil || o.VmServiceSpec == nil {
		return nil, false
	}
	return o.VmServiceSpec, true
}

// HasVmServiceSpec returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesInfo) HasVmServiceSpec() bool {
	if o != nil && o.VmServiceSpec != nil {
		return true
	}

	return false
}

// SetVmServiceSpec gets a reference to the given VcenterNamespacesInstancesVMServiceSpec and assigns it to the VmServiceSpec field.
func (o *VcenterNamespacesInstancesInfo) SetVmServiceSpec(v VcenterNamespacesInstancesVMServiceSpec) {
	o.VmServiceSpec = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesInfo) GetCreator() VcenterNamespacesInstancesPrincipal {
	if o == nil || o.Creator == nil {
		var ret VcenterNamespacesInstancesPrincipal
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetCreatorOk() (*VcenterNamespacesInstancesPrincipal, bool) {
	if o == nil || o.Creator == nil {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesInfo) HasCreator() bool {
	if o != nil && o.Creator != nil {
		return true
	}

	return false
}

// SetCreator gets a reference to the given VcenterNamespacesInstancesPrincipal and assigns it to the Creator field.
func (o *VcenterNamespacesInstancesInfo) SetCreator(v VcenterNamespacesInstancesPrincipal) {
	o.Creator = &v
}

// GetSelfServiceNamespace returns the SelfServiceNamespace field value if set, zero value otherwise.
func (o *VcenterNamespacesInstancesInfo) GetSelfServiceNamespace() bool {
	if o == nil || o.SelfServiceNamespace == nil {
		var ret bool
		return ret
	}
	return *o.SelfServiceNamespace
}

// GetSelfServiceNamespaceOk returns a tuple with the SelfServiceNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesInstancesInfo) GetSelfServiceNamespaceOk() (*bool, bool) {
	if o == nil || o.SelfServiceNamespace == nil {
		return nil, false
	}
	return o.SelfServiceNamespace, true
}

// HasSelfServiceNamespace returns a boolean if a field has been set.
func (o *VcenterNamespacesInstancesInfo) HasSelfServiceNamespace() bool {
	if o != nil && o.SelfServiceNamespace != nil {
		return true
	}

	return false
}

// SetSelfServiceNamespace gets a reference to the given bool and assigns it to the SelfServiceNamespace field.
func (o *VcenterNamespacesInstancesInfo) SetSelfServiceNamespace(v bool) {
	o.SelfServiceNamespace = &v
}

func (o VcenterNamespacesInstancesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cluster"] = o.Cluster
	}
	if true {
		toSerialize["config_status"] = o.ConfigStatus
	}
	if true {
		toSerialize["messages"] = o.Messages
	}
	if true {
		toSerialize["stats"] = o.Stats
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.ResourceSpec != nil {
		toSerialize["resource_spec"] = o.ResourceSpec
	}
	if true {
		toSerialize["access_list"] = o.AccessList
	}
	if true {
		toSerialize["storage_specs"] = o.StorageSpecs
	}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	if o.VmServiceSpec != nil {
		toSerialize["vm_service_spec"] = o.VmServiceSpec
	}
	if o.Creator != nil {
		toSerialize["creator"] = o.Creator
	}
	if o.SelfServiceNamespace != nil {
		toSerialize["self_service_namespace"] = o.SelfServiceNamespace
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespacesInstancesInfo struct {
	value *VcenterNamespacesInstancesInfo
	isSet bool
}

func (v NullableVcenterNamespacesInstancesInfo) Get() *VcenterNamespacesInstancesInfo {
	return v.value
}

func (v *NullableVcenterNamespacesInstancesInfo) Set(val *VcenterNamespacesInstancesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesInstancesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesInstancesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesInstancesInfo(val *VcenterNamespacesInstancesInfo) *NullableVcenterNamespacesInstancesInfo {
	return &NullableVcenterNamespacesInstancesInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespacesInstancesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesInstancesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


