/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterFailoverTaskVchaCluster struct for VcenterVchaClusterFailoverTaskVchaCluster
type VcenterVchaClusterFailoverTaskVchaCluster struct {
	// If false, a failover is initiated immediately and may result in data loss.  If true, a failover is initated after the Active node flushes its state to Passive and there is no data loss.
	Planned *bool `json:"planned,omitempty"`
}

// NewVcenterVchaClusterFailoverTaskVchaCluster instantiates a new VcenterVchaClusterFailoverTaskVchaCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterFailoverTaskVchaCluster() *VcenterVchaClusterFailoverTaskVchaCluster {
	this := VcenterVchaClusterFailoverTaskVchaCluster{}
	return &this
}

// NewVcenterVchaClusterFailoverTaskVchaClusterWithDefaults instantiates a new VcenterVchaClusterFailoverTaskVchaCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterFailoverTaskVchaClusterWithDefaults() *VcenterVchaClusterFailoverTaskVchaCluster {
	this := VcenterVchaClusterFailoverTaskVchaCluster{}
	return &this
}

// GetPlanned returns the Planned field value if set, zero value otherwise.
func (o *VcenterVchaClusterFailoverTaskVchaCluster) GetPlanned() bool {
	if o == nil || o.Planned == nil {
		var ret bool
		return ret
	}
	return *o.Planned
}

// GetPlannedOk returns a tuple with the Planned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterFailoverTaskVchaCluster) GetPlannedOk() (*bool, bool) {
	if o == nil || o.Planned == nil {
		return nil, false
	}
	return o.Planned, true
}

// HasPlanned returns a boolean if a field has been set.
func (o *VcenterVchaClusterFailoverTaskVchaCluster) HasPlanned() bool {
	if o != nil && o.Planned != nil {
		return true
	}

	return false
}

// SetPlanned gets a reference to the given bool and assigns it to the Planned field.
func (o *VcenterVchaClusterFailoverTaskVchaCluster) SetPlanned(v bool) {
	o.Planned = &v
}

func (o VcenterVchaClusterFailoverTaskVchaCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Planned != nil {
		toSerialize["planned"] = o.Planned
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterFailoverTaskVchaCluster struct {
	value *VcenterVchaClusterFailoverTaskVchaCluster
	isSet bool
}

func (v NullableVcenterVchaClusterFailoverTaskVchaCluster) Get() *VcenterVchaClusterFailoverTaskVchaCluster {
	return v.value
}

func (v *NullableVcenterVchaClusterFailoverTaskVchaCluster) Set(val *VcenterVchaClusterFailoverTaskVchaCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterFailoverTaskVchaCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterFailoverTaskVchaCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterFailoverTaskVchaCluster(val *VcenterVchaClusterFailoverTaskVchaCluster) *NullableVcenterVchaClusterFailoverTaskVchaCluster {
	return &NullableVcenterVchaClusterFailoverTaskVchaCluster{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterFailoverTaskVchaCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterFailoverTaskVchaCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


