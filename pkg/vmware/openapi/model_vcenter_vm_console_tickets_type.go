/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmConsoleTicketsType The Tickets.Type enumerated type defines the types of console tickets.
type VcenterVmConsoleTicketsType string

// List of vcenter.vm.console.tickets.type
const (
	VCENTERVMCONSOLETICKETSTYPE_VMRC VcenterVmConsoleTicketsType = "VMRC"
	VCENTERVMCONSOLETICKETSTYPE_WEBMKS VcenterVmConsoleTicketsType = "WEBMKS"
)

// All allowed values of VcenterVmConsoleTicketsType enum
var AllowedVcenterVmConsoleTicketsTypeEnumValues = []VcenterVmConsoleTicketsType{
	"VMRC",
	"WEBMKS",
}

func (v *VcenterVmConsoleTicketsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmConsoleTicketsType(value)
	for _, existing := range AllowedVcenterVmConsoleTicketsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmConsoleTicketsType", value)
}

// NewVcenterVmConsoleTicketsTypeFromValue returns a pointer to a valid VcenterVmConsoleTicketsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmConsoleTicketsTypeFromValue(v string) (*VcenterVmConsoleTicketsType, error) {
	ev := VcenterVmConsoleTicketsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmConsoleTicketsType: valid values are %v", v, AllowedVcenterVmConsoleTicketsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmConsoleTicketsType) IsValid() bool {
	for _, existing := range AllowedVcenterVmConsoleTicketsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.console.tickets.type value
func (v VcenterVmConsoleTicketsType) Ptr() *VcenterVmConsoleTicketsType {
	return &v
}

type NullableVcenterVmConsoleTicketsType struct {
	value *VcenterVmConsoleTicketsType
	isSet bool
}

func (v NullableVcenterVmConsoleTicketsType) Get() *VcenterVmConsoleTicketsType {
	return v.value
}

func (v *NullableVcenterVmConsoleTicketsType) Set(val *VcenterVmConsoleTicketsType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmConsoleTicketsType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmConsoleTicketsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmConsoleTicketsType(val *VcenterVmConsoleTicketsType) *NullableVcenterVmConsoleTicketsType {
	return &NullableVcenterVmConsoleTicketsType{value: val, isSet: true}
}

func (v NullableVcenterVmConsoleTicketsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmConsoleTicketsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

