/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec struct for VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec
type VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec struct {
	// Inline content that contains all service definition of the version in vSphere application service format, which shall be base64 encoded. The service definition here follows the vSphere application service format.
	Content string `json:"content"`
	// Whether or not the Supervisor Service version is from a trusted provider, this field must be set to false if the service version is not from a trusted provider. If it is set to be true, but the Versions.VsphereCreateSpec.content is not signed or the signature is invalid, an InvalidArgument will be thrown. If unset, the default value is true. In this case, the Versions.VsphereCreateSpec.content must be signed and will be verified.
	TrustedProvider *bool `json:"trusted_provider,omitempty"`
	// Whether or not the End User License Agreement (EULA) that is specified in the Versions.VsphereCreateSpec.content is accepted. If a EULA is specified, this field must be set to be true so that the Supervisor Service version can be created. If unset, the default value is false.
	AcceptEULA *bool `json:"accept_EULA,omitempty"`
}

// NewVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec instantiates a new VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec(content string) *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec {
	this := VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec{}
	this.Content = content
	return &this
}

// NewVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpecWithDefaults instantiates a new VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpecWithDefaults() *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec {
	this := VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec{}
	return &this
}

// GetContent returns the Content field value
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) GetContentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) SetContent(v string) {
	o.Content = v
}

// GetTrustedProvider returns the TrustedProvider field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) GetTrustedProvider() bool {
	if o == nil || o.TrustedProvider == nil {
		var ret bool
		return ret
	}
	return *o.TrustedProvider
}

// GetTrustedProviderOk returns a tuple with the TrustedProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) GetTrustedProviderOk() (*bool, bool) {
	if o == nil || o.TrustedProvider == nil {
		return nil, false
	}
	return o.TrustedProvider, true
}

// HasTrustedProvider returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) HasTrustedProvider() bool {
	if o != nil && o.TrustedProvider != nil {
		return true
	}

	return false
}

// SetTrustedProvider gets a reference to the given bool and assigns it to the TrustedProvider field.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) SetTrustedProvider(v bool) {
	o.TrustedProvider = &v
}

// GetAcceptEULA returns the AcceptEULA field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) GetAcceptEULA() bool {
	if o == nil || o.AcceptEULA == nil {
		var ret bool
		return ret
	}
	return *o.AcceptEULA
}

// GetAcceptEULAOk returns a tuple with the AcceptEULA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) GetAcceptEULAOk() (*bool, bool) {
	if o == nil || o.AcceptEULA == nil {
		return nil, false
	}
	return o.AcceptEULA, true
}

// HasAcceptEULA returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) HasAcceptEULA() bool {
	if o != nil && o.AcceptEULA != nil {
		return true
	}

	return false
}

// SetAcceptEULA gets a reference to the given bool and assigns it to the AcceptEULA field.
func (o *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) SetAcceptEULA(v bool) {
	o.AcceptEULA = &v
}

func (o VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["content"] = o.Content
	}
	if o.TrustedProvider != nil {
		toSerialize["trusted_provider"] = o.TrustedProvider
	}
	if o.AcceptEULA != nil {
		toSerialize["accept_EULA"] = o.AcceptEULA
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec struct {
	value *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) Get() *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) Set(val *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec(val *VcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) *NullableVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec {
	return &NullableVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVersionsVsphereCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


