/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterServicesServiceUpdateSpec struct for VcenterServicesServiceUpdateSpec
type VcenterServicesServiceUpdateSpec struct {
	StartupType *VcenterServicesServiceStartupType `json:"startup_type,omitempty"`
}

// NewVcenterServicesServiceUpdateSpec instantiates a new VcenterServicesServiceUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterServicesServiceUpdateSpec() *VcenterServicesServiceUpdateSpec {
	this := VcenterServicesServiceUpdateSpec{}
	return &this
}

// NewVcenterServicesServiceUpdateSpecWithDefaults instantiates a new VcenterServicesServiceUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterServicesServiceUpdateSpecWithDefaults() *VcenterServicesServiceUpdateSpec {
	this := VcenterServicesServiceUpdateSpec{}
	return &this
}

// GetStartupType returns the StartupType field value if set, zero value otherwise.
func (o *VcenterServicesServiceUpdateSpec) GetStartupType() VcenterServicesServiceStartupType {
	if o == nil || o.StartupType == nil {
		var ret VcenterServicesServiceStartupType
		return ret
	}
	return *o.StartupType
}

// GetStartupTypeOk returns a tuple with the StartupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterServicesServiceUpdateSpec) GetStartupTypeOk() (*VcenterServicesServiceStartupType, bool) {
	if o == nil || o.StartupType == nil {
		return nil, false
	}
	return o.StartupType, true
}

// HasStartupType returns a boolean if a field has been set.
func (o *VcenterServicesServiceUpdateSpec) HasStartupType() bool {
	if o != nil && o.StartupType != nil {
		return true
	}

	return false
}

// SetStartupType gets a reference to the given VcenterServicesServiceStartupType and assigns it to the StartupType field.
func (o *VcenterServicesServiceUpdateSpec) SetStartupType(v VcenterServicesServiceStartupType) {
	o.StartupType = &v
}

func (o VcenterServicesServiceUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartupType != nil {
		toSerialize["startup_type"] = o.StartupType
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterServicesServiceUpdateSpec struct {
	value *VcenterServicesServiceUpdateSpec
	isSet bool
}

func (v NullableVcenterServicesServiceUpdateSpec) Get() *VcenterServicesServiceUpdateSpec {
	return v.value
}

func (v *NullableVcenterServicesServiceUpdateSpec) Set(val *VcenterServicesServiceUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterServicesServiceUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterServicesServiceUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterServicesServiceUpdateSpec(val *VcenterServicesServiceUpdateSpec) *NullableVcenterServicesServiceUpdateSpec {
	return &NullableVcenterServicesServiceUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterServicesServiceUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterServicesServiceUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


