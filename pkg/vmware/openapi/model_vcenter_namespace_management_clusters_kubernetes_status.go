/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementClustersKubernetesStatus The Clusters.KubernetesStatus enumerated type describes the cluster's ability to deploy pods.
type VcenterNamespaceManagementClustersKubernetesStatus string

// List of VcenterNamespaceManagementClustersKubernetesStatus
const (
	VCENTERNAMESPACEMANAGEMENTCLUSTERSKUBERNETESSTATUS_READY VcenterNamespaceManagementClustersKubernetesStatus = "READY"
	VCENTERNAMESPACEMANAGEMENTCLUSTERSKUBERNETESSTATUS_WARNING VcenterNamespaceManagementClustersKubernetesStatus = "WARNING"
	VCENTERNAMESPACEMANAGEMENTCLUSTERSKUBERNETESSTATUS_ERROR VcenterNamespaceManagementClustersKubernetesStatus = "ERROR"
)

// All allowed values of VcenterNamespaceManagementClustersKubernetesStatus enum
var AllowedVcenterNamespaceManagementClustersKubernetesStatusEnumValues = []VcenterNamespaceManagementClustersKubernetesStatus{
	"READY",
	"WARNING",
	"ERROR",
}

func (v *VcenterNamespaceManagementClustersKubernetesStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementClustersKubernetesStatus(value)
	for _, existing := range AllowedVcenterNamespaceManagementClustersKubernetesStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementClustersKubernetesStatus", value)
}

// NewVcenterNamespaceManagementClustersKubernetesStatusFromValue returns a pointer to a valid VcenterNamespaceManagementClustersKubernetesStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementClustersKubernetesStatusFromValue(v string) (*VcenterNamespaceManagementClustersKubernetesStatus, error) {
	ev := VcenterNamespaceManagementClustersKubernetesStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementClustersKubernetesStatus: valid values are %v", v, AllowedVcenterNamespaceManagementClustersKubernetesStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementClustersKubernetesStatus) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementClustersKubernetesStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementClustersKubernetesStatus value
func (v VcenterNamespaceManagementClustersKubernetesStatus) Ptr() *VcenterNamespaceManagementClustersKubernetesStatus {
	return &v
}

type NullableVcenterNamespaceManagementClustersKubernetesStatus struct {
	value *VcenterNamespaceManagementClustersKubernetesStatus
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersKubernetesStatus) Get() *VcenterNamespaceManagementClustersKubernetesStatus {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersKubernetesStatus) Set(val *VcenterNamespaceManagementClustersKubernetesStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersKubernetesStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersKubernetesStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersKubernetesStatus(val *VcenterNamespaceManagementClustersKubernetesStatus) *NullableVcenterNamespaceManagementClustersKubernetesStatus {
	return &NullableVcenterNamespaceManagementClustersKubernetesStatus{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersKubernetesStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersKubernetesStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

