/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaCredentialsSpec struct for VcenterVchaCredentialsSpec
type VcenterVchaCredentialsSpec struct {
	ActiveLocation VcenterVchaConnectionSpec `json:"active_location"`
}

// NewVcenterVchaCredentialsSpec instantiates a new VcenterVchaCredentialsSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaCredentialsSpec(activeLocation VcenterVchaConnectionSpec) *VcenterVchaCredentialsSpec {
	this := VcenterVchaCredentialsSpec{}
	this.ActiveLocation = activeLocation
	return &this
}

// NewVcenterVchaCredentialsSpecWithDefaults instantiates a new VcenterVchaCredentialsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaCredentialsSpecWithDefaults() *VcenterVchaCredentialsSpec {
	this := VcenterVchaCredentialsSpec{}
	return &this
}

// GetActiveLocation returns the ActiveLocation field value
func (o *VcenterVchaCredentialsSpec) GetActiveLocation() VcenterVchaConnectionSpec {
	if o == nil {
		var ret VcenterVchaConnectionSpec
		return ret
	}

	return o.ActiveLocation
}

// GetActiveLocationOk returns a tuple with the ActiveLocation field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaCredentialsSpec) GetActiveLocationOk() (*VcenterVchaConnectionSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ActiveLocation, true
}

// SetActiveLocation sets field value
func (o *VcenterVchaCredentialsSpec) SetActiveLocation(v VcenterVchaConnectionSpec) {
	o.ActiveLocation = v
}

func (o VcenterVchaCredentialsSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["active_location"] = o.ActiveLocation
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaCredentialsSpec struct {
	value *VcenterVchaCredentialsSpec
	isSet bool
}

func (v NullableVcenterVchaCredentialsSpec) Get() *VcenterVchaCredentialsSpec {
	return v.value
}

func (v *NullableVcenterVchaCredentialsSpec) Set(val *VcenterVchaCredentialsSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaCredentialsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaCredentialsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaCredentialsSpec(val *VcenterVchaCredentialsSpec) *NullableVcenterVchaCredentialsSpec {
	return &NullableVcenterVchaCredentialsSpec{value: val, isSet: true}
}

func (v NullableVcenterVchaCredentialsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaCredentialsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


