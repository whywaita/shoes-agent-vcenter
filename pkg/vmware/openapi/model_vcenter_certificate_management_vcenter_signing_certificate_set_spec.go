/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCertificateManagementVcenterSigningCertificateSetSpec struct for VcenterCertificateManagementVcenterSigningCertificateSetSpec
type VcenterCertificateManagementVcenterSigningCertificateSetSpec struct {
	SigningCertChain VcenterCertificateManagementX509CertChain `json:"signing_cert_chain"`
	// The corresponding unencrypted PKCS#8 private key in base64-encoded PEM format.
	PrivateKey string `json:"private_key"`
}

// NewVcenterCertificateManagementVcenterSigningCertificateSetSpec instantiates a new VcenterCertificateManagementVcenterSigningCertificateSetSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCertificateManagementVcenterSigningCertificateSetSpec(signingCertChain VcenterCertificateManagementX509CertChain, privateKey string) *VcenterCertificateManagementVcenterSigningCertificateSetSpec {
	this := VcenterCertificateManagementVcenterSigningCertificateSetSpec{}
	this.SigningCertChain = signingCertChain
	this.PrivateKey = privateKey
	return &this
}

// NewVcenterCertificateManagementVcenterSigningCertificateSetSpecWithDefaults instantiates a new VcenterCertificateManagementVcenterSigningCertificateSetSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCertificateManagementVcenterSigningCertificateSetSpecWithDefaults() *VcenterCertificateManagementVcenterSigningCertificateSetSpec {
	this := VcenterCertificateManagementVcenterSigningCertificateSetSpec{}
	return &this
}

// GetSigningCertChain returns the SigningCertChain field value
func (o *VcenterCertificateManagementVcenterSigningCertificateSetSpec) GetSigningCertChain() VcenterCertificateManagementX509CertChain {
	if o == nil {
		var ret VcenterCertificateManagementX509CertChain
		return ret
	}

	return o.SigningCertChain
}

// GetSigningCertChainOk returns a tuple with the SigningCertChain field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterSigningCertificateSetSpec) GetSigningCertChainOk() (*VcenterCertificateManagementX509CertChain, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SigningCertChain, true
}

// SetSigningCertChain sets field value
func (o *VcenterCertificateManagementVcenterSigningCertificateSetSpec) SetSigningCertChain(v VcenterCertificateManagementX509CertChain) {
	o.SigningCertChain = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *VcenterCertificateManagementVcenterSigningCertificateSetSpec) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterSigningCertificateSetSpec) GetPrivateKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *VcenterCertificateManagementVcenterSigningCertificateSetSpec) SetPrivateKey(v string) {
	o.PrivateKey = v
}

func (o VcenterCertificateManagementVcenterSigningCertificateSetSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["signing_cert_chain"] = o.SigningCertChain
	}
	if true {
		toSerialize["private_key"] = o.PrivateKey
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCertificateManagementVcenterSigningCertificateSetSpec struct {
	value *VcenterCertificateManagementVcenterSigningCertificateSetSpec
	isSet bool
}

func (v NullableVcenterCertificateManagementVcenterSigningCertificateSetSpec) Get() *VcenterCertificateManagementVcenterSigningCertificateSetSpec {
	return v.value
}

func (v *NullableVcenterCertificateManagementVcenterSigningCertificateSetSpec) Set(val *VcenterCertificateManagementVcenterSigningCertificateSetSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCertificateManagementVcenterSigningCertificateSetSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCertificateManagementVcenterSigningCertificateSetSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCertificateManagementVcenterSigningCertificateSetSpec(val *VcenterCertificateManagementVcenterSigningCertificateSetSpec) *NullableVcenterCertificateManagementVcenterSigningCertificateSetSpec {
	return &NullableVcenterCertificateManagementVcenterSigningCertificateSetSpec{value: val, isSet: true}
}

func (v NullableVcenterCertificateManagementVcenterSigningCertificateSetSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCertificateManagementVcenterSigningCertificateSetSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


