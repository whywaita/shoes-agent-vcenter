/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterContentRegistriesHarborStorageInfo struct for VcenterContentRegistriesHarborStorageInfo
type VcenterContentRegistriesHarborStorageInfo struct {
	// Identifier of the storage policy.
	Policy string `json:"policy"`
	// Total capacity for the registry storage (in mebibytes). This is the storage limit set on the Harbor registry. If a storage limit was not set on the registry, the default registry capacity - 204800 mebibytes is used.
	Capacity int64 `json:"capacity"`
	// Overall storage used by the registry (in mebibytes). This is the sum of used storage associated with storage policies configured for the registry.
	Used int64 `json:"used"`
}

// NewVcenterContentRegistriesHarborStorageInfo instantiates a new VcenterContentRegistriesHarborStorageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterContentRegistriesHarborStorageInfo(policy string, capacity int64, used int64) *VcenterContentRegistriesHarborStorageInfo {
	this := VcenterContentRegistriesHarborStorageInfo{}
	this.Policy = policy
	this.Capacity = capacity
	this.Used = used
	return &this
}

// NewVcenterContentRegistriesHarborStorageInfoWithDefaults instantiates a new VcenterContentRegistriesHarborStorageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterContentRegistriesHarborStorageInfoWithDefaults() *VcenterContentRegistriesHarborStorageInfo {
	this := VcenterContentRegistriesHarborStorageInfo{}
	return &this
}

// GetPolicy returns the Policy field value
func (o *VcenterContentRegistriesHarborStorageInfo) GetPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborStorageInfo) GetPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Policy, true
}

// SetPolicy sets field value
func (o *VcenterContentRegistriesHarborStorageInfo) SetPolicy(v string) {
	o.Policy = v
}

// GetCapacity returns the Capacity field value
func (o *VcenterContentRegistriesHarborStorageInfo) GetCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborStorageInfo) GetCapacityOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *VcenterContentRegistriesHarborStorageInfo) SetCapacity(v int64) {
	o.Capacity = v
}

// GetUsed returns the Used field value
func (o *VcenterContentRegistriesHarborStorageInfo) GetUsed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Used
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborStorageInfo) GetUsedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Used, true
}

// SetUsed sets field value
func (o *VcenterContentRegistriesHarborStorageInfo) SetUsed(v int64) {
	o.Used = v
}

func (o VcenterContentRegistriesHarborStorageInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["policy"] = o.Policy
	}
	if true {
		toSerialize["capacity"] = o.Capacity
	}
	if true {
		toSerialize["used"] = o.Used
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterContentRegistriesHarborStorageInfo struct {
	value *VcenterContentRegistriesHarborStorageInfo
	isSet bool
}

func (v NullableVcenterContentRegistriesHarborStorageInfo) Get() *VcenterContentRegistriesHarborStorageInfo {
	return v.value
}

func (v *NullableVcenterContentRegistriesHarborStorageInfo) Set(val *VcenterContentRegistriesHarborStorageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterContentRegistriesHarborStorageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterContentRegistriesHarborStorageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterContentRegistriesHarborStorageInfo(val *VcenterContentRegistriesHarborStorageInfo) *NullableVcenterContentRegistriesHarborStorageInfo {
	return &NullableVcenterContentRegistriesHarborStorageInfo{value: val, isSet: true}
}

func (v NullableVcenterContentRegistriesHarborStorageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterContentRegistriesHarborStorageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


