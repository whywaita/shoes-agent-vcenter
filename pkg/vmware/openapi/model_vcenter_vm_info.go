/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMInfo struct for VcenterVMInfo
type VcenterVMInfo struct {
	GuestOS VcenterVmGuestOS `json:"guest_OS"`
	// Virtual machine name.
	Name string `json:"name"`
	Identity *VcenterVmIdentityInfo `json:"identity,omitempty"`
	PowerState VcenterVmPowerState `json:"power_state"`
	// Indicates whether the virtual machine is frozen for instant clone, or not. This field is optional because it was added in a newer version than its parent node.
	InstantCloneFrozen *bool `json:"instant_clone_frozen,omitempty"`
	Hardware VcenterVmHardwareInfo `json:"hardware"`
	Boot VcenterVmHardwareBootInfo `json:"boot"`
	// Boot device configuration. If the list has no entries, a server-specific default boot sequence is used.
	BootDevices []VcenterVmHardwareBootDeviceEntry `json:"boot_devices"`
	Cpu VcenterVmHardwareCpuInfo `json:"cpu"`
	Memory VcenterVmHardwareMemoryInfo `json:"memory"`
	// List of disks. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.
	Disks []VcenterVMInfoDisks `json:"disks"`
	// List of Ethernet adapters. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Ethernet.
	Nics []VcenterVMInfoNics `json:"nics"`
	// List of CD-ROMs. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Cdrom. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Cdrom.
	Cdroms []VcenterVMInfoCdroms `json:"cdroms"`
	// List of floppy drives. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Floppy. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Floppy.
	Floppies []VcenterVMInfoFloppies `json:"floppies"`
	// List of parallel ports. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.ParallelPort. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.ParallelPort.
	ParallelPorts []VcenterVMInfoParallelPorts `json:"parallel_ports"`
	// List of serial ports. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.SerialPort. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.SerialPort.
	SerialPorts []VcenterVMInfoSerialPorts `json:"serial_ports"`
	// List of SATA adapters. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.SataAdapter.
	SataAdapters []VcenterVMInfoSataAdapters `json:"sata_adapters"`
	// List of SCSI adapters. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.ScsiAdapter. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.ScsiAdapter.
	ScsiAdapters []VcenterVMInfoScsiAdapters `json:"scsi_adapters"`
	// List of NVMe adapters. This field is optional because it was added in a newer version than its parent node. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.NvmeAdapter. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.NvmeAdapter.
	NvmeAdapters *[]VcenterVMInfoNvmeAdapters `json:"nvme_adapters,omitempty"`
}

// NewVcenterVMInfo instantiates a new VcenterVMInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMInfo(guestOS VcenterVmGuestOS, name string, powerState VcenterVmPowerState, hardware VcenterVmHardwareInfo, boot VcenterVmHardwareBootInfo, bootDevices []VcenterVmHardwareBootDeviceEntry, cpu VcenterVmHardwareCpuInfo, memory VcenterVmHardwareMemoryInfo, disks []VcenterVMInfoDisks, nics []VcenterVMInfoNics, cdroms []VcenterVMInfoCdroms, floppies []VcenterVMInfoFloppies, parallelPorts []VcenterVMInfoParallelPorts, serialPorts []VcenterVMInfoSerialPorts, sataAdapters []VcenterVMInfoSataAdapters, scsiAdapters []VcenterVMInfoScsiAdapters) *VcenterVMInfo {
	this := VcenterVMInfo{}
	this.GuestOS = guestOS
	this.Name = name
	this.PowerState = powerState
	this.Hardware = hardware
	this.Boot = boot
	this.BootDevices = bootDevices
	this.Cpu = cpu
	this.Memory = memory
	this.Disks = disks
	this.Nics = nics
	this.Cdroms = cdroms
	this.Floppies = floppies
	this.ParallelPorts = parallelPorts
	this.SerialPorts = serialPorts
	this.SataAdapters = sataAdapters
	this.ScsiAdapters = scsiAdapters
	return &this
}

// NewVcenterVMInfoWithDefaults instantiates a new VcenterVMInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMInfoWithDefaults() *VcenterVMInfo {
	this := VcenterVMInfo{}
	return &this
}

// GetGuestOS returns the GuestOS field value
func (o *VcenterVMInfo) GetGuestOS() VcenterVmGuestOS {
	if o == nil {
		var ret VcenterVmGuestOS
		return ret
	}

	return o.GuestOS
}

// GetGuestOSOk returns a tuple with the GuestOS field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetGuestOSOk() (*VcenterVmGuestOS, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GuestOS, true
}

// SetGuestOS sets field value
func (o *VcenterVMInfo) SetGuestOS(v VcenterVmGuestOS) {
	o.GuestOS = v
}

// GetName returns the Name field value
func (o *VcenterVMInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VcenterVMInfo) SetName(v string) {
	o.Name = v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *VcenterVMInfo) GetIdentity() VcenterVmIdentityInfo {
	if o == nil || o.Identity == nil {
		var ret VcenterVmIdentityInfo
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetIdentityOk() (*VcenterVmIdentityInfo, bool) {
	if o == nil || o.Identity == nil {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *VcenterVMInfo) HasIdentity() bool {
	if o != nil && o.Identity != nil {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given VcenterVmIdentityInfo and assigns it to the Identity field.
func (o *VcenterVMInfo) SetIdentity(v VcenterVmIdentityInfo) {
	o.Identity = &v
}

// GetPowerState returns the PowerState field value
func (o *VcenterVMInfo) GetPowerState() VcenterVmPowerState {
	if o == nil {
		var ret VcenterVmPowerState
		return ret
	}

	return o.PowerState
}

// GetPowerStateOk returns a tuple with the PowerState field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetPowerStateOk() (*VcenterVmPowerState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PowerState, true
}

// SetPowerState sets field value
func (o *VcenterVMInfo) SetPowerState(v VcenterVmPowerState) {
	o.PowerState = v
}

// GetInstantCloneFrozen returns the InstantCloneFrozen field value if set, zero value otherwise.
func (o *VcenterVMInfo) GetInstantCloneFrozen() bool {
	if o == nil || o.InstantCloneFrozen == nil {
		var ret bool
		return ret
	}
	return *o.InstantCloneFrozen
}

// GetInstantCloneFrozenOk returns a tuple with the InstantCloneFrozen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetInstantCloneFrozenOk() (*bool, bool) {
	if o == nil || o.InstantCloneFrozen == nil {
		return nil, false
	}
	return o.InstantCloneFrozen, true
}

// HasInstantCloneFrozen returns a boolean if a field has been set.
func (o *VcenterVMInfo) HasInstantCloneFrozen() bool {
	if o != nil && o.InstantCloneFrozen != nil {
		return true
	}

	return false
}

// SetInstantCloneFrozen gets a reference to the given bool and assigns it to the InstantCloneFrozen field.
func (o *VcenterVMInfo) SetInstantCloneFrozen(v bool) {
	o.InstantCloneFrozen = &v
}

// GetHardware returns the Hardware field value
func (o *VcenterVMInfo) GetHardware() VcenterVmHardwareInfo {
	if o == nil {
		var ret VcenterVmHardwareInfo
		return ret
	}

	return o.Hardware
}

// GetHardwareOk returns a tuple with the Hardware field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetHardwareOk() (*VcenterVmHardwareInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hardware, true
}

// SetHardware sets field value
func (o *VcenterVMInfo) SetHardware(v VcenterVmHardwareInfo) {
	o.Hardware = v
}

// GetBoot returns the Boot field value
func (o *VcenterVMInfo) GetBoot() VcenterVmHardwareBootInfo {
	if o == nil {
		var ret VcenterVmHardwareBootInfo
		return ret
	}

	return o.Boot
}

// GetBootOk returns a tuple with the Boot field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetBootOk() (*VcenterVmHardwareBootInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Boot, true
}

// SetBoot sets field value
func (o *VcenterVMInfo) SetBoot(v VcenterVmHardwareBootInfo) {
	o.Boot = v
}

// GetBootDevices returns the BootDevices field value
func (o *VcenterVMInfo) GetBootDevices() []VcenterVmHardwareBootDeviceEntry {
	if o == nil {
		var ret []VcenterVmHardwareBootDeviceEntry
		return ret
	}

	return o.BootDevices
}

// GetBootDevicesOk returns a tuple with the BootDevices field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetBootDevicesOk() (*[]VcenterVmHardwareBootDeviceEntry, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BootDevices, true
}

// SetBootDevices sets field value
func (o *VcenterVMInfo) SetBootDevices(v []VcenterVmHardwareBootDeviceEntry) {
	o.BootDevices = v
}

// GetCpu returns the Cpu field value
func (o *VcenterVMInfo) GetCpu() VcenterVmHardwareCpuInfo {
	if o == nil {
		var ret VcenterVmHardwareCpuInfo
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetCpuOk() (*VcenterVmHardwareCpuInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *VcenterVMInfo) SetCpu(v VcenterVmHardwareCpuInfo) {
	o.Cpu = v
}

// GetMemory returns the Memory field value
func (o *VcenterVMInfo) GetMemory() VcenterVmHardwareMemoryInfo {
	if o == nil {
		var ret VcenterVmHardwareMemoryInfo
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetMemoryOk() (*VcenterVmHardwareMemoryInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *VcenterVMInfo) SetMemory(v VcenterVmHardwareMemoryInfo) {
	o.Memory = v
}

// GetDisks returns the Disks field value
func (o *VcenterVMInfo) GetDisks() []VcenterVMInfoDisks {
	if o == nil {
		var ret []VcenterVMInfoDisks
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetDisksOk() (*[]VcenterVMInfoDisks, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Disks, true
}

// SetDisks sets field value
func (o *VcenterVMInfo) SetDisks(v []VcenterVMInfoDisks) {
	o.Disks = v
}

// GetNics returns the Nics field value
func (o *VcenterVMInfo) GetNics() []VcenterVMInfoNics {
	if o == nil {
		var ret []VcenterVMInfoNics
		return ret
	}

	return o.Nics
}

// GetNicsOk returns a tuple with the Nics field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetNicsOk() (*[]VcenterVMInfoNics, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Nics, true
}

// SetNics sets field value
func (o *VcenterVMInfo) SetNics(v []VcenterVMInfoNics) {
	o.Nics = v
}

// GetCdroms returns the Cdroms field value
func (o *VcenterVMInfo) GetCdroms() []VcenterVMInfoCdroms {
	if o == nil {
		var ret []VcenterVMInfoCdroms
		return ret
	}

	return o.Cdroms
}

// GetCdromsOk returns a tuple with the Cdroms field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetCdromsOk() (*[]VcenterVMInfoCdroms, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cdroms, true
}

// SetCdroms sets field value
func (o *VcenterVMInfo) SetCdroms(v []VcenterVMInfoCdroms) {
	o.Cdroms = v
}

// GetFloppies returns the Floppies field value
func (o *VcenterVMInfo) GetFloppies() []VcenterVMInfoFloppies {
	if o == nil {
		var ret []VcenterVMInfoFloppies
		return ret
	}

	return o.Floppies
}

// GetFloppiesOk returns a tuple with the Floppies field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetFloppiesOk() (*[]VcenterVMInfoFloppies, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Floppies, true
}

// SetFloppies sets field value
func (o *VcenterVMInfo) SetFloppies(v []VcenterVMInfoFloppies) {
	o.Floppies = v
}

// GetParallelPorts returns the ParallelPorts field value
func (o *VcenterVMInfo) GetParallelPorts() []VcenterVMInfoParallelPorts {
	if o == nil {
		var ret []VcenterVMInfoParallelPorts
		return ret
	}

	return o.ParallelPorts
}

// GetParallelPortsOk returns a tuple with the ParallelPorts field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetParallelPortsOk() (*[]VcenterVMInfoParallelPorts, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ParallelPorts, true
}

// SetParallelPorts sets field value
func (o *VcenterVMInfo) SetParallelPorts(v []VcenterVMInfoParallelPorts) {
	o.ParallelPorts = v
}

// GetSerialPorts returns the SerialPorts field value
func (o *VcenterVMInfo) GetSerialPorts() []VcenterVMInfoSerialPorts {
	if o == nil {
		var ret []VcenterVMInfoSerialPorts
		return ret
	}

	return o.SerialPorts
}

// GetSerialPortsOk returns a tuple with the SerialPorts field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetSerialPortsOk() (*[]VcenterVMInfoSerialPorts, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SerialPorts, true
}

// SetSerialPorts sets field value
func (o *VcenterVMInfo) SetSerialPorts(v []VcenterVMInfoSerialPorts) {
	o.SerialPorts = v
}

// GetSataAdapters returns the SataAdapters field value
func (o *VcenterVMInfo) GetSataAdapters() []VcenterVMInfoSataAdapters {
	if o == nil {
		var ret []VcenterVMInfoSataAdapters
		return ret
	}

	return o.SataAdapters
}

// GetSataAdaptersOk returns a tuple with the SataAdapters field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetSataAdaptersOk() (*[]VcenterVMInfoSataAdapters, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SataAdapters, true
}

// SetSataAdapters sets field value
func (o *VcenterVMInfo) SetSataAdapters(v []VcenterVMInfoSataAdapters) {
	o.SataAdapters = v
}

// GetScsiAdapters returns the ScsiAdapters field value
func (o *VcenterVMInfo) GetScsiAdapters() []VcenterVMInfoScsiAdapters {
	if o == nil {
		var ret []VcenterVMInfoScsiAdapters
		return ret
	}

	return o.ScsiAdapters
}

// GetScsiAdaptersOk returns a tuple with the ScsiAdapters field value
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetScsiAdaptersOk() (*[]VcenterVMInfoScsiAdapters, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ScsiAdapters, true
}

// SetScsiAdapters sets field value
func (o *VcenterVMInfo) SetScsiAdapters(v []VcenterVMInfoScsiAdapters) {
	o.ScsiAdapters = v
}

// GetNvmeAdapters returns the NvmeAdapters field value if set, zero value otherwise.
func (o *VcenterVMInfo) GetNvmeAdapters() []VcenterVMInfoNvmeAdapters {
	if o == nil || o.NvmeAdapters == nil {
		var ret []VcenterVMInfoNvmeAdapters
		return ret
	}
	return *o.NvmeAdapters
}

// GetNvmeAdaptersOk returns a tuple with the NvmeAdapters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInfo) GetNvmeAdaptersOk() (*[]VcenterVMInfoNvmeAdapters, bool) {
	if o == nil || o.NvmeAdapters == nil {
		return nil, false
	}
	return o.NvmeAdapters, true
}

// HasNvmeAdapters returns a boolean if a field has been set.
func (o *VcenterVMInfo) HasNvmeAdapters() bool {
	if o != nil && o.NvmeAdapters != nil {
		return true
	}

	return false
}

// SetNvmeAdapters gets a reference to the given []VcenterVMInfoNvmeAdapters and assigns it to the NvmeAdapters field.
func (o *VcenterVMInfo) SetNvmeAdapters(v []VcenterVMInfoNvmeAdapters) {
	o.NvmeAdapters = &v
}

func (o VcenterVMInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["guest_OS"] = o.GuestOS
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Identity != nil {
		toSerialize["identity"] = o.Identity
	}
	if true {
		toSerialize["power_state"] = o.PowerState
	}
	if o.InstantCloneFrozen != nil {
		toSerialize["instant_clone_frozen"] = o.InstantCloneFrozen
	}
	if true {
		toSerialize["hardware"] = o.Hardware
	}
	if true {
		toSerialize["boot"] = o.Boot
	}
	if true {
		toSerialize["boot_devices"] = o.BootDevices
	}
	if true {
		toSerialize["cpu"] = o.Cpu
	}
	if true {
		toSerialize["memory"] = o.Memory
	}
	if true {
		toSerialize["disks"] = o.Disks
	}
	if true {
		toSerialize["nics"] = o.Nics
	}
	if true {
		toSerialize["cdroms"] = o.Cdroms
	}
	if true {
		toSerialize["floppies"] = o.Floppies
	}
	if true {
		toSerialize["parallel_ports"] = o.ParallelPorts
	}
	if true {
		toSerialize["serial_ports"] = o.SerialPorts
	}
	if true {
		toSerialize["sata_adapters"] = o.SataAdapters
	}
	if true {
		toSerialize["scsi_adapters"] = o.ScsiAdapters
	}
	if o.NvmeAdapters != nil {
		toSerialize["nvme_adapters"] = o.NvmeAdapters
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMInfo struct {
	value *VcenterVMInfo
	isSet bool
}

func (v NullableVcenterVMInfo) Get() *VcenterVMInfo {
	return v.value
}

func (v *NullableVcenterVMInfo) Set(val *VcenterVMInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMInfo(val *VcenterVMInfo) *NullableVcenterVMInfo {
	return &NullableVcenterVMInfo{value: val, isSet: true}
}

func (v NullableVcenterVMInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


