/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementSoftwareClustersState The Clusters.State enumerated type describes the state of the upgrade.
type VcenterNamespaceManagementSoftwareClustersState string

// List of VcenterNamespaceManagementSoftwareClustersState
const (
	VCENTERNAMESPACEMANAGEMENTSOFTWARECLUSTERSSTATE_PENDING VcenterNamespaceManagementSoftwareClustersState = "PENDING"
	VCENTERNAMESPACEMANAGEMENTSOFTWARECLUSTERSSTATE_READY VcenterNamespaceManagementSoftwareClustersState = "READY"
	VCENTERNAMESPACEMANAGEMENTSOFTWARECLUSTERSSTATE_ERROR VcenterNamespaceManagementSoftwareClustersState = "ERROR"
)

// All allowed values of VcenterNamespaceManagementSoftwareClustersState enum
var AllowedVcenterNamespaceManagementSoftwareClustersStateEnumValues = []VcenterNamespaceManagementSoftwareClustersState{
	"PENDING",
	"READY",
	"ERROR",
}

func (v *VcenterNamespaceManagementSoftwareClustersState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementSoftwareClustersState(value)
	for _, existing := range AllowedVcenterNamespaceManagementSoftwareClustersStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementSoftwareClustersState", value)
}

// NewVcenterNamespaceManagementSoftwareClustersStateFromValue returns a pointer to a valid VcenterNamespaceManagementSoftwareClustersState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementSoftwareClustersStateFromValue(v string) (*VcenterNamespaceManagementSoftwareClustersState, error) {
	ev := VcenterNamespaceManagementSoftwareClustersState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementSoftwareClustersState: valid values are %v", v, AllowedVcenterNamespaceManagementSoftwareClustersStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementSoftwareClustersState) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementSoftwareClustersStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementSoftwareClustersState value
func (v VcenterNamespaceManagementSoftwareClustersState) Ptr() *VcenterNamespaceManagementSoftwareClustersState {
	return &v
}

type NullableVcenterNamespaceManagementSoftwareClustersState struct {
	value *VcenterNamespaceManagementSoftwareClustersState
	isSet bool
}

func (v NullableVcenterNamespaceManagementSoftwareClustersState) Get() *VcenterNamespaceManagementSoftwareClustersState {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersState) Set(val *VcenterNamespaceManagementSoftwareClustersState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSoftwareClustersState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSoftwareClustersState(val *VcenterNamespaceManagementSoftwareClustersState) *NullableVcenterNamespaceManagementSoftwareClustersState {
	return &NullableVcenterNamespaceManagementSoftwareClustersState{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSoftwareClustersState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

