/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmToolsRunState Current run state of VMware Tools in the guest operating system.
type VcenterVmToolsRunState string

// List of vcenter.vm.tools.run_state
const (
	VCENTERVMTOOLSRUNSTATE_NOT_RUNNING VcenterVmToolsRunState = "NOT_RUNNING"
	VCENTERVMTOOLSRUNSTATE_RUNNING VcenterVmToolsRunState = "RUNNING"
	VCENTERVMTOOLSRUNSTATE_EXECUTING_SCRIPTS VcenterVmToolsRunState = "EXECUTING_SCRIPTS"
)

// All allowed values of VcenterVmToolsRunState enum
var AllowedVcenterVmToolsRunStateEnumValues = []VcenterVmToolsRunState{
	"NOT_RUNNING",
	"RUNNING",
	"EXECUTING_SCRIPTS",
}

func (v *VcenterVmToolsRunState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmToolsRunState(value)
	for _, existing := range AllowedVcenterVmToolsRunStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmToolsRunState", value)
}

// NewVcenterVmToolsRunStateFromValue returns a pointer to a valid VcenterVmToolsRunState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmToolsRunStateFromValue(v string) (*VcenterVmToolsRunState, error) {
	ev := VcenterVmToolsRunState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmToolsRunState: valid values are %v", v, AllowedVcenterVmToolsRunStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmToolsRunState) IsValid() bool {
	for _, existing := range AllowedVcenterVmToolsRunStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.tools.run_state value
func (v VcenterVmToolsRunState) Ptr() *VcenterVmToolsRunState {
	return &v
}

type NullableVcenterVmToolsRunState struct {
	value *VcenterVmToolsRunState
	isSet bool
}

func (v NullableVcenterVmToolsRunState) Get() *VcenterVmToolsRunState {
	return v.value
}

func (v *NullableVcenterVmToolsRunState) Set(val *VcenterVmToolsRunState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmToolsRunState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmToolsRunState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmToolsRunState(val *VcenterVmToolsRunState) *NullableVcenterVmToolsRunState {
	return &NullableVcenterVmToolsRunState{value: val, isSet: true}
}

func (v NullableVcenterVmToolsRunState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmToolsRunState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

