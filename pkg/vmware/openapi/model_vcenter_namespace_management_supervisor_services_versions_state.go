/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementSupervisorServicesVersionsState The Versions.State enumerated type defines the state of a Supervisor Service version.
type VcenterNamespaceManagementSupervisorServicesVersionsState string

// List of VcenterNamespaceManagementSupervisorServicesVersionsState
const (
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESVERSIONSSTATE_ACTIVATED VcenterNamespaceManagementSupervisorServicesVersionsState = "ACTIVATED"
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESVERSIONSSTATE_DEACTIVATED VcenterNamespaceManagementSupervisorServicesVersionsState = "DEACTIVATED"
)

// All allowed values of VcenterNamespaceManagementSupervisorServicesVersionsState enum
var AllowedVcenterNamespaceManagementSupervisorServicesVersionsStateEnumValues = []VcenterNamespaceManagementSupervisorServicesVersionsState{
	"ACTIVATED",
	"DEACTIVATED",
}

func (v *VcenterNamespaceManagementSupervisorServicesVersionsState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementSupervisorServicesVersionsState(value)
	for _, existing := range AllowedVcenterNamespaceManagementSupervisorServicesVersionsStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementSupervisorServicesVersionsState", value)
}

// NewVcenterNamespaceManagementSupervisorServicesVersionsStateFromValue returns a pointer to a valid VcenterNamespaceManagementSupervisorServicesVersionsState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementSupervisorServicesVersionsStateFromValue(v string) (*VcenterNamespaceManagementSupervisorServicesVersionsState, error) {
	ev := VcenterNamespaceManagementSupervisorServicesVersionsState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementSupervisorServicesVersionsState: valid values are %v", v, AllowedVcenterNamespaceManagementSupervisorServicesVersionsStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementSupervisorServicesVersionsState) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementSupervisorServicesVersionsStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementSupervisorServicesVersionsState value
func (v VcenterNamespaceManagementSupervisorServicesVersionsState) Ptr() *VcenterNamespaceManagementSupervisorServicesVersionsState {
	return &v
}

type NullableVcenterNamespaceManagementSupervisorServicesVersionsState struct {
	value *VcenterNamespaceManagementSupervisorServicesVersionsState
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVersionsState) Get() *VcenterNamespaceManagementSupervisorServicesVersionsState {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVersionsState) Set(val *VcenterNamespaceManagementSupervisorServicesVersionsState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVersionsState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVersionsState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesVersionsState(val *VcenterNamespaceManagementSupervisorServicesVersionsState) *NullableVcenterNamespaceManagementSupervisorServicesVersionsState {
	return &NullableVcenterNamespaceManagementSupervisorServicesVersionsState{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesVersionsState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesVersionsState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

