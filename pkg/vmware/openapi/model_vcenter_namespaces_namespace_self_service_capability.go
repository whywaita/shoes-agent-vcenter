/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespacesNamespaceSelfServiceCapability The NamespaceSelfService.Capability enumerated type describes the self-service namespace capability of the cluster on which vSphere Namespaces enabled.
type VcenterNamespacesNamespaceSelfServiceCapability string

// List of VcenterNamespacesNamespaceSelfServiceCapability
const (
	VCENTERNAMESPACESNAMESPACESELFSERVICECAPABILITY_UNKNOWN VcenterNamespacesNamespaceSelfServiceCapability = "UNKNOWN"
	VCENTERNAMESPACESNAMESPACESELFSERVICECAPABILITY_SUPPORTED VcenterNamespacesNamespaceSelfServiceCapability = "SUPPORTED"
	VCENTERNAMESPACESNAMESPACESELFSERVICECAPABILITY_NOTSUPPORTED VcenterNamespacesNamespaceSelfServiceCapability = "NOTSUPPORTED"
)

// All allowed values of VcenterNamespacesNamespaceSelfServiceCapability enum
var AllowedVcenterNamespacesNamespaceSelfServiceCapabilityEnumValues = []VcenterNamespacesNamespaceSelfServiceCapability{
	"UNKNOWN",
	"SUPPORTED",
	"NOTSUPPORTED",
}

func (v *VcenterNamespacesNamespaceSelfServiceCapability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespacesNamespaceSelfServiceCapability(value)
	for _, existing := range AllowedVcenterNamespacesNamespaceSelfServiceCapabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespacesNamespaceSelfServiceCapability", value)
}

// NewVcenterNamespacesNamespaceSelfServiceCapabilityFromValue returns a pointer to a valid VcenterNamespacesNamespaceSelfServiceCapability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespacesNamespaceSelfServiceCapabilityFromValue(v string) (*VcenterNamespacesNamespaceSelfServiceCapability, error) {
	ev := VcenterNamespacesNamespaceSelfServiceCapability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespacesNamespaceSelfServiceCapability: valid values are %v", v, AllowedVcenterNamespacesNamespaceSelfServiceCapabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespacesNamespaceSelfServiceCapability) IsValid() bool {
	for _, existing := range AllowedVcenterNamespacesNamespaceSelfServiceCapabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespacesNamespaceSelfServiceCapability value
func (v VcenterNamespacesNamespaceSelfServiceCapability) Ptr() *VcenterNamespacesNamespaceSelfServiceCapability {
	return &v
}

type NullableVcenterNamespacesNamespaceSelfServiceCapability struct {
	value *VcenterNamespacesNamespaceSelfServiceCapability
	isSet bool
}

func (v NullableVcenterNamespacesNamespaceSelfServiceCapability) Get() *VcenterNamespacesNamespaceSelfServiceCapability {
	return v.value
}

func (v *NullableVcenterNamespacesNamespaceSelfServiceCapability) Set(val *VcenterNamespacesNamespaceSelfServiceCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesNamespaceSelfServiceCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesNamespaceSelfServiceCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesNamespaceSelfServiceCapability(val *VcenterNamespacesNamespaceSelfServiceCapability) *NullableVcenterNamespacesNamespaceSelfServiceCapability {
	return &NullableVcenterNamespacesNamespaceSelfServiceCapability{value: val, isSet: true}
}

func (v NullableVcenterNamespacesNamespaceSelfServiceCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesNamespaceSelfServiceCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

