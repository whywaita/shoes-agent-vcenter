/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementClustersNetworkProvider Identifies the network plugin that cluster networking functionalities for this vSphere Namespaces Cluster.
type VcenterNamespaceManagementClustersNetworkProvider string

// List of VcenterNamespaceManagementClustersNetworkProvider
const (
	VCENTERNAMESPACEMANAGEMENTCLUSTERSNETWORKPROVIDER_NSXT_CONTAINER_PLUGIN VcenterNamespaceManagementClustersNetworkProvider = "NSXT_CONTAINER_PLUGIN"
	VCENTERNAMESPACEMANAGEMENTCLUSTERSNETWORKPROVIDER_VSPHERE_NETWORK VcenterNamespaceManagementClustersNetworkProvider = "VSPHERE_NETWORK"
)

// All allowed values of VcenterNamespaceManagementClustersNetworkProvider enum
var AllowedVcenterNamespaceManagementClustersNetworkProviderEnumValues = []VcenterNamespaceManagementClustersNetworkProvider{
	"NSXT_CONTAINER_PLUGIN",
	"VSPHERE_NETWORK",
}

func (v *VcenterNamespaceManagementClustersNetworkProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementClustersNetworkProvider(value)
	for _, existing := range AllowedVcenterNamespaceManagementClustersNetworkProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementClustersNetworkProvider", value)
}

// NewVcenterNamespaceManagementClustersNetworkProviderFromValue returns a pointer to a valid VcenterNamespaceManagementClustersNetworkProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementClustersNetworkProviderFromValue(v string) (*VcenterNamespaceManagementClustersNetworkProvider, error) {
	ev := VcenterNamespaceManagementClustersNetworkProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementClustersNetworkProvider: valid values are %v", v, AllowedVcenterNamespaceManagementClustersNetworkProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementClustersNetworkProvider) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementClustersNetworkProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementClustersNetworkProvider value
func (v VcenterNamespaceManagementClustersNetworkProvider) Ptr() *VcenterNamespaceManagementClustersNetworkProvider {
	return &v
}

type NullableVcenterNamespaceManagementClustersNetworkProvider struct {
	value *VcenterNamespaceManagementClustersNetworkProvider
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersNetworkProvider) Get() *VcenterNamespaceManagementClustersNetworkProvider {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersNetworkProvider) Set(val *VcenterNamespaceManagementClustersNetworkProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersNetworkProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersNetworkProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersNetworkProvider(val *VcenterNamespaceManagementClustersNetworkProvider) *NullableVcenterNamespaceManagementClustersNetworkProvider {
	return &NullableVcenterNamespaceManagementClustersNetworkProvider{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersNetworkProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersNetworkProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

