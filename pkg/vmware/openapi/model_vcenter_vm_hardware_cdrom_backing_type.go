/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareCdromBackingType The Cdrom.BackingType enumerated type defines the valid backing types for a virtual CD-ROM device.
type VcenterVmHardwareCdromBackingType string

// List of vcenter.vm.hardware.cdrom.backing_type
const (
	VCENTERVMHARDWARECDROMBACKINGTYPE_ISO_FILE VcenterVmHardwareCdromBackingType = "ISO_FILE"
	VCENTERVMHARDWARECDROMBACKINGTYPE_HOST_DEVICE VcenterVmHardwareCdromBackingType = "HOST_DEVICE"
	VCENTERVMHARDWARECDROMBACKINGTYPE_CLIENT_DEVICE VcenterVmHardwareCdromBackingType = "CLIENT_DEVICE"
)

// All allowed values of VcenterVmHardwareCdromBackingType enum
var AllowedVcenterVmHardwareCdromBackingTypeEnumValues = []VcenterVmHardwareCdromBackingType{
	"ISO_FILE",
	"HOST_DEVICE",
	"CLIENT_DEVICE",
}

func (v *VcenterVmHardwareCdromBackingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareCdromBackingType(value)
	for _, existing := range AllowedVcenterVmHardwareCdromBackingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareCdromBackingType", value)
}

// NewVcenterVmHardwareCdromBackingTypeFromValue returns a pointer to a valid VcenterVmHardwareCdromBackingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareCdromBackingTypeFromValue(v string) (*VcenterVmHardwareCdromBackingType, error) {
	ev := VcenterVmHardwareCdromBackingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareCdromBackingType: valid values are %v", v, AllowedVcenterVmHardwareCdromBackingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareCdromBackingType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareCdromBackingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.cdrom.backing_type value
func (v VcenterVmHardwareCdromBackingType) Ptr() *VcenterVmHardwareCdromBackingType {
	return &v
}

type NullableVcenterVmHardwareCdromBackingType struct {
	value *VcenterVmHardwareCdromBackingType
	isSet bool
}

func (v NullableVcenterVmHardwareCdromBackingType) Get() *VcenterVmHardwareCdromBackingType {
	return v.value
}

func (v *NullableVcenterVmHardwareCdromBackingType) Set(val *VcenterVmHardwareCdromBackingType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareCdromBackingType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareCdromBackingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareCdromBackingType(val *VcenterVmHardwareCdromBackingType) *NullableVcenterVmHardwareCdromBackingType {
	return &NullableVcenterVmHardwareCdromBackingType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareCdromBackingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareCdromBackingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

