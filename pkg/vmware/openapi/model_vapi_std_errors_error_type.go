/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VapiStdErrorsErrorType Enumeration of all standard errors. Used as discriminator in protocols that have no standard means for transporting the error type, e.g. REST.
type VapiStdErrorsErrorType string

// List of vapi.std.errors.error.type
const (
	VAPISTDERRORSERRORTYPE_ERROR VapiStdErrorsErrorType = "ERROR"
	VAPISTDERRORSERRORTYPE_ALREADY_EXISTS VapiStdErrorsErrorType = "ALREADY_EXISTS"
	VAPISTDERRORSERRORTYPE_ALREADY_IN_DESIRED_STATE VapiStdErrorsErrorType = "ALREADY_IN_DESIRED_STATE"
	VAPISTDERRORSERRORTYPE_CANCELED VapiStdErrorsErrorType = "CANCELED"
	VAPISTDERRORSERRORTYPE_CONCURRENT_CHANGE VapiStdErrorsErrorType = "CONCURRENT_CHANGE"
	VAPISTDERRORSERRORTYPE_FEATURE_IN_USE VapiStdErrorsErrorType = "FEATURE_IN_USE"
	VAPISTDERRORSERRORTYPE_INTERNAL_SERVER_ERROR VapiStdErrorsErrorType = "INTERNAL_SERVER_ERROR"
	VAPISTDERRORSERRORTYPE_INVALID_ARGUMENT VapiStdErrorsErrorType = "INVALID_ARGUMENT"
	VAPISTDERRORSERRORTYPE_INVALID_ELEMENT_CONFIGURATION VapiStdErrorsErrorType = "INVALID_ELEMENT_CONFIGURATION"
	VAPISTDERRORSERRORTYPE_INVALID_ELEMENT_TYPE VapiStdErrorsErrorType = "INVALID_ELEMENT_TYPE"
	VAPISTDERRORSERRORTYPE_INVALID_REQUEST VapiStdErrorsErrorType = "INVALID_REQUEST"
	VAPISTDERRORSERRORTYPE_NOT_ALLOWED_IN_CURRENT_STATE VapiStdErrorsErrorType = "NOT_ALLOWED_IN_CURRENT_STATE"
	VAPISTDERRORSERRORTYPE_NOT_FOUND VapiStdErrorsErrorType = "NOT_FOUND"
	VAPISTDERRORSERRORTYPE_OPERATION_NOT_FOUND VapiStdErrorsErrorType = "OPERATION_NOT_FOUND"
	VAPISTDERRORSERRORTYPE_RESOURCE_BUSY VapiStdErrorsErrorType = "RESOURCE_BUSY"
	VAPISTDERRORSERRORTYPE_RESOURCE_IN_USE VapiStdErrorsErrorType = "RESOURCE_IN_USE"
	VAPISTDERRORSERRORTYPE_RESOURCE_INACCESSIBLE VapiStdErrorsErrorType = "RESOURCE_INACCESSIBLE"
	VAPISTDERRORSERRORTYPE_SERVICE_UNAVAILABLE VapiStdErrorsErrorType = "SERVICE_UNAVAILABLE"
	VAPISTDERRORSERRORTYPE_TIMED_OUT VapiStdErrorsErrorType = "TIMED_OUT"
	VAPISTDERRORSERRORTYPE_UNABLE_TO_ALLOCATE_RESOURCE VapiStdErrorsErrorType = "UNABLE_TO_ALLOCATE_RESOURCE"
	VAPISTDERRORSERRORTYPE_UNAUTHENTICATED VapiStdErrorsErrorType = "UNAUTHENTICATED"
	VAPISTDERRORSERRORTYPE_UNAUTHORIZED VapiStdErrorsErrorType = "UNAUTHORIZED"
	VAPISTDERRORSERRORTYPE_UNEXPECTED_INPUT VapiStdErrorsErrorType = "UNEXPECTED_INPUT"
	VAPISTDERRORSERRORTYPE_UNSUPPORTED VapiStdErrorsErrorType = "UNSUPPORTED"
	VAPISTDERRORSERRORTYPE_UNVERIFIED_PEER VapiStdErrorsErrorType = "UNVERIFIED_PEER"
)

// All allowed values of VapiStdErrorsErrorType enum
var AllowedVapiStdErrorsErrorTypeEnumValues = []VapiStdErrorsErrorType{
	"ERROR",
	"ALREADY_EXISTS",
	"ALREADY_IN_DESIRED_STATE",
	"CANCELED",
	"CONCURRENT_CHANGE",
	"FEATURE_IN_USE",
	"INTERNAL_SERVER_ERROR",
	"INVALID_ARGUMENT",
	"INVALID_ELEMENT_CONFIGURATION",
	"INVALID_ELEMENT_TYPE",
	"INVALID_REQUEST",
	"NOT_ALLOWED_IN_CURRENT_STATE",
	"NOT_FOUND",
	"OPERATION_NOT_FOUND",
	"RESOURCE_BUSY",
	"RESOURCE_IN_USE",
	"RESOURCE_INACCESSIBLE",
	"SERVICE_UNAVAILABLE",
	"TIMED_OUT",
	"UNABLE_TO_ALLOCATE_RESOURCE",
	"UNAUTHENTICATED",
	"UNAUTHORIZED",
	"UNEXPECTED_INPUT",
	"UNSUPPORTED",
	"UNVERIFIED_PEER",
}

func (v *VapiStdErrorsErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VapiStdErrorsErrorType(value)
	for _, existing := range AllowedVapiStdErrorsErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VapiStdErrorsErrorType", value)
}

// NewVapiStdErrorsErrorTypeFromValue returns a pointer to a valid VapiStdErrorsErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVapiStdErrorsErrorTypeFromValue(v string) (*VapiStdErrorsErrorType, error) {
	ev := VapiStdErrorsErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VapiStdErrorsErrorType: valid values are %v", v, AllowedVapiStdErrorsErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VapiStdErrorsErrorType) IsValid() bool {
	for _, existing := range AllowedVapiStdErrorsErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vapi.std.errors.error.type value
func (v VapiStdErrorsErrorType) Ptr() *VapiStdErrorsErrorType {
	return &v
}

type NullableVapiStdErrorsErrorType struct {
	value *VapiStdErrorsErrorType
	isSet bool
}

func (v NullableVapiStdErrorsErrorType) Get() *VapiStdErrorsErrorType {
	return v.value
}

func (v *NullableVapiStdErrorsErrorType) Set(val *VapiStdErrorsErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableVapiStdErrorsErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableVapiStdErrorsErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVapiStdErrorsErrorType(val *VapiStdErrorsErrorType) *NullableVapiStdErrorsErrorType {
	return &NullableVapiStdErrorsErrorType{value: val, isSet: true}
}

func (v NullableVapiStdErrorsErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVapiStdErrorsErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

