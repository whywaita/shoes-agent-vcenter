/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmToolsGetVmToolsResp struct for VcenterVmToolsGetVmToolsResp
type VcenterVmToolsGetVmToolsResp struct {
	Value VcenterVmToolsInfo `json:"value"`
}

// NewVcenterVmToolsGetVmToolsResp instantiates a new VcenterVmToolsGetVmToolsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmToolsGetVmToolsResp(value VcenterVmToolsInfo) *VcenterVmToolsGetVmToolsResp {
	this := VcenterVmToolsGetVmToolsResp{}
	this.Value = value
	return &this
}

// NewVcenterVmToolsGetVmToolsRespWithDefaults instantiates a new VcenterVmToolsGetVmToolsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmToolsGetVmToolsRespWithDefaults() *VcenterVmToolsGetVmToolsResp {
	this := VcenterVmToolsGetVmToolsResp{}
	return &this
}

// GetValue returns the Value field value
func (o *VcenterVmToolsGetVmToolsResp) GetValue() VcenterVmToolsInfo {
	if o == nil {
		var ret VcenterVmToolsInfo
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsGetVmToolsResp) GetValueOk() (*VcenterVmToolsInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *VcenterVmToolsGetVmToolsResp) SetValue(v VcenterVmToolsInfo) {
	o.Value = v
}

func (o VcenterVmToolsGetVmToolsResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmToolsGetVmToolsResp struct {
	value *VcenterVmToolsGetVmToolsResp
	isSet bool
}

func (v NullableVcenterVmToolsGetVmToolsResp) Get() *VcenterVmToolsGetVmToolsResp {
	return v.value
}

func (v *NullableVcenterVmToolsGetVmToolsResp) Set(val *VcenterVmToolsGetVmToolsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmToolsGetVmToolsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmToolsGetVmToolsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmToolsGetVmToolsResp(val *VcenterVmToolsGetVmToolsResp) *NullableVcenterVmToolsGetVmToolsResp {
	return &NullableVcenterVmToolsGetVmToolsResp{value: val, isSet: true}
}

func (v NullableVcenterVmToolsGetVmToolsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmToolsGetVmToolsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


