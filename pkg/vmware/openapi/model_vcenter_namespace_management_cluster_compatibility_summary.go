/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClusterCompatibilitySummary struct for VcenterNamespaceManagementClusterCompatibilitySummary
type VcenterNamespaceManagementClusterCompatibilitySummary struct {
	// Identifier of the cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource.
	Cluster string `json:"cluster"`
	// Compatibility of this cluster.
	Compatible bool `json:"compatible"`
	// Reasons for incompatibility.
	IncompatibilityReasons []VapiStdLocalizableMessage `json:"incompatibility_reasons"`
}

// NewVcenterNamespaceManagementClusterCompatibilitySummary instantiates a new VcenterNamespaceManagementClusterCompatibilitySummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClusterCompatibilitySummary(cluster string, compatible bool, incompatibilityReasons []VapiStdLocalizableMessage) *VcenterNamespaceManagementClusterCompatibilitySummary {
	this := VcenterNamespaceManagementClusterCompatibilitySummary{}
	this.Cluster = cluster
	this.Compatible = compatible
	this.IncompatibilityReasons = incompatibilityReasons
	return &this
}

// NewVcenterNamespaceManagementClusterCompatibilitySummaryWithDefaults instantiates a new VcenterNamespaceManagementClusterCompatibilitySummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClusterCompatibilitySummaryWithDefaults() *VcenterNamespaceManagementClusterCompatibilitySummary {
	this := VcenterNamespaceManagementClusterCompatibilitySummary{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *VcenterNamespaceManagementClusterCompatibilitySummary) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterCompatibilitySummary) GetClusterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *VcenterNamespaceManagementClusterCompatibilitySummary) SetCluster(v string) {
	o.Cluster = v
}

// GetCompatible returns the Compatible field value
func (o *VcenterNamespaceManagementClusterCompatibilitySummary) GetCompatible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Compatible
}

// GetCompatibleOk returns a tuple with the Compatible field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterCompatibilitySummary) GetCompatibleOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Compatible, true
}

// SetCompatible sets field value
func (o *VcenterNamespaceManagementClusterCompatibilitySummary) SetCompatible(v bool) {
	o.Compatible = v
}

// GetIncompatibilityReasons returns the IncompatibilityReasons field value
func (o *VcenterNamespaceManagementClusterCompatibilitySummary) GetIncompatibilityReasons() []VapiStdLocalizableMessage {
	if o == nil {
		var ret []VapiStdLocalizableMessage
		return ret
	}

	return o.IncompatibilityReasons
}

// GetIncompatibilityReasonsOk returns a tuple with the IncompatibilityReasons field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterCompatibilitySummary) GetIncompatibilityReasonsOk() (*[]VapiStdLocalizableMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IncompatibilityReasons, true
}

// SetIncompatibilityReasons sets field value
func (o *VcenterNamespaceManagementClusterCompatibilitySummary) SetIncompatibilityReasons(v []VapiStdLocalizableMessage) {
	o.IncompatibilityReasons = v
}

func (o VcenterNamespaceManagementClusterCompatibilitySummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cluster"] = o.Cluster
	}
	if true {
		toSerialize["compatible"] = o.Compatible
	}
	if true {
		toSerialize["incompatibility_reasons"] = o.IncompatibilityReasons
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClusterCompatibilitySummary struct {
	value *VcenterNamespaceManagementClusterCompatibilitySummary
	isSet bool
}

func (v NullableVcenterNamespaceManagementClusterCompatibilitySummary) Get() *VcenterNamespaceManagementClusterCompatibilitySummary {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClusterCompatibilitySummary) Set(val *VcenterNamespaceManagementClusterCompatibilitySummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClusterCompatibilitySummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClusterCompatibilitySummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClusterCompatibilitySummary(val *VcenterNamespaceManagementClusterCompatibilitySummary) *NullableVcenterNamespaceManagementClusterCompatibilitySummary {
	return &NullableVcenterNamespaceManagementClusterCompatibilitySummary{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClusterCompatibilitySummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClusterCompatibilitySummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


