/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsVmHomeStorageInfo struct for VcenterVmTemplateLibraryItemsVmHomeStorageInfo
type VcenterVmTemplateLibraryItemsVmHomeStorageInfo struct {
	// Identifier of the datastore where the virtual machine template's configuration and log files are stored.
	Datastore string `json:"datastore"`
	// Identifier of the storage policy associated with the virtual machine template's configuration and log files.
	StoragePolicy *string `json:"storage_policy,omitempty"`
}

// NewVcenterVmTemplateLibraryItemsVmHomeStorageInfo instantiates a new VcenterVmTemplateLibraryItemsVmHomeStorageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsVmHomeStorageInfo(datastore string) *VcenterVmTemplateLibraryItemsVmHomeStorageInfo {
	this := VcenterVmTemplateLibraryItemsVmHomeStorageInfo{}
	this.Datastore = datastore
	return &this
}

// NewVcenterVmTemplateLibraryItemsVmHomeStorageInfoWithDefaults instantiates a new VcenterVmTemplateLibraryItemsVmHomeStorageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsVmHomeStorageInfoWithDefaults() *VcenterVmTemplateLibraryItemsVmHomeStorageInfo {
	this := VcenterVmTemplateLibraryItemsVmHomeStorageInfo{}
	return &this
}

// GetDatastore returns the Datastore field value
func (o *VcenterVmTemplateLibraryItemsVmHomeStorageInfo) GetDatastore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsVmHomeStorageInfo) GetDatastoreOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Datastore, true
}

// SetDatastore sets field value
func (o *VcenterVmTemplateLibraryItemsVmHomeStorageInfo) SetDatastore(v string) {
	o.Datastore = v
}

// GetStoragePolicy returns the StoragePolicy field value if set, zero value otherwise.
func (o *VcenterVmTemplateLibraryItemsVmHomeStorageInfo) GetStoragePolicy() string {
	if o == nil || o.StoragePolicy == nil {
		var ret string
		return ret
	}
	return *o.StoragePolicy
}

// GetStoragePolicyOk returns a tuple with the StoragePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsVmHomeStorageInfo) GetStoragePolicyOk() (*string, bool) {
	if o == nil || o.StoragePolicy == nil {
		return nil, false
	}
	return o.StoragePolicy, true
}

// HasStoragePolicy returns a boolean if a field has been set.
func (o *VcenterVmTemplateLibraryItemsVmHomeStorageInfo) HasStoragePolicy() bool {
	if o != nil && o.StoragePolicy != nil {
		return true
	}

	return false
}

// SetStoragePolicy gets a reference to the given string and assigns it to the StoragePolicy field.
func (o *VcenterVmTemplateLibraryItemsVmHomeStorageInfo) SetStoragePolicy(v string) {
	o.StoragePolicy = &v
}

func (o VcenterVmTemplateLibraryItemsVmHomeStorageInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["datastore"] = o.Datastore
	}
	if o.StoragePolicy != nil {
		toSerialize["storage_policy"] = o.StoragePolicy
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsVmHomeStorageInfo struct {
	value *VcenterVmTemplateLibraryItemsVmHomeStorageInfo
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsVmHomeStorageInfo) Get() *VcenterVmTemplateLibraryItemsVmHomeStorageInfo {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsVmHomeStorageInfo) Set(val *VcenterVmTemplateLibraryItemsVmHomeStorageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsVmHomeStorageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsVmHomeStorageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsVmHomeStorageInfo(val *VcenterVmTemplateLibraryItemsVmHomeStorageInfo) *NullableVcenterVmTemplateLibraryItemsVmHomeStorageInfo {
	return &NullableVcenterVmTemplateLibraryItemsVmHomeStorageInfo{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsVmHomeStorageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsVmHomeStorageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


