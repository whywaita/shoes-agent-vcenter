/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterOvfImportFlagInfo struct for VcenterOvfImportFlagInfo
type VcenterOvfImportFlagInfo struct {
	// The name of the import flag that is supported by the deployment platform.
	Option string `json:"option"`
	Description VapiStdLocalizableMessage `json:"description"`
}

// NewVcenterOvfImportFlagInfo instantiates a new VcenterOvfImportFlagInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterOvfImportFlagInfo(option string, description VapiStdLocalizableMessage) *VcenterOvfImportFlagInfo {
	this := VcenterOvfImportFlagInfo{}
	this.Option = option
	this.Description = description
	return &this
}

// NewVcenterOvfImportFlagInfoWithDefaults instantiates a new VcenterOvfImportFlagInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterOvfImportFlagInfoWithDefaults() *VcenterOvfImportFlagInfo {
	this := VcenterOvfImportFlagInfo{}
	return &this
}

// GetOption returns the Option field value
func (o *VcenterOvfImportFlagInfo) GetOption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Option
}

// GetOptionOk returns a tuple with the Option field value
// and a boolean to check if the value has been set.
func (o *VcenterOvfImportFlagInfo) GetOptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Option, true
}

// SetOption sets field value
func (o *VcenterOvfImportFlagInfo) SetOption(v string) {
	o.Option = v
}

// GetDescription returns the Description field value
func (o *VcenterOvfImportFlagInfo) GetDescription() VapiStdLocalizableMessage {
	if o == nil {
		var ret VapiStdLocalizableMessage
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *VcenterOvfImportFlagInfo) GetDescriptionOk() (*VapiStdLocalizableMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *VcenterOvfImportFlagInfo) SetDescription(v VapiStdLocalizableMessage) {
	o.Description = v
}

func (o VcenterOvfImportFlagInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["option"] = o.Option
	}
	if true {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterOvfImportFlagInfo struct {
	value *VcenterOvfImportFlagInfo
	isSet bool
}

func (v NullableVcenterOvfImportFlagInfo) Get() *VcenterOvfImportFlagInfo {
	return v.value
}

func (v *NullableVcenterOvfImportFlagInfo) Set(val *VcenterOvfImportFlagInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterOvfImportFlagInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterOvfImportFlagInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterOvfImportFlagInfo(val *VcenterOvfImportFlagInfo) *NullableVcenterOvfImportFlagInfo {
	return &NullableVcenterOvfImportFlagInfo{value: val, isSet: true}
}

func (v NullableVcenterOvfImportFlagInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterOvfImportFlagInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


