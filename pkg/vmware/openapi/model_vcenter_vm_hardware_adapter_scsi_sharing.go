/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareAdapterScsiSharing The Scsi.Sharing enumerated type defines the valid bus sharing modes for a virtual SCSI adapter.
type VcenterVmHardwareAdapterScsiSharing string

// List of vcenter.vm.hardware.adapter.scsi.sharing
const (
	VCENTERVMHARDWAREADAPTERSCSISHARING_NONE VcenterVmHardwareAdapterScsiSharing = "NONE"
	VCENTERVMHARDWAREADAPTERSCSISHARING_VIRTUAL VcenterVmHardwareAdapterScsiSharing = "VIRTUAL"
	VCENTERVMHARDWAREADAPTERSCSISHARING_PHYSICAL VcenterVmHardwareAdapterScsiSharing = "PHYSICAL"
)

// All allowed values of VcenterVmHardwareAdapterScsiSharing enum
var AllowedVcenterVmHardwareAdapterScsiSharingEnumValues = []VcenterVmHardwareAdapterScsiSharing{
	"NONE",
	"VIRTUAL",
	"PHYSICAL",
}

func (v *VcenterVmHardwareAdapterScsiSharing) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareAdapterScsiSharing(value)
	for _, existing := range AllowedVcenterVmHardwareAdapterScsiSharingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareAdapterScsiSharing", value)
}

// NewVcenterVmHardwareAdapterScsiSharingFromValue returns a pointer to a valid VcenterVmHardwareAdapterScsiSharing
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareAdapterScsiSharingFromValue(v string) (*VcenterVmHardwareAdapterScsiSharing, error) {
	ev := VcenterVmHardwareAdapterScsiSharing(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareAdapterScsiSharing: valid values are %v", v, AllowedVcenterVmHardwareAdapterScsiSharingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareAdapterScsiSharing) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareAdapterScsiSharingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.adapter.scsi.sharing value
func (v VcenterVmHardwareAdapterScsiSharing) Ptr() *VcenterVmHardwareAdapterScsiSharing {
	return &v
}

type NullableVcenterVmHardwareAdapterScsiSharing struct {
	value *VcenterVmHardwareAdapterScsiSharing
	isSet bool
}

func (v NullableVcenterVmHardwareAdapterScsiSharing) Get() *VcenterVmHardwareAdapterScsiSharing {
	return v.value
}

func (v *NullableVcenterVmHardwareAdapterScsiSharing) Set(val *VcenterVmHardwareAdapterScsiSharing) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareAdapterScsiSharing) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareAdapterScsiSharing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareAdapterScsiSharing(val *VcenterVmHardwareAdapterScsiSharing) *NullableVcenterVmHardwareAdapterScsiSharing {
	return &NullableVcenterVmHardwareAdapterScsiSharing{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareAdapterScsiSharing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareAdapterScsiSharing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

