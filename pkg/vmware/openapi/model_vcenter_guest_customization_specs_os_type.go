/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterGuestCustomizationSpecsOsType The CustomizationSpecs.OsType enumerated type defines the types of guest operating systems for which guest customization is supported.
type VcenterGuestCustomizationSpecsOsType string

// List of vcenter.guest.customization_specs.os_type
const (
	VCENTERGUESTCUSTOMIZATIONSPECSOSTYPE_WINDOWS VcenterGuestCustomizationSpecsOsType = "WINDOWS"
	VCENTERGUESTCUSTOMIZATIONSPECSOSTYPE_LINUX VcenterGuestCustomizationSpecsOsType = "LINUX"
)

// All allowed values of VcenterGuestCustomizationSpecsOsType enum
var AllowedVcenterGuestCustomizationSpecsOsTypeEnumValues = []VcenterGuestCustomizationSpecsOsType{
	"WINDOWS",
	"LINUX",
}

func (v *VcenterGuestCustomizationSpecsOsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterGuestCustomizationSpecsOsType(value)
	for _, existing := range AllowedVcenterGuestCustomizationSpecsOsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterGuestCustomizationSpecsOsType", value)
}

// NewVcenterGuestCustomizationSpecsOsTypeFromValue returns a pointer to a valid VcenterGuestCustomizationSpecsOsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterGuestCustomizationSpecsOsTypeFromValue(v string) (*VcenterGuestCustomizationSpecsOsType, error) {
	ev := VcenterGuestCustomizationSpecsOsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterGuestCustomizationSpecsOsType: valid values are %v", v, AllowedVcenterGuestCustomizationSpecsOsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterGuestCustomizationSpecsOsType) IsValid() bool {
	for _, existing := range AllowedVcenterGuestCustomizationSpecsOsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.guest.customization_specs.os_type value
func (v VcenterGuestCustomizationSpecsOsType) Ptr() *VcenterGuestCustomizationSpecsOsType {
	return &v
}

type NullableVcenterGuestCustomizationSpecsOsType struct {
	value *VcenterGuestCustomizationSpecsOsType
	isSet bool
}

func (v NullableVcenterGuestCustomizationSpecsOsType) Get() *VcenterGuestCustomizationSpecsOsType {
	return v.value
}

func (v *NullableVcenterGuestCustomizationSpecsOsType) Set(val *VcenterGuestCustomizationSpecsOsType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestCustomizationSpecsOsType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestCustomizationSpecsOsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestCustomizationSpecsOsType(val *VcenterGuestCustomizationSpecsOsType) *NullableVcenterGuestCustomizationSpecsOsType {
	return &NullableVcenterGuestCustomizationSpecsOsType{value: val, isSet: true}
}

func (v NullableVcenterGuestCustomizationSpecsOsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestCustomizationSpecsOsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

