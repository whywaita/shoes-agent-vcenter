/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth The ServicesAppliedConfig.Health enumerated type is an indicator for the consistency of the applied Attestation Service configuration in a cluster with respect to the desired state.
type VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth string

// List of VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth
const (
	VCENTERTRUSTEDINFRASTRUCTURETRUSTEDCLUSTERSATTESTATIONSERVICESAPPLIEDCONFIGHEALTH_NONE VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth = "NONE"
	VCENTERTRUSTEDINFRASTRUCTURETRUSTEDCLUSTERSATTESTATIONSERVICESAPPLIEDCONFIGHEALTH_OK VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth = "OK"
	VCENTERTRUSTEDINFRASTRUCTURETRUSTEDCLUSTERSATTESTATIONSERVICESAPPLIEDCONFIGHEALTH_ERROR VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth = "ERROR"
)

// All allowed values of VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth enum
var AllowedVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealthEnumValues = []VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth{
	"NONE",
	"OK",
	"ERROR",
}

func (v *VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth(value)
	for _, existing := range AllowedVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth", value)
}

// NewVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealthFromValue returns a pointer to a valid VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealthFromValue(v string) (*VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth, error) {
	ev := VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth: valid values are %v", v, AllowedVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) IsValid() bool {
	for _, existing := range AllowedVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth value
func (v VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) Ptr() *VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth {
	return &v
}

type NullableVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth struct {
	value *VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth
	isSet bool
}

func (v NullableVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) Get() *VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth {
	return v.value
}

func (v *NullableVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) Set(val *VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth(val *VcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) *NullableVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth {
	return &NullableVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth{value: val, isSet: true}
}

func (v NullableVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterTrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

