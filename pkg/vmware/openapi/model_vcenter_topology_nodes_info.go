/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterTopologyNodesInfo struct for VcenterTopologyNodesInfo
type VcenterTopologyNodesInfo struct {
	// Domain name of the node.
	Domain string `json:"domain"`
	Type VcenterTopologyNodesApplianceType `json:"type"`
	// List of replication partners' node identifiers. Identifiers can be either IP address or DNS resolvable name of the partner node. This field is optional and it is only relevant when the value of Nodes.Info.type is one of VCSA_EMBEDDED or PSC_EXTERNAL. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.VCenter.name.
	ReplicationPartners *[]string `json:"replication_partners,omitempty"`
	// Identifier of the affinitized Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the affinitized node. This field is optional and it is only relevant when the value of Nodes.Info.type is VCSA_EXTERNAL. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name.
	ClientAffinity *string `json:"client_affinity,omitempty"`
}

// NewVcenterTopologyNodesInfo instantiates a new VcenterTopologyNodesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterTopologyNodesInfo(domain string, type_ VcenterTopologyNodesApplianceType) *VcenterTopologyNodesInfo {
	this := VcenterTopologyNodesInfo{}
	this.Domain = domain
	this.Type = type_
	return &this
}

// NewVcenterTopologyNodesInfoWithDefaults instantiates a new VcenterTopologyNodesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterTopologyNodesInfoWithDefaults() *VcenterTopologyNodesInfo {
	this := VcenterTopologyNodesInfo{}
	return &this
}

// GetDomain returns the Domain field value
func (o *VcenterTopologyNodesInfo) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *VcenterTopologyNodesInfo) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *VcenterTopologyNodesInfo) SetDomain(v string) {
	o.Domain = v
}

// GetType returns the Type field value
func (o *VcenterTopologyNodesInfo) GetType() VcenterTopologyNodesApplianceType {
	if o == nil {
		var ret VcenterTopologyNodesApplianceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterTopologyNodesInfo) GetTypeOk() (*VcenterTopologyNodesApplianceType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterTopologyNodesInfo) SetType(v VcenterTopologyNodesApplianceType) {
	o.Type = v
}

// GetReplicationPartners returns the ReplicationPartners field value if set, zero value otherwise.
func (o *VcenterTopologyNodesInfo) GetReplicationPartners() []string {
	if o == nil || o.ReplicationPartners == nil {
		var ret []string
		return ret
	}
	return *o.ReplicationPartners
}

// GetReplicationPartnersOk returns a tuple with the ReplicationPartners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTopologyNodesInfo) GetReplicationPartnersOk() (*[]string, bool) {
	if o == nil || o.ReplicationPartners == nil {
		return nil, false
	}
	return o.ReplicationPartners, true
}

// HasReplicationPartners returns a boolean if a field has been set.
func (o *VcenterTopologyNodesInfo) HasReplicationPartners() bool {
	if o != nil && o.ReplicationPartners != nil {
		return true
	}

	return false
}

// SetReplicationPartners gets a reference to the given []string and assigns it to the ReplicationPartners field.
func (o *VcenterTopologyNodesInfo) SetReplicationPartners(v []string) {
	o.ReplicationPartners = &v
}

// GetClientAffinity returns the ClientAffinity field value if set, zero value otherwise.
func (o *VcenterTopologyNodesInfo) GetClientAffinity() string {
	if o == nil || o.ClientAffinity == nil {
		var ret string
		return ret
	}
	return *o.ClientAffinity
}

// GetClientAffinityOk returns a tuple with the ClientAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTopologyNodesInfo) GetClientAffinityOk() (*string, bool) {
	if o == nil || o.ClientAffinity == nil {
		return nil, false
	}
	return o.ClientAffinity, true
}

// HasClientAffinity returns a boolean if a field has been set.
func (o *VcenterTopologyNodesInfo) HasClientAffinity() bool {
	if o != nil && o.ClientAffinity != nil {
		return true
	}

	return false
}

// SetClientAffinity gets a reference to the given string and assigns it to the ClientAffinity field.
func (o *VcenterTopologyNodesInfo) SetClientAffinity(v string) {
	o.ClientAffinity = &v
}

func (o VcenterTopologyNodesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["domain"] = o.Domain
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.ReplicationPartners != nil {
		toSerialize["replication_partners"] = o.ReplicationPartners
	}
	if o.ClientAffinity != nil {
		toSerialize["client_affinity"] = o.ClientAffinity
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterTopologyNodesInfo struct {
	value *VcenterTopologyNodesInfo
	isSet bool
}

func (v NullableVcenterTopologyNodesInfo) Get() *VcenterTopologyNodesInfo {
	return v.value
}

func (v *NullableVcenterTopologyNodesInfo) Set(val *VcenterTopologyNodesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterTopologyNodesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterTopologyNodesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterTopologyNodesInfo(val *VcenterTopologyNodesInfo) *NullableVcenterTopologyNodesInfo {
	return &NullableVcenterTopologyNodesInfo{value: val, isSet: true}
}

func (v NullableVcenterTopologyNodesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterTopologyNodesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


