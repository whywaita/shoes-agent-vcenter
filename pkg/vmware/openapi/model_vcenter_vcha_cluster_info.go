/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterInfo struct for VcenterVchaClusterInfo
type VcenterVchaClusterInfo struct {
	ConfigState *VcenterVchaClusterConfigState `json:"config_state,omitempty"`
	Node1 *VcenterVchaClusterNodeInfo `json:"node1,omitempty"`
	Node2 *VcenterVchaClusterNodeInfo `json:"node2,omitempty"`
	Witness *VcenterVchaClusterWitnessInfo `json:"witness,omitempty"`
	Mode *VcenterVchaClusterClusterMode `json:"mode,omitempty"`
	HealthState *VcenterVchaClusterClusterState `json:"health_state,omitempty"`
	// Health warning messages if the health information is unavailable. If unset, then the cluster is in a healthy state.
	HealthException *[]VapiStdLocalizableMessage `json:"health_exception,omitempty"`
	// A collection of messages describing the reason for a non-healthy Cluster. If unset, then the cluster is in a healthy state.
	HealthWarnings *[]VcenterVchaClusterErrorCondition `json:"health_warnings,omitempty"`
	// Specifies if manual failover is allowed. If unset, then the cluster state healthy and manual failover allowance in accordance with the cluster mode.
	ManualFailoverAllowed *bool `json:"manual_failover_allowed,omitempty"`
	// Specifies if automatic failover is allowed. If unset, then the cluster state healthy and automatic failover allowance in accordance with the cluster mode.
	AutoFailoverAllowed *bool `json:"auto_failover_allowed,omitempty"`
}

// NewVcenterVchaClusterInfo instantiates a new VcenterVchaClusterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterInfo() *VcenterVchaClusterInfo {
	this := VcenterVchaClusterInfo{}
	return &this
}

// NewVcenterVchaClusterInfoWithDefaults instantiates a new VcenterVchaClusterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterInfoWithDefaults() *VcenterVchaClusterInfo {
	this := VcenterVchaClusterInfo{}
	return &this
}

// GetConfigState returns the ConfigState field value if set, zero value otherwise.
func (o *VcenterVchaClusterInfo) GetConfigState() VcenterVchaClusterConfigState {
	if o == nil || o.ConfigState == nil {
		var ret VcenterVchaClusterConfigState
		return ret
	}
	return *o.ConfigState
}

// GetConfigStateOk returns a tuple with the ConfigState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterInfo) GetConfigStateOk() (*VcenterVchaClusterConfigState, bool) {
	if o == nil || o.ConfigState == nil {
		return nil, false
	}
	return o.ConfigState, true
}

// HasConfigState returns a boolean if a field has been set.
func (o *VcenterVchaClusterInfo) HasConfigState() bool {
	if o != nil && o.ConfigState != nil {
		return true
	}

	return false
}

// SetConfigState gets a reference to the given VcenterVchaClusterConfigState and assigns it to the ConfigState field.
func (o *VcenterVchaClusterInfo) SetConfigState(v VcenterVchaClusterConfigState) {
	o.ConfigState = &v
}

// GetNode1 returns the Node1 field value if set, zero value otherwise.
func (o *VcenterVchaClusterInfo) GetNode1() VcenterVchaClusterNodeInfo {
	if o == nil || o.Node1 == nil {
		var ret VcenterVchaClusterNodeInfo
		return ret
	}
	return *o.Node1
}

// GetNode1Ok returns a tuple with the Node1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterInfo) GetNode1Ok() (*VcenterVchaClusterNodeInfo, bool) {
	if o == nil || o.Node1 == nil {
		return nil, false
	}
	return o.Node1, true
}

// HasNode1 returns a boolean if a field has been set.
func (o *VcenterVchaClusterInfo) HasNode1() bool {
	if o != nil && o.Node1 != nil {
		return true
	}

	return false
}

// SetNode1 gets a reference to the given VcenterVchaClusterNodeInfo and assigns it to the Node1 field.
func (o *VcenterVchaClusterInfo) SetNode1(v VcenterVchaClusterNodeInfo) {
	o.Node1 = &v
}

// GetNode2 returns the Node2 field value if set, zero value otherwise.
func (o *VcenterVchaClusterInfo) GetNode2() VcenterVchaClusterNodeInfo {
	if o == nil || o.Node2 == nil {
		var ret VcenterVchaClusterNodeInfo
		return ret
	}
	return *o.Node2
}

// GetNode2Ok returns a tuple with the Node2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterInfo) GetNode2Ok() (*VcenterVchaClusterNodeInfo, bool) {
	if o == nil || o.Node2 == nil {
		return nil, false
	}
	return o.Node2, true
}

// HasNode2 returns a boolean if a field has been set.
func (o *VcenterVchaClusterInfo) HasNode2() bool {
	if o != nil && o.Node2 != nil {
		return true
	}

	return false
}

// SetNode2 gets a reference to the given VcenterVchaClusterNodeInfo and assigns it to the Node2 field.
func (o *VcenterVchaClusterInfo) SetNode2(v VcenterVchaClusterNodeInfo) {
	o.Node2 = &v
}

// GetWitness returns the Witness field value if set, zero value otherwise.
func (o *VcenterVchaClusterInfo) GetWitness() VcenterVchaClusterWitnessInfo {
	if o == nil || o.Witness == nil {
		var ret VcenterVchaClusterWitnessInfo
		return ret
	}
	return *o.Witness
}

// GetWitnessOk returns a tuple with the Witness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterInfo) GetWitnessOk() (*VcenterVchaClusterWitnessInfo, bool) {
	if o == nil || o.Witness == nil {
		return nil, false
	}
	return o.Witness, true
}

// HasWitness returns a boolean if a field has been set.
func (o *VcenterVchaClusterInfo) HasWitness() bool {
	if o != nil && o.Witness != nil {
		return true
	}

	return false
}

// SetWitness gets a reference to the given VcenterVchaClusterWitnessInfo and assigns it to the Witness field.
func (o *VcenterVchaClusterInfo) SetWitness(v VcenterVchaClusterWitnessInfo) {
	o.Witness = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *VcenterVchaClusterInfo) GetMode() VcenterVchaClusterClusterMode {
	if o == nil || o.Mode == nil {
		var ret VcenterVchaClusterClusterMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterInfo) GetModeOk() (*VcenterVchaClusterClusterMode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *VcenterVchaClusterInfo) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given VcenterVchaClusterClusterMode and assigns it to the Mode field.
func (o *VcenterVchaClusterInfo) SetMode(v VcenterVchaClusterClusterMode) {
	o.Mode = &v
}

// GetHealthState returns the HealthState field value if set, zero value otherwise.
func (o *VcenterVchaClusterInfo) GetHealthState() VcenterVchaClusterClusterState {
	if o == nil || o.HealthState == nil {
		var ret VcenterVchaClusterClusterState
		return ret
	}
	return *o.HealthState
}

// GetHealthStateOk returns a tuple with the HealthState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterInfo) GetHealthStateOk() (*VcenterVchaClusterClusterState, bool) {
	if o == nil || o.HealthState == nil {
		return nil, false
	}
	return o.HealthState, true
}

// HasHealthState returns a boolean if a field has been set.
func (o *VcenterVchaClusterInfo) HasHealthState() bool {
	if o != nil && o.HealthState != nil {
		return true
	}

	return false
}

// SetHealthState gets a reference to the given VcenterVchaClusterClusterState and assigns it to the HealthState field.
func (o *VcenterVchaClusterInfo) SetHealthState(v VcenterVchaClusterClusterState) {
	o.HealthState = &v
}

// GetHealthException returns the HealthException field value if set, zero value otherwise.
func (o *VcenterVchaClusterInfo) GetHealthException() []VapiStdLocalizableMessage {
	if o == nil || o.HealthException == nil {
		var ret []VapiStdLocalizableMessage
		return ret
	}
	return *o.HealthException
}

// GetHealthExceptionOk returns a tuple with the HealthException field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterInfo) GetHealthExceptionOk() (*[]VapiStdLocalizableMessage, bool) {
	if o == nil || o.HealthException == nil {
		return nil, false
	}
	return o.HealthException, true
}

// HasHealthException returns a boolean if a field has been set.
func (o *VcenterVchaClusterInfo) HasHealthException() bool {
	if o != nil && o.HealthException != nil {
		return true
	}

	return false
}

// SetHealthException gets a reference to the given []VapiStdLocalizableMessage and assigns it to the HealthException field.
func (o *VcenterVchaClusterInfo) SetHealthException(v []VapiStdLocalizableMessage) {
	o.HealthException = &v
}

// GetHealthWarnings returns the HealthWarnings field value if set, zero value otherwise.
func (o *VcenterVchaClusterInfo) GetHealthWarnings() []VcenterVchaClusterErrorCondition {
	if o == nil || o.HealthWarnings == nil {
		var ret []VcenterVchaClusterErrorCondition
		return ret
	}
	return *o.HealthWarnings
}

// GetHealthWarningsOk returns a tuple with the HealthWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterInfo) GetHealthWarningsOk() (*[]VcenterVchaClusterErrorCondition, bool) {
	if o == nil || o.HealthWarnings == nil {
		return nil, false
	}
	return o.HealthWarnings, true
}

// HasHealthWarnings returns a boolean if a field has been set.
func (o *VcenterVchaClusterInfo) HasHealthWarnings() bool {
	if o != nil && o.HealthWarnings != nil {
		return true
	}

	return false
}

// SetHealthWarnings gets a reference to the given []VcenterVchaClusterErrorCondition and assigns it to the HealthWarnings field.
func (o *VcenterVchaClusterInfo) SetHealthWarnings(v []VcenterVchaClusterErrorCondition) {
	o.HealthWarnings = &v
}

// GetManualFailoverAllowed returns the ManualFailoverAllowed field value if set, zero value otherwise.
func (o *VcenterVchaClusterInfo) GetManualFailoverAllowed() bool {
	if o == nil || o.ManualFailoverAllowed == nil {
		var ret bool
		return ret
	}
	return *o.ManualFailoverAllowed
}

// GetManualFailoverAllowedOk returns a tuple with the ManualFailoverAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterInfo) GetManualFailoverAllowedOk() (*bool, bool) {
	if o == nil || o.ManualFailoverAllowed == nil {
		return nil, false
	}
	return o.ManualFailoverAllowed, true
}

// HasManualFailoverAllowed returns a boolean if a field has been set.
func (o *VcenterVchaClusterInfo) HasManualFailoverAllowed() bool {
	if o != nil && o.ManualFailoverAllowed != nil {
		return true
	}

	return false
}

// SetManualFailoverAllowed gets a reference to the given bool and assigns it to the ManualFailoverAllowed field.
func (o *VcenterVchaClusterInfo) SetManualFailoverAllowed(v bool) {
	o.ManualFailoverAllowed = &v
}

// GetAutoFailoverAllowed returns the AutoFailoverAllowed field value if set, zero value otherwise.
func (o *VcenterVchaClusterInfo) GetAutoFailoverAllowed() bool {
	if o == nil || o.AutoFailoverAllowed == nil {
		var ret bool
		return ret
	}
	return *o.AutoFailoverAllowed
}

// GetAutoFailoverAllowedOk returns a tuple with the AutoFailoverAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterInfo) GetAutoFailoverAllowedOk() (*bool, bool) {
	if o == nil || o.AutoFailoverAllowed == nil {
		return nil, false
	}
	return o.AutoFailoverAllowed, true
}

// HasAutoFailoverAllowed returns a boolean if a field has been set.
func (o *VcenterVchaClusterInfo) HasAutoFailoverAllowed() bool {
	if o != nil && o.AutoFailoverAllowed != nil {
		return true
	}

	return false
}

// SetAutoFailoverAllowed gets a reference to the given bool and assigns it to the AutoFailoverAllowed field.
func (o *VcenterVchaClusterInfo) SetAutoFailoverAllowed(v bool) {
	o.AutoFailoverAllowed = &v
}

func (o VcenterVchaClusterInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigState != nil {
		toSerialize["config_state"] = o.ConfigState
	}
	if o.Node1 != nil {
		toSerialize["node1"] = o.Node1
	}
	if o.Node2 != nil {
		toSerialize["node2"] = o.Node2
	}
	if o.Witness != nil {
		toSerialize["witness"] = o.Witness
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.HealthState != nil {
		toSerialize["health_state"] = o.HealthState
	}
	if o.HealthException != nil {
		toSerialize["health_exception"] = o.HealthException
	}
	if o.HealthWarnings != nil {
		toSerialize["health_warnings"] = o.HealthWarnings
	}
	if o.ManualFailoverAllowed != nil {
		toSerialize["manual_failover_allowed"] = o.ManualFailoverAllowed
	}
	if o.AutoFailoverAllowed != nil {
		toSerialize["auto_failover_allowed"] = o.AutoFailoverAllowed
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterInfo struct {
	value *VcenterVchaClusterInfo
	isSet bool
}

func (v NullableVcenterVchaClusterInfo) Get() *VcenterVchaClusterInfo {
	return v.value
}

func (v *NullableVcenterVchaClusterInfo) Set(val *VcenterVchaClusterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterInfo(val *VcenterVchaClusterInfo) *NullableVcenterVchaClusterInfo {
	return &NullableVcenterVchaClusterInfo{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


