/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareEthernetBackingInfo struct for VcenterVmHardwareEthernetBackingInfo
type VcenterVmHardwareEthernetBackingInfo struct {
	Type VcenterVmHardwareEthernetBackingType `json:"type"`
	// Identifier of the network backing the virtual Ethernet adapter. If unset, the identifier of the network backing could not be determined. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network.
	Network *string `json:"network,omitempty"`
	// Name of the standard portgroup backing the virtual Ethernet adapter. This field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is STANDARD_PORTGROUP.
	NetworkName *string `json:"network_name,omitempty"`
	// Name of the device backing the virtual Ethernet adapter. This field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is HOST_DEVICE.
	HostDevice *string `json:"host_device,omitempty"`
	// UUID of the distributed virtual switch that backs the virtual Ethernet adapter. This field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is DISTRIBUTED_PORTGROUP.
	DistributedSwitchUuid *string `json:"distributed_switch_uuid,omitempty"`
	// Key of the distributed virtual port that backs the virtual Ethernet adapter. This field will be unset if the virtual Ethernet device is not bound to a distributed virtual port; this can happen if the virtual machine is powered off or the virtual Ethernet device is not connected.
	DistributedPort *string `json:"distributed_port,omitempty"`
	// Server-generated cookie that identifies the connection to the port. This ookie may be used to verify that the virtual machine is the rightful owner of the port. This field will be unset if the virtual Ethernet device is not bound to a distributed virtual port; this can happen if the virtual machine is powered off or the virtual Ethernet device is not connected.
	ConnectionCookie *int64 `json:"connection_cookie,omitempty"`
	// Type of the opaque network that backs the virtual Ethernet adapter. This field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is OPAQUE_NETWORK.
	OpaqueNetworkType *string `json:"opaque_network_type,omitempty"`
	// Identifier of the opaque network that backs the virtual Ethernet adapter. This field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is OPAQUE_NETWORK.
	OpaqueNetworkId *string `json:"opaque_network_id,omitempty"`
}

// NewVcenterVmHardwareEthernetBackingInfo instantiates a new VcenterVmHardwareEthernetBackingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareEthernetBackingInfo(type_ VcenterVmHardwareEthernetBackingType) *VcenterVmHardwareEthernetBackingInfo {
	this := VcenterVmHardwareEthernetBackingInfo{}
	this.Type = type_
	return &this
}

// NewVcenterVmHardwareEthernetBackingInfoWithDefaults instantiates a new VcenterVmHardwareEthernetBackingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareEthernetBackingInfoWithDefaults() *VcenterVmHardwareEthernetBackingInfo {
	this := VcenterVmHardwareEthernetBackingInfo{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterVmHardwareEthernetBackingInfo) GetType() VcenterVmHardwareEthernetBackingType {
	if o == nil {
		var ret VcenterVmHardwareEthernetBackingType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) GetTypeOk() (*VcenterVmHardwareEthernetBackingType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmHardwareEthernetBackingInfo) SetType(v VcenterVmHardwareEthernetBackingType) {
	o.Type = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *VcenterVmHardwareEthernetBackingInfo) GetNetwork() string {
	if o == nil || o.Network == nil {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) GetNetworkOk() (*string, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *VcenterVmHardwareEthernetBackingInfo) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkName returns the NetworkName field value if set, zero value otherwise.
func (o *VcenterVmHardwareEthernetBackingInfo) GetNetworkName() string {
	if o == nil || o.NetworkName == nil {
		var ret string
		return ret
	}
	return *o.NetworkName
}

// GetNetworkNameOk returns a tuple with the NetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) GetNetworkNameOk() (*string, bool) {
	if o == nil || o.NetworkName == nil {
		return nil, false
	}
	return o.NetworkName, true
}

// HasNetworkName returns a boolean if a field has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) HasNetworkName() bool {
	if o != nil && o.NetworkName != nil {
		return true
	}

	return false
}

// SetNetworkName gets a reference to the given string and assigns it to the NetworkName field.
func (o *VcenterVmHardwareEthernetBackingInfo) SetNetworkName(v string) {
	o.NetworkName = &v
}

// GetHostDevice returns the HostDevice field value if set, zero value otherwise.
func (o *VcenterVmHardwareEthernetBackingInfo) GetHostDevice() string {
	if o == nil || o.HostDevice == nil {
		var ret string
		return ret
	}
	return *o.HostDevice
}

// GetHostDeviceOk returns a tuple with the HostDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) GetHostDeviceOk() (*string, bool) {
	if o == nil || o.HostDevice == nil {
		return nil, false
	}
	return o.HostDevice, true
}

// HasHostDevice returns a boolean if a field has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) HasHostDevice() bool {
	if o != nil && o.HostDevice != nil {
		return true
	}

	return false
}

// SetHostDevice gets a reference to the given string and assigns it to the HostDevice field.
func (o *VcenterVmHardwareEthernetBackingInfo) SetHostDevice(v string) {
	o.HostDevice = &v
}

// GetDistributedSwitchUuid returns the DistributedSwitchUuid field value if set, zero value otherwise.
func (o *VcenterVmHardwareEthernetBackingInfo) GetDistributedSwitchUuid() string {
	if o == nil || o.DistributedSwitchUuid == nil {
		var ret string
		return ret
	}
	return *o.DistributedSwitchUuid
}

// GetDistributedSwitchUuidOk returns a tuple with the DistributedSwitchUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) GetDistributedSwitchUuidOk() (*string, bool) {
	if o == nil || o.DistributedSwitchUuid == nil {
		return nil, false
	}
	return o.DistributedSwitchUuid, true
}

// HasDistributedSwitchUuid returns a boolean if a field has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) HasDistributedSwitchUuid() bool {
	if o != nil && o.DistributedSwitchUuid != nil {
		return true
	}

	return false
}

// SetDistributedSwitchUuid gets a reference to the given string and assigns it to the DistributedSwitchUuid field.
func (o *VcenterVmHardwareEthernetBackingInfo) SetDistributedSwitchUuid(v string) {
	o.DistributedSwitchUuid = &v
}

// GetDistributedPort returns the DistributedPort field value if set, zero value otherwise.
func (o *VcenterVmHardwareEthernetBackingInfo) GetDistributedPort() string {
	if o == nil || o.DistributedPort == nil {
		var ret string
		return ret
	}
	return *o.DistributedPort
}

// GetDistributedPortOk returns a tuple with the DistributedPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) GetDistributedPortOk() (*string, bool) {
	if o == nil || o.DistributedPort == nil {
		return nil, false
	}
	return o.DistributedPort, true
}

// HasDistributedPort returns a boolean if a field has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) HasDistributedPort() bool {
	if o != nil && o.DistributedPort != nil {
		return true
	}

	return false
}

// SetDistributedPort gets a reference to the given string and assigns it to the DistributedPort field.
func (o *VcenterVmHardwareEthernetBackingInfo) SetDistributedPort(v string) {
	o.DistributedPort = &v
}

// GetConnectionCookie returns the ConnectionCookie field value if set, zero value otherwise.
func (o *VcenterVmHardwareEthernetBackingInfo) GetConnectionCookie() int64 {
	if o == nil || o.ConnectionCookie == nil {
		var ret int64
		return ret
	}
	return *o.ConnectionCookie
}

// GetConnectionCookieOk returns a tuple with the ConnectionCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) GetConnectionCookieOk() (*int64, bool) {
	if o == nil || o.ConnectionCookie == nil {
		return nil, false
	}
	return o.ConnectionCookie, true
}

// HasConnectionCookie returns a boolean if a field has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) HasConnectionCookie() bool {
	if o != nil && o.ConnectionCookie != nil {
		return true
	}

	return false
}

// SetConnectionCookie gets a reference to the given int64 and assigns it to the ConnectionCookie field.
func (o *VcenterVmHardwareEthernetBackingInfo) SetConnectionCookie(v int64) {
	o.ConnectionCookie = &v
}

// GetOpaqueNetworkType returns the OpaqueNetworkType field value if set, zero value otherwise.
func (o *VcenterVmHardwareEthernetBackingInfo) GetOpaqueNetworkType() string {
	if o == nil || o.OpaqueNetworkType == nil {
		var ret string
		return ret
	}
	return *o.OpaqueNetworkType
}

// GetOpaqueNetworkTypeOk returns a tuple with the OpaqueNetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) GetOpaqueNetworkTypeOk() (*string, bool) {
	if o == nil || o.OpaqueNetworkType == nil {
		return nil, false
	}
	return o.OpaqueNetworkType, true
}

// HasOpaqueNetworkType returns a boolean if a field has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) HasOpaqueNetworkType() bool {
	if o != nil && o.OpaqueNetworkType != nil {
		return true
	}

	return false
}

// SetOpaqueNetworkType gets a reference to the given string and assigns it to the OpaqueNetworkType field.
func (o *VcenterVmHardwareEthernetBackingInfo) SetOpaqueNetworkType(v string) {
	o.OpaqueNetworkType = &v
}

// GetOpaqueNetworkId returns the OpaqueNetworkId field value if set, zero value otherwise.
func (o *VcenterVmHardwareEthernetBackingInfo) GetOpaqueNetworkId() string {
	if o == nil || o.OpaqueNetworkId == nil {
		var ret string
		return ret
	}
	return *o.OpaqueNetworkId
}

// GetOpaqueNetworkIdOk returns a tuple with the OpaqueNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) GetOpaqueNetworkIdOk() (*string, bool) {
	if o == nil || o.OpaqueNetworkId == nil {
		return nil, false
	}
	return o.OpaqueNetworkId, true
}

// HasOpaqueNetworkId returns a boolean if a field has been set.
func (o *VcenterVmHardwareEthernetBackingInfo) HasOpaqueNetworkId() bool {
	if o != nil && o.OpaqueNetworkId != nil {
		return true
	}

	return false
}

// SetOpaqueNetworkId gets a reference to the given string and assigns it to the OpaqueNetworkId field.
func (o *VcenterVmHardwareEthernetBackingInfo) SetOpaqueNetworkId(v string) {
	o.OpaqueNetworkId = &v
}

func (o VcenterVmHardwareEthernetBackingInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	if o.NetworkName != nil {
		toSerialize["network_name"] = o.NetworkName
	}
	if o.HostDevice != nil {
		toSerialize["host_device"] = o.HostDevice
	}
	if o.DistributedSwitchUuid != nil {
		toSerialize["distributed_switch_uuid"] = o.DistributedSwitchUuid
	}
	if o.DistributedPort != nil {
		toSerialize["distributed_port"] = o.DistributedPort
	}
	if o.ConnectionCookie != nil {
		toSerialize["connection_cookie"] = o.ConnectionCookie
	}
	if o.OpaqueNetworkType != nil {
		toSerialize["opaque_network_type"] = o.OpaqueNetworkType
	}
	if o.OpaqueNetworkId != nil {
		toSerialize["opaque_network_id"] = o.OpaqueNetworkId
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareEthernetBackingInfo struct {
	value *VcenterVmHardwareEthernetBackingInfo
	isSet bool
}

func (v NullableVcenterVmHardwareEthernetBackingInfo) Get() *VcenterVmHardwareEthernetBackingInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareEthernetBackingInfo) Set(val *VcenterVmHardwareEthernetBackingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareEthernetBackingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareEthernetBackingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareEthernetBackingInfo(val *VcenterVmHardwareEthernetBackingInfo) *NullableVcenterVmHardwareEthernetBackingInfo {
	return &NullableVcenterVmHardwareEthernetBackingInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareEthernetBackingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareEthernetBackingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


