/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMInfoDisks struct for VcenterVMInfoDisks
type VcenterVMInfoDisks struct {
	Key *string `json:"key,omitempty"`
	Value *VcenterVmHardwareDiskInfo `json:"value,omitempty"`
}

// NewVcenterVMInfoDisks instantiates a new VcenterVMInfoDisks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMInfoDisks() *VcenterVMInfoDisks {
	this := VcenterVMInfoDisks{}
	return &this
}

// NewVcenterVMInfoDisksWithDefaults instantiates a new VcenterVMInfoDisks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMInfoDisksWithDefaults() *VcenterVMInfoDisks {
	this := VcenterVMInfoDisks{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *VcenterVMInfoDisks) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInfoDisks) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *VcenterVMInfoDisks) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *VcenterVMInfoDisks) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VcenterVMInfoDisks) GetValue() VcenterVmHardwareDiskInfo {
	if o == nil || o.Value == nil {
		var ret VcenterVmHardwareDiskInfo
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInfoDisks) GetValueOk() (*VcenterVmHardwareDiskInfo, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VcenterVMInfoDisks) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given VcenterVmHardwareDiskInfo and assigns it to the Value field.
func (o *VcenterVMInfoDisks) SetValue(v VcenterVmHardwareDiskInfo) {
	o.Value = &v
}

func (o VcenterVMInfoDisks) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMInfoDisks struct {
	value *VcenterVMInfoDisks
	isSet bool
}

func (v NullableVcenterVMInfoDisks) Get() *VcenterVMInfoDisks {
	return v.value
}

func (v *NullableVcenterVMInfoDisks) Set(val *VcenterVMInfoDisks) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMInfoDisks) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMInfoDisks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMInfoDisks(val *VcenterVMInfoDisks) *NullableVcenterVMInfoDisks {
	return &NullableVcenterVMInfoDisks{value: val, isSet: true}
}

func (v NullableVcenterVMInfoDisks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMInfoDisks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


