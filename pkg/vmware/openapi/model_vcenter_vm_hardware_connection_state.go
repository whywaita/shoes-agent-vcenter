/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareConnectionState The ConnectionState enumerated type defines the valid states for a removable device that is configured to be connected.
type VcenterVmHardwareConnectionState string

// List of vcenter.vm.hardware.connection_state
const (
	VCENTERVMHARDWARECONNECTIONSTATE_CONNECTED VcenterVmHardwareConnectionState = "CONNECTED"
	VCENTERVMHARDWARECONNECTIONSTATE_RECOVERABLE_ERROR VcenterVmHardwareConnectionState = "RECOVERABLE_ERROR"
	VCENTERVMHARDWARECONNECTIONSTATE_UNRECOVERABLE_ERROR VcenterVmHardwareConnectionState = "UNRECOVERABLE_ERROR"
	VCENTERVMHARDWARECONNECTIONSTATE_NOT_CONNECTED VcenterVmHardwareConnectionState = "NOT_CONNECTED"
	VCENTERVMHARDWARECONNECTIONSTATE_UNKNOWN VcenterVmHardwareConnectionState = "UNKNOWN"
)

// All allowed values of VcenterVmHardwareConnectionState enum
var AllowedVcenterVmHardwareConnectionStateEnumValues = []VcenterVmHardwareConnectionState{
	"CONNECTED",
	"RECOVERABLE_ERROR",
	"UNRECOVERABLE_ERROR",
	"NOT_CONNECTED",
	"UNKNOWN",
}

func (v *VcenterVmHardwareConnectionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareConnectionState(value)
	for _, existing := range AllowedVcenterVmHardwareConnectionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareConnectionState", value)
}

// NewVcenterVmHardwareConnectionStateFromValue returns a pointer to a valid VcenterVmHardwareConnectionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareConnectionStateFromValue(v string) (*VcenterVmHardwareConnectionState, error) {
	ev := VcenterVmHardwareConnectionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareConnectionState: valid values are %v", v, AllowedVcenterVmHardwareConnectionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareConnectionState) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareConnectionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.connection_state value
func (v VcenterVmHardwareConnectionState) Ptr() *VcenterVmHardwareConnectionState {
	return &v
}

type NullableVcenterVmHardwareConnectionState struct {
	value *VcenterVmHardwareConnectionState
	isSet bool
}

func (v NullableVcenterVmHardwareConnectionState) Get() *VcenterVmHardwareConnectionState {
	return v.value
}

func (v *NullableVcenterVmHardwareConnectionState) Set(val *VcenterVmHardwareConnectionState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareConnectionState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareConnectionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareConnectionState(val *VcenterVmHardwareConnectionState) *NullableVcenterVmHardwareConnectionState {
	return &NullableVcenterVmHardwareConnectionState{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareConnectionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareConnectionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

