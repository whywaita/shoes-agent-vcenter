/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementVirtualMachineClassesInfo struct for VcenterNamespaceManagementVirtualMachineClassesInfo
type VcenterNamespaceManagementVirtualMachineClassesInfo struct {
	// Identifier for the VM class. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.VirtualMachineClass. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.VirtualMachineClass.
	Id string `json:"id"`
	// The number of CPUs configured for virtual machine of this class.
	CpuCount int64 `json:"cpu_count"`
	// The percentage of total available CPUs reserved for a virtual machine. We multiply this percentage by the minimum frequency amongst all the cluster nodes to get the CPU reservation that is specified to vSphere in MHz. If unset, no CPU reservation is requested for the virtual machine.
	CpuReservation *int64 `json:"cpu_reservation,omitempty"`
	// The amount of memory in MB configured for virtual machine of this class.
	MemoryMB int64 `json:"memory_MB"`
	// The percentage of available memory reserved for a virtual machine of this class. If unset, no memory reservation is requested for virtual machine.
	MemoryReservation *int64 `json:"memory_reservation,omitempty"`
	// Description of the VM class.
	Description string `json:"description"`
	// Set of Namespaces associated with this VM class. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.namespaces.Instance.
	Namespaces []string `json:"namespaces"`
	// Set of virtual machines deployed for VM class. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: VirtualMachine.
	Vms []string `json:"vms"`
	ConfigStatus VcenterNamespaceManagementVirtualMachineClassesConfigStatus `json:"config_status"`
	// Current set of messages associated with the object.
	Messages []VcenterNamespaceManagementVirtualMachineClassesMessage `json:"messages"`
}

// NewVcenterNamespaceManagementVirtualMachineClassesInfo instantiates a new VcenterNamespaceManagementVirtualMachineClassesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementVirtualMachineClassesInfo(id string, cpuCount int64, memoryMB int64, description string, namespaces []string, vms []string, configStatus VcenterNamespaceManagementVirtualMachineClassesConfigStatus, messages []VcenterNamespaceManagementVirtualMachineClassesMessage) *VcenterNamespaceManagementVirtualMachineClassesInfo {
	this := VcenterNamespaceManagementVirtualMachineClassesInfo{}
	this.Id = id
	this.CpuCount = cpuCount
	this.MemoryMB = memoryMB
	this.Description = description
	this.Namespaces = namespaces
	this.Vms = vms
	this.ConfigStatus = configStatus
	this.Messages = messages
	return &this
}

// NewVcenterNamespaceManagementVirtualMachineClassesInfoWithDefaults instantiates a new VcenterNamespaceManagementVirtualMachineClassesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementVirtualMachineClassesInfoWithDefaults() *VcenterNamespaceManagementVirtualMachineClassesInfo {
	this := VcenterNamespaceManagementVirtualMachineClassesInfo{}
	return &this
}

// GetId returns the Id field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) SetId(v string) {
	o.Id = v
}

// GetCpuCount returns the CpuCount field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetCpuCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CpuCount
}

// GetCpuCountOk returns a tuple with the CpuCount field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetCpuCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CpuCount, true
}

// SetCpuCount sets field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) SetCpuCount(v int64) {
	o.CpuCount = v
}

// GetCpuReservation returns the CpuReservation field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetCpuReservation() int64 {
	if o == nil || o.CpuReservation == nil {
		var ret int64
		return ret
	}
	return *o.CpuReservation
}

// GetCpuReservationOk returns a tuple with the CpuReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetCpuReservationOk() (*int64, bool) {
	if o == nil || o.CpuReservation == nil {
		return nil, false
	}
	return o.CpuReservation, true
}

// HasCpuReservation returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) HasCpuReservation() bool {
	if o != nil && o.CpuReservation != nil {
		return true
	}

	return false
}

// SetCpuReservation gets a reference to the given int64 and assigns it to the CpuReservation field.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) SetCpuReservation(v int64) {
	o.CpuReservation = &v
}

// GetMemoryMB returns the MemoryMB field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetMemoryMB() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MemoryMB
}

// GetMemoryMBOk returns a tuple with the MemoryMB field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetMemoryMBOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MemoryMB, true
}

// SetMemoryMB sets field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) SetMemoryMB(v int64) {
	o.MemoryMB = v
}

// GetMemoryReservation returns the MemoryReservation field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetMemoryReservation() int64 {
	if o == nil || o.MemoryReservation == nil {
		var ret int64
		return ret
	}
	return *o.MemoryReservation
}

// GetMemoryReservationOk returns a tuple with the MemoryReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetMemoryReservationOk() (*int64, bool) {
	if o == nil || o.MemoryReservation == nil {
		return nil, false
	}
	return o.MemoryReservation, true
}

// HasMemoryReservation returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) HasMemoryReservation() bool {
	if o != nil && o.MemoryReservation != nil {
		return true
	}

	return false
}

// SetMemoryReservation gets a reference to the given int64 and assigns it to the MemoryReservation field.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) SetMemoryReservation(v int64) {
	o.MemoryReservation = &v
}

// GetDescription returns the Description field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) SetDescription(v string) {
	o.Description = v
}

// GetNamespaces returns the Namespaces field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetNamespacesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Namespaces, true
}

// SetNamespaces sets field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) SetNamespaces(v []string) {
	o.Namespaces = v
}

// GetVms returns the Vms field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetVms() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Vms
}

// GetVmsOk returns a tuple with the Vms field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetVmsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Vms, true
}

// SetVms sets field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) SetVms(v []string) {
	o.Vms = v
}

// GetConfigStatus returns the ConfigStatus field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetConfigStatus() VcenterNamespaceManagementVirtualMachineClassesConfigStatus {
	if o == nil {
		var ret VcenterNamespaceManagementVirtualMachineClassesConfigStatus
		return ret
	}

	return o.ConfigStatus
}

// GetConfigStatusOk returns a tuple with the ConfigStatus field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetConfigStatusOk() (*VcenterNamespaceManagementVirtualMachineClassesConfigStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigStatus, true
}

// SetConfigStatus sets field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) SetConfigStatus(v VcenterNamespaceManagementVirtualMachineClassesConfigStatus) {
	o.ConfigStatus = v
}

// GetMessages returns the Messages field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetMessages() []VcenterNamespaceManagementVirtualMachineClassesMessage {
	if o == nil {
		var ret []VcenterNamespaceManagementVirtualMachineClassesMessage
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) GetMessagesOk() (*[]VcenterNamespaceManagementVirtualMachineClassesMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Messages, true
}

// SetMessages sets field value
func (o *VcenterNamespaceManagementVirtualMachineClassesInfo) SetMessages(v []VcenterNamespaceManagementVirtualMachineClassesMessage) {
	o.Messages = v
}

func (o VcenterNamespaceManagementVirtualMachineClassesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["cpu_count"] = o.CpuCount
	}
	if o.CpuReservation != nil {
		toSerialize["cpu_reservation"] = o.CpuReservation
	}
	if true {
		toSerialize["memory_MB"] = o.MemoryMB
	}
	if o.MemoryReservation != nil {
		toSerialize["memory_reservation"] = o.MemoryReservation
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["namespaces"] = o.Namespaces
	}
	if true {
		toSerialize["vms"] = o.Vms
	}
	if true {
		toSerialize["config_status"] = o.ConfigStatus
	}
	if true {
		toSerialize["messages"] = o.Messages
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementVirtualMachineClassesInfo struct {
	value *VcenterNamespaceManagementVirtualMachineClassesInfo
	isSet bool
}

func (v NullableVcenterNamespaceManagementVirtualMachineClassesInfo) Get() *VcenterNamespaceManagementVirtualMachineClassesInfo {
	return v.value
}

func (v *NullableVcenterNamespaceManagementVirtualMachineClassesInfo) Set(val *VcenterNamespaceManagementVirtualMachineClassesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementVirtualMachineClassesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementVirtualMachineClassesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementVirtualMachineClassesInfo(val *VcenterNamespaceManagementVirtualMachineClassesInfo) *NullableVcenterNamespaceManagementVirtualMachineClassesInfo {
	return &NullableVcenterNamespaceManagementVirtualMachineClassesInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementVirtualMachineClassesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementVirtualMachineClassesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


