/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterHostConnectionState the model 'VcenterHostConnectionState'
type VcenterHostConnectionState string

// List of vcenter.host.connection_state
const (
	VCENTERHOSTCONNECTIONSTATE_CONNECTED VcenterHostConnectionState = "CONNECTED"
	VCENTERHOSTCONNECTIONSTATE_DISCONNECTED VcenterHostConnectionState = "DISCONNECTED"
	VCENTERHOSTCONNECTIONSTATE_NOT_RESPONDING VcenterHostConnectionState = "NOT_RESPONDING"
)

// All allowed values of VcenterHostConnectionState enum
var AllowedVcenterHostConnectionStateEnumValues = []VcenterHostConnectionState{
	"CONNECTED",
	"DISCONNECTED",
	"NOT_RESPONDING",
}

func (v *VcenterHostConnectionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterHostConnectionState(value)
	for _, existing := range AllowedVcenterHostConnectionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterHostConnectionState", value)
}

// NewVcenterHostConnectionStateFromValue returns a pointer to a valid VcenterHostConnectionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterHostConnectionStateFromValue(v string) (*VcenterHostConnectionState, error) {
	ev := VcenterHostConnectionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterHostConnectionState: valid values are %v", v, AllowedVcenterHostConnectionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterHostConnectionState) IsValid() bool {
	for _, existing := range AllowedVcenterHostConnectionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.host.connection_state value
func (v VcenterHostConnectionState) Ptr() *VcenterHostConnectionState {
	return &v
}

type NullableVcenterHostConnectionState struct {
	value *VcenterHostConnectionState
	isSet bool
}

func (v NullableVcenterHostConnectionState) Get() *VcenterHostConnectionState {
	return v.value
}

func (v *NullableVcenterHostConnectionState) Set(val *VcenterHostConnectionState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterHostConnectionState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterHostConnectionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterHostConnectionState(val *VcenterHostConnectionState) *NullableVcenterHostConnectionState {
	return &NullableVcenterHostConnectionState{value: val, isSet: true}
}

func (v NullableVcenterHostConnectionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterHostConnectionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

