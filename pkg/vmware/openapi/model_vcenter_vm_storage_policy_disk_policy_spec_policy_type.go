/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmStoragePolicyDiskPolicySpecPolicyType The Policy.DiskPolicySpec enumerated type defines the choices for how to specify the policy to be associated with a virtual disk.
type VcenterVmStoragePolicyDiskPolicySpecPolicyType string

// List of vcenter.vm.storage.policy.disk_policy_spec.policy_type
const (
	VCENTERVMSTORAGEPOLICYDISKPOLICYSPECPOLICYTYPE_SPECIFIED_POLICY VcenterVmStoragePolicyDiskPolicySpecPolicyType = "USE_SPECIFIED_POLICY"
	VCENTERVMSTORAGEPOLICYDISKPOLICYSPECPOLICYTYPE_DEFAULT_POLICY VcenterVmStoragePolicyDiskPolicySpecPolicyType = "USE_DEFAULT_POLICY"
)

// All allowed values of VcenterVmStoragePolicyDiskPolicySpecPolicyType enum
var AllowedVcenterVmStoragePolicyDiskPolicySpecPolicyTypeEnumValues = []VcenterVmStoragePolicyDiskPolicySpecPolicyType{
	"USE_SPECIFIED_POLICY",
	"USE_DEFAULT_POLICY",
}

func (v *VcenterVmStoragePolicyDiskPolicySpecPolicyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmStoragePolicyDiskPolicySpecPolicyType(value)
	for _, existing := range AllowedVcenterVmStoragePolicyDiskPolicySpecPolicyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmStoragePolicyDiskPolicySpecPolicyType", value)
}

// NewVcenterVmStoragePolicyDiskPolicySpecPolicyTypeFromValue returns a pointer to a valid VcenterVmStoragePolicyDiskPolicySpecPolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmStoragePolicyDiskPolicySpecPolicyTypeFromValue(v string) (*VcenterVmStoragePolicyDiskPolicySpecPolicyType, error) {
	ev := VcenterVmStoragePolicyDiskPolicySpecPolicyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmStoragePolicyDiskPolicySpecPolicyType: valid values are %v", v, AllowedVcenterVmStoragePolicyDiskPolicySpecPolicyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmStoragePolicyDiskPolicySpecPolicyType) IsValid() bool {
	for _, existing := range AllowedVcenterVmStoragePolicyDiskPolicySpecPolicyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.storage.policy.disk_policy_spec.policy_type value
func (v VcenterVmStoragePolicyDiskPolicySpecPolicyType) Ptr() *VcenterVmStoragePolicyDiskPolicySpecPolicyType {
	return &v
}

type NullableVcenterVmStoragePolicyDiskPolicySpecPolicyType struct {
	value *VcenterVmStoragePolicyDiskPolicySpecPolicyType
	isSet bool
}

func (v NullableVcenterVmStoragePolicyDiskPolicySpecPolicyType) Get() *VcenterVmStoragePolicyDiskPolicySpecPolicyType {
	return v.value
}

func (v *NullableVcenterVmStoragePolicyDiskPolicySpecPolicyType) Set(val *VcenterVmStoragePolicyDiskPolicySpecPolicyType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmStoragePolicyDiskPolicySpecPolicyType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmStoragePolicyDiskPolicySpecPolicyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmStoragePolicyDiskPolicySpecPolicyType(val *VcenterVmStoragePolicyDiskPolicySpecPolicyType) *NullableVcenterVmStoragePolicyDiskPolicySpecPolicyType {
	return &NullableVcenterVmStoragePolicyDiskPolicySpecPolicyType{value: val, isSet: true}
}

func (v NullableVcenterVmStoragePolicyDiskPolicySpecPolicyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmStoragePolicyDiskPolicySpecPolicyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

