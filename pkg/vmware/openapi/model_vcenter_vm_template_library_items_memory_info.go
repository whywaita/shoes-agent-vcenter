/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsMemoryInfo struct for VcenterVmTemplateLibraryItemsMemoryInfo
type VcenterVmTemplateLibraryItemsMemoryInfo struct {
	// Memory size in mebibytes.
	SizeMiB int64 `json:"size_MiB"`
}

// NewVcenterVmTemplateLibraryItemsMemoryInfo instantiates a new VcenterVmTemplateLibraryItemsMemoryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsMemoryInfo(sizeMiB int64) *VcenterVmTemplateLibraryItemsMemoryInfo {
	this := VcenterVmTemplateLibraryItemsMemoryInfo{}
	this.SizeMiB = sizeMiB
	return &this
}

// NewVcenterVmTemplateLibraryItemsMemoryInfoWithDefaults instantiates a new VcenterVmTemplateLibraryItemsMemoryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsMemoryInfoWithDefaults() *VcenterVmTemplateLibraryItemsMemoryInfo {
	this := VcenterVmTemplateLibraryItemsMemoryInfo{}
	return &this
}

// GetSizeMiB returns the SizeMiB field value
func (o *VcenterVmTemplateLibraryItemsMemoryInfo) GetSizeMiB() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SizeMiB
}

// GetSizeMiBOk returns a tuple with the SizeMiB field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsMemoryInfo) GetSizeMiBOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SizeMiB, true
}

// SetSizeMiB sets field value
func (o *VcenterVmTemplateLibraryItemsMemoryInfo) SetSizeMiB(v int64) {
	o.SizeMiB = v
}

func (o VcenterVmTemplateLibraryItemsMemoryInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["size_MiB"] = o.SizeMiB
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsMemoryInfo struct {
	value *VcenterVmTemplateLibraryItemsMemoryInfo
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsMemoryInfo) Get() *VcenterVmTemplateLibraryItemsMemoryInfo {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsMemoryInfo) Set(val *VcenterVmTemplateLibraryItemsMemoryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsMemoryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsMemoryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsMemoryInfo(val *VcenterVmTemplateLibraryItemsMemoryInfo) *NullableVcenterVmTemplateLibraryItemsMemoryInfo {
	return &NullableVcenterVmTemplateLibraryItemsMemoryInfo{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsMemoryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsMemoryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


