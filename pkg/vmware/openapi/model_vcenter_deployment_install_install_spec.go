/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentInstallInstallSpec struct for VcenterDeploymentInstallInstallSpec
type VcenterDeploymentInstallInstallSpec struct {
	VcsaEmbedded VcenterDeploymentInstallVcsaEmbeddedSpec `json:"vcsa_embedded"`
	// Use the default option for any questions that may come up during appliance configuration. If unset, will default to false.
	AutoAnswer *bool `json:"auto_answer,omitempty"`
}

// NewVcenterDeploymentInstallInstallSpec instantiates a new VcenterDeploymentInstallInstallSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentInstallInstallSpec(vcsaEmbedded VcenterDeploymentInstallVcsaEmbeddedSpec) *VcenterDeploymentInstallInstallSpec {
	this := VcenterDeploymentInstallInstallSpec{}
	this.VcsaEmbedded = vcsaEmbedded
	return &this
}

// NewVcenterDeploymentInstallInstallSpecWithDefaults instantiates a new VcenterDeploymentInstallInstallSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentInstallInstallSpecWithDefaults() *VcenterDeploymentInstallInstallSpec {
	this := VcenterDeploymentInstallInstallSpec{}
	return &this
}

// GetVcsaEmbedded returns the VcsaEmbedded field value
func (o *VcenterDeploymentInstallInstallSpec) GetVcsaEmbedded() VcenterDeploymentInstallVcsaEmbeddedSpec {
	if o == nil {
		var ret VcenterDeploymentInstallVcsaEmbeddedSpec
		return ret
	}

	return o.VcsaEmbedded
}

// GetVcsaEmbeddedOk returns a tuple with the VcsaEmbedded field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInstallInstallSpec) GetVcsaEmbeddedOk() (*VcenterDeploymentInstallVcsaEmbeddedSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VcsaEmbedded, true
}

// SetVcsaEmbedded sets field value
func (o *VcenterDeploymentInstallInstallSpec) SetVcsaEmbedded(v VcenterDeploymentInstallVcsaEmbeddedSpec) {
	o.VcsaEmbedded = v
}

// GetAutoAnswer returns the AutoAnswer field value if set, zero value otherwise.
func (o *VcenterDeploymentInstallInstallSpec) GetAutoAnswer() bool {
	if o == nil || o.AutoAnswer == nil {
		var ret bool
		return ret
	}
	return *o.AutoAnswer
}

// GetAutoAnswerOk returns a tuple with the AutoAnswer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInstallInstallSpec) GetAutoAnswerOk() (*bool, bool) {
	if o == nil || o.AutoAnswer == nil {
		return nil, false
	}
	return o.AutoAnswer, true
}

// HasAutoAnswer returns a boolean if a field has been set.
func (o *VcenterDeploymentInstallInstallSpec) HasAutoAnswer() bool {
	if o != nil && o.AutoAnswer != nil {
		return true
	}

	return false
}

// SetAutoAnswer gets a reference to the given bool and assigns it to the AutoAnswer field.
func (o *VcenterDeploymentInstallInstallSpec) SetAutoAnswer(v bool) {
	o.AutoAnswer = &v
}

func (o VcenterDeploymentInstallInstallSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["vcsa_embedded"] = o.VcsaEmbedded
	}
	if o.AutoAnswer != nil {
		toSerialize["auto_answer"] = o.AutoAnswer
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentInstallInstallSpec struct {
	value *VcenterDeploymentInstallInstallSpec
	isSet bool
}

func (v NullableVcenterDeploymentInstallInstallSpec) Get() *VcenterDeploymentInstallInstallSpec {
	return v.value
}

func (v *NullableVcenterDeploymentInstallInstallSpec) Set(val *VcenterDeploymentInstallInstallSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentInstallInstallSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentInstallInstallSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentInstallInstallSpec(val *VcenterDeploymentInstallInstallSpec) *NullableVcenterDeploymentInstallInstallSpec {
	return &NullableVcenterDeploymentInstallInstallSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentInstallInstallSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentInstallInstallSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


