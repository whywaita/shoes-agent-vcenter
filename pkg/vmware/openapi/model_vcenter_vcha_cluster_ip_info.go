/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterIpInfo struct for VcenterVchaClusterIpInfo
type VcenterVchaClusterIpInfo struct {
	IpFamily VcenterVchaClusterIpFamily `json:"ip_family"`
	Ipv4 *VcenterVchaClusterIpv4Info `json:"ipv4,omitempty"`
	Ipv6 *VcenterVchaClusterIpv6Info `json:"ipv6,omitempty"`
	// Gateway IP address. If unset, no gateway is specified.
	GatewayIp *string `json:"gateway_ip,omitempty"`
}

// NewVcenterVchaClusterIpInfo instantiates a new VcenterVchaClusterIpInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterIpInfo(ipFamily VcenterVchaClusterIpFamily) *VcenterVchaClusterIpInfo {
	this := VcenterVchaClusterIpInfo{}
	this.IpFamily = ipFamily
	return &this
}

// NewVcenterVchaClusterIpInfoWithDefaults instantiates a new VcenterVchaClusterIpInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterIpInfoWithDefaults() *VcenterVchaClusterIpInfo {
	this := VcenterVchaClusterIpInfo{}
	return &this
}

// GetIpFamily returns the IpFamily field value
func (o *VcenterVchaClusterIpInfo) GetIpFamily() VcenterVchaClusterIpFamily {
	if o == nil {
		var ret VcenterVchaClusterIpFamily
		return ret
	}

	return o.IpFamily
}

// GetIpFamilyOk returns a tuple with the IpFamily field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterIpInfo) GetIpFamilyOk() (*VcenterVchaClusterIpFamily, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpFamily, true
}

// SetIpFamily sets field value
func (o *VcenterVchaClusterIpInfo) SetIpFamily(v VcenterVchaClusterIpFamily) {
	o.IpFamily = v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *VcenterVchaClusterIpInfo) GetIpv4() VcenterVchaClusterIpv4Info {
	if o == nil || o.Ipv4 == nil {
		var ret VcenterVchaClusterIpv4Info
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterIpInfo) GetIpv4Ok() (*VcenterVchaClusterIpv4Info, bool) {
	if o == nil || o.Ipv4 == nil {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *VcenterVchaClusterIpInfo) HasIpv4() bool {
	if o != nil && o.Ipv4 != nil {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given VcenterVchaClusterIpv4Info and assigns it to the Ipv4 field.
func (o *VcenterVchaClusterIpInfo) SetIpv4(v VcenterVchaClusterIpv4Info) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *VcenterVchaClusterIpInfo) GetIpv6() VcenterVchaClusterIpv6Info {
	if o == nil || o.Ipv6 == nil {
		var ret VcenterVchaClusterIpv6Info
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterIpInfo) GetIpv6Ok() (*VcenterVchaClusterIpv6Info, bool) {
	if o == nil || o.Ipv6 == nil {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *VcenterVchaClusterIpInfo) HasIpv6() bool {
	if o != nil && o.Ipv6 != nil {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given VcenterVchaClusterIpv6Info and assigns it to the Ipv6 field.
func (o *VcenterVchaClusterIpInfo) SetIpv6(v VcenterVchaClusterIpv6Info) {
	o.Ipv6 = &v
}

// GetGatewayIp returns the GatewayIp field value if set, zero value otherwise.
func (o *VcenterVchaClusterIpInfo) GetGatewayIp() string {
	if o == nil || o.GatewayIp == nil {
		var ret string
		return ret
	}
	return *o.GatewayIp
}

// GetGatewayIpOk returns a tuple with the GatewayIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterIpInfo) GetGatewayIpOk() (*string, bool) {
	if o == nil || o.GatewayIp == nil {
		return nil, false
	}
	return o.GatewayIp, true
}

// HasGatewayIp returns a boolean if a field has been set.
func (o *VcenterVchaClusterIpInfo) HasGatewayIp() bool {
	if o != nil && o.GatewayIp != nil {
		return true
	}

	return false
}

// SetGatewayIp gets a reference to the given string and assigns it to the GatewayIp field.
func (o *VcenterVchaClusterIpInfo) SetGatewayIp(v string) {
	o.GatewayIp = &v
}

func (o VcenterVchaClusterIpInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ip_family"] = o.IpFamily
	}
	if o.Ipv4 != nil {
		toSerialize["ipv4"] = o.Ipv4
	}
	if o.Ipv6 != nil {
		toSerialize["ipv6"] = o.Ipv6
	}
	if o.GatewayIp != nil {
		toSerialize["gateway_ip"] = o.GatewayIp
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterIpInfo struct {
	value *VcenterVchaClusterIpInfo
	isSet bool
}

func (v NullableVcenterVchaClusterIpInfo) Get() *VcenterVchaClusterIpInfo {
	return v.value
}

func (v *NullableVcenterVchaClusterIpInfo) Set(val *VcenterVchaClusterIpInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterIpInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterIpInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterIpInfo(val *VcenterVchaClusterIpInfo) *NullableVcenterVchaClusterIpInfo {
	return &NullableVcenterVchaClusterIpInfo{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterIpInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterIpInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


