/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCertificateManagementVcenterTlsSpec struct for VcenterCertificateManagementVcenterTlsSpec
type VcenterCertificateManagementVcenterTlsSpec struct {
	// Certificate string in PEM format.
	Cert string `json:"cert"`
	// Private key string in PEM format. If unset the private key from the certificate store will be used. It is required when replacing the certificate with a third party signed certificate.
	Key *string `json:"key,omitempty"`
	// Third party Root CA certificate in PEM format. If unset the new third party root CA certificate will not be added to the trust store. It is required when replacing the certificate with a third party signed certificate if the root certificate of the third party is not already a trusted root.
	RootCert *string `json:"root_cert,omitempty"`
}

// NewVcenterCertificateManagementVcenterTlsSpec instantiates a new VcenterCertificateManagementVcenterTlsSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCertificateManagementVcenterTlsSpec(cert string) *VcenterCertificateManagementVcenterTlsSpec {
	this := VcenterCertificateManagementVcenterTlsSpec{}
	this.Cert = cert
	return &this
}

// NewVcenterCertificateManagementVcenterTlsSpecWithDefaults instantiates a new VcenterCertificateManagementVcenterTlsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCertificateManagementVcenterTlsSpecWithDefaults() *VcenterCertificateManagementVcenterTlsSpec {
	this := VcenterCertificateManagementVcenterTlsSpec{}
	return &this
}

// GetCert returns the Cert field value
func (o *VcenterCertificateManagementVcenterTlsSpec) GetCert() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cert
}

// GetCertOk returns a tuple with the Cert field value
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsSpec) GetCertOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cert, true
}

// SetCert sets field value
func (o *VcenterCertificateManagementVcenterTlsSpec) SetCert(v string) {
	o.Cert = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *VcenterCertificateManagementVcenterTlsSpec) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsSpec) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *VcenterCertificateManagementVcenterTlsSpec) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *VcenterCertificateManagementVcenterTlsSpec) SetKey(v string) {
	o.Key = &v
}

// GetRootCert returns the RootCert field value if set, zero value otherwise.
func (o *VcenterCertificateManagementVcenterTlsSpec) GetRootCert() string {
	if o == nil || o.RootCert == nil {
		var ret string
		return ret
	}
	return *o.RootCert
}

// GetRootCertOk returns a tuple with the RootCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCertificateManagementVcenterTlsSpec) GetRootCertOk() (*string, bool) {
	if o == nil || o.RootCert == nil {
		return nil, false
	}
	return o.RootCert, true
}

// HasRootCert returns a boolean if a field has been set.
func (o *VcenterCertificateManagementVcenterTlsSpec) HasRootCert() bool {
	if o != nil && o.RootCert != nil {
		return true
	}

	return false
}

// SetRootCert gets a reference to the given string and assigns it to the RootCert field.
func (o *VcenterCertificateManagementVcenterTlsSpec) SetRootCert(v string) {
	o.RootCert = &v
}

func (o VcenterCertificateManagementVcenterTlsSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cert"] = o.Cert
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.RootCert != nil {
		toSerialize["root_cert"] = o.RootCert
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCertificateManagementVcenterTlsSpec struct {
	value *VcenterCertificateManagementVcenterTlsSpec
	isSet bool
}

func (v NullableVcenterCertificateManagementVcenterTlsSpec) Get() *VcenterCertificateManagementVcenterTlsSpec {
	return v.value
}

func (v *NullableVcenterCertificateManagementVcenterTlsSpec) Set(val *VcenterCertificateManagementVcenterTlsSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCertificateManagementVcenterTlsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCertificateManagementVcenterTlsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCertificateManagementVcenterTlsSpec(val *VcenterCertificateManagementVcenterTlsSpec) *NullableVcenterCertificateManagementVcenterTlsSpec {
	return &NullableVcenterCertificateManagementVcenterTlsSpec{value: val, isSet: true}
}

func (v NullableVcenterCertificateManagementVcenterTlsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCertificateManagementVcenterTlsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


