/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentQuestionAnswerSpec struct for VcenterDeploymentQuestionAnswerSpec
type VcenterDeploymentQuestionAnswerSpec struct {
	// Id of the question being answered.
	QuestionId string `json:"question_id"`
	// The answer value.
	AnswerVal string `json:"answer_val"`
}

// NewVcenterDeploymentQuestionAnswerSpec instantiates a new VcenterDeploymentQuestionAnswerSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentQuestionAnswerSpec(questionId string, answerVal string) *VcenterDeploymentQuestionAnswerSpec {
	this := VcenterDeploymentQuestionAnswerSpec{}
	this.QuestionId = questionId
	this.AnswerVal = answerVal
	return &this
}

// NewVcenterDeploymentQuestionAnswerSpecWithDefaults instantiates a new VcenterDeploymentQuestionAnswerSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentQuestionAnswerSpecWithDefaults() *VcenterDeploymentQuestionAnswerSpec {
	this := VcenterDeploymentQuestionAnswerSpec{}
	return &this
}

// GetQuestionId returns the QuestionId field value
func (o *VcenterDeploymentQuestionAnswerSpec) GetQuestionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuestionId
}

// GetQuestionIdOk returns a tuple with the QuestionId field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentQuestionAnswerSpec) GetQuestionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.QuestionId, true
}

// SetQuestionId sets field value
func (o *VcenterDeploymentQuestionAnswerSpec) SetQuestionId(v string) {
	o.QuestionId = v
}

// GetAnswerVal returns the AnswerVal field value
func (o *VcenterDeploymentQuestionAnswerSpec) GetAnswerVal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnswerVal
}

// GetAnswerValOk returns a tuple with the AnswerVal field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentQuestionAnswerSpec) GetAnswerValOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AnswerVal, true
}

// SetAnswerVal sets field value
func (o *VcenterDeploymentQuestionAnswerSpec) SetAnswerVal(v string) {
	o.AnswerVal = v
}

func (o VcenterDeploymentQuestionAnswerSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["question_id"] = o.QuestionId
	}
	if true {
		toSerialize["answer_val"] = o.AnswerVal
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentQuestionAnswerSpec struct {
	value *VcenterDeploymentQuestionAnswerSpec
	isSet bool
}

func (v NullableVcenterDeploymentQuestionAnswerSpec) Get() *VcenterDeploymentQuestionAnswerSpec {
	return v.value
}

func (v *NullableVcenterDeploymentQuestionAnswerSpec) Set(val *VcenterDeploymentQuestionAnswerSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentQuestionAnswerSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentQuestionAnswerSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentQuestionAnswerSpec(val *VcenterDeploymentQuestionAnswerSpec) *NullableVcenterDeploymentQuestionAnswerSpec {
	return &NullableVcenterDeploymentQuestionAnswerSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentQuestionAnswerSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentQuestionAnswerSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


