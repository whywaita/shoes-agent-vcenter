/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterGuestCloudConfigurationType The CloudConfiguration.Type enumerated type specifies different types of the cloud configuration.
type VcenterGuestCloudConfigurationType string

// List of vcenter.guest.cloud_configuration.type
const (
	VCENTERGUESTCLOUDCONFIGURATIONTYPE_CLOUDINIT VcenterGuestCloudConfigurationType = "CLOUDINIT"
)

// All allowed values of VcenterGuestCloudConfigurationType enum
var AllowedVcenterGuestCloudConfigurationTypeEnumValues = []VcenterGuestCloudConfigurationType{
	"CLOUDINIT",
}

func (v *VcenterGuestCloudConfigurationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterGuestCloudConfigurationType(value)
	for _, existing := range AllowedVcenterGuestCloudConfigurationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterGuestCloudConfigurationType", value)
}

// NewVcenterGuestCloudConfigurationTypeFromValue returns a pointer to a valid VcenterGuestCloudConfigurationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterGuestCloudConfigurationTypeFromValue(v string) (*VcenterGuestCloudConfigurationType, error) {
	ev := VcenterGuestCloudConfigurationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterGuestCloudConfigurationType: valid values are %v", v, AllowedVcenterGuestCloudConfigurationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterGuestCloudConfigurationType) IsValid() bool {
	for _, existing := range AllowedVcenterGuestCloudConfigurationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.guest.cloud_configuration.type value
func (v VcenterGuestCloudConfigurationType) Ptr() *VcenterGuestCloudConfigurationType {
	return &v
}

type NullableVcenterGuestCloudConfigurationType struct {
	value *VcenterGuestCloudConfigurationType
	isSet bool
}

func (v NullableVcenterGuestCloudConfigurationType) Get() *VcenterGuestCloudConfigurationType {
	return v.value
}

func (v *NullableVcenterGuestCloudConfigurationType) Set(val *VcenterGuestCloudConfigurationType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestCloudConfigurationType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestCloudConfigurationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestCloudConfigurationType(val *VcenterGuestCloudConfigurationType) *NullableVcenterGuestCloudConfigurationType {
	return &NullableVcenterGuestCloudConfigurationType{value: val, isSet: true}
}

func (v NullableVcenterGuestCloudConfigurationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestCloudConfigurationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

