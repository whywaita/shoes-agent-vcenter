/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmGuestOSFamily The GuestOSFamily enumerated type defines the valid guest operating system family types reported by a virtual machine.
type VcenterVmGuestOSFamily string

// List of vcenter.vm.guest_OS_family
const (
	VCENTERVMGUESTOSFAMILY_WINDOWS VcenterVmGuestOSFamily = "WINDOWS"
	VCENTERVMGUESTOSFAMILY_LINUX VcenterVmGuestOSFamily = "LINUX"
	VCENTERVMGUESTOSFAMILY_NETWARE VcenterVmGuestOSFamily = "NETWARE"
	VCENTERVMGUESTOSFAMILY_SOLARIS VcenterVmGuestOSFamily = "SOLARIS"
	VCENTERVMGUESTOSFAMILY_DARWIN VcenterVmGuestOSFamily = "DARWIN"
	VCENTERVMGUESTOSFAMILY_OTHER VcenterVmGuestOSFamily = "OTHER"
)

// All allowed values of VcenterVmGuestOSFamily enum
var AllowedVcenterVmGuestOSFamilyEnumValues = []VcenterVmGuestOSFamily{
	"WINDOWS",
	"LINUX",
	"NETWARE",
	"SOLARIS",
	"DARWIN",
	"OTHER",
}

func (v *VcenterVmGuestOSFamily) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmGuestOSFamily(value)
	for _, existing := range AllowedVcenterVmGuestOSFamilyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmGuestOSFamily", value)
}

// NewVcenterVmGuestOSFamilyFromValue returns a pointer to a valid VcenterVmGuestOSFamily
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmGuestOSFamilyFromValue(v string) (*VcenterVmGuestOSFamily, error) {
	ev := VcenterVmGuestOSFamily(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmGuestOSFamily: valid values are %v", v, AllowedVcenterVmGuestOSFamilyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmGuestOSFamily) IsValid() bool {
	for _, existing := range AllowedVcenterVmGuestOSFamilyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.guest_OS_family value
func (v VcenterVmGuestOSFamily) Ptr() *VcenterVmGuestOSFamily {
	return &v
}

type NullableVcenterVmGuestOSFamily struct {
	value *VcenterVmGuestOSFamily
	isSet bool
}

func (v NullableVcenterVmGuestOSFamily) Get() *VcenterVmGuestOSFamily {
	return v.value
}

func (v *NullableVcenterVmGuestOSFamily) Set(val *VcenterVmGuestOSFamily) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestOSFamily) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestOSFamily) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestOSFamily(val *VcenterVmGuestOSFamily) *NullableVcenterVmGuestOSFamily {
	return &NullableVcenterVmGuestOSFamily{value: val, isSet: true}
}

func (v NullableVcenterVmGuestOSFamily) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestOSFamily) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

