/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentNotifications struct for VcenterDeploymentNotifications
type VcenterDeploymentNotifications struct {
	// Info notification messages reported. Only set if an info was reported by the task.
	Info *[]VcenterDeploymentNotification `json:"info,omitempty"`
	// Warning notification messages reported. Only set if an warning was reported by the task.
	Warnings *[]VcenterDeploymentNotification `json:"warnings,omitempty"`
	// Error notification messages reported. Only set if an error was reported by the task.
	Errors *[]VcenterDeploymentNotification `json:"errors,omitempty"`
}

// NewVcenterDeploymentNotifications instantiates a new VcenterDeploymentNotifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentNotifications() *VcenterDeploymentNotifications {
	this := VcenterDeploymentNotifications{}
	return &this
}

// NewVcenterDeploymentNotificationsWithDefaults instantiates a new VcenterDeploymentNotifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentNotificationsWithDefaults() *VcenterDeploymentNotifications {
	this := VcenterDeploymentNotifications{}
	return &this
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *VcenterDeploymentNotifications) GetInfo() []VcenterDeploymentNotification {
	if o == nil || o.Info == nil {
		var ret []VcenterDeploymentNotification
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentNotifications) GetInfoOk() (*[]VcenterDeploymentNotification, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *VcenterDeploymentNotifications) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given []VcenterDeploymentNotification and assigns it to the Info field.
func (o *VcenterDeploymentNotifications) SetInfo(v []VcenterDeploymentNotification) {
	o.Info = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *VcenterDeploymentNotifications) GetWarnings() []VcenterDeploymentNotification {
	if o == nil || o.Warnings == nil {
		var ret []VcenterDeploymentNotification
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentNotifications) GetWarningsOk() (*[]VcenterDeploymentNotification, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *VcenterDeploymentNotifications) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []VcenterDeploymentNotification and assigns it to the Warnings field.
func (o *VcenterDeploymentNotifications) SetWarnings(v []VcenterDeploymentNotification) {
	o.Warnings = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *VcenterDeploymentNotifications) GetErrors() []VcenterDeploymentNotification {
	if o == nil || o.Errors == nil {
		var ret []VcenterDeploymentNotification
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentNotifications) GetErrorsOk() (*[]VcenterDeploymentNotification, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *VcenterDeploymentNotifications) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []VcenterDeploymentNotification and assigns it to the Errors field.
func (o *VcenterDeploymentNotifications) SetErrors(v []VcenterDeploymentNotification) {
	o.Errors = &v
}

func (o VcenterDeploymentNotifications) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentNotifications struct {
	value *VcenterDeploymentNotifications
	isSet bool
}

func (v NullableVcenterDeploymentNotifications) Get() *VcenterDeploymentNotifications {
	return v.value
}

func (v *NullableVcenterDeploymentNotifications) Set(val *VcenterDeploymentNotifications) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentNotifications(val *VcenterDeploymentNotifications) *NullableVcenterDeploymentNotifications {
	return &NullableVcenterDeploymentNotifications{value: val, isSet: true}
}

func (v NullableVcenterDeploymentNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


