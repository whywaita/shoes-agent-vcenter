/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespacesUserInstancesSummary struct for VcenterNamespacesUserInstancesSummary
type VcenterNamespacesUserInstancesSummary struct {
	// Identifier of the namespace. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.
	Namespace string `json:"namespace"`
	// IP address or FQDN of the API endpoint for the given namespace.
	MasterHost string `json:"master_host"`
}

// NewVcenterNamespacesUserInstancesSummary instantiates a new VcenterNamespacesUserInstancesSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespacesUserInstancesSummary(namespace string, masterHost string) *VcenterNamespacesUserInstancesSummary {
	this := VcenterNamespacesUserInstancesSummary{}
	this.Namespace = namespace
	this.MasterHost = masterHost
	return &this
}

// NewVcenterNamespacesUserInstancesSummaryWithDefaults instantiates a new VcenterNamespacesUserInstancesSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespacesUserInstancesSummaryWithDefaults() *VcenterNamespacesUserInstancesSummary {
	this := VcenterNamespacesUserInstancesSummary{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *VcenterNamespacesUserInstancesSummary) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesUserInstancesSummary) GetNamespaceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *VcenterNamespacesUserInstancesSummary) SetNamespace(v string) {
	o.Namespace = v
}

// GetMasterHost returns the MasterHost field value
func (o *VcenterNamespacesUserInstancesSummary) GetMasterHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MasterHost
}

// GetMasterHostOk returns a tuple with the MasterHost field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesUserInstancesSummary) GetMasterHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MasterHost, true
}

// SetMasterHost sets field value
func (o *VcenterNamespacesUserInstancesSummary) SetMasterHost(v string) {
	o.MasterHost = v
}

func (o VcenterNamespacesUserInstancesSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["namespace"] = o.Namespace
	}
	if true {
		toSerialize["master_host"] = o.MasterHost
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespacesUserInstancesSummary struct {
	value *VcenterNamespacesUserInstancesSummary
	isSet bool
}

func (v NullableVcenterNamespacesUserInstancesSummary) Get() *VcenterNamespacesUserInstancesSummary {
	return v.value
}

func (v *NullableVcenterNamespacesUserInstancesSummary) Set(val *VcenterNamespacesUserInstancesSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesUserInstancesSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesUserInstancesSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesUserInstancesSummary(val *VcenterNamespacesUserInstancesSummary) *NullableVcenterNamespacesUserInstancesSummary {
	return &NullableVcenterNamespacesUserInstancesSummary{value: val, isSet: true}
}

func (v NullableVcenterNamespacesUserInstancesSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesUserInstancesSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


