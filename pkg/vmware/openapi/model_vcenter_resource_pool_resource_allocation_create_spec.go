/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterResourcePoolResourceAllocationCreateSpec struct for VcenterResourcePoolResourceAllocationCreateSpec
type VcenterResourcePoolResourceAllocationCreateSpec struct {
	// Amount of resource that is guaranteed available to a resource pool. Reserved resources are not wasted if they are not used. If the utilization is less than the reservation, the resources can be utilized by other running virtual machines. Units are MB fo memory, and MHz for CPU. If unset or empty, ResourcePool.ResourceAllocationCreateSpec.reservation will be set to 0.
	Reservation *int64 `json:"reservation,omitempty"`
	// In a resource pool with an expandable reservation, the reservation can grow beyond the specified value, if the parent resource pool has unreserved resources. A non-expandable reservation is called a fixed reservation. If unset or empty, ResourcePool.ResourceAllocationCreateSpec.expandable-reservation will be set to true.
	ExpandableReservation *bool `json:"expandable_reservation,omitempty"`
	// The utilization of a resource pool will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of resource pools independent of available resources. If set to -1, then there is no fixed limit on resource usage (only bounded by available resources and shares). Units are MB for memory, and MHz for CPU. If unset or empty, ResourcePool.ResourceAllocationCreateSpec.limit will be set to -1.
	Limit *int64 `json:"limit,omitempty"`
	Shares *VcenterResourcePoolSharesInfo `json:"shares,omitempty"`
}

// NewVcenterResourcePoolResourceAllocationCreateSpec instantiates a new VcenterResourcePoolResourceAllocationCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterResourcePoolResourceAllocationCreateSpec() *VcenterResourcePoolResourceAllocationCreateSpec {
	this := VcenterResourcePoolResourceAllocationCreateSpec{}
	return &this
}

// NewVcenterResourcePoolResourceAllocationCreateSpecWithDefaults instantiates a new VcenterResourcePoolResourceAllocationCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterResourcePoolResourceAllocationCreateSpecWithDefaults() *VcenterResourcePoolResourceAllocationCreateSpec {
	this := VcenterResourcePoolResourceAllocationCreateSpec{}
	return &this
}

// GetReservation returns the Reservation field value if set, zero value otherwise.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) GetReservation() int64 {
	if o == nil || o.Reservation == nil {
		var ret int64
		return ret
	}
	return *o.Reservation
}

// GetReservationOk returns a tuple with the Reservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) GetReservationOk() (*int64, bool) {
	if o == nil || o.Reservation == nil {
		return nil, false
	}
	return o.Reservation, true
}

// HasReservation returns a boolean if a field has been set.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) HasReservation() bool {
	if o != nil && o.Reservation != nil {
		return true
	}

	return false
}

// SetReservation gets a reference to the given int64 and assigns it to the Reservation field.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) SetReservation(v int64) {
	o.Reservation = &v
}

// GetExpandableReservation returns the ExpandableReservation field value if set, zero value otherwise.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) GetExpandableReservation() bool {
	if o == nil || o.ExpandableReservation == nil {
		var ret bool
		return ret
	}
	return *o.ExpandableReservation
}

// GetExpandableReservationOk returns a tuple with the ExpandableReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) GetExpandableReservationOk() (*bool, bool) {
	if o == nil || o.ExpandableReservation == nil {
		return nil, false
	}
	return o.ExpandableReservation, true
}

// HasExpandableReservation returns a boolean if a field has been set.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) HasExpandableReservation() bool {
	if o != nil && o.ExpandableReservation != nil {
		return true
	}

	return false
}

// SetExpandableReservation gets a reference to the given bool and assigns it to the ExpandableReservation field.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) SetExpandableReservation(v bool) {
	o.ExpandableReservation = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) GetLimit() int64 {
	if o == nil || o.Limit == nil {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) GetLimitOk() (*int64, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) SetLimit(v int64) {
	o.Limit = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) GetShares() VcenterResourcePoolSharesInfo {
	if o == nil || o.Shares == nil {
		var ret VcenterResourcePoolSharesInfo
		return ret
	}
	return *o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) GetSharesOk() (*VcenterResourcePoolSharesInfo, bool) {
	if o == nil || o.Shares == nil {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) HasShares() bool {
	if o != nil && o.Shares != nil {
		return true
	}

	return false
}

// SetShares gets a reference to the given VcenterResourcePoolSharesInfo and assigns it to the Shares field.
func (o *VcenterResourcePoolResourceAllocationCreateSpec) SetShares(v VcenterResourcePoolSharesInfo) {
	o.Shares = &v
}

func (o VcenterResourcePoolResourceAllocationCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reservation != nil {
		toSerialize["reservation"] = o.Reservation
	}
	if o.ExpandableReservation != nil {
		toSerialize["expandable_reservation"] = o.ExpandableReservation
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Shares != nil {
		toSerialize["shares"] = o.Shares
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterResourcePoolResourceAllocationCreateSpec struct {
	value *VcenterResourcePoolResourceAllocationCreateSpec
	isSet bool
}

func (v NullableVcenterResourcePoolResourceAllocationCreateSpec) Get() *VcenterResourcePoolResourceAllocationCreateSpec {
	return v.value
}

func (v *NullableVcenterResourcePoolResourceAllocationCreateSpec) Set(val *VcenterResourcePoolResourceAllocationCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterResourcePoolResourceAllocationCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterResourcePoolResourceAllocationCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterResourcePoolResourceAllocationCreateSpec(val *VcenterResourcePoolResourceAllocationCreateSpec) *NullableVcenterResourcePoolResourceAllocationCreateSpec {
	return &NullableVcenterResourcePoolResourceAllocationCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterResourcePoolResourceAllocationCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterResourcePoolResourceAllocationCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


