/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMStoragePolicySpec struct for VcenterVMStoragePolicySpec
type VcenterVMStoragePolicySpec struct {
	// Identifier of the storage policy which should be associated with the virtual machine. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.StoragePolicy.
	Policy string `json:"policy"`
}

// NewVcenterVMStoragePolicySpec instantiates a new VcenterVMStoragePolicySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMStoragePolicySpec(policy string) *VcenterVMStoragePolicySpec {
	this := VcenterVMStoragePolicySpec{}
	this.Policy = policy
	return &this
}

// NewVcenterVMStoragePolicySpecWithDefaults instantiates a new VcenterVMStoragePolicySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMStoragePolicySpecWithDefaults() *VcenterVMStoragePolicySpec {
	this := VcenterVMStoragePolicySpec{}
	return &this
}

// GetPolicy returns the Policy field value
func (o *VcenterVMStoragePolicySpec) GetPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *VcenterVMStoragePolicySpec) GetPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Policy, true
}

// SetPolicy sets field value
func (o *VcenterVMStoragePolicySpec) SetPolicy(v string) {
	o.Policy = v
}

func (o VcenterVMStoragePolicySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["policy"] = o.Policy
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMStoragePolicySpec struct {
	value *VcenterVMStoragePolicySpec
	isSet bool
}

func (v NullableVcenterVMStoragePolicySpec) Get() *VcenterVMStoragePolicySpec {
	return v.value
}

func (v *NullableVcenterVMStoragePolicySpec) Set(val *VcenterVMStoragePolicySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMStoragePolicySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMStoragePolicySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMStoragePolicySpec(val *VcenterVMStoragePolicySpec) *NullableVcenterVMStoragePolicySpec {
	return &NullableVcenterVMStoragePolicySpec{value: val, isSet: true}
}

func (v NullableVcenterVMStoragePolicySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMStoragePolicySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


