/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterContentRegistriesHarborGarbageCollection struct for VcenterContentRegistriesHarborGarbageCollection
type VcenterContentRegistriesHarborGarbageCollection struct {
	Type VcenterContentRegistriesRecurrence `json:"type"`
	DayOfWeek *VcenterContentRegistriesDayOfWeek `json:"day_of_week,omitempty"`
	// Hour at which garbage collection should run.
	Hour *int64 `json:"hour,omitempty"`
	// Minute at which garbage collection should run.
	Minute *int64 `json:"minute,omitempty"`
}

// NewVcenterContentRegistriesHarborGarbageCollection instantiates a new VcenterContentRegistriesHarborGarbageCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterContentRegistriesHarborGarbageCollection(type_ VcenterContentRegistriesRecurrence) *VcenterContentRegistriesHarborGarbageCollection {
	this := VcenterContentRegistriesHarborGarbageCollection{}
	this.Type = type_
	return &this
}

// NewVcenterContentRegistriesHarborGarbageCollectionWithDefaults instantiates a new VcenterContentRegistriesHarborGarbageCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterContentRegistriesHarborGarbageCollectionWithDefaults() *VcenterContentRegistriesHarborGarbageCollection {
	this := VcenterContentRegistriesHarborGarbageCollection{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterContentRegistriesHarborGarbageCollection) GetType() VcenterContentRegistriesRecurrence {
	if o == nil {
		var ret VcenterContentRegistriesRecurrence
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborGarbageCollection) GetTypeOk() (*VcenterContentRegistriesRecurrence, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterContentRegistriesHarborGarbageCollection) SetType(v VcenterContentRegistriesRecurrence) {
	o.Type = v
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *VcenterContentRegistriesHarborGarbageCollection) GetDayOfWeek() VcenterContentRegistriesDayOfWeek {
	if o == nil || o.DayOfWeek == nil {
		var ret VcenterContentRegistriesDayOfWeek
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborGarbageCollection) GetDayOfWeekOk() (*VcenterContentRegistriesDayOfWeek, bool) {
	if o == nil || o.DayOfWeek == nil {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *VcenterContentRegistriesHarborGarbageCollection) HasDayOfWeek() bool {
	if o != nil && o.DayOfWeek != nil {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given VcenterContentRegistriesDayOfWeek and assigns it to the DayOfWeek field.
func (o *VcenterContentRegistriesHarborGarbageCollection) SetDayOfWeek(v VcenterContentRegistriesDayOfWeek) {
	o.DayOfWeek = &v
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *VcenterContentRegistriesHarborGarbageCollection) GetHour() int64 {
	if o == nil || o.Hour == nil {
		var ret int64
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborGarbageCollection) GetHourOk() (*int64, bool) {
	if o == nil || o.Hour == nil {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *VcenterContentRegistriesHarborGarbageCollection) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given int64 and assigns it to the Hour field.
func (o *VcenterContentRegistriesHarborGarbageCollection) SetHour(v int64) {
	o.Hour = &v
}

// GetMinute returns the Minute field value if set, zero value otherwise.
func (o *VcenterContentRegistriesHarborGarbageCollection) GetMinute() int64 {
	if o == nil || o.Minute == nil {
		var ret int64
		return ret
	}
	return *o.Minute
}

// GetMinuteOk returns a tuple with the Minute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterContentRegistriesHarborGarbageCollection) GetMinuteOk() (*int64, bool) {
	if o == nil || o.Minute == nil {
		return nil, false
	}
	return o.Minute, true
}

// HasMinute returns a boolean if a field has been set.
func (o *VcenterContentRegistriesHarborGarbageCollection) HasMinute() bool {
	if o != nil && o.Minute != nil {
		return true
	}

	return false
}

// SetMinute gets a reference to the given int64 and assigns it to the Minute field.
func (o *VcenterContentRegistriesHarborGarbageCollection) SetMinute(v int64) {
	o.Minute = &v
}

func (o VcenterContentRegistriesHarborGarbageCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.DayOfWeek != nil {
		toSerialize["day_of_week"] = o.DayOfWeek
	}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	if o.Minute != nil {
		toSerialize["minute"] = o.Minute
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterContentRegistriesHarborGarbageCollection struct {
	value *VcenterContentRegistriesHarborGarbageCollection
	isSet bool
}

func (v NullableVcenterContentRegistriesHarborGarbageCollection) Get() *VcenterContentRegistriesHarborGarbageCollection {
	return v.value
}

func (v *NullableVcenterContentRegistriesHarborGarbageCollection) Set(val *VcenterContentRegistriesHarborGarbageCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterContentRegistriesHarborGarbageCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterContentRegistriesHarborGarbageCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterContentRegistriesHarborGarbageCollection(val *VcenterContentRegistriesHarborGarbageCollection) *NullableVcenterContentRegistriesHarborGarbageCollection {
	return &NullableVcenterContentRegistriesHarborGarbageCollection{value: val, isSet: true}
}

func (v NullableVcenterContentRegistriesHarborGarbageCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterContentRegistriesHarborGarbageCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


