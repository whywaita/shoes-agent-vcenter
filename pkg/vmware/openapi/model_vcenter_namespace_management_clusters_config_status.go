/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementClustersConfigStatus The Clusters.ConfigStatus enumerated type describes the status of reaching the desired state configuration for the cluster.
type VcenterNamespaceManagementClustersConfigStatus string

// List of VcenterNamespaceManagementClustersConfigStatus
const (
	VCENTERNAMESPACEMANAGEMENTCLUSTERSCONFIGSTATUS_CONFIGURING VcenterNamespaceManagementClustersConfigStatus = "CONFIGURING"
	VCENTERNAMESPACEMANAGEMENTCLUSTERSCONFIGSTATUS_REMOVING VcenterNamespaceManagementClustersConfigStatus = "REMOVING"
	VCENTERNAMESPACEMANAGEMENTCLUSTERSCONFIGSTATUS_RUNNING VcenterNamespaceManagementClustersConfigStatus = "RUNNING"
	VCENTERNAMESPACEMANAGEMENTCLUSTERSCONFIGSTATUS_ERROR VcenterNamespaceManagementClustersConfigStatus = "ERROR"
)

// All allowed values of VcenterNamespaceManagementClustersConfigStatus enum
var AllowedVcenterNamespaceManagementClustersConfigStatusEnumValues = []VcenterNamespaceManagementClustersConfigStatus{
	"CONFIGURING",
	"REMOVING",
	"RUNNING",
	"ERROR",
}

func (v *VcenterNamespaceManagementClustersConfigStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementClustersConfigStatus(value)
	for _, existing := range AllowedVcenterNamespaceManagementClustersConfigStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementClustersConfigStatus", value)
}

// NewVcenterNamespaceManagementClustersConfigStatusFromValue returns a pointer to a valid VcenterNamespaceManagementClustersConfigStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementClustersConfigStatusFromValue(v string) (*VcenterNamespaceManagementClustersConfigStatus, error) {
	ev := VcenterNamespaceManagementClustersConfigStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementClustersConfigStatus: valid values are %v", v, AllowedVcenterNamespaceManagementClustersConfigStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementClustersConfigStatus) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementClustersConfigStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementClustersConfigStatus value
func (v VcenterNamespaceManagementClustersConfigStatus) Ptr() *VcenterNamespaceManagementClustersConfigStatus {
	return &v
}

type NullableVcenterNamespaceManagementClustersConfigStatus struct {
	value *VcenterNamespaceManagementClustersConfigStatus
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersConfigStatus) Get() *VcenterNamespaceManagementClustersConfigStatus {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersConfigStatus) Set(val *VcenterNamespaceManagementClustersConfigStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersConfigStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersConfigStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersConfigStatus(val *VcenterNamespaceManagementClustersConfigStatus) *NullableVcenterNamespaceManagementClustersConfigStatus {
	return &NullableVcenterNamespaceManagementClustersConfigStatus{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersConfigStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersConfigStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

