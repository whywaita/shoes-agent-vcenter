/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSoftwareClustersUpgradeSpec struct for VcenterNamespaceManagementSoftwareClustersUpgradeSpec
type VcenterNamespaceManagementSoftwareClustersUpgradeSpec struct {
	// Version number the cluster is going to be upgraded to.
	DesiredVersion string `json:"desired_version"`
	// If true, the upgrade workflow will ignore any pre-check warnings and proceed with the upgrade. If unset, the upgrade workflow will not ignore pre-check warnings and fail the upgrade. It is equivalent to setting the value to false. The workflow adopts a conservative approach of failing the upgrade if unset to solely let the user decide whether to force the upgrade despite the warnings.
	IgnorePrecheckWarnings *bool `json:"ignore_precheck_warnings,omitempty"`
}

// NewVcenterNamespaceManagementSoftwareClustersUpgradeSpec instantiates a new VcenterNamespaceManagementSoftwareClustersUpgradeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSoftwareClustersUpgradeSpec(desiredVersion string) *VcenterNamespaceManagementSoftwareClustersUpgradeSpec {
	this := VcenterNamespaceManagementSoftwareClustersUpgradeSpec{}
	this.DesiredVersion = desiredVersion
	return &this
}

// NewVcenterNamespaceManagementSoftwareClustersUpgradeSpecWithDefaults instantiates a new VcenterNamespaceManagementSoftwareClustersUpgradeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSoftwareClustersUpgradeSpecWithDefaults() *VcenterNamespaceManagementSoftwareClustersUpgradeSpec {
	this := VcenterNamespaceManagementSoftwareClustersUpgradeSpec{}
	return &this
}

// GetDesiredVersion returns the DesiredVersion field value
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeSpec) GetDesiredVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DesiredVersion
}

// GetDesiredVersionOk returns a tuple with the DesiredVersion field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeSpec) GetDesiredVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DesiredVersion, true
}

// SetDesiredVersion sets field value
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeSpec) SetDesiredVersion(v string) {
	o.DesiredVersion = v
}

// GetIgnorePrecheckWarnings returns the IgnorePrecheckWarnings field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeSpec) GetIgnorePrecheckWarnings() bool {
	if o == nil || o.IgnorePrecheckWarnings == nil {
		var ret bool
		return ret
	}
	return *o.IgnorePrecheckWarnings
}

// GetIgnorePrecheckWarningsOk returns a tuple with the IgnorePrecheckWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeSpec) GetIgnorePrecheckWarningsOk() (*bool, bool) {
	if o == nil || o.IgnorePrecheckWarnings == nil {
		return nil, false
	}
	return o.IgnorePrecheckWarnings, true
}

// HasIgnorePrecheckWarnings returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeSpec) HasIgnorePrecheckWarnings() bool {
	if o != nil && o.IgnorePrecheckWarnings != nil {
		return true
	}

	return false
}

// SetIgnorePrecheckWarnings gets a reference to the given bool and assigns it to the IgnorePrecheckWarnings field.
func (o *VcenterNamespaceManagementSoftwareClustersUpgradeSpec) SetIgnorePrecheckWarnings(v bool) {
	o.IgnorePrecheckWarnings = &v
}

func (o VcenterNamespaceManagementSoftwareClustersUpgradeSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["desired_version"] = o.DesiredVersion
	}
	if o.IgnorePrecheckWarnings != nil {
		toSerialize["ignore_precheck_warnings"] = o.IgnorePrecheckWarnings
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSoftwareClustersUpgradeSpec struct {
	value *VcenterNamespaceManagementSoftwareClustersUpgradeSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementSoftwareClustersUpgradeSpec) Get() *VcenterNamespaceManagementSoftwareClustersUpgradeSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersUpgradeSpec) Set(val *VcenterNamespaceManagementSoftwareClustersUpgradeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSoftwareClustersUpgradeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersUpgradeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSoftwareClustersUpgradeSpec(val *VcenterNamespaceManagementSoftwareClustersUpgradeSpec) *NullableVcenterNamespaceManagementSoftwareClustersUpgradeSpec {
	return &NullableVcenterNamespaceManagementSoftwareClustersUpgradeSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSoftwareClustersUpgradeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSoftwareClustersUpgradeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


