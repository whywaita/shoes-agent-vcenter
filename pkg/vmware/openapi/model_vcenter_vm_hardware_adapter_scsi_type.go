/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareAdapterScsiType The Scsi.Type enumerated type defines the valid emulation types for a virtual SCSI adapter.
type VcenterVmHardwareAdapterScsiType string

// List of vcenter.vm.hardware.adapter.scsi.type
const (
	VCENTERVMHARDWAREADAPTERSCSITYPE_BUSLOGIC VcenterVmHardwareAdapterScsiType = "BUSLOGIC"
	VCENTERVMHARDWAREADAPTERSCSITYPE_LSILOGIC VcenterVmHardwareAdapterScsiType = "LSILOGIC"
	VCENTERVMHARDWAREADAPTERSCSITYPE_LSILOGICSAS VcenterVmHardwareAdapterScsiType = "LSILOGICSAS"
	VCENTERVMHARDWAREADAPTERSCSITYPE_PVSCSI VcenterVmHardwareAdapterScsiType = "PVSCSI"
)

// All allowed values of VcenterVmHardwareAdapterScsiType enum
var AllowedVcenterVmHardwareAdapterScsiTypeEnumValues = []VcenterVmHardwareAdapterScsiType{
	"BUSLOGIC",
	"LSILOGIC",
	"LSILOGICSAS",
	"PVSCSI",
}

func (v *VcenterVmHardwareAdapterScsiType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareAdapterScsiType(value)
	for _, existing := range AllowedVcenterVmHardwareAdapterScsiTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareAdapterScsiType", value)
}

// NewVcenterVmHardwareAdapterScsiTypeFromValue returns a pointer to a valid VcenterVmHardwareAdapterScsiType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareAdapterScsiTypeFromValue(v string) (*VcenterVmHardwareAdapterScsiType, error) {
	ev := VcenterVmHardwareAdapterScsiType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareAdapterScsiType: valid values are %v", v, AllowedVcenterVmHardwareAdapterScsiTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareAdapterScsiType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareAdapterScsiTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.adapter.scsi.type value
func (v VcenterVmHardwareAdapterScsiType) Ptr() *VcenterVmHardwareAdapterScsiType {
	return &v
}

type NullableVcenterVmHardwareAdapterScsiType struct {
	value *VcenterVmHardwareAdapterScsiType
	isSet bool
}

func (v NullableVcenterVmHardwareAdapterScsiType) Get() *VcenterVmHardwareAdapterScsiType {
	return v.value
}

func (v *NullableVcenterVmHardwareAdapterScsiType) Set(val *VcenterVmHardwareAdapterScsiType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareAdapterScsiType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareAdapterScsiType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareAdapterScsiType(val *VcenterVmHardwareAdapterScsiType) *NullableVcenterVmHardwareAdapterScsiType {
	return &NullableVcenterVmHardwareAdapterScsiType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareAdapterScsiType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareAdapterScsiType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

