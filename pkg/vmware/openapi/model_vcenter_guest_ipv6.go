/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestIpv6 struct for VcenterGuestIpv6
type VcenterGuestIpv6 struct {
	Type VcenterGuestIpv6Type `json:"type"`
	// IPv6 address This field is optional and it is only relevant when the value of Ipv6.type is STATIC.
	Ipv6 *[]VcenterGuestIpv6Address `json:"ipv6,omitempty"`
	// gateways for the IPv6 address. If unset, no gateways are set.
	Gateways *[]string `json:"gateways,omitempty"`
}

// NewVcenterGuestIpv6 instantiates a new VcenterGuestIpv6 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestIpv6(type_ VcenterGuestIpv6Type) *VcenterGuestIpv6 {
	this := VcenterGuestIpv6{}
	this.Type = type_
	return &this
}

// NewVcenterGuestIpv6WithDefaults instantiates a new VcenterGuestIpv6 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestIpv6WithDefaults() *VcenterGuestIpv6 {
	this := VcenterGuestIpv6{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterGuestIpv6) GetType() VcenterGuestIpv6Type {
	if o == nil {
		var ret VcenterGuestIpv6Type
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterGuestIpv6) GetTypeOk() (*VcenterGuestIpv6Type, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterGuestIpv6) SetType(v VcenterGuestIpv6Type) {
	o.Type = v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *VcenterGuestIpv6) GetIpv6() []VcenterGuestIpv6Address {
	if o == nil || o.Ipv6 == nil {
		var ret []VcenterGuestIpv6Address
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestIpv6) GetIpv6Ok() (*[]VcenterGuestIpv6Address, bool) {
	if o == nil || o.Ipv6 == nil {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *VcenterGuestIpv6) HasIpv6() bool {
	if o != nil && o.Ipv6 != nil {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given []VcenterGuestIpv6Address and assigns it to the Ipv6 field.
func (o *VcenterGuestIpv6) SetIpv6(v []VcenterGuestIpv6Address) {
	o.Ipv6 = &v
}

// GetGateways returns the Gateways field value if set, zero value otherwise.
func (o *VcenterGuestIpv6) GetGateways() []string {
	if o == nil || o.Gateways == nil {
		var ret []string
		return ret
	}
	return *o.Gateways
}

// GetGatewaysOk returns a tuple with the Gateways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestIpv6) GetGatewaysOk() (*[]string, bool) {
	if o == nil || o.Gateways == nil {
		return nil, false
	}
	return o.Gateways, true
}

// HasGateways returns a boolean if a field has been set.
func (o *VcenterGuestIpv6) HasGateways() bool {
	if o != nil && o.Gateways != nil {
		return true
	}

	return false
}

// SetGateways gets a reference to the given []string and assigns it to the Gateways field.
func (o *VcenterGuestIpv6) SetGateways(v []string) {
	o.Gateways = &v
}

func (o VcenterGuestIpv6) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Ipv6 != nil {
		toSerialize["ipv6"] = o.Ipv6
	}
	if o.Gateways != nil {
		toSerialize["gateways"] = o.Gateways
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestIpv6 struct {
	value *VcenterGuestIpv6
	isSet bool
}

func (v NullableVcenterGuestIpv6) Get() *VcenterGuestIpv6 {
	return v.value
}

func (v *NullableVcenterGuestIpv6) Set(val *VcenterGuestIpv6) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestIpv6) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestIpv6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestIpv6(val *VcenterGuestIpv6) *NullableVcenterGuestIpv6 {
	return &NullableVcenterGuestIpv6{value: val, isSet: true}
}

func (v NullableVcenterGuestIpv6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestIpv6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


