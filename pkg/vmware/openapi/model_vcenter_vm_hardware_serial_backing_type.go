/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareSerialBackingType The Serial.BackingType enumerated type defines the valid backing types for a virtual serial port.
type VcenterVmHardwareSerialBackingType string

// List of vcenter.vm.hardware.serial.backing_type
const (
	VCENTERVMHARDWARESERIALBACKINGTYPE_FILE VcenterVmHardwareSerialBackingType = "FILE"
	VCENTERVMHARDWARESERIALBACKINGTYPE_HOST_DEVICE VcenterVmHardwareSerialBackingType = "HOST_DEVICE"
	VCENTERVMHARDWARESERIALBACKINGTYPE_PIPE_SERVER VcenterVmHardwareSerialBackingType = "PIPE_SERVER"
	VCENTERVMHARDWARESERIALBACKINGTYPE_PIPE_CLIENT VcenterVmHardwareSerialBackingType = "PIPE_CLIENT"
	VCENTERVMHARDWARESERIALBACKINGTYPE_NETWORK_SERVER VcenterVmHardwareSerialBackingType = "NETWORK_SERVER"
	VCENTERVMHARDWARESERIALBACKINGTYPE_NETWORK_CLIENT VcenterVmHardwareSerialBackingType = "NETWORK_CLIENT"
)

// All allowed values of VcenterVmHardwareSerialBackingType enum
var AllowedVcenterVmHardwareSerialBackingTypeEnumValues = []VcenterVmHardwareSerialBackingType{
	"FILE",
	"HOST_DEVICE",
	"PIPE_SERVER",
	"PIPE_CLIENT",
	"NETWORK_SERVER",
	"NETWORK_CLIENT",
}

func (v *VcenterVmHardwareSerialBackingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareSerialBackingType(value)
	for _, existing := range AllowedVcenterVmHardwareSerialBackingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareSerialBackingType", value)
}

// NewVcenterVmHardwareSerialBackingTypeFromValue returns a pointer to a valid VcenterVmHardwareSerialBackingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareSerialBackingTypeFromValue(v string) (*VcenterVmHardwareSerialBackingType, error) {
	ev := VcenterVmHardwareSerialBackingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareSerialBackingType: valid values are %v", v, AllowedVcenterVmHardwareSerialBackingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareSerialBackingType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareSerialBackingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.serial.backing_type value
func (v VcenterVmHardwareSerialBackingType) Ptr() *VcenterVmHardwareSerialBackingType {
	return &v
}

type NullableVcenterVmHardwareSerialBackingType struct {
	value *VcenterVmHardwareSerialBackingType
	isSet bool
}

func (v NullableVcenterVmHardwareSerialBackingType) Get() *VcenterVmHardwareSerialBackingType {
	return v.value
}

func (v *NullableVcenterVmHardwareSerialBackingType) Set(val *VcenterVmHardwareSerialBackingType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareSerialBackingType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareSerialBackingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareSerialBackingType(val *VcenterVmHardwareSerialBackingType) *NullableVcenterVmHardwareSerialBackingType {
	return &NullableVcenterVmHardwareSerialBackingType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareSerialBackingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareSerialBackingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

