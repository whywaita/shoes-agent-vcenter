/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVchaClusterClusterMode The Cluster.ClusterMode enumerated type defines the possible modes for a VCHA Cluster.
type VcenterVchaClusterClusterMode string

// List of vcenter.vcha.cluster.cluster_mode
const (
	VCENTERVCHACLUSTERCLUSTERMODE_ENABLED VcenterVchaClusterClusterMode = "ENABLED"
	VCENTERVCHACLUSTERCLUSTERMODE_DISABLED VcenterVchaClusterClusterMode = "DISABLED"
	VCENTERVCHACLUSTERCLUSTERMODE_MAINTENANCE VcenterVchaClusterClusterMode = "MAINTENANCE"
)

// All allowed values of VcenterVchaClusterClusterMode enum
var AllowedVcenterVchaClusterClusterModeEnumValues = []VcenterVchaClusterClusterMode{
	"ENABLED",
	"DISABLED",
	"MAINTENANCE",
}

func (v *VcenterVchaClusterClusterMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVchaClusterClusterMode(value)
	for _, existing := range AllowedVcenterVchaClusterClusterModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVchaClusterClusterMode", value)
}

// NewVcenterVchaClusterClusterModeFromValue returns a pointer to a valid VcenterVchaClusterClusterMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVchaClusterClusterModeFromValue(v string) (*VcenterVchaClusterClusterMode, error) {
	ev := VcenterVchaClusterClusterMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVchaClusterClusterMode: valid values are %v", v, AllowedVcenterVchaClusterClusterModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVchaClusterClusterMode) IsValid() bool {
	for _, existing := range AllowedVcenterVchaClusterClusterModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vcha.cluster.cluster_mode value
func (v VcenterVchaClusterClusterMode) Ptr() *VcenterVchaClusterClusterMode {
	return &v
}

type NullableVcenterVchaClusterClusterMode struct {
	value *VcenterVchaClusterClusterMode
	isSet bool
}

func (v NullableVcenterVchaClusterClusterMode) Get() *VcenterVchaClusterClusterMode {
	return v.value
}

func (v *NullableVcenterVchaClusterClusterMode) Set(val *VcenterVchaClusterClusterMode) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterClusterMode) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterClusterMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterClusterMode(val *VcenterVchaClusterClusterMode) *NullableVcenterVchaClusterClusterMode {
	return &NullableVcenterVchaClusterClusterMode{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterClusterMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterClusterMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

