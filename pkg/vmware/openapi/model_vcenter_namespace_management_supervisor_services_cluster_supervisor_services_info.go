/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo struct for VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo
type VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo struct {
	// The desired version of this Supervisor Service.
	DesiredVersion string `json:"desired_version"`
	// Identifier of the namespace to allocate the Supervisor Service's operators. If unset, there is an error when creating the service namespace or the namespace has not been created yet. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespaces.Instance. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespaces.Instance.
	ServiceNamespace *string `json:"service_namespace,omitempty"`
	ConfigStatus VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus `json:"config_status"`
	// Current set of messages associated with the Supervisor Service on the vSphere Supervisor cluster.
	Messages []VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessage `json:"messages"`
	// The current version for the Supervisor Service. If unset, there is no version installed for the Supervisor Service.
	CurrentVersion *string `json:"current_version,omitempty"`
	// A human readable name of the Supervisor Service.
	DisplayName string `json:"display_name"`
	// A human readable description of the Supervisor Service. If unset, the description for the service version is empty.
	Description *string `json:"description,omitempty"`
	// The prefix that will be added to the names of the Supervisor Service's kubernetes resources. If unset, the prefix is not assigned yet.
	Prefix *string `json:"prefix,omitempty"`
}

// NewVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo instantiates a new VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo(desiredVersion string, configStatus VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus, messages []VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessage, displayName string) *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo {
	this := VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo{}
	this.DesiredVersion = desiredVersion
	this.ConfigStatus = configStatus
	this.Messages = messages
	this.DisplayName = displayName
	return &this
}

// NewVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfoWithDefaults instantiates a new VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfoWithDefaults() *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo {
	this := VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo{}
	return &this
}

// GetDesiredVersion returns the DesiredVersion field value
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetDesiredVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DesiredVersion
}

// GetDesiredVersionOk returns a tuple with the DesiredVersion field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetDesiredVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DesiredVersion, true
}

// SetDesiredVersion sets field value
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) SetDesiredVersion(v string) {
	o.DesiredVersion = v
}

// GetServiceNamespace returns the ServiceNamespace field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetServiceNamespace() string {
	if o == nil || o.ServiceNamespace == nil {
		var ret string
		return ret
	}
	return *o.ServiceNamespace
}

// GetServiceNamespaceOk returns a tuple with the ServiceNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetServiceNamespaceOk() (*string, bool) {
	if o == nil || o.ServiceNamespace == nil {
		return nil, false
	}
	return o.ServiceNamespace, true
}

// HasServiceNamespace returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) HasServiceNamespace() bool {
	if o != nil && o.ServiceNamespace != nil {
		return true
	}

	return false
}

// SetServiceNamespace gets a reference to the given string and assigns it to the ServiceNamespace field.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) SetServiceNamespace(v string) {
	o.ServiceNamespace = &v
}

// GetConfigStatus returns the ConfigStatus field value
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetConfigStatus() VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus {
	if o == nil {
		var ret VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus
		return ret
	}

	return o.ConfigStatus
}

// GetConfigStatusOk returns a tuple with the ConfigStatus field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetConfigStatusOk() (*VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigStatus, true
}

// SetConfigStatus sets field value
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) SetConfigStatus(v VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) {
	o.ConfigStatus = v
}

// GetMessages returns the Messages field value
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetMessages() []VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessage {
	if o == nil {
		var ret []VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessage
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetMessagesOk() (*[]VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Messages, true
}

// SetMessages sets field value
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) SetMessages(v []VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessage) {
	o.Messages = v
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetCurrentVersion() string {
	if o == nil || o.CurrentVersion == nil {
		var ret string
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetCurrentVersionOk() (*string, bool) {
	if o == nil || o.CurrentVersion == nil {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) HasCurrentVersion() bool {
	if o != nil && o.CurrentVersion != nil {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given string and assigns it to the CurrentVersion field.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) SetCurrentVersion(v string) {
	o.CurrentVersion = &v
}

// GetDisplayName returns the DisplayName field value
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) SetDescription(v string) {
	o.Description = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetPrefix() string {
	if o == nil || o.Prefix == nil {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) GetPrefixOk() (*string, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) SetPrefix(v string) {
	o.Prefix = &v
}

func (o VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["desired_version"] = o.DesiredVersion
	}
	if o.ServiceNamespace != nil {
		toSerialize["service_namespace"] = o.ServiceNamespace
	}
	if true {
		toSerialize["config_status"] = o.ConfigStatus
	}
	if true {
		toSerialize["messages"] = o.Messages
	}
	if o.CurrentVersion != nil {
		toSerialize["current_version"] = o.CurrentVersion
	}
	if true {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo struct {
	value *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) Get() *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) Set(val *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo(val *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo {
	return &NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


