/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMCloneSpecDisksToUpdate struct for VcenterVMCloneSpecDisksToUpdate
type VcenterVMCloneSpecDisksToUpdate struct {
	Key *string `json:"key,omitempty"`
	Value *VcenterVMDiskCloneSpec `json:"value,omitempty"`
}

// NewVcenterVMCloneSpecDisksToUpdate instantiates a new VcenterVMCloneSpecDisksToUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMCloneSpecDisksToUpdate() *VcenterVMCloneSpecDisksToUpdate {
	this := VcenterVMCloneSpecDisksToUpdate{}
	return &this
}

// NewVcenterVMCloneSpecDisksToUpdateWithDefaults instantiates a new VcenterVMCloneSpecDisksToUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMCloneSpecDisksToUpdateWithDefaults() *VcenterVMCloneSpecDisksToUpdate {
	this := VcenterVMCloneSpecDisksToUpdate{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *VcenterVMCloneSpecDisksToUpdate) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCloneSpecDisksToUpdate) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *VcenterVMCloneSpecDisksToUpdate) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *VcenterVMCloneSpecDisksToUpdate) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VcenterVMCloneSpecDisksToUpdate) GetValue() VcenterVMDiskCloneSpec {
	if o == nil || o.Value == nil {
		var ret VcenterVMDiskCloneSpec
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCloneSpecDisksToUpdate) GetValueOk() (*VcenterVMDiskCloneSpec, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VcenterVMCloneSpecDisksToUpdate) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given VcenterVMDiskCloneSpec and assigns it to the Value field.
func (o *VcenterVMCloneSpecDisksToUpdate) SetValue(v VcenterVMDiskCloneSpec) {
	o.Value = &v
}

func (o VcenterVMCloneSpecDisksToUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMCloneSpecDisksToUpdate struct {
	value *VcenterVMCloneSpecDisksToUpdate
	isSet bool
}

func (v NullableVcenterVMCloneSpecDisksToUpdate) Get() *VcenterVMCloneSpecDisksToUpdate {
	return v.value
}

func (v *NullableVcenterVMCloneSpecDisksToUpdate) Set(val *VcenterVMCloneSpecDisksToUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMCloneSpecDisksToUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMCloneSpecDisksToUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMCloneSpecDisksToUpdate(val *VcenterVMCloneSpecDisksToUpdate) *NullableVcenterVMCloneSpecDisksToUpdate {
	return &NullableVcenterVMCloneSpecDisksToUpdate{value: val, isSet: true}
}

func (v NullableVcenterVMCloneSpecDisksToUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMCloneSpecDisksToUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


