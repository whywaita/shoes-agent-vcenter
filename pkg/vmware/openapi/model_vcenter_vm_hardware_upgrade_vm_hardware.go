/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareUpgradeVmHardware struct for VcenterVmHardwareUpgradeVmHardware
type VcenterVmHardwareUpgradeVmHardware struct {
	Version *VcenterVmHardwareVersion `json:"version,omitempty"`
}

// NewVcenterVmHardwareUpgradeVmHardware instantiates a new VcenterVmHardwareUpgradeVmHardware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareUpgradeVmHardware() *VcenterVmHardwareUpgradeVmHardware {
	this := VcenterVmHardwareUpgradeVmHardware{}
	return &this
}

// NewVcenterVmHardwareUpgradeVmHardwareWithDefaults instantiates a new VcenterVmHardwareUpgradeVmHardware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareUpgradeVmHardwareWithDefaults() *VcenterVmHardwareUpgradeVmHardware {
	this := VcenterVmHardwareUpgradeVmHardware{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VcenterVmHardwareUpgradeVmHardware) GetVersion() VcenterVmHardwareVersion {
	if o == nil || o.Version == nil {
		var ret VcenterVmHardwareVersion
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareUpgradeVmHardware) GetVersionOk() (*VcenterVmHardwareVersion, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VcenterVmHardwareUpgradeVmHardware) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given VcenterVmHardwareVersion and assigns it to the Version field.
func (o *VcenterVmHardwareUpgradeVmHardware) SetVersion(v VcenterVmHardwareVersion) {
	o.Version = &v
}

func (o VcenterVmHardwareUpgradeVmHardware) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareUpgradeVmHardware struct {
	value *VcenterVmHardwareUpgradeVmHardware
	isSet bool
}

func (v NullableVcenterVmHardwareUpgradeVmHardware) Get() *VcenterVmHardwareUpgradeVmHardware {
	return v.value
}

func (v *NullableVcenterVmHardwareUpgradeVmHardware) Set(val *VcenterVmHardwareUpgradeVmHardware) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareUpgradeVmHardware) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareUpgradeVmHardware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareUpgradeVmHardware(val *VcenterVmHardwareUpgradeVmHardware) *NullableVcenterVmHardwareUpgradeVmHardware {
	return &NullableVcenterVmHardwareUpgradeVmHardware{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareUpgradeVmHardware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareUpgradeVmHardware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


