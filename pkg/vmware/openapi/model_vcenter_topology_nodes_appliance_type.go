/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterTopologyNodesApplianceType the model 'VcenterTopologyNodesApplianceType'
type VcenterTopologyNodesApplianceType string

// List of vcenter.topology.nodes.appliance_type
const (
	VCENTERTOPOLOGYNODESAPPLIANCETYPE_VCSA_EMBEDDED VcenterTopologyNodesApplianceType = "VCSA_EMBEDDED"
	VCENTERTOPOLOGYNODESAPPLIANCETYPE_VCSA_EXTERNAL VcenterTopologyNodesApplianceType = "VCSA_EXTERNAL"
	VCENTERTOPOLOGYNODESAPPLIANCETYPE_PSC_EXTERNAL VcenterTopologyNodesApplianceType = "PSC_EXTERNAL"
)

// All allowed values of VcenterTopologyNodesApplianceType enum
var AllowedVcenterTopologyNodesApplianceTypeEnumValues = []VcenterTopologyNodesApplianceType{
	"VCSA_EMBEDDED",
	"VCSA_EXTERNAL",
	"PSC_EXTERNAL",
}

func (v *VcenterTopologyNodesApplianceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterTopologyNodesApplianceType(value)
	for _, existing := range AllowedVcenterTopologyNodesApplianceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterTopologyNodesApplianceType", value)
}

// NewVcenterTopologyNodesApplianceTypeFromValue returns a pointer to a valid VcenterTopologyNodesApplianceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterTopologyNodesApplianceTypeFromValue(v string) (*VcenterTopologyNodesApplianceType, error) {
	ev := VcenterTopologyNodesApplianceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterTopologyNodesApplianceType: valid values are %v", v, AllowedVcenterTopologyNodesApplianceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterTopologyNodesApplianceType) IsValid() bool {
	for _, existing := range AllowedVcenterTopologyNodesApplianceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.topology.nodes.appliance_type value
func (v VcenterTopologyNodesApplianceType) Ptr() *VcenterTopologyNodesApplianceType {
	return &v
}

type NullableVcenterTopologyNodesApplianceType struct {
	value *VcenterTopologyNodesApplianceType
	isSet bool
}

func (v NullableVcenterTopologyNodesApplianceType) Get() *VcenterTopologyNodesApplianceType {
	return v.value
}

func (v *NullableVcenterTopologyNodesApplianceType) Set(val *VcenterTopologyNodesApplianceType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterTopologyNodesApplianceType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterTopologyNodesApplianceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterTopologyNodesApplianceType(val *VcenterTopologyNodesApplianceType) *NullableVcenterTopologyNodesApplianceType {
	return &NullableVcenterTopologyNodesApplianceType{value: val, isSet: true}
}

func (v NullableVcenterTopologyNodesApplianceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterTopologyNodesApplianceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

