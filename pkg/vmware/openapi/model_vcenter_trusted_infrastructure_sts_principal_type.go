/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterTrustedInfrastructureStsPrincipalType The StsPrincipalType enum can be either users or groups.
type VcenterTrustedInfrastructureStsPrincipalType string

// List of VcenterTrustedInfrastructureStsPrincipalType
const (
	VCENTERTRUSTEDINFRASTRUCTURESTSPRINCIPALTYPE_USER VcenterTrustedInfrastructureStsPrincipalType = "STS_USER"
	VCENTERTRUSTEDINFRASTRUCTURESTSPRINCIPALTYPE_GROUP VcenterTrustedInfrastructureStsPrincipalType = "STS_GROUP"
)

// All allowed values of VcenterTrustedInfrastructureStsPrincipalType enum
var AllowedVcenterTrustedInfrastructureStsPrincipalTypeEnumValues = []VcenterTrustedInfrastructureStsPrincipalType{
	"STS_USER",
	"STS_GROUP",
}

func (v *VcenterTrustedInfrastructureStsPrincipalType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterTrustedInfrastructureStsPrincipalType(value)
	for _, existing := range AllowedVcenterTrustedInfrastructureStsPrincipalTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterTrustedInfrastructureStsPrincipalType", value)
}

// NewVcenterTrustedInfrastructureStsPrincipalTypeFromValue returns a pointer to a valid VcenterTrustedInfrastructureStsPrincipalType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterTrustedInfrastructureStsPrincipalTypeFromValue(v string) (*VcenterTrustedInfrastructureStsPrincipalType, error) {
	ev := VcenterTrustedInfrastructureStsPrincipalType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterTrustedInfrastructureStsPrincipalType: valid values are %v", v, AllowedVcenterTrustedInfrastructureStsPrincipalTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterTrustedInfrastructureStsPrincipalType) IsValid() bool {
	for _, existing := range AllowedVcenterTrustedInfrastructureStsPrincipalTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterTrustedInfrastructureStsPrincipalType value
func (v VcenterTrustedInfrastructureStsPrincipalType) Ptr() *VcenterTrustedInfrastructureStsPrincipalType {
	return &v
}

type NullableVcenterTrustedInfrastructureStsPrincipalType struct {
	value *VcenterTrustedInfrastructureStsPrincipalType
	isSet bool
}

func (v NullableVcenterTrustedInfrastructureStsPrincipalType) Get() *VcenterTrustedInfrastructureStsPrincipalType {
	return v.value
}

func (v *NullableVcenterTrustedInfrastructureStsPrincipalType) Set(val *VcenterTrustedInfrastructureStsPrincipalType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterTrustedInfrastructureStsPrincipalType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterTrustedInfrastructureStsPrincipalType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterTrustedInfrastructureStsPrincipalType(val *VcenterTrustedInfrastructureStsPrincipalType) *NullableVcenterTrustedInfrastructureStsPrincipalType {
	return &NullableVcenterTrustedInfrastructureStsPrincipalType{value: val, isSet: true}
}

func (v NullableVcenterTrustedInfrastructureStsPrincipalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterTrustedInfrastructureStsPrincipalType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

