/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementLoadBalancersHAProxyInfo struct for VcenterNamespaceManagementLoadBalancersHAProxyInfo
type VcenterNamespaceManagementLoadBalancersHAProxyInfo struct {
	// A list of the addresses for the DataPlane API servers used to configure HAProxy.
	Servers []VcenterNamespaceManagementLoadBalancersServer `json:"servers"`
	// An administrator user name for accessing the HAProxy Data Plane API server.
	Username string `json:"username"`
	// PEM-encoded CA certificate chain which is used to verify x509 certificates received from the server.
	CertificateAuthorityChain string `json:"certificate_authority_chain"`
}

// NewVcenterNamespaceManagementLoadBalancersHAProxyInfo instantiates a new VcenterNamespaceManagementLoadBalancersHAProxyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementLoadBalancersHAProxyInfo(servers []VcenterNamespaceManagementLoadBalancersServer, username string, certificateAuthorityChain string) *VcenterNamespaceManagementLoadBalancersHAProxyInfo {
	this := VcenterNamespaceManagementLoadBalancersHAProxyInfo{}
	this.Servers = servers
	this.Username = username
	this.CertificateAuthorityChain = certificateAuthorityChain
	return &this
}

// NewVcenterNamespaceManagementLoadBalancersHAProxyInfoWithDefaults instantiates a new VcenterNamespaceManagementLoadBalancersHAProxyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementLoadBalancersHAProxyInfoWithDefaults() *VcenterNamespaceManagementLoadBalancersHAProxyInfo {
	this := VcenterNamespaceManagementLoadBalancersHAProxyInfo{}
	return &this
}

// GetServers returns the Servers field value
func (o *VcenterNamespaceManagementLoadBalancersHAProxyInfo) GetServers() []VcenterNamespaceManagementLoadBalancersServer {
	if o == nil {
		var ret []VcenterNamespaceManagementLoadBalancersServer
		return ret
	}

	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersHAProxyInfo) GetServersOk() (*[]VcenterNamespaceManagementLoadBalancersServer, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Servers, true
}

// SetServers sets field value
func (o *VcenterNamespaceManagementLoadBalancersHAProxyInfo) SetServers(v []VcenterNamespaceManagementLoadBalancersServer) {
	o.Servers = v
}

// GetUsername returns the Username field value
func (o *VcenterNamespaceManagementLoadBalancersHAProxyInfo) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersHAProxyInfo) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *VcenterNamespaceManagementLoadBalancersHAProxyInfo) SetUsername(v string) {
	o.Username = v
}

// GetCertificateAuthorityChain returns the CertificateAuthorityChain field value
func (o *VcenterNamespaceManagementLoadBalancersHAProxyInfo) GetCertificateAuthorityChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateAuthorityChain
}

// GetCertificateAuthorityChainOk returns a tuple with the CertificateAuthorityChain field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersHAProxyInfo) GetCertificateAuthorityChainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CertificateAuthorityChain, true
}

// SetCertificateAuthorityChain sets field value
func (o *VcenterNamespaceManagementLoadBalancersHAProxyInfo) SetCertificateAuthorityChain(v string) {
	o.CertificateAuthorityChain = v
}

func (o VcenterNamespaceManagementLoadBalancersHAProxyInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["servers"] = o.Servers
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["certificate_authority_chain"] = o.CertificateAuthorityChain
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementLoadBalancersHAProxyInfo struct {
	value *VcenterNamespaceManagementLoadBalancersHAProxyInfo
	isSet bool
}

func (v NullableVcenterNamespaceManagementLoadBalancersHAProxyInfo) Get() *VcenterNamespaceManagementLoadBalancersHAProxyInfo {
	return v.value
}

func (v *NullableVcenterNamespaceManagementLoadBalancersHAProxyInfo) Set(val *VcenterNamespaceManagementLoadBalancersHAProxyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementLoadBalancersHAProxyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementLoadBalancersHAProxyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementLoadBalancersHAProxyInfo(val *VcenterNamespaceManagementLoadBalancersHAProxyInfo) *NullableVcenterNamespaceManagementLoadBalancersHAProxyInfo {
	return &NullableVcenterNamespaceManagementLoadBalancersHAProxyInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementLoadBalancersHAProxyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementLoadBalancersHAProxyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


