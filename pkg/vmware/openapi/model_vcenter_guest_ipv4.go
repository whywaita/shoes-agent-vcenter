/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestIpv4 struct for VcenterGuestIpv4
type VcenterGuestIpv4 struct {
	Type VcenterGuestIpv4Type `json:"type"`
	// The static IPv4 address This field is optional and it is only relevant when the value of Ipv4.type is STATIC.
	IpAddress *string `json:"ip_address,omitempty"`
	// The IPv4 CIDR prefix, for example, 24. See http://www.oav.net/mirrors/cidr.html for netmask-to-prefix conversion. This field is optional and it is only relevant when the value of Ipv4.type is STATIC.
	Prefix *int64 `json:"prefix,omitempty"`
	// Gateways for the IPv4 address. If unset, no gateways are set.
	Gateways *[]string `json:"gateways,omitempty"`
}

// NewVcenterGuestIpv4 instantiates a new VcenterGuestIpv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestIpv4(type_ VcenterGuestIpv4Type) *VcenterGuestIpv4 {
	this := VcenterGuestIpv4{}
	this.Type = type_
	return &this
}

// NewVcenterGuestIpv4WithDefaults instantiates a new VcenterGuestIpv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestIpv4WithDefaults() *VcenterGuestIpv4 {
	this := VcenterGuestIpv4{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterGuestIpv4) GetType() VcenterGuestIpv4Type {
	if o == nil {
		var ret VcenterGuestIpv4Type
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterGuestIpv4) GetTypeOk() (*VcenterGuestIpv4Type, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterGuestIpv4) SetType(v VcenterGuestIpv4Type) {
	o.Type = v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *VcenterGuestIpv4) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestIpv4) GetIpAddressOk() (*string, bool) {
	if o == nil || o.IpAddress == nil {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *VcenterGuestIpv4) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *VcenterGuestIpv4) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *VcenterGuestIpv4) GetPrefix() int64 {
	if o == nil || o.Prefix == nil {
		var ret int64
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestIpv4) GetPrefixOk() (*int64, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *VcenterGuestIpv4) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given int64 and assigns it to the Prefix field.
func (o *VcenterGuestIpv4) SetPrefix(v int64) {
	o.Prefix = &v
}

// GetGateways returns the Gateways field value if set, zero value otherwise.
func (o *VcenterGuestIpv4) GetGateways() []string {
	if o == nil || o.Gateways == nil {
		var ret []string
		return ret
	}
	return *o.Gateways
}

// GetGatewaysOk returns a tuple with the Gateways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestIpv4) GetGatewaysOk() (*[]string, bool) {
	if o == nil || o.Gateways == nil {
		return nil, false
	}
	return o.Gateways, true
}

// HasGateways returns a boolean if a field has been set.
func (o *VcenterGuestIpv4) HasGateways() bool {
	if o != nil && o.Gateways != nil {
		return true
	}

	return false
}

// SetGateways gets a reference to the given []string and assigns it to the Gateways field.
func (o *VcenterGuestIpv4) SetGateways(v []string) {
	o.Gateways = &v
}

func (o VcenterGuestIpv4) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.IpAddress != nil {
		toSerialize["ip_address"] = o.IpAddress
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	if o.Gateways != nil {
		toSerialize["gateways"] = o.Gateways
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestIpv4 struct {
	value *VcenterGuestIpv4
	isSet bool
}

func (v NullableVcenterGuestIpv4) Get() *VcenterGuestIpv4 {
	return v.value
}

func (v *NullableVcenterGuestIpv4) Set(val *VcenterGuestIpv4) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestIpv4) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestIpv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestIpv4(val *VcenterGuestIpv4) *NullableVcenterGuestIpv4 {
	return &NullableVcenterGuestIpv4{value: val, isSet: true}
}

func (v NullableVcenterGuestIpv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestIpv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


