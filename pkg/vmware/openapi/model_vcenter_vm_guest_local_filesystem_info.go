/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestLocalFilesystemInfo struct for VcenterVmGuestLocalFilesystemInfo
type VcenterVmGuestLocalFilesystemInfo struct {
	// Total capacity of the file system, in bytes.
	Capacity int64 `json:"capacity"`
	// Free space on the file system, in bytes.
	FreeSpace int64 `json:"free_space"`
	// Filesystem type, if known. For example, ext3 or NTFS. set if VMware Tools reports a value.
	Filesystem *string `json:"filesystem,omitempty"`
	// VirtualDisks backing the guest partition, if known. This field is optional because it was added in a newer version than its parent node.
	Mappings *[]VcenterVmGuestLocalFilesystemVirtualDiskMapping `json:"mappings,omitempty"`
}

// NewVcenterVmGuestLocalFilesystemInfo instantiates a new VcenterVmGuestLocalFilesystemInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestLocalFilesystemInfo(capacity int64, freeSpace int64) *VcenterVmGuestLocalFilesystemInfo {
	this := VcenterVmGuestLocalFilesystemInfo{}
	this.Capacity = capacity
	this.FreeSpace = freeSpace
	return &this
}

// NewVcenterVmGuestLocalFilesystemInfoWithDefaults instantiates a new VcenterVmGuestLocalFilesystemInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestLocalFilesystemInfoWithDefaults() *VcenterVmGuestLocalFilesystemInfo {
	this := VcenterVmGuestLocalFilesystemInfo{}
	return &this
}

// GetCapacity returns the Capacity field value
func (o *VcenterVmGuestLocalFilesystemInfo) GetCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestLocalFilesystemInfo) GetCapacityOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *VcenterVmGuestLocalFilesystemInfo) SetCapacity(v int64) {
	o.Capacity = v
}

// GetFreeSpace returns the FreeSpace field value
func (o *VcenterVmGuestLocalFilesystemInfo) GetFreeSpace() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FreeSpace
}

// GetFreeSpaceOk returns a tuple with the FreeSpace field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestLocalFilesystemInfo) GetFreeSpaceOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FreeSpace, true
}

// SetFreeSpace sets field value
func (o *VcenterVmGuestLocalFilesystemInfo) SetFreeSpace(v int64) {
	o.FreeSpace = v
}

// GetFilesystem returns the Filesystem field value if set, zero value otherwise.
func (o *VcenterVmGuestLocalFilesystemInfo) GetFilesystem() string {
	if o == nil || o.Filesystem == nil {
		var ret string
		return ret
	}
	return *o.Filesystem
}

// GetFilesystemOk returns a tuple with the Filesystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestLocalFilesystemInfo) GetFilesystemOk() (*string, bool) {
	if o == nil || o.Filesystem == nil {
		return nil, false
	}
	return o.Filesystem, true
}

// HasFilesystem returns a boolean if a field has been set.
func (o *VcenterVmGuestLocalFilesystemInfo) HasFilesystem() bool {
	if o != nil && o.Filesystem != nil {
		return true
	}

	return false
}

// SetFilesystem gets a reference to the given string and assigns it to the Filesystem field.
func (o *VcenterVmGuestLocalFilesystemInfo) SetFilesystem(v string) {
	o.Filesystem = &v
}

// GetMappings returns the Mappings field value if set, zero value otherwise.
func (o *VcenterVmGuestLocalFilesystemInfo) GetMappings() []VcenterVmGuestLocalFilesystemVirtualDiskMapping {
	if o == nil || o.Mappings == nil {
		var ret []VcenterVmGuestLocalFilesystemVirtualDiskMapping
		return ret
	}
	return *o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestLocalFilesystemInfo) GetMappingsOk() (*[]VcenterVmGuestLocalFilesystemVirtualDiskMapping, bool) {
	if o == nil || o.Mappings == nil {
		return nil, false
	}
	return o.Mappings, true
}

// HasMappings returns a boolean if a field has been set.
func (o *VcenterVmGuestLocalFilesystemInfo) HasMappings() bool {
	if o != nil && o.Mappings != nil {
		return true
	}

	return false
}

// SetMappings gets a reference to the given []VcenterVmGuestLocalFilesystemVirtualDiskMapping and assigns it to the Mappings field.
func (o *VcenterVmGuestLocalFilesystemInfo) SetMappings(v []VcenterVmGuestLocalFilesystemVirtualDiskMapping) {
	o.Mappings = &v
}

func (o VcenterVmGuestLocalFilesystemInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["capacity"] = o.Capacity
	}
	if true {
		toSerialize["free_space"] = o.FreeSpace
	}
	if o.Filesystem != nil {
		toSerialize["filesystem"] = o.Filesystem
	}
	if o.Mappings != nil {
		toSerialize["mappings"] = o.Mappings
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestLocalFilesystemInfo struct {
	value *VcenterVmGuestLocalFilesystemInfo
	isSet bool
}

func (v NullableVcenterVmGuestLocalFilesystemInfo) Get() *VcenterVmGuestLocalFilesystemInfo {
	return v.value
}

func (v *NullableVcenterVmGuestLocalFilesystemInfo) Set(val *VcenterVmGuestLocalFilesystemInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestLocalFilesystemInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestLocalFilesystemInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestLocalFilesystemInfo(val *VcenterVmGuestLocalFilesystemInfo) *NullableVcenterVmGuestLocalFilesystemInfo {
	return &NullableVcenterVmGuestLocalFilesystemInfo{value: val, isSet: true}
}

func (v NullableVcenterVmGuestLocalFilesystemInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestLocalFilesystemInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


