/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmTemplateLibraryItemsVersionsSummary struct for VcenterVmTemplateLibraryItemsVersionsSummary
type VcenterVmTemplateLibraryItemsVersionsSummary struct {
	// The version of the library item.
	Version string `json:"version"`
	// Identifier of the virtual machine template associated with the library item version. This {@term field} is the managed object identifier used to identify the virtual machine template in the vSphere Management (SOAP) API.
	VmTemplate string `json:"vm_template"`
}

// NewVcenterVmTemplateLibraryItemsVersionsSummary instantiates a new VcenterVmTemplateLibraryItemsVersionsSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmTemplateLibraryItemsVersionsSummary(version string, vmTemplate string) *VcenterVmTemplateLibraryItemsVersionsSummary {
	this := VcenterVmTemplateLibraryItemsVersionsSummary{}
	this.Version = version
	this.VmTemplate = vmTemplate
	return &this
}

// NewVcenterVmTemplateLibraryItemsVersionsSummaryWithDefaults instantiates a new VcenterVmTemplateLibraryItemsVersionsSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmTemplateLibraryItemsVersionsSummaryWithDefaults() *VcenterVmTemplateLibraryItemsVersionsSummary {
	this := VcenterVmTemplateLibraryItemsVersionsSummary{}
	return &this
}

// GetVersion returns the Version field value
func (o *VcenterVmTemplateLibraryItemsVersionsSummary) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsVersionsSummary) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VcenterVmTemplateLibraryItemsVersionsSummary) SetVersion(v string) {
	o.Version = v
}

// GetVmTemplate returns the VmTemplate field value
func (o *VcenterVmTemplateLibraryItemsVersionsSummary) GetVmTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VmTemplate
}

// GetVmTemplateOk returns a tuple with the VmTemplate field value
// and a boolean to check if the value has been set.
func (o *VcenterVmTemplateLibraryItemsVersionsSummary) GetVmTemplateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VmTemplate, true
}

// SetVmTemplate sets field value
func (o *VcenterVmTemplateLibraryItemsVersionsSummary) SetVmTemplate(v string) {
	o.VmTemplate = v
}

func (o VcenterVmTemplateLibraryItemsVersionsSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["vm_template"] = o.VmTemplate
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmTemplateLibraryItemsVersionsSummary struct {
	value *VcenterVmTemplateLibraryItemsVersionsSummary
	isSet bool
}

func (v NullableVcenterVmTemplateLibraryItemsVersionsSummary) Get() *VcenterVmTemplateLibraryItemsVersionsSummary {
	return v.value
}

func (v *NullableVcenterVmTemplateLibraryItemsVersionsSummary) Set(val *VcenterVmTemplateLibraryItemsVersionsSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmTemplateLibraryItemsVersionsSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmTemplateLibraryItemsVersionsSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmTemplateLibraryItemsVersionsSummary(val *VcenterVmTemplateLibraryItemsVersionsSummary) *NullableVcenterVmTemplateLibraryItemsVersionsSummary {
	return &NullableVcenterVmTemplateLibraryItemsVersionsSummary{value: val, isSet: true}
}

func (v NullableVcenterVmTemplateLibraryItemsVersionsSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmTemplateLibraryItemsVersionsSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


