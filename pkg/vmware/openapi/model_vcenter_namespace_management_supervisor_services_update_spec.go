/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementSupervisorServicesUpdateSpec struct for VcenterNamespaceManagementSupervisorServicesUpdateSpec
type VcenterNamespaceManagementSupervisorServicesUpdateSpec struct {
	// A human readable name of the Supervisor Service. If unset, the display name of the service will not be modified.
	DisplayName *string `json:"display_name,omitempty"`
	// A human readable description of the Supervisor Service. If unset, the description of the service will not be modified.
	Description *string `json:"description,omitempty"`
}

// NewVcenterNamespaceManagementSupervisorServicesUpdateSpec instantiates a new VcenterNamespaceManagementSupervisorServicesUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementSupervisorServicesUpdateSpec() *VcenterNamespaceManagementSupervisorServicesUpdateSpec {
	this := VcenterNamespaceManagementSupervisorServicesUpdateSpec{}
	return &this
}

// NewVcenterNamespaceManagementSupervisorServicesUpdateSpecWithDefaults instantiates a new VcenterNamespaceManagementSupervisorServicesUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementSupervisorServicesUpdateSpecWithDefaults() *VcenterNamespaceManagementSupervisorServicesUpdateSpec {
	this := VcenterNamespaceManagementSupervisorServicesUpdateSpec{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesUpdateSpec) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesUpdateSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesUpdateSpec) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *VcenterNamespaceManagementSupervisorServicesUpdateSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementSupervisorServicesUpdateSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementSupervisorServicesUpdateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementSupervisorServicesUpdateSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VcenterNamespaceManagementSupervisorServicesUpdateSpec) SetDescription(v string) {
	o.Description = &v
}

func (o VcenterNamespaceManagementSupervisorServicesUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementSupervisorServicesUpdateSpec struct {
	value *VcenterNamespaceManagementSupervisorServicesUpdateSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesUpdateSpec) Get() *VcenterNamespaceManagementSupervisorServicesUpdateSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesUpdateSpec) Set(val *VcenterNamespaceManagementSupervisorServicesUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesUpdateSpec(val *VcenterNamespaceManagementSupervisorServicesUpdateSpec) *NullableVcenterNamespaceManagementSupervisorServicesUpdateSpec {
	return &NullableVcenterNamespaceManagementSupervisorServicesUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


