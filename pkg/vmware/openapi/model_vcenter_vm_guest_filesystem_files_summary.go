/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmGuestFilesystemFilesSummary struct for VcenterVmGuestFilesystemFilesSummary
type VcenterVmGuestFilesystemFilesSummary struct {
	// The name of the file or directory with any leading directories removed.
	Filename string `json:"filename"`
	Type VcenterVmGuestFilesystemFilesType `json:"type"`
	// The file size in bytes.
	Size int64 `json:"size"`
}

// NewVcenterVmGuestFilesystemFilesSummary instantiates a new VcenterVmGuestFilesystemFilesSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmGuestFilesystemFilesSummary(filename string, type_ VcenterVmGuestFilesystemFilesType, size int64) *VcenterVmGuestFilesystemFilesSummary {
	this := VcenterVmGuestFilesystemFilesSummary{}
	this.Filename = filename
	this.Type = type_
	this.Size = size
	return &this
}

// NewVcenterVmGuestFilesystemFilesSummaryWithDefaults instantiates a new VcenterVmGuestFilesystemFilesSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmGuestFilesystemFilesSummaryWithDefaults() *VcenterVmGuestFilesystemFilesSummary {
	this := VcenterVmGuestFilesystemFilesSummary{}
	return &this
}

// GetFilename returns the Filename field value
func (o *VcenterVmGuestFilesystemFilesSummary) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestFilesystemFilesSummary) GetFilenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *VcenterVmGuestFilesystemFilesSummary) SetFilename(v string) {
	o.Filename = v
}

// GetType returns the Type field value
func (o *VcenterVmGuestFilesystemFilesSummary) GetType() VcenterVmGuestFilesystemFilesType {
	if o == nil {
		var ret VcenterVmGuestFilesystemFilesType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestFilesystemFilesSummary) GetTypeOk() (*VcenterVmGuestFilesystemFilesType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmGuestFilesystemFilesSummary) SetType(v VcenterVmGuestFilesystemFilesType) {
	o.Type = v
}

// GetSize returns the Size field value
func (o *VcenterVmGuestFilesystemFilesSummary) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *VcenterVmGuestFilesystemFilesSummary) GetSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *VcenterVmGuestFilesystemFilesSummary) SetSize(v int64) {
	o.Size = v
}

func (o VcenterVmGuestFilesystemFilesSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["filename"] = o.Filename
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmGuestFilesystemFilesSummary struct {
	value *VcenterVmGuestFilesystemFilesSummary
	isSet bool
}

func (v NullableVcenterVmGuestFilesystemFilesSummary) Get() *VcenterVmGuestFilesystemFilesSummary {
	return v.value
}

func (v *NullableVcenterVmGuestFilesystemFilesSummary) Set(val *VcenterVmGuestFilesystemFilesSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestFilesystemFilesSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestFilesystemFilesSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestFilesystemFilesSummary(val *VcenterVmGuestFilesystemFilesSummary) *NullableVcenterVmGuestFilesystemFilesSummary {
	return &NullableVcenterVmGuestFilesystemFilesSummary{value: val, isSet: true}
}

func (v NullableVcenterVmGuestFilesystemFilesSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestFilesystemFilesSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


