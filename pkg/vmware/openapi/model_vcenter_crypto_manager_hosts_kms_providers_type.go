/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterCryptoManagerHostsKmsProvidersType the model 'VcenterCryptoManagerHostsKmsProvidersType'
type VcenterCryptoManagerHostsKmsProvidersType string

// List of VcenterCryptoManagerHostsKmsProvidersType
const (
	VCENTERCRYPTOMANAGERHOSTSKMSPROVIDERSTYPE_NATIVE VcenterCryptoManagerHostsKmsProvidersType = "NATIVE"
	VCENTERCRYPTOMANAGERHOSTSKMSPROVIDERSTYPE_TRUST_AUTHORITY VcenterCryptoManagerHostsKmsProvidersType = "TRUST_AUTHORITY"
)

// All allowed values of VcenterCryptoManagerHostsKmsProvidersType enum
var AllowedVcenterCryptoManagerHostsKmsProvidersTypeEnumValues = []VcenterCryptoManagerHostsKmsProvidersType{
	"NATIVE",
	"TRUST_AUTHORITY",
}

func (v *VcenterCryptoManagerHostsKmsProvidersType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterCryptoManagerHostsKmsProvidersType(value)
	for _, existing := range AllowedVcenterCryptoManagerHostsKmsProvidersTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterCryptoManagerHostsKmsProvidersType", value)
}

// NewVcenterCryptoManagerHostsKmsProvidersTypeFromValue returns a pointer to a valid VcenterCryptoManagerHostsKmsProvidersType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterCryptoManagerHostsKmsProvidersTypeFromValue(v string) (*VcenterCryptoManagerHostsKmsProvidersType, error) {
	ev := VcenterCryptoManagerHostsKmsProvidersType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterCryptoManagerHostsKmsProvidersType: valid values are %v", v, AllowedVcenterCryptoManagerHostsKmsProvidersTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterCryptoManagerHostsKmsProvidersType) IsValid() bool {
	for _, existing := range AllowedVcenterCryptoManagerHostsKmsProvidersTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterCryptoManagerHostsKmsProvidersType value
func (v VcenterCryptoManagerHostsKmsProvidersType) Ptr() *VcenterCryptoManagerHostsKmsProvidersType {
	return &v
}

type NullableVcenterCryptoManagerHostsKmsProvidersType struct {
	value *VcenterCryptoManagerHostsKmsProvidersType
	isSet bool
}

func (v NullableVcenterCryptoManagerHostsKmsProvidersType) Get() *VcenterCryptoManagerHostsKmsProvidersType {
	return v.value
}

func (v *NullableVcenterCryptoManagerHostsKmsProvidersType) Set(val *VcenterCryptoManagerHostsKmsProvidersType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerHostsKmsProvidersType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerHostsKmsProvidersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerHostsKmsProvidersType(val *VcenterCryptoManagerHostsKmsProvidersType) *NullableVcenterCryptoManagerHostsKmsProvidersType {
	return &NullableVcenterCryptoManagerHostsKmsProvidersType{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerHostsKmsProvidersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerHostsKmsProvidersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

