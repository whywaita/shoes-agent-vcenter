/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterContentRegistriesDayOfWeek The {@name DayOfWeek} {@term enumerated type} describes the supported days of the week to run a specific operation for a container registry.
type VcenterContentRegistriesDayOfWeek string

// List of vcenter.content.registries.day_of_week
const (
	VCENTERCONTENTREGISTRIESDAYOFWEEK_SUNDAY VcenterContentRegistriesDayOfWeek = "SUNDAY"
	VCENTERCONTENTREGISTRIESDAYOFWEEK_MONDAY VcenterContentRegistriesDayOfWeek = "MONDAY"
	VCENTERCONTENTREGISTRIESDAYOFWEEK_TUESDAY VcenterContentRegistriesDayOfWeek = "TUESDAY"
	VCENTERCONTENTREGISTRIESDAYOFWEEK_WEDNESDAY VcenterContentRegistriesDayOfWeek = "WEDNESDAY"
	VCENTERCONTENTREGISTRIESDAYOFWEEK_THURSDAY VcenterContentRegistriesDayOfWeek = "THURSDAY"
	VCENTERCONTENTREGISTRIESDAYOFWEEK_FRIDAY VcenterContentRegistriesDayOfWeek = "FRIDAY"
	VCENTERCONTENTREGISTRIESDAYOFWEEK_SATURDAY VcenterContentRegistriesDayOfWeek = "SATURDAY"
)

// All allowed values of VcenterContentRegistriesDayOfWeek enum
var AllowedVcenterContentRegistriesDayOfWeekEnumValues = []VcenterContentRegistriesDayOfWeek{
	"SUNDAY",
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
}

func (v *VcenterContentRegistriesDayOfWeek) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterContentRegistriesDayOfWeek(value)
	for _, existing := range AllowedVcenterContentRegistriesDayOfWeekEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterContentRegistriesDayOfWeek", value)
}

// NewVcenterContentRegistriesDayOfWeekFromValue returns a pointer to a valid VcenterContentRegistriesDayOfWeek
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterContentRegistriesDayOfWeekFromValue(v string) (*VcenterContentRegistriesDayOfWeek, error) {
	ev := VcenterContentRegistriesDayOfWeek(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterContentRegistriesDayOfWeek: valid values are %v", v, AllowedVcenterContentRegistriesDayOfWeekEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterContentRegistriesDayOfWeek) IsValid() bool {
	for _, existing := range AllowedVcenterContentRegistriesDayOfWeekEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.content.registries.day_of_week value
func (v VcenterContentRegistriesDayOfWeek) Ptr() *VcenterContentRegistriesDayOfWeek {
	return &v
}

type NullableVcenterContentRegistriesDayOfWeek struct {
	value *VcenterContentRegistriesDayOfWeek
	isSet bool
}

func (v NullableVcenterContentRegistriesDayOfWeek) Get() *VcenterContentRegistriesDayOfWeek {
	return v.value
}

func (v *NullableVcenterContentRegistriesDayOfWeek) Set(val *VcenterContentRegistriesDayOfWeek) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterContentRegistriesDayOfWeek) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterContentRegistriesDayOfWeek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterContentRegistriesDayOfWeek(val *VcenterContentRegistriesDayOfWeek) *NullableVcenterContentRegistriesDayOfWeek {
	return &NullableVcenterContentRegistriesDayOfWeek{value: val, isSet: true}
}

func (v NullableVcenterContentRegistriesDayOfWeek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterContentRegistriesDayOfWeek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

