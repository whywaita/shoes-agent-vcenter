/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterServicesServiceHealth The Service.Health enumerated type defines the possible values for health of a service.
type VcenterServicesServiceHealth string

// List of vcenter.services.service.health
const (
	VCENTERSERVICESSERVICEHEALTH_DEGRADED VcenterServicesServiceHealth = "DEGRADED"
	VCENTERSERVICESSERVICEHEALTH_HEALTHY VcenterServicesServiceHealth = "HEALTHY"
	VCENTERSERVICESSERVICEHEALTH_HEALTHY_WITH_WARNINGS VcenterServicesServiceHealth = "HEALTHY_WITH_WARNINGS"
)

// All allowed values of VcenterServicesServiceHealth enum
var AllowedVcenterServicesServiceHealthEnumValues = []VcenterServicesServiceHealth{
	"DEGRADED",
	"HEALTHY",
	"HEALTHY_WITH_WARNINGS",
}

func (v *VcenterServicesServiceHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterServicesServiceHealth(value)
	for _, existing := range AllowedVcenterServicesServiceHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterServicesServiceHealth", value)
}

// NewVcenterServicesServiceHealthFromValue returns a pointer to a valid VcenterServicesServiceHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterServicesServiceHealthFromValue(v string) (*VcenterServicesServiceHealth, error) {
	ev := VcenterServicesServiceHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterServicesServiceHealth: valid values are %v", v, AllowedVcenterServicesServiceHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterServicesServiceHealth) IsValid() bool {
	for _, existing := range AllowedVcenterServicesServiceHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.services.service.health value
func (v VcenterServicesServiceHealth) Ptr() *VcenterServicesServiceHealth {
	return &v
}

type NullableVcenterServicesServiceHealth struct {
	value *VcenterServicesServiceHealth
	isSet bool
}

func (v NullableVcenterServicesServiceHealth) Get() *VcenterServicesServiceHealth {
	return v.value
}

func (v *NullableVcenterServicesServiceHealth) Set(val *VcenterServicesServiceHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterServicesServiceHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterServicesServiceHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterServicesServiceHealth(val *VcenterServicesServiceHealth) *NullableVcenterServicesServiceHealth {
	return &NullableVcenterServicesServiceHealth{value: val, isSet: true}
}

func (v NullableVcenterServicesServiceHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterServicesServiceHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

