/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterIdentityProvidersOauth2AuthenticationMethod The Providers.Oauth2AuthenticationMethod structure contains the possible types of OAuth2 authentication methods.
type VcenterIdentityProvidersOauth2AuthenticationMethod string

// List of vcenter.identity.providers.oauth2_authentication_method
const (
	VCENTERIDENTITYPROVIDERSOAUTH2AUTHENTICATIONMETHOD_CLIENT_SECRET_BASIC VcenterIdentityProvidersOauth2AuthenticationMethod = "CLIENT_SECRET_BASIC"
	VCENTERIDENTITYPROVIDERSOAUTH2AUTHENTICATIONMETHOD_CLIENT_SECRET_POST VcenterIdentityProvidersOauth2AuthenticationMethod = "CLIENT_SECRET_POST"
	VCENTERIDENTITYPROVIDERSOAUTH2AUTHENTICATIONMETHOD_CLIENT_SECRET_JWT VcenterIdentityProvidersOauth2AuthenticationMethod = "CLIENT_SECRET_JWT"
	VCENTERIDENTITYPROVIDERSOAUTH2AUTHENTICATIONMETHOD_PRIVATE_KEY_JWT VcenterIdentityProvidersOauth2AuthenticationMethod = "PRIVATE_KEY_JWT"
)

// All allowed values of VcenterIdentityProvidersOauth2AuthenticationMethod enum
var AllowedVcenterIdentityProvidersOauth2AuthenticationMethodEnumValues = []VcenterIdentityProvidersOauth2AuthenticationMethod{
	"CLIENT_SECRET_BASIC",
	"CLIENT_SECRET_POST",
	"CLIENT_SECRET_JWT",
	"PRIVATE_KEY_JWT",
}

func (v *VcenterIdentityProvidersOauth2AuthenticationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterIdentityProvidersOauth2AuthenticationMethod(value)
	for _, existing := range AllowedVcenterIdentityProvidersOauth2AuthenticationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterIdentityProvidersOauth2AuthenticationMethod", value)
}

// NewVcenterIdentityProvidersOauth2AuthenticationMethodFromValue returns a pointer to a valid VcenterIdentityProvidersOauth2AuthenticationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterIdentityProvidersOauth2AuthenticationMethodFromValue(v string) (*VcenterIdentityProvidersOauth2AuthenticationMethod, error) {
	ev := VcenterIdentityProvidersOauth2AuthenticationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterIdentityProvidersOauth2AuthenticationMethod: valid values are %v", v, AllowedVcenterIdentityProvidersOauth2AuthenticationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterIdentityProvidersOauth2AuthenticationMethod) IsValid() bool {
	for _, existing := range AllowedVcenterIdentityProvidersOauth2AuthenticationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.identity.providers.oauth2_authentication_method value
func (v VcenterIdentityProvidersOauth2AuthenticationMethod) Ptr() *VcenterIdentityProvidersOauth2AuthenticationMethod {
	return &v
}

type NullableVcenterIdentityProvidersOauth2AuthenticationMethod struct {
	value *VcenterIdentityProvidersOauth2AuthenticationMethod
	isSet bool
}

func (v NullableVcenterIdentityProvidersOauth2AuthenticationMethod) Get() *VcenterIdentityProvidersOauth2AuthenticationMethod {
	return v.value
}

func (v *NullableVcenterIdentityProvidersOauth2AuthenticationMethod) Set(val *VcenterIdentityProvidersOauth2AuthenticationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterIdentityProvidersOauth2AuthenticationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterIdentityProvidersOauth2AuthenticationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterIdentityProvidersOauth2AuthenticationMethod(val *VcenterIdentityProvidersOauth2AuthenticationMethod) *NullableVcenterIdentityProvidersOauth2AuthenticationMethod {
	return &NullableVcenterIdentityProvidersOauth2AuthenticationMethod{value: val, isSet: true}
}

func (v NullableVcenterIdentityProvidersOauth2AuthenticationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterIdentityProvidersOauth2AuthenticationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

