/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentInstallVcsaEmbeddedSpec struct for VcenterDeploymentInstallVcsaEmbeddedSpec
type VcenterDeploymentInstallVcsaEmbeddedSpec struct {
	Standalone *VcenterDeploymentStandaloneSpec `json:"standalone,omitempty"`
	Replicated *VcenterDeploymentReplicatedSpec `json:"replicated,omitempty"`
	// Whether CEIP should be enabled or disabled.
	CeipEnabled bool `json:"ceip_enabled"`
}

// NewVcenterDeploymentInstallVcsaEmbeddedSpec instantiates a new VcenterDeploymentInstallVcsaEmbeddedSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentInstallVcsaEmbeddedSpec(ceipEnabled bool) *VcenterDeploymentInstallVcsaEmbeddedSpec {
	this := VcenterDeploymentInstallVcsaEmbeddedSpec{}
	this.CeipEnabled = ceipEnabled
	return &this
}

// NewVcenterDeploymentInstallVcsaEmbeddedSpecWithDefaults instantiates a new VcenterDeploymentInstallVcsaEmbeddedSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentInstallVcsaEmbeddedSpecWithDefaults() *VcenterDeploymentInstallVcsaEmbeddedSpec {
	this := VcenterDeploymentInstallVcsaEmbeddedSpec{}
	return &this
}

// GetStandalone returns the Standalone field value if set, zero value otherwise.
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) GetStandalone() VcenterDeploymentStandaloneSpec {
	if o == nil || o.Standalone == nil {
		var ret VcenterDeploymentStandaloneSpec
		return ret
	}
	return *o.Standalone
}

// GetStandaloneOk returns a tuple with the Standalone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) GetStandaloneOk() (*VcenterDeploymentStandaloneSpec, bool) {
	if o == nil || o.Standalone == nil {
		return nil, false
	}
	return o.Standalone, true
}

// HasStandalone returns a boolean if a field has been set.
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) HasStandalone() bool {
	if o != nil && o.Standalone != nil {
		return true
	}

	return false
}

// SetStandalone gets a reference to the given VcenterDeploymentStandaloneSpec and assigns it to the Standalone field.
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) SetStandalone(v VcenterDeploymentStandaloneSpec) {
	o.Standalone = &v
}

// GetReplicated returns the Replicated field value if set, zero value otherwise.
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) GetReplicated() VcenterDeploymentReplicatedSpec {
	if o == nil || o.Replicated == nil {
		var ret VcenterDeploymentReplicatedSpec
		return ret
	}
	return *o.Replicated
}

// GetReplicatedOk returns a tuple with the Replicated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) GetReplicatedOk() (*VcenterDeploymentReplicatedSpec, bool) {
	if o == nil || o.Replicated == nil {
		return nil, false
	}
	return o.Replicated, true
}

// HasReplicated returns a boolean if a field has been set.
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) HasReplicated() bool {
	if o != nil && o.Replicated != nil {
		return true
	}

	return false
}

// SetReplicated gets a reference to the given VcenterDeploymentReplicatedSpec and assigns it to the Replicated field.
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) SetReplicated(v VcenterDeploymentReplicatedSpec) {
	o.Replicated = &v
}

// GetCeipEnabled returns the CeipEnabled field value
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) GetCeipEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CeipEnabled
}

// GetCeipEnabledOk returns a tuple with the CeipEnabled field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) GetCeipEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CeipEnabled, true
}

// SetCeipEnabled sets field value
func (o *VcenterDeploymentInstallVcsaEmbeddedSpec) SetCeipEnabled(v bool) {
	o.CeipEnabled = v
}

func (o VcenterDeploymentInstallVcsaEmbeddedSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Standalone != nil {
		toSerialize["standalone"] = o.Standalone
	}
	if o.Replicated != nil {
		toSerialize["replicated"] = o.Replicated
	}
	if true {
		toSerialize["ceip_enabled"] = o.CeipEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentInstallVcsaEmbeddedSpec struct {
	value *VcenterDeploymentInstallVcsaEmbeddedSpec
	isSet bool
}

func (v NullableVcenterDeploymentInstallVcsaEmbeddedSpec) Get() *VcenterDeploymentInstallVcsaEmbeddedSpec {
	return v.value
}

func (v *NullableVcenterDeploymentInstallVcsaEmbeddedSpec) Set(val *VcenterDeploymentInstallVcsaEmbeddedSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentInstallVcsaEmbeddedSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentInstallVcsaEmbeddedSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentInstallVcsaEmbeddedSpec(val *VcenterDeploymentInstallVcsaEmbeddedSpec) *NullableVcenterDeploymentInstallVcsaEmbeddedSpec {
	return &NullableVcenterDeploymentInstallVcsaEmbeddedSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentInstallVcsaEmbeddedSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentInstallVcsaEmbeddedSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


