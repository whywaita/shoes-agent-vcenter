/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareFloppyBackingSpec struct for VcenterVmHardwareFloppyBackingSpec
type VcenterVmHardwareFloppyBackingSpec struct {
	Type VcenterVmHardwareFloppyBackingType `json:"type"`
	// Path of the image file that should be used as the virtual floppy drive backing. This field is optional and it is only relevant when the value of Floppy.BackingSpec.type is IMAGE_FILE.
	ImageFile *string `json:"image_file,omitempty"`
	// Name of the device that should be used as the virtual floppy drive backing. If unset, the virtual floppy drive will be configured to automatically detect a suitable host device.
	HostDevice *string `json:"host_device,omitempty"`
}

// NewVcenterVmHardwareFloppyBackingSpec instantiates a new VcenterVmHardwareFloppyBackingSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareFloppyBackingSpec(type_ VcenterVmHardwareFloppyBackingType) *VcenterVmHardwareFloppyBackingSpec {
	this := VcenterVmHardwareFloppyBackingSpec{}
	this.Type = type_
	return &this
}

// NewVcenterVmHardwareFloppyBackingSpecWithDefaults instantiates a new VcenterVmHardwareFloppyBackingSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareFloppyBackingSpecWithDefaults() *VcenterVmHardwareFloppyBackingSpec {
	this := VcenterVmHardwareFloppyBackingSpec{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterVmHardwareFloppyBackingSpec) GetType() VcenterVmHardwareFloppyBackingType {
	if o == nil {
		var ret VcenterVmHardwareFloppyBackingType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareFloppyBackingSpec) GetTypeOk() (*VcenterVmHardwareFloppyBackingType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterVmHardwareFloppyBackingSpec) SetType(v VcenterVmHardwareFloppyBackingType) {
	o.Type = v
}

// GetImageFile returns the ImageFile field value if set, zero value otherwise.
func (o *VcenterVmHardwareFloppyBackingSpec) GetImageFile() string {
	if o == nil || o.ImageFile == nil {
		var ret string
		return ret
	}
	return *o.ImageFile
}

// GetImageFileOk returns a tuple with the ImageFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareFloppyBackingSpec) GetImageFileOk() (*string, bool) {
	if o == nil || o.ImageFile == nil {
		return nil, false
	}
	return o.ImageFile, true
}

// HasImageFile returns a boolean if a field has been set.
func (o *VcenterVmHardwareFloppyBackingSpec) HasImageFile() bool {
	if o != nil && o.ImageFile != nil {
		return true
	}

	return false
}

// SetImageFile gets a reference to the given string and assigns it to the ImageFile field.
func (o *VcenterVmHardwareFloppyBackingSpec) SetImageFile(v string) {
	o.ImageFile = &v
}

// GetHostDevice returns the HostDevice field value if set, zero value otherwise.
func (o *VcenterVmHardwareFloppyBackingSpec) GetHostDevice() string {
	if o == nil || o.HostDevice == nil {
		var ret string
		return ret
	}
	return *o.HostDevice
}

// GetHostDeviceOk returns a tuple with the HostDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareFloppyBackingSpec) GetHostDeviceOk() (*string, bool) {
	if o == nil || o.HostDevice == nil {
		return nil, false
	}
	return o.HostDevice, true
}

// HasHostDevice returns a boolean if a field has been set.
func (o *VcenterVmHardwareFloppyBackingSpec) HasHostDevice() bool {
	if o != nil && o.HostDevice != nil {
		return true
	}

	return false
}

// SetHostDevice gets a reference to the given string and assigns it to the HostDevice field.
func (o *VcenterVmHardwareFloppyBackingSpec) SetHostDevice(v string) {
	o.HostDevice = &v
}

func (o VcenterVmHardwareFloppyBackingSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.ImageFile != nil {
		toSerialize["image_file"] = o.ImageFile
	}
	if o.HostDevice != nil {
		toSerialize["host_device"] = o.HostDevice
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareFloppyBackingSpec struct {
	value *VcenterVmHardwareFloppyBackingSpec
	isSet bool
}

func (v NullableVcenterVmHardwareFloppyBackingSpec) Get() *VcenterVmHardwareFloppyBackingSpec {
	return v.value
}

func (v *NullableVcenterVmHardwareFloppyBackingSpec) Set(val *VcenterVmHardwareFloppyBackingSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareFloppyBackingSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareFloppyBackingSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareFloppyBackingSpec(val *VcenterVmHardwareFloppyBackingSpec) *NullableVcenterVmHardwareFloppyBackingSpec {
	return &NullableVcenterVmHardwareFloppyBackingSpec{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareFloppyBackingSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareFloppyBackingSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


