/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareMemoryInfo struct for VcenterVmHardwareMemoryInfo
type VcenterVmHardwareMemoryInfo struct {
	// Memory size in mebibytes.
	SizeMiB int64 `json:"size_MiB"`
	// Flag indicating whether adding memory while the virtual machine is running is enabled.   Some guest operating systems may consume more resources or perform less efficiently when they run on hardware that supports adding memory while the machine is running. 
	HotAddEnabled bool `json:"hot_add_enabled"`
	// The granularity, in mebibytes, at which memory can be added to a running virtual machine.   When adding memory to a running virtual machine, the amount of memory added must be at least Memory.Info.hot-add-increment-size-mib and the total memory size of the virtual machine must be a multiple of {@link>hotAddIncrementSize}.  Only set when Memory.Info.hot-add-enabled is true and the virtual machine is running.
	HotAddIncrementSizeMiB *int64 `json:"hot_add_increment_size_MiB,omitempty"`
	// The maximum amount of memory, in mebibytes, that can be added to a running virtual machine. Only set when Memory.Info.hot-add-enabled is true and the virtual machine is running.
	HotAddLimitMiB *int64 `json:"hot_add_limit_MiB,omitempty"`
}

// NewVcenterVmHardwareMemoryInfo instantiates a new VcenterVmHardwareMemoryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareMemoryInfo(sizeMiB int64, hotAddEnabled bool) *VcenterVmHardwareMemoryInfo {
	this := VcenterVmHardwareMemoryInfo{}
	this.SizeMiB = sizeMiB
	this.HotAddEnabled = hotAddEnabled
	return &this
}

// NewVcenterVmHardwareMemoryInfoWithDefaults instantiates a new VcenterVmHardwareMemoryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareMemoryInfoWithDefaults() *VcenterVmHardwareMemoryInfo {
	this := VcenterVmHardwareMemoryInfo{}
	return &this
}

// GetSizeMiB returns the SizeMiB field value
func (o *VcenterVmHardwareMemoryInfo) GetSizeMiB() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SizeMiB
}

// GetSizeMiBOk returns a tuple with the SizeMiB field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareMemoryInfo) GetSizeMiBOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SizeMiB, true
}

// SetSizeMiB sets field value
func (o *VcenterVmHardwareMemoryInfo) SetSizeMiB(v int64) {
	o.SizeMiB = v
}

// GetHotAddEnabled returns the HotAddEnabled field value
func (o *VcenterVmHardwareMemoryInfo) GetHotAddEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HotAddEnabled
}

// GetHotAddEnabledOk returns a tuple with the HotAddEnabled field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareMemoryInfo) GetHotAddEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HotAddEnabled, true
}

// SetHotAddEnabled sets field value
func (o *VcenterVmHardwareMemoryInfo) SetHotAddEnabled(v bool) {
	o.HotAddEnabled = v
}

// GetHotAddIncrementSizeMiB returns the HotAddIncrementSizeMiB field value if set, zero value otherwise.
func (o *VcenterVmHardwareMemoryInfo) GetHotAddIncrementSizeMiB() int64 {
	if o == nil || o.HotAddIncrementSizeMiB == nil {
		var ret int64
		return ret
	}
	return *o.HotAddIncrementSizeMiB
}

// GetHotAddIncrementSizeMiBOk returns a tuple with the HotAddIncrementSizeMiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareMemoryInfo) GetHotAddIncrementSizeMiBOk() (*int64, bool) {
	if o == nil || o.HotAddIncrementSizeMiB == nil {
		return nil, false
	}
	return o.HotAddIncrementSizeMiB, true
}

// HasHotAddIncrementSizeMiB returns a boolean if a field has been set.
func (o *VcenterVmHardwareMemoryInfo) HasHotAddIncrementSizeMiB() bool {
	if o != nil && o.HotAddIncrementSizeMiB != nil {
		return true
	}

	return false
}

// SetHotAddIncrementSizeMiB gets a reference to the given int64 and assigns it to the HotAddIncrementSizeMiB field.
func (o *VcenterVmHardwareMemoryInfo) SetHotAddIncrementSizeMiB(v int64) {
	o.HotAddIncrementSizeMiB = &v
}

// GetHotAddLimitMiB returns the HotAddLimitMiB field value if set, zero value otherwise.
func (o *VcenterVmHardwareMemoryInfo) GetHotAddLimitMiB() int64 {
	if o == nil || o.HotAddLimitMiB == nil {
		var ret int64
		return ret
	}
	return *o.HotAddLimitMiB
}

// GetHotAddLimitMiBOk returns a tuple with the HotAddLimitMiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareMemoryInfo) GetHotAddLimitMiBOk() (*int64, bool) {
	if o == nil || o.HotAddLimitMiB == nil {
		return nil, false
	}
	return o.HotAddLimitMiB, true
}

// HasHotAddLimitMiB returns a boolean if a field has been set.
func (o *VcenterVmHardwareMemoryInfo) HasHotAddLimitMiB() bool {
	if o != nil && o.HotAddLimitMiB != nil {
		return true
	}

	return false
}

// SetHotAddLimitMiB gets a reference to the given int64 and assigns it to the HotAddLimitMiB field.
func (o *VcenterVmHardwareMemoryInfo) SetHotAddLimitMiB(v int64) {
	o.HotAddLimitMiB = &v
}

func (o VcenterVmHardwareMemoryInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["size_MiB"] = o.SizeMiB
	}
	if true {
		toSerialize["hot_add_enabled"] = o.HotAddEnabled
	}
	if o.HotAddIncrementSizeMiB != nil {
		toSerialize["hot_add_increment_size_MiB"] = o.HotAddIncrementSizeMiB
	}
	if o.HotAddLimitMiB != nil {
		toSerialize["hot_add_limit_MiB"] = o.HotAddLimitMiB
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareMemoryInfo struct {
	value *VcenterVmHardwareMemoryInfo
	isSet bool
}

func (v NullableVcenterVmHardwareMemoryInfo) Get() *VcenterVmHardwareMemoryInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareMemoryInfo) Set(val *VcenterVmHardwareMemoryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareMemoryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareMemoryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareMemoryInfo(val *VcenterVmHardwareMemoryInfo) *NullableVcenterVmHardwareMemoryInfo {
	return &NullableVcenterVmHardwareMemoryInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareMemoryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareMemoryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


