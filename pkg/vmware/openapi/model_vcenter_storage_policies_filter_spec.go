/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterStoragePoliciesFilterSpec struct for VcenterStoragePoliciesFilterSpec
type VcenterStoragePoliciesFilterSpec struct {
	// Identifiers of storage policies that can match the filter. If unset or empty, storage policies with any identifiers match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.StoragePolicy.
	Policies *[]string `json:"policies,omitempty"`
}

// NewVcenterStoragePoliciesFilterSpec instantiates a new VcenterStoragePoliciesFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterStoragePoliciesFilterSpec() *VcenterStoragePoliciesFilterSpec {
	this := VcenterStoragePoliciesFilterSpec{}
	return &this
}

// NewVcenterStoragePoliciesFilterSpecWithDefaults instantiates a new VcenterStoragePoliciesFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterStoragePoliciesFilterSpecWithDefaults() *VcenterStoragePoliciesFilterSpec {
	this := VcenterStoragePoliciesFilterSpec{}
	return &this
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *VcenterStoragePoliciesFilterSpec) GetPolicies() []string {
	if o == nil || o.Policies == nil {
		var ret []string
		return ret
	}
	return *o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterStoragePoliciesFilterSpec) GetPoliciesOk() (*[]string, bool) {
	if o == nil || o.Policies == nil {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *VcenterStoragePoliciesFilterSpec) HasPolicies() bool {
	if o != nil && o.Policies != nil {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []string and assigns it to the Policies field.
func (o *VcenterStoragePoliciesFilterSpec) SetPolicies(v []string) {
	o.Policies = &v
}

func (o VcenterStoragePoliciesFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterStoragePoliciesFilterSpec struct {
	value *VcenterStoragePoliciesFilterSpec
	isSet bool
}

func (v NullableVcenterStoragePoliciesFilterSpec) Get() *VcenterStoragePoliciesFilterSpec {
	return v.value
}

func (v *NullableVcenterStoragePoliciesFilterSpec) Set(val *VcenterStoragePoliciesFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterStoragePoliciesFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterStoragePoliciesFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterStoragePoliciesFilterSpec(val *VcenterStoragePoliciesFilterSpec) *NullableVcenterStoragePoliciesFilterSpec {
	return &NullableVcenterStoragePoliciesFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterStoragePoliciesFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterStoragePoliciesFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


