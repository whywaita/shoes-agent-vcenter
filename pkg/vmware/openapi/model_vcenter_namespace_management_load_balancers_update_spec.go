/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementLoadBalancersUpdateSpec struct for VcenterNamespaceManagementLoadBalancersUpdateSpec
type VcenterNamespaceManagementLoadBalancersUpdateSpec struct {
	// List of address ranges that will be used to derive frontend IP addresses for L4 virtual servers. At least one range must be provided. An update operation only allows for addition of new IP ranges to the existing list of IP ranges. If unset, the existing list of address ranges will not be modified.
	AddressRanges *[]VcenterNamespaceManagementIPRange `json:"address_ranges,omitempty"`
	Provider *VcenterNamespaceManagementLoadBalancersProvider `json:"provider,omitempty"`
	HaProxyConfigUpdateSpec *VcenterNamespaceManagementLoadBalancersHAProxyConfigUpdateSpec `json:"ha_proxy_config_update_spec,omitempty"`
	AviConfigUpdateSpec *VcenterNamespaceManagementLoadBalancersAviConfigUpdateSpec `json:"avi_config_update_spec,omitempty"`
}

// NewVcenterNamespaceManagementLoadBalancersUpdateSpec instantiates a new VcenterNamespaceManagementLoadBalancersUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementLoadBalancersUpdateSpec() *VcenterNamespaceManagementLoadBalancersUpdateSpec {
	this := VcenterNamespaceManagementLoadBalancersUpdateSpec{}
	return &this
}

// NewVcenterNamespaceManagementLoadBalancersUpdateSpecWithDefaults instantiates a new VcenterNamespaceManagementLoadBalancersUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementLoadBalancersUpdateSpecWithDefaults() *VcenterNamespaceManagementLoadBalancersUpdateSpec {
	this := VcenterNamespaceManagementLoadBalancersUpdateSpec{}
	return &this
}

// GetAddressRanges returns the AddressRanges field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) GetAddressRanges() []VcenterNamespaceManagementIPRange {
	if o == nil || o.AddressRanges == nil {
		var ret []VcenterNamespaceManagementIPRange
		return ret
	}
	return *o.AddressRanges
}

// GetAddressRangesOk returns a tuple with the AddressRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) GetAddressRangesOk() (*[]VcenterNamespaceManagementIPRange, bool) {
	if o == nil || o.AddressRanges == nil {
		return nil, false
	}
	return o.AddressRanges, true
}

// HasAddressRanges returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) HasAddressRanges() bool {
	if o != nil && o.AddressRanges != nil {
		return true
	}

	return false
}

// SetAddressRanges gets a reference to the given []VcenterNamespaceManagementIPRange and assigns it to the AddressRanges field.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) SetAddressRanges(v []VcenterNamespaceManagementIPRange) {
	o.AddressRanges = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) GetProvider() VcenterNamespaceManagementLoadBalancersProvider {
	if o == nil || o.Provider == nil {
		var ret VcenterNamespaceManagementLoadBalancersProvider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) GetProviderOk() (*VcenterNamespaceManagementLoadBalancersProvider, bool) {
	if o == nil || o.Provider == nil {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) HasProvider() bool {
	if o != nil && o.Provider != nil {
		return true
	}

	return false
}

// SetProvider gets a reference to the given VcenterNamespaceManagementLoadBalancersProvider and assigns it to the Provider field.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) SetProvider(v VcenterNamespaceManagementLoadBalancersProvider) {
	o.Provider = &v
}

// GetHaProxyConfigUpdateSpec returns the HaProxyConfigUpdateSpec field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) GetHaProxyConfigUpdateSpec() VcenterNamespaceManagementLoadBalancersHAProxyConfigUpdateSpec {
	if o == nil || o.HaProxyConfigUpdateSpec == nil {
		var ret VcenterNamespaceManagementLoadBalancersHAProxyConfigUpdateSpec
		return ret
	}
	return *o.HaProxyConfigUpdateSpec
}

// GetHaProxyConfigUpdateSpecOk returns a tuple with the HaProxyConfigUpdateSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) GetHaProxyConfigUpdateSpecOk() (*VcenterNamespaceManagementLoadBalancersHAProxyConfigUpdateSpec, bool) {
	if o == nil || o.HaProxyConfigUpdateSpec == nil {
		return nil, false
	}
	return o.HaProxyConfigUpdateSpec, true
}

// HasHaProxyConfigUpdateSpec returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) HasHaProxyConfigUpdateSpec() bool {
	if o != nil && o.HaProxyConfigUpdateSpec != nil {
		return true
	}

	return false
}

// SetHaProxyConfigUpdateSpec gets a reference to the given VcenterNamespaceManagementLoadBalancersHAProxyConfigUpdateSpec and assigns it to the HaProxyConfigUpdateSpec field.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) SetHaProxyConfigUpdateSpec(v VcenterNamespaceManagementLoadBalancersHAProxyConfigUpdateSpec) {
	o.HaProxyConfigUpdateSpec = &v
}

// GetAviConfigUpdateSpec returns the AviConfigUpdateSpec field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) GetAviConfigUpdateSpec() VcenterNamespaceManagementLoadBalancersAviConfigUpdateSpec {
	if o == nil || o.AviConfigUpdateSpec == nil {
		var ret VcenterNamespaceManagementLoadBalancersAviConfigUpdateSpec
		return ret
	}
	return *o.AviConfigUpdateSpec
}

// GetAviConfigUpdateSpecOk returns a tuple with the AviConfigUpdateSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) GetAviConfigUpdateSpecOk() (*VcenterNamespaceManagementLoadBalancersAviConfigUpdateSpec, bool) {
	if o == nil || o.AviConfigUpdateSpec == nil {
		return nil, false
	}
	return o.AviConfigUpdateSpec, true
}

// HasAviConfigUpdateSpec returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) HasAviConfigUpdateSpec() bool {
	if o != nil && o.AviConfigUpdateSpec != nil {
		return true
	}

	return false
}

// SetAviConfigUpdateSpec gets a reference to the given VcenterNamespaceManagementLoadBalancersAviConfigUpdateSpec and assigns it to the AviConfigUpdateSpec field.
func (o *VcenterNamespaceManagementLoadBalancersUpdateSpec) SetAviConfigUpdateSpec(v VcenterNamespaceManagementLoadBalancersAviConfigUpdateSpec) {
	o.AviConfigUpdateSpec = &v
}

func (o VcenterNamespaceManagementLoadBalancersUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AddressRanges != nil {
		toSerialize["address_ranges"] = o.AddressRanges
	}
	if o.Provider != nil {
		toSerialize["provider"] = o.Provider
	}
	if o.HaProxyConfigUpdateSpec != nil {
		toSerialize["ha_proxy_config_update_spec"] = o.HaProxyConfigUpdateSpec
	}
	if o.AviConfigUpdateSpec != nil {
		toSerialize["avi_config_update_spec"] = o.AviConfigUpdateSpec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementLoadBalancersUpdateSpec struct {
	value *VcenterNamespaceManagementLoadBalancersUpdateSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementLoadBalancersUpdateSpec) Get() *VcenterNamespaceManagementLoadBalancersUpdateSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementLoadBalancersUpdateSpec) Set(val *VcenterNamespaceManagementLoadBalancersUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementLoadBalancersUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementLoadBalancersUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementLoadBalancersUpdateSpec(val *VcenterNamespaceManagementLoadBalancersUpdateSpec) *NullableVcenterNamespaceManagementLoadBalancersUpdateSpec {
	return &NullableVcenterNamespaceManagementLoadBalancersUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementLoadBalancersUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementLoadBalancersUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


