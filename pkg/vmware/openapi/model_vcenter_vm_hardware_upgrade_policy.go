/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareUpgradePolicy The Hardware.UpgradePolicy enumerated type defines the valid virtual hardware upgrade policies for a virtual machine.
type VcenterVmHardwareUpgradePolicy string

// List of vcenter.vm.hardware.upgrade_policy
const (
	VCENTERVMHARDWAREUPGRADEPOLICY_NEVER VcenterVmHardwareUpgradePolicy = "NEVER"
	VCENTERVMHARDWAREUPGRADEPOLICY_AFTER_CLEAN_SHUTDOWN VcenterVmHardwareUpgradePolicy = "AFTER_CLEAN_SHUTDOWN"
	VCENTERVMHARDWAREUPGRADEPOLICY_ALWAYS VcenterVmHardwareUpgradePolicy = "ALWAYS"
)

// All allowed values of VcenterVmHardwareUpgradePolicy enum
var AllowedVcenterVmHardwareUpgradePolicyEnumValues = []VcenterVmHardwareUpgradePolicy{
	"NEVER",
	"AFTER_CLEAN_SHUTDOWN",
	"ALWAYS",
}

func (v *VcenterVmHardwareUpgradePolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareUpgradePolicy(value)
	for _, existing := range AllowedVcenterVmHardwareUpgradePolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareUpgradePolicy", value)
}

// NewVcenterVmHardwareUpgradePolicyFromValue returns a pointer to a valid VcenterVmHardwareUpgradePolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareUpgradePolicyFromValue(v string) (*VcenterVmHardwareUpgradePolicy, error) {
	ev := VcenterVmHardwareUpgradePolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareUpgradePolicy: valid values are %v", v, AllowedVcenterVmHardwareUpgradePolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareUpgradePolicy) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareUpgradePolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.upgrade_policy value
func (v VcenterVmHardwareUpgradePolicy) Ptr() *VcenterVmHardwareUpgradePolicy {
	return &v
}

type NullableVcenterVmHardwareUpgradePolicy struct {
	value *VcenterVmHardwareUpgradePolicy
	isSet bool
}

func (v NullableVcenterVmHardwareUpgradePolicy) Get() *VcenterVmHardwareUpgradePolicy {
	return v.value
}

func (v *NullableVcenterVmHardwareUpgradePolicy) Set(val *VcenterVmHardwareUpgradePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareUpgradePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareUpgradePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareUpgradePolicy(val *VcenterVmHardwareUpgradePolicy) *NullableVcenterVmHardwareUpgradePolicy {
	return &NullableVcenterVmHardwareUpgradePolicy{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareUpgradePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareUpgradePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

