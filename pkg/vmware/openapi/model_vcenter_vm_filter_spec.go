/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMFilterSpec struct for VcenterVMFilterSpec
type VcenterVMFilterSpec struct {
	// Identifiers of virtual machines that can match the filter. If unset or empty, virtual machines with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: VirtualMachine.
	Vms *[]string `json:"vms,omitempty"`
	// Names that virtual machines must have to match the filter (see VM.Info.name). If unset or empty, virtual machines with any name match the filter.
	Names *[]string `json:"names,omitempty"`
	// Folders that must contain the virtual machine for the virtual machine to match the filter. If unset or empty, virtual machines in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.
	Folders *[]string `json:"folders,omitempty"`
	// Datacenters that must contain the virtual machine for the virtual machine to match the filter. If unset or empty, virtual machines in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.
	Datacenters *[]string `json:"datacenters,omitempty"`
	// Hosts that must contain the virtual machine for the virtual machine to match the filter. If unset or empty, virtual machines on any host match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.
	Hosts *[]string `json:"hosts,omitempty"`
	// Clusters that must contain the virtual machine for the virtual machine to match the filter. If unset or empty, virtual machines in any cluster match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.
	Clusters *[]string `json:"clusters,omitempty"`
	// Resource pools that must contain the virtual machine for the virtual machine to match the filter. If unset or empty, virtual machines in any resource pool match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.
	ResourcePools *[]string `json:"resource_pools,omitempty"`
	// Power states that a virtual machine must be in to match the filter (see Power.Info.state. If unset or empty, virtual machines in any power state match the filter.
	PowerStates *[]VcenterVmPowerState `json:"power_states,omitempty"`
}

// NewVcenterVMFilterSpec instantiates a new VcenterVMFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMFilterSpec() *VcenterVMFilterSpec {
	this := VcenterVMFilterSpec{}
	return &this
}

// NewVcenterVMFilterSpecWithDefaults instantiates a new VcenterVMFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMFilterSpecWithDefaults() *VcenterVMFilterSpec {
	this := VcenterVMFilterSpec{}
	return &this
}

// GetVms returns the Vms field value if set, zero value otherwise.
func (o *VcenterVMFilterSpec) GetVms() []string {
	if o == nil || o.Vms == nil {
		var ret []string
		return ret
	}
	return *o.Vms
}

// GetVmsOk returns a tuple with the Vms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMFilterSpec) GetVmsOk() (*[]string, bool) {
	if o == nil || o.Vms == nil {
		return nil, false
	}
	return o.Vms, true
}

// HasVms returns a boolean if a field has been set.
func (o *VcenterVMFilterSpec) HasVms() bool {
	if o != nil && o.Vms != nil {
		return true
	}

	return false
}

// SetVms gets a reference to the given []string and assigns it to the Vms field.
func (o *VcenterVMFilterSpec) SetVms(v []string) {
	o.Vms = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *VcenterVMFilterSpec) GetNames() []string {
	if o == nil || o.Names == nil {
		var ret []string
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMFilterSpec) GetNamesOk() (*[]string, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *VcenterVMFilterSpec) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *VcenterVMFilterSpec) SetNames(v []string) {
	o.Names = &v
}

// GetFolders returns the Folders field value if set, zero value otherwise.
func (o *VcenterVMFilterSpec) GetFolders() []string {
	if o == nil || o.Folders == nil {
		var ret []string
		return ret
	}
	return *o.Folders
}

// GetFoldersOk returns a tuple with the Folders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMFilterSpec) GetFoldersOk() (*[]string, bool) {
	if o == nil || o.Folders == nil {
		return nil, false
	}
	return o.Folders, true
}

// HasFolders returns a boolean if a field has been set.
func (o *VcenterVMFilterSpec) HasFolders() bool {
	if o != nil && o.Folders != nil {
		return true
	}

	return false
}

// SetFolders gets a reference to the given []string and assigns it to the Folders field.
func (o *VcenterVMFilterSpec) SetFolders(v []string) {
	o.Folders = &v
}

// GetDatacenters returns the Datacenters field value if set, zero value otherwise.
func (o *VcenterVMFilterSpec) GetDatacenters() []string {
	if o == nil || o.Datacenters == nil {
		var ret []string
		return ret
	}
	return *o.Datacenters
}

// GetDatacentersOk returns a tuple with the Datacenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMFilterSpec) GetDatacentersOk() (*[]string, bool) {
	if o == nil || o.Datacenters == nil {
		return nil, false
	}
	return o.Datacenters, true
}

// HasDatacenters returns a boolean if a field has been set.
func (o *VcenterVMFilterSpec) HasDatacenters() bool {
	if o != nil && o.Datacenters != nil {
		return true
	}

	return false
}

// SetDatacenters gets a reference to the given []string and assigns it to the Datacenters field.
func (o *VcenterVMFilterSpec) SetDatacenters(v []string) {
	o.Datacenters = &v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *VcenterVMFilterSpec) GetHosts() []string {
	if o == nil || o.Hosts == nil {
		var ret []string
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMFilterSpec) GetHostsOk() (*[]string, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *VcenterVMFilterSpec) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *VcenterVMFilterSpec) SetHosts(v []string) {
	o.Hosts = &v
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *VcenterVMFilterSpec) GetClusters() []string {
	if o == nil || o.Clusters == nil {
		var ret []string
		return ret
	}
	return *o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMFilterSpec) GetClustersOk() (*[]string, bool) {
	if o == nil || o.Clusters == nil {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *VcenterVMFilterSpec) HasClusters() bool {
	if o != nil && o.Clusters != nil {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []string and assigns it to the Clusters field.
func (o *VcenterVMFilterSpec) SetClusters(v []string) {
	o.Clusters = &v
}

// GetResourcePools returns the ResourcePools field value if set, zero value otherwise.
func (o *VcenterVMFilterSpec) GetResourcePools() []string {
	if o == nil || o.ResourcePools == nil {
		var ret []string
		return ret
	}
	return *o.ResourcePools
}

// GetResourcePoolsOk returns a tuple with the ResourcePools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMFilterSpec) GetResourcePoolsOk() (*[]string, bool) {
	if o == nil || o.ResourcePools == nil {
		return nil, false
	}
	return o.ResourcePools, true
}

// HasResourcePools returns a boolean if a field has been set.
func (o *VcenterVMFilterSpec) HasResourcePools() bool {
	if o != nil && o.ResourcePools != nil {
		return true
	}

	return false
}

// SetResourcePools gets a reference to the given []string and assigns it to the ResourcePools field.
func (o *VcenterVMFilterSpec) SetResourcePools(v []string) {
	o.ResourcePools = &v
}

// GetPowerStates returns the PowerStates field value if set, zero value otherwise.
func (o *VcenterVMFilterSpec) GetPowerStates() []VcenterVmPowerState {
	if o == nil || o.PowerStates == nil {
		var ret []VcenterVmPowerState
		return ret
	}
	return *o.PowerStates
}

// GetPowerStatesOk returns a tuple with the PowerStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMFilterSpec) GetPowerStatesOk() (*[]VcenterVmPowerState, bool) {
	if o == nil || o.PowerStates == nil {
		return nil, false
	}
	return o.PowerStates, true
}

// HasPowerStates returns a boolean if a field has been set.
func (o *VcenterVMFilterSpec) HasPowerStates() bool {
	if o != nil && o.PowerStates != nil {
		return true
	}

	return false
}

// SetPowerStates gets a reference to the given []VcenterVmPowerState and assigns it to the PowerStates field.
func (o *VcenterVMFilterSpec) SetPowerStates(v []VcenterVmPowerState) {
	o.PowerStates = &v
}

func (o VcenterVMFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Vms != nil {
		toSerialize["vms"] = o.Vms
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	if o.Folders != nil {
		toSerialize["folders"] = o.Folders
	}
	if o.Datacenters != nil {
		toSerialize["datacenters"] = o.Datacenters
	}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	if o.Clusters != nil {
		toSerialize["clusters"] = o.Clusters
	}
	if o.ResourcePools != nil {
		toSerialize["resource_pools"] = o.ResourcePools
	}
	if o.PowerStates != nil {
		toSerialize["power_states"] = o.PowerStates
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMFilterSpec struct {
	value *VcenterVMFilterSpec
	isSet bool
}

func (v NullableVcenterVMFilterSpec) Get() *VcenterVMFilterSpec {
	return v.value
}

func (v *NullableVcenterVMFilterSpec) Set(val *VcenterVMFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMFilterSpec(val *VcenterVMFilterSpec) *NullableVcenterVMFilterSpec {
	return &NullableVcenterVMFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterVMFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


