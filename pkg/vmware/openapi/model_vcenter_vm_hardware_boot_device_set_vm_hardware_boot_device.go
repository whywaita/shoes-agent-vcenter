/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareBootDeviceSetVmHardwareBootDevice struct for VcenterVmHardwareBootDeviceSetVmHardwareBootDevice
type VcenterVmHardwareBootDeviceSetVmHardwareBootDevice struct {
	// Ordered list of boot devices.
	Devices *[]VcenterVmHardwareBootDeviceEntry `json:"devices,omitempty"`
}

// NewVcenterVmHardwareBootDeviceSetVmHardwareBootDevice instantiates a new VcenterVmHardwareBootDeviceSetVmHardwareBootDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareBootDeviceSetVmHardwareBootDevice() *VcenterVmHardwareBootDeviceSetVmHardwareBootDevice {
	this := VcenterVmHardwareBootDeviceSetVmHardwareBootDevice{}
	return &this
}

// NewVcenterVmHardwareBootDeviceSetVmHardwareBootDeviceWithDefaults instantiates a new VcenterVmHardwareBootDeviceSetVmHardwareBootDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareBootDeviceSetVmHardwareBootDeviceWithDefaults() *VcenterVmHardwareBootDeviceSetVmHardwareBootDevice {
	this := VcenterVmHardwareBootDeviceSetVmHardwareBootDevice{}
	return &this
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *VcenterVmHardwareBootDeviceSetVmHardwareBootDevice) GetDevices() []VcenterVmHardwareBootDeviceEntry {
	if o == nil || o.Devices == nil {
		var ret []VcenterVmHardwareBootDeviceEntry
		return ret
	}
	return *o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareBootDeviceSetVmHardwareBootDevice) GetDevicesOk() (*[]VcenterVmHardwareBootDeviceEntry, bool) {
	if o == nil || o.Devices == nil {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *VcenterVmHardwareBootDeviceSetVmHardwareBootDevice) HasDevices() bool {
	if o != nil && o.Devices != nil {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []VcenterVmHardwareBootDeviceEntry and assigns it to the Devices field.
func (o *VcenterVmHardwareBootDeviceSetVmHardwareBootDevice) SetDevices(v []VcenterVmHardwareBootDeviceEntry) {
	o.Devices = &v
}

func (o VcenterVmHardwareBootDeviceSetVmHardwareBootDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Devices != nil {
		toSerialize["devices"] = o.Devices
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareBootDeviceSetVmHardwareBootDevice struct {
	value *VcenterVmHardwareBootDeviceSetVmHardwareBootDevice
	isSet bool
}

func (v NullableVcenterVmHardwareBootDeviceSetVmHardwareBootDevice) Get() *VcenterVmHardwareBootDeviceSetVmHardwareBootDevice {
	return v.value
}

func (v *NullableVcenterVmHardwareBootDeviceSetVmHardwareBootDevice) Set(val *VcenterVmHardwareBootDeviceSetVmHardwareBootDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareBootDeviceSetVmHardwareBootDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareBootDeviceSetVmHardwareBootDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareBootDeviceSetVmHardwareBootDevice(val *VcenterVmHardwareBootDeviceSetVmHardwareBootDevice) *NullableVcenterVmHardwareBootDeviceSetVmHardwareBootDevice {
	return &NullableVcenterVmHardwareBootDeviceSetVmHardwareBootDevice{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareBootDeviceSetVmHardwareBootDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareBootDeviceSetVmHardwareBootDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


