/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCryptoManagerKmsProvidersFilterSpec struct for VcenterCryptoManagerKmsProvidersFilterSpec
type VcenterCryptoManagerKmsProvidersFilterSpec struct {
	// Provider identifiers. If unset or empty, the result will not be filtered by provider identifier. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.crypto_manager.kms.provider. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.crypto_manager.kms.provider.
	Providers *[]string `json:"providers,omitempty"`
	// Provider health status. If unset or empty, the result will not be filtered by provider health status.
	Health *[]VcenterCryptoManagerKmsProvidersHealth `json:"health,omitempty"`
}

// NewVcenterCryptoManagerKmsProvidersFilterSpec instantiates a new VcenterCryptoManagerKmsProvidersFilterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCryptoManagerKmsProvidersFilterSpec() *VcenterCryptoManagerKmsProvidersFilterSpec {
	this := VcenterCryptoManagerKmsProvidersFilterSpec{}
	return &this
}

// NewVcenterCryptoManagerKmsProvidersFilterSpecWithDefaults instantiates a new VcenterCryptoManagerKmsProvidersFilterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCryptoManagerKmsProvidersFilterSpecWithDefaults() *VcenterCryptoManagerKmsProvidersFilterSpec {
	this := VcenterCryptoManagerKmsProvidersFilterSpec{}
	return &this
}

// GetProviders returns the Providers field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersFilterSpec) GetProviders() []string {
	if o == nil || o.Providers == nil {
		var ret []string
		return ret
	}
	return *o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersFilterSpec) GetProvidersOk() (*[]string, bool) {
	if o == nil || o.Providers == nil {
		return nil, false
	}
	return o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersFilterSpec) HasProviders() bool {
	if o != nil && o.Providers != nil {
		return true
	}

	return false
}

// SetProviders gets a reference to the given []string and assigns it to the Providers field.
func (o *VcenterCryptoManagerKmsProvidersFilterSpec) SetProviders(v []string) {
	o.Providers = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersFilterSpec) GetHealth() []VcenterCryptoManagerKmsProvidersHealth {
	if o == nil || o.Health == nil {
		var ret []VcenterCryptoManagerKmsProvidersHealth
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersFilterSpec) GetHealthOk() (*[]VcenterCryptoManagerKmsProvidersHealth, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersFilterSpec) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given []VcenterCryptoManagerKmsProvidersHealth and assigns it to the Health field.
func (o *VcenterCryptoManagerKmsProvidersFilterSpec) SetHealth(v []VcenterCryptoManagerKmsProvidersHealth) {
	o.Health = &v
}

func (o VcenterCryptoManagerKmsProvidersFilterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Providers != nil {
		toSerialize["providers"] = o.Providers
	}
	if o.Health != nil {
		toSerialize["health"] = o.Health
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCryptoManagerKmsProvidersFilterSpec struct {
	value *VcenterCryptoManagerKmsProvidersFilterSpec
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersFilterSpec) Get() *VcenterCryptoManagerKmsProvidersFilterSpec {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersFilterSpec) Set(val *VcenterCryptoManagerKmsProvidersFilterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersFilterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersFilterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersFilterSpec(val *VcenterCryptoManagerKmsProvidersFilterSpec) *NullableVcenterCryptoManagerKmsProvidersFilterSpec {
	return &NullableVcenterCryptoManagerKmsProvidersFilterSpec{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersFilterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersFilterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


