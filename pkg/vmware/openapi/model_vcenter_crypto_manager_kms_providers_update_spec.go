/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCryptoManagerKmsProvidersUpdateSpec struct for VcenterCryptoManagerKmsProvidersUpdateSpec
type VcenterCryptoManagerKmsProvidersUpdateSpec struct {
	NativeSpec *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec `json:"native_spec,omitempty"`
}

// NewVcenterCryptoManagerKmsProvidersUpdateSpec instantiates a new VcenterCryptoManagerKmsProvidersUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCryptoManagerKmsProvidersUpdateSpec() *VcenterCryptoManagerKmsProvidersUpdateSpec {
	this := VcenterCryptoManagerKmsProvidersUpdateSpec{}
	return &this
}

// NewVcenterCryptoManagerKmsProvidersUpdateSpecWithDefaults instantiates a new VcenterCryptoManagerKmsProvidersUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCryptoManagerKmsProvidersUpdateSpecWithDefaults() *VcenterCryptoManagerKmsProvidersUpdateSpec {
	this := VcenterCryptoManagerKmsProvidersUpdateSpec{}
	return &this
}

// GetNativeSpec returns the NativeSpec field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersUpdateSpec) GetNativeSpec() VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec {
	if o == nil || o.NativeSpec == nil {
		var ret VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec
		return ret
	}
	return *o.NativeSpec
}

// GetNativeSpecOk returns a tuple with the NativeSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersUpdateSpec) GetNativeSpecOk() (*VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec, bool) {
	if o == nil || o.NativeSpec == nil {
		return nil, false
	}
	return o.NativeSpec, true
}

// HasNativeSpec returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersUpdateSpec) HasNativeSpec() bool {
	if o != nil && o.NativeSpec != nil {
		return true
	}

	return false
}

// SetNativeSpec gets a reference to the given VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec and assigns it to the NativeSpec field.
func (o *VcenterCryptoManagerKmsProvidersUpdateSpec) SetNativeSpec(v VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) {
	o.NativeSpec = &v
}

func (o VcenterCryptoManagerKmsProvidersUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NativeSpec != nil {
		toSerialize["native_spec"] = o.NativeSpec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCryptoManagerKmsProvidersUpdateSpec struct {
	value *VcenterCryptoManagerKmsProvidersUpdateSpec
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersUpdateSpec) Get() *VcenterCryptoManagerKmsProvidersUpdateSpec {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersUpdateSpec) Set(val *VcenterCryptoManagerKmsProvidersUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersUpdateSpec(val *VcenterCryptoManagerKmsProvidersUpdateSpec) *NullableVcenterCryptoManagerKmsProvidersUpdateSpec {
	return &NullableVcenterCryptoManagerKmsProvidersUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


