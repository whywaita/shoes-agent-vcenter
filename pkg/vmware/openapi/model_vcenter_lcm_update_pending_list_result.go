/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// VcenterLcmUpdatePendingListResult struct for VcenterLcmUpdatePendingListResult
type VcenterLcmUpdatePendingListResult struct {
	// Time when the software depo was last checked.
	LastCheckTime time.Time `json:"last_check_time"`
	// Number of pending updates Only set if there are available updates
	UpdateCount *int64 `json:"update_count,omitempty"`
	// Number of pending upgrades Only set if there are available upgrades
	UpgradeCount *int64 `json:"upgrade_count,omitempty"`
	// List of pending update details
	Updates []VcenterLcmUpdatePendingSummary `json:"updates"`
	Issues *VcenterLcmNotifications `json:"issues,omitempty"`
}

// NewVcenterLcmUpdatePendingListResult instantiates a new VcenterLcmUpdatePendingListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterLcmUpdatePendingListResult(lastCheckTime time.Time, updates []VcenterLcmUpdatePendingSummary) *VcenterLcmUpdatePendingListResult {
	this := VcenterLcmUpdatePendingListResult{}
	this.LastCheckTime = lastCheckTime
	this.Updates = updates
	return &this
}

// NewVcenterLcmUpdatePendingListResultWithDefaults instantiates a new VcenterLcmUpdatePendingListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterLcmUpdatePendingListResultWithDefaults() *VcenterLcmUpdatePendingListResult {
	this := VcenterLcmUpdatePendingListResult{}
	return &this
}

// GetLastCheckTime returns the LastCheckTime field value
func (o *VcenterLcmUpdatePendingListResult) GetLastCheckTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastCheckTime
}

// GetLastCheckTimeOk returns a tuple with the LastCheckTime field value
// and a boolean to check if the value has been set.
func (o *VcenterLcmUpdatePendingListResult) GetLastCheckTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LastCheckTime, true
}

// SetLastCheckTime sets field value
func (o *VcenterLcmUpdatePendingListResult) SetLastCheckTime(v time.Time) {
	o.LastCheckTime = v
}

// GetUpdateCount returns the UpdateCount field value if set, zero value otherwise.
func (o *VcenterLcmUpdatePendingListResult) GetUpdateCount() int64 {
	if o == nil || o.UpdateCount == nil {
		var ret int64
		return ret
	}
	return *o.UpdateCount
}

// GetUpdateCountOk returns a tuple with the UpdateCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterLcmUpdatePendingListResult) GetUpdateCountOk() (*int64, bool) {
	if o == nil || o.UpdateCount == nil {
		return nil, false
	}
	return o.UpdateCount, true
}

// HasUpdateCount returns a boolean if a field has been set.
func (o *VcenterLcmUpdatePendingListResult) HasUpdateCount() bool {
	if o != nil && o.UpdateCount != nil {
		return true
	}

	return false
}

// SetUpdateCount gets a reference to the given int64 and assigns it to the UpdateCount field.
func (o *VcenterLcmUpdatePendingListResult) SetUpdateCount(v int64) {
	o.UpdateCount = &v
}

// GetUpgradeCount returns the UpgradeCount field value if set, zero value otherwise.
func (o *VcenterLcmUpdatePendingListResult) GetUpgradeCount() int64 {
	if o == nil || o.UpgradeCount == nil {
		var ret int64
		return ret
	}
	return *o.UpgradeCount
}

// GetUpgradeCountOk returns a tuple with the UpgradeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterLcmUpdatePendingListResult) GetUpgradeCountOk() (*int64, bool) {
	if o == nil || o.UpgradeCount == nil {
		return nil, false
	}
	return o.UpgradeCount, true
}

// HasUpgradeCount returns a boolean if a field has been set.
func (o *VcenterLcmUpdatePendingListResult) HasUpgradeCount() bool {
	if o != nil && o.UpgradeCount != nil {
		return true
	}

	return false
}

// SetUpgradeCount gets a reference to the given int64 and assigns it to the UpgradeCount field.
func (o *VcenterLcmUpdatePendingListResult) SetUpgradeCount(v int64) {
	o.UpgradeCount = &v
}

// GetUpdates returns the Updates field value
func (o *VcenterLcmUpdatePendingListResult) GetUpdates() []VcenterLcmUpdatePendingSummary {
	if o == nil {
		var ret []VcenterLcmUpdatePendingSummary
		return ret
	}

	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value
// and a boolean to check if the value has been set.
func (o *VcenterLcmUpdatePendingListResult) GetUpdatesOk() (*[]VcenterLcmUpdatePendingSummary, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Updates, true
}

// SetUpdates sets field value
func (o *VcenterLcmUpdatePendingListResult) SetUpdates(v []VcenterLcmUpdatePendingSummary) {
	o.Updates = v
}

// GetIssues returns the Issues field value if set, zero value otherwise.
func (o *VcenterLcmUpdatePendingListResult) GetIssues() VcenterLcmNotifications {
	if o == nil || o.Issues == nil {
		var ret VcenterLcmNotifications
		return ret
	}
	return *o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterLcmUpdatePendingListResult) GetIssuesOk() (*VcenterLcmNotifications, bool) {
	if o == nil || o.Issues == nil {
		return nil, false
	}
	return o.Issues, true
}

// HasIssues returns a boolean if a field has been set.
func (o *VcenterLcmUpdatePendingListResult) HasIssues() bool {
	if o != nil && o.Issues != nil {
		return true
	}

	return false
}

// SetIssues gets a reference to the given VcenterLcmNotifications and assigns it to the Issues field.
func (o *VcenterLcmUpdatePendingListResult) SetIssues(v VcenterLcmNotifications) {
	o.Issues = &v
}

func (o VcenterLcmUpdatePendingListResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["last_check_time"] = o.LastCheckTime
	}
	if o.UpdateCount != nil {
		toSerialize["update_count"] = o.UpdateCount
	}
	if o.UpgradeCount != nil {
		toSerialize["upgrade_count"] = o.UpgradeCount
	}
	if true {
		toSerialize["updates"] = o.Updates
	}
	if o.Issues != nil {
		toSerialize["issues"] = o.Issues
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterLcmUpdatePendingListResult struct {
	value *VcenterLcmUpdatePendingListResult
	isSet bool
}

func (v NullableVcenterLcmUpdatePendingListResult) Get() *VcenterLcmUpdatePendingListResult {
	return v.value
}

func (v *NullableVcenterLcmUpdatePendingListResult) Set(val *VcenterLcmUpdatePendingListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterLcmUpdatePendingListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterLcmUpdatePendingListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterLcmUpdatePendingListResult(val *VcenterLcmUpdatePendingListResult) *NullableVcenterLcmUpdatePendingListResult {
	return &NullableVcenterLcmUpdatePendingListResult{value: val, isSet: true}
}

func (v NullableVcenterLcmUpdatePendingListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterLcmUpdatePendingListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


