/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareUpdateSpec struct for VcenterVmHardwareUpdateSpec
type VcenterVmHardwareUpdateSpec struct {
	UpgradePolicy *VcenterVmHardwareUpgradePolicy `json:"upgrade_policy,omitempty"`
	UpgradeVersion *VcenterVmHardwareVersion `json:"upgrade_version,omitempty"`
}

// NewVcenterVmHardwareUpdateSpec instantiates a new VcenterVmHardwareUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareUpdateSpec() *VcenterVmHardwareUpdateSpec {
	this := VcenterVmHardwareUpdateSpec{}
	return &this
}

// NewVcenterVmHardwareUpdateSpecWithDefaults instantiates a new VcenterVmHardwareUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareUpdateSpecWithDefaults() *VcenterVmHardwareUpdateSpec {
	this := VcenterVmHardwareUpdateSpec{}
	return &this
}

// GetUpgradePolicy returns the UpgradePolicy field value if set, zero value otherwise.
func (o *VcenterVmHardwareUpdateSpec) GetUpgradePolicy() VcenterVmHardwareUpgradePolicy {
	if o == nil || o.UpgradePolicy == nil {
		var ret VcenterVmHardwareUpgradePolicy
		return ret
	}
	return *o.UpgradePolicy
}

// GetUpgradePolicyOk returns a tuple with the UpgradePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareUpdateSpec) GetUpgradePolicyOk() (*VcenterVmHardwareUpgradePolicy, bool) {
	if o == nil || o.UpgradePolicy == nil {
		return nil, false
	}
	return o.UpgradePolicy, true
}

// HasUpgradePolicy returns a boolean if a field has been set.
func (o *VcenterVmHardwareUpdateSpec) HasUpgradePolicy() bool {
	if o != nil && o.UpgradePolicy != nil {
		return true
	}

	return false
}

// SetUpgradePolicy gets a reference to the given VcenterVmHardwareUpgradePolicy and assigns it to the UpgradePolicy field.
func (o *VcenterVmHardwareUpdateSpec) SetUpgradePolicy(v VcenterVmHardwareUpgradePolicy) {
	o.UpgradePolicy = &v
}

// GetUpgradeVersion returns the UpgradeVersion field value if set, zero value otherwise.
func (o *VcenterVmHardwareUpdateSpec) GetUpgradeVersion() VcenterVmHardwareVersion {
	if o == nil || o.UpgradeVersion == nil {
		var ret VcenterVmHardwareVersion
		return ret
	}
	return *o.UpgradeVersion
}

// GetUpgradeVersionOk returns a tuple with the UpgradeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareUpdateSpec) GetUpgradeVersionOk() (*VcenterVmHardwareVersion, bool) {
	if o == nil || o.UpgradeVersion == nil {
		return nil, false
	}
	return o.UpgradeVersion, true
}

// HasUpgradeVersion returns a boolean if a field has been set.
func (o *VcenterVmHardwareUpdateSpec) HasUpgradeVersion() bool {
	if o != nil && o.UpgradeVersion != nil {
		return true
	}

	return false
}

// SetUpgradeVersion gets a reference to the given VcenterVmHardwareVersion and assigns it to the UpgradeVersion field.
func (o *VcenterVmHardwareUpdateSpec) SetUpgradeVersion(v VcenterVmHardwareVersion) {
	o.UpgradeVersion = &v
}

func (o VcenterVmHardwareUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpgradePolicy != nil {
		toSerialize["upgrade_policy"] = o.UpgradePolicy
	}
	if o.UpgradeVersion != nil {
		toSerialize["upgrade_version"] = o.UpgradeVersion
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareUpdateSpec struct {
	value *VcenterVmHardwareUpdateSpec
	isSet bool
}

func (v NullableVcenterVmHardwareUpdateSpec) Get() *VcenterVmHardwareUpdateSpec {
	return v.value
}

func (v *NullableVcenterVmHardwareUpdateSpec) Set(val *VcenterVmHardwareUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareUpdateSpec(val *VcenterVmHardwareUpdateSpec) *NullableVcenterVmHardwareUpdateSpec {
	return &NullableVcenterVmHardwareUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


