/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentRemotePscSpec struct for VcenterDeploymentRemotePscSpec
type VcenterDeploymentRemotePscSpec struct {
	// The IP address or DNS resolvable name of the remote PSC to which this configuring vCenter Server will be registered to.
	PscHostname string `json:"psc_hostname"`
	// The HTTPS port of the external PSC appliance. If unset, port 443 will be used.
	HttpsPort *int64 `json:"https_port,omitempty"`
	// The SSO administrator account password.
	SsoAdminPassword string `json:"sso_admin_password"`
	// SHA1 thumbprint of the server SSL certificate will be used for verification when ssl_verify field is set to true. This field is only relevant if RemotePscSpec.ssl-verify is unset or has the value true.
	SslThumbprint *string `json:"ssl_thumbprint,omitempty"`
	// SSL verification should be enabled or disabled. If RemotePscSpec.ssl-verify is true and and RemotePscSpec.ssl-thumbprint is unset, the CA certificate will be used for verification. If RemotePscSpec.ssl-verify is true and RemotePscSpec.ssl-thumbprint is set then the thumbprint will be used for verification. No verification will be performed if RemotePscSpec.ssl-verify value is set to false. If unset, RemotePscSpec.ssl-verify true will be used.
	SslVerify *bool `json:"ssl_verify,omitempty"`
}

// NewVcenterDeploymentRemotePscSpec instantiates a new VcenterDeploymentRemotePscSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentRemotePscSpec(pscHostname string, ssoAdminPassword string) *VcenterDeploymentRemotePscSpec {
	this := VcenterDeploymentRemotePscSpec{}
	this.PscHostname = pscHostname
	this.SsoAdminPassword = ssoAdminPassword
	return &this
}

// NewVcenterDeploymentRemotePscSpecWithDefaults instantiates a new VcenterDeploymentRemotePscSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentRemotePscSpecWithDefaults() *VcenterDeploymentRemotePscSpec {
	this := VcenterDeploymentRemotePscSpec{}
	return &this
}

// GetPscHostname returns the PscHostname field value
func (o *VcenterDeploymentRemotePscSpec) GetPscHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PscHostname
}

// GetPscHostnameOk returns a tuple with the PscHostname field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentRemotePscSpec) GetPscHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PscHostname, true
}

// SetPscHostname sets field value
func (o *VcenterDeploymentRemotePscSpec) SetPscHostname(v string) {
	o.PscHostname = v
}

// GetHttpsPort returns the HttpsPort field value if set, zero value otherwise.
func (o *VcenterDeploymentRemotePscSpec) GetHttpsPort() int64 {
	if o == nil || o.HttpsPort == nil {
		var ret int64
		return ret
	}
	return *o.HttpsPort
}

// GetHttpsPortOk returns a tuple with the HttpsPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentRemotePscSpec) GetHttpsPortOk() (*int64, bool) {
	if o == nil || o.HttpsPort == nil {
		return nil, false
	}
	return o.HttpsPort, true
}

// HasHttpsPort returns a boolean if a field has been set.
func (o *VcenterDeploymentRemotePscSpec) HasHttpsPort() bool {
	if o != nil && o.HttpsPort != nil {
		return true
	}

	return false
}

// SetHttpsPort gets a reference to the given int64 and assigns it to the HttpsPort field.
func (o *VcenterDeploymentRemotePscSpec) SetHttpsPort(v int64) {
	o.HttpsPort = &v
}

// GetSsoAdminPassword returns the SsoAdminPassword field value
func (o *VcenterDeploymentRemotePscSpec) GetSsoAdminPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SsoAdminPassword
}

// GetSsoAdminPasswordOk returns a tuple with the SsoAdminPassword field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentRemotePscSpec) GetSsoAdminPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SsoAdminPassword, true
}

// SetSsoAdminPassword sets field value
func (o *VcenterDeploymentRemotePscSpec) SetSsoAdminPassword(v string) {
	o.SsoAdminPassword = v
}

// GetSslThumbprint returns the SslThumbprint field value if set, zero value otherwise.
func (o *VcenterDeploymentRemotePscSpec) GetSslThumbprint() string {
	if o == nil || o.SslThumbprint == nil {
		var ret string
		return ret
	}
	return *o.SslThumbprint
}

// GetSslThumbprintOk returns a tuple with the SslThumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentRemotePscSpec) GetSslThumbprintOk() (*string, bool) {
	if o == nil || o.SslThumbprint == nil {
		return nil, false
	}
	return o.SslThumbprint, true
}

// HasSslThumbprint returns a boolean if a field has been set.
func (o *VcenterDeploymentRemotePscSpec) HasSslThumbprint() bool {
	if o != nil && o.SslThumbprint != nil {
		return true
	}

	return false
}

// SetSslThumbprint gets a reference to the given string and assigns it to the SslThumbprint field.
func (o *VcenterDeploymentRemotePscSpec) SetSslThumbprint(v string) {
	o.SslThumbprint = &v
}

// GetSslVerify returns the SslVerify field value if set, zero value otherwise.
func (o *VcenterDeploymentRemotePscSpec) GetSslVerify() bool {
	if o == nil || o.SslVerify == nil {
		var ret bool
		return ret
	}
	return *o.SslVerify
}

// GetSslVerifyOk returns a tuple with the SslVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentRemotePscSpec) GetSslVerifyOk() (*bool, bool) {
	if o == nil || o.SslVerify == nil {
		return nil, false
	}
	return o.SslVerify, true
}

// HasSslVerify returns a boolean if a field has been set.
func (o *VcenterDeploymentRemotePscSpec) HasSslVerify() bool {
	if o != nil && o.SslVerify != nil {
		return true
	}

	return false
}

// SetSslVerify gets a reference to the given bool and assigns it to the SslVerify field.
func (o *VcenterDeploymentRemotePscSpec) SetSslVerify(v bool) {
	o.SslVerify = &v
}

func (o VcenterDeploymentRemotePscSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["psc_hostname"] = o.PscHostname
	}
	if o.HttpsPort != nil {
		toSerialize["https_port"] = o.HttpsPort
	}
	if true {
		toSerialize["sso_admin_password"] = o.SsoAdminPassword
	}
	if o.SslThumbprint != nil {
		toSerialize["ssl_thumbprint"] = o.SslThumbprint
	}
	if o.SslVerify != nil {
		toSerialize["ssl_verify"] = o.SslVerify
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentRemotePscSpec struct {
	value *VcenterDeploymentRemotePscSpec
	isSet bool
}

func (v NullableVcenterDeploymentRemotePscSpec) Get() *VcenterDeploymentRemotePscSpec {
	return v.value
}

func (v *NullableVcenterDeploymentRemotePscSpec) Set(val *VcenterDeploymentRemotePscSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentRemotePscSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentRemotePscSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentRemotePscSpec(val *VcenterDeploymentRemotePscSpec) *NullableVcenterDeploymentRemotePscSpec {
	return &NullableVcenterDeploymentRemotePscSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentRemotePscSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentRemotePscSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


