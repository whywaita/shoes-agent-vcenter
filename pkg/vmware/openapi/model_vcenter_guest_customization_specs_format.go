/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterGuestCustomizationSpecsFormat The CustomizationSpecs.Format enumerated type specifies the formats the customization specification can be exported to.
type VcenterGuestCustomizationSpecsFormat string

// List of vcenter.guest.customization_specs.format
const (
	VCENTERGUESTCUSTOMIZATIONSPECSFORMAT_JSON VcenterGuestCustomizationSpecsFormat = "JSON"
	VCENTERGUESTCUSTOMIZATIONSPECSFORMAT_XML VcenterGuestCustomizationSpecsFormat = "XML"
)

// All allowed values of VcenterGuestCustomizationSpecsFormat enum
var AllowedVcenterGuestCustomizationSpecsFormatEnumValues = []VcenterGuestCustomizationSpecsFormat{
	"JSON",
	"XML",
}

func (v *VcenterGuestCustomizationSpecsFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterGuestCustomizationSpecsFormat(value)
	for _, existing := range AllowedVcenterGuestCustomizationSpecsFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterGuestCustomizationSpecsFormat", value)
}

// NewVcenterGuestCustomizationSpecsFormatFromValue returns a pointer to a valid VcenterGuestCustomizationSpecsFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterGuestCustomizationSpecsFormatFromValue(v string) (*VcenterGuestCustomizationSpecsFormat, error) {
	ev := VcenterGuestCustomizationSpecsFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterGuestCustomizationSpecsFormat: valid values are %v", v, AllowedVcenterGuestCustomizationSpecsFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterGuestCustomizationSpecsFormat) IsValid() bool {
	for _, existing := range AllowedVcenterGuestCustomizationSpecsFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.guest.customization_specs.format value
func (v VcenterGuestCustomizationSpecsFormat) Ptr() *VcenterGuestCustomizationSpecsFormat {
	return &v
}

type NullableVcenterGuestCustomizationSpecsFormat struct {
	value *VcenterGuestCustomizationSpecsFormat
	isSet bool
}

func (v NullableVcenterGuestCustomizationSpecsFormat) Get() *VcenterGuestCustomizationSpecsFormat {
	return v.value
}

func (v *NullableVcenterGuestCustomizationSpecsFormat) Set(val *VcenterGuestCustomizationSpecsFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestCustomizationSpecsFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestCustomizationSpecsFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestCustomizationSpecsFormat(val *VcenterGuestCustomizationSpecsFormat) *NullableVcenterGuestCustomizationSpecsFormat {
	return &NullableVcenterGuestCustomizationSpecsFormat{value: val, isSet: true}
}

func (v NullableVcenterGuestCustomizationSpecsFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestCustomizationSpecsFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

