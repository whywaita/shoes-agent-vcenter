/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec struct for VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec
type VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec struct {
	// Key identifier for the provider.   The key identifier is required to be a 128-bit UUID represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format.  If unset, the key identifier will remain unchanged.
	KeyId *string `json:"key_id,omitempty"`
}

// NewVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec instantiates a new VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec() *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec {
	this := VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec{}
	return &this
}

// NewVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpecWithDefaults instantiates a new VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpecWithDefaults() *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec {
	this := VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec{}
	return &this
}

// GetKeyId returns the KeyId field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) GetKeyId() string {
	if o == nil || o.KeyId == nil {
		var ret string
		return ret
	}
	return *o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) GetKeyIdOk() (*string, bool) {
	if o == nil || o.KeyId == nil {
		return nil, false
	}
	return o.KeyId, true
}

// HasKeyId returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) HasKeyId() bool {
	if o != nil && o.KeyId != nil {
		return true
	}

	return false
}

// SetKeyId gets a reference to the given string and assigns it to the KeyId field.
func (o *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) SetKeyId(v string) {
	o.KeyId = &v
}

func (o VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KeyId != nil {
		toSerialize["key_id"] = o.KeyId
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec struct {
	value *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) Get() *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) Set(val *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec(val *VcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) *NullableVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec {
	return &NullableVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersNativeProviderUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


