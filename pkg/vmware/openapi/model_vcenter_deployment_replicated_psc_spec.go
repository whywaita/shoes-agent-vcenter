/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterDeploymentReplicatedPscSpec struct for VcenterDeploymentReplicatedPscSpec
type VcenterDeploymentReplicatedPscSpec struct {
	// The SSO sitename that will be used in PSC replication. If unset, default-first-site will be used.
	SsoSiteName *string `json:"sso_site_name,omitempty"`
	// The IP address or DNS resolvable name of the partner PSC appliance.
	PartnerHostname string `json:"partner_hostname"`
	// The HTTPS port of the external PSC appliance. If unset, port 443 will be used.
	HttpsPort *int64 `json:"https_port,omitempty"`
	// The SSO administrator account password.
	SsoAdminPassword string `json:"sso_admin_password"`
	// SHA1 thumbprint of the server SSL certificate will be used for verification. This field is only relevant if ReplicatedSpec.ssl-verify is unset or has the value true.
	SslThumbprint *string `json:"ssl_thumbprint,omitempty"`
	// SSL verification should be enabled or disabled. If unset, ssl_verify true will be used.
	SslVerify *bool `json:"ssl_verify,omitempty"`
}

// NewVcenterDeploymentReplicatedPscSpec instantiates a new VcenterDeploymentReplicatedPscSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterDeploymentReplicatedPscSpec(partnerHostname string, ssoAdminPassword string) *VcenterDeploymentReplicatedPscSpec {
	this := VcenterDeploymentReplicatedPscSpec{}
	this.PartnerHostname = partnerHostname
	this.SsoAdminPassword = ssoAdminPassword
	return &this
}

// NewVcenterDeploymentReplicatedPscSpecWithDefaults instantiates a new VcenterDeploymentReplicatedPscSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterDeploymentReplicatedPscSpecWithDefaults() *VcenterDeploymentReplicatedPscSpec {
	this := VcenterDeploymentReplicatedPscSpec{}
	return &this
}

// GetSsoSiteName returns the SsoSiteName field value if set, zero value otherwise.
func (o *VcenterDeploymentReplicatedPscSpec) GetSsoSiteName() string {
	if o == nil || o.SsoSiteName == nil {
		var ret string
		return ret
	}
	return *o.SsoSiteName
}

// GetSsoSiteNameOk returns a tuple with the SsoSiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentReplicatedPscSpec) GetSsoSiteNameOk() (*string, bool) {
	if o == nil || o.SsoSiteName == nil {
		return nil, false
	}
	return o.SsoSiteName, true
}

// HasSsoSiteName returns a boolean if a field has been set.
func (o *VcenterDeploymentReplicatedPscSpec) HasSsoSiteName() bool {
	if o != nil && o.SsoSiteName != nil {
		return true
	}

	return false
}

// SetSsoSiteName gets a reference to the given string and assigns it to the SsoSiteName field.
func (o *VcenterDeploymentReplicatedPscSpec) SetSsoSiteName(v string) {
	o.SsoSiteName = &v
}

// GetPartnerHostname returns the PartnerHostname field value
func (o *VcenterDeploymentReplicatedPscSpec) GetPartnerHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartnerHostname
}

// GetPartnerHostnameOk returns a tuple with the PartnerHostname field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentReplicatedPscSpec) GetPartnerHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PartnerHostname, true
}

// SetPartnerHostname sets field value
func (o *VcenterDeploymentReplicatedPscSpec) SetPartnerHostname(v string) {
	o.PartnerHostname = v
}

// GetHttpsPort returns the HttpsPort field value if set, zero value otherwise.
func (o *VcenterDeploymentReplicatedPscSpec) GetHttpsPort() int64 {
	if o == nil || o.HttpsPort == nil {
		var ret int64
		return ret
	}
	return *o.HttpsPort
}

// GetHttpsPortOk returns a tuple with the HttpsPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentReplicatedPscSpec) GetHttpsPortOk() (*int64, bool) {
	if o == nil || o.HttpsPort == nil {
		return nil, false
	}
	return o.HttpsPort, true
}

// HasHttpsPort returns a boolean if a field has been set.
func (o *VcenterDeploymentReplicatedPscSpec) HasHttpsPort() bool {
	if o != nil && o.HttpsPort != nil {
		return true
	}

	return false
}

// SetHttpsPort gets a reference to the given int64 and assigns it to the HttpsPort field.
func (o *VcenterDeploymentReplicatedPscSpec) SetHttpsPort(v int64) {
	o.HttpsPort = &v
}

// GetSsoAdminPassword returns the SsoAdminPassword field value
func (o *VcenterDeploymentReplicatedPscSpec) GetSsoAdminPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SsoAdminPassword
}

// GetSsoAdminPasswordOk returns a tuple with the SsoAdminPassword field value
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentReplicatedPscSpec) GetSsoAdminPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SsoAdminPassword, true
}

// SetSsoAdminPassword sets field value
func (o *VcenterDeploymentReplicatedPscSpec) SetSsoAdminPassword(v string) {
	o.SsoAdminPassword = v
}

// GetSslThumbprint returns the SslThumbprint field value if set, zero value otherwise.
func (o *VcenterDeploymentReplicatedPscSpec) GetSslThumbprint() string {
	if o == nil || o.SslThumbprint == nil {
		var ret string
		return ret
	}
	return *o.SslThumbprint
}

// GetSslThumbprintOk returns a tuple with the SslThumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentReplicatedPscSpec) GetSslThumbprintOk() (*string, bool) {
	if o == nil || o.SslThumbprint == nil {
		return nil, false
	}
	return o.SslThumbprint, true
}

// HasSslThumbprint returns a boolean if a field has been set.
func (o *VcenterDeploymentReplicatedPscSpec) HasSslThumbprint() bool {
	if o != nil && o.SslThumbprint != nil {
		return true
	}

	return false
}

// SetSslThumbprint gets a reference to the given string and assigns it to the SslThumbprint field.
func (o *VcenterDeploymentReplicatedPscSpec) SetSslThumbprint(v string) {
	o.SslThumbprint = &v
}

// GetSslVerify returns the SslVerify field value if set, zero value otherwise.
func (o *VcenterDeploymentReplicatedPscSpec) GetSslVerify() bool {
	if o == nil || o.SslVerify == nil {
		var ret bool
		return ret
	}
	return *o.SslVerify
}

// GetSslVerifyOk returns a tuple with the SslVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterDeploymentReplicatedPscSpec) GetSslVerifyOk() (*bool, bool) {
	if o == nil || o.SslVerify == nil {
		return nil, false
	}
	return o.SslVerify, true
}

// HasSslVerify returns a boolean if a field has been set.
func (o *VcenterDeploymentReplicatedPscSpec) HasSslVerify() bool {
	if o != nil && o.SslVerify != nil {
		return true
	}

	return false
}

// SetSslVerify gets a reference to the given bool and assigns it to the SslVerify field.
func (o *VcenterDeploymentReplicatedPscSpec) SetSslVerify(v bool) {
	o.SslVerify = &v
}

func (o VcenterDeploymentReplicatedPscSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SsoSiteName != nil {
		toSerialize["sso_site_name"] = o.SsoSiteName
	}
	if true {
		toSerialize["partner_hostname"] = o.PartnerHostname
	}
	if o.HttpsPort != nil {
		toSerialize["https_port"] = o.HttpsPort
	}
	if true {
		toSerialize["sso_admin_password"] = o.SsoAdminPassword
	}
	if o.SslThumbprint != nil {
		toSerialize["ssl_thumbprint"] = o.SslThumbprint
	}
	if o.SslVerify != nil {
		toSerialize["ssl_verify"] = o.SslVerify
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterDeploymentReplicatedPscSpec struct {
	value *VcenterDeploymentReplicatedPscSpec
	isSet bool
}

func (v NullableVcenterDeploymentReplicatedPscSpec) Get() *VcenterDeploymentReplicatedPscSpec {
	return v.value
}

func (v *NullableVcenterDeploymentReplicatedPscSpec) Set(val *VcenterDeploymentReplicatedPscSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterDeploymentReplicatedPscSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterDeploymentReplicatedPscSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterDeploymentReplicatedPscSpec(val *VcenterDeploymentReplicatedPscSpec) *NullableVcenterDeploymentReplicatedPscSpec {
	return &NullableVcenterDeploymentReplicatedPscSpec{value: val, isSet: true}
}

func (v NullableVcenterDeploymentReplicatedPscSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterDeploymentReplicatedPscSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


