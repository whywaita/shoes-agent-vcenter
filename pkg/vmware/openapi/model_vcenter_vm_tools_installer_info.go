/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmToolsInstallerInfo struct for VcenterVmToolsInstallerInfo
type VcenterVmToolsInstallerInfo struct {
	// Flag indicating whether the VMware Tools installer is mounted as a CD-ROM.
	IsConnected bool `json:"is_connected"`
}

// NewVcenterVmToolsInstallerInfo instantiates a new VcenterVmToolsInstallerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmToolsInstallerInfo(isConnected bool) *VcenterVmToolsInstallerInfo {
	this := VcenterVmToolsInstallerInfo{}
	this.IsConnected = isConnected
	return &this
}

// NewVcenterVmToolsInstallerInfoWithDefaults instantiates a new VcenterVmToolsInstallerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmToolsInstallerInfoWithDefaults() *VcenterVmToolsInstallerInfo {
	this := VcenterVmToolsInstallerInfo{}
	return &this
}

// GetIsConnected returns the IsConnected field value
func (o *VcenterVmToolsInstallerInfo) GetIsConnected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsConnected
}

// GetIsConnectedOk returns a tuple with the IsConnected field value
// and a boolean to check if the value has been set.
func (o *VcenterVmToolsInstallerInfo) GetIsConnectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsConnected, true
}

// SetIsConnected sets field value
func (o *VcenterVmToolsInstallerInfo) SetIsConnected(v bool) {
	o.IsConnected = v
}

func (o VcenterVmToolsInstallerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["is_connected"] = o.IsConnected
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmToolsInstallerInfo struct {
	value *VcenterVmToolsInstallerInfo
	isSet bool
}

func (v NullableVcenterVmToolsInstallerInfo) Get() *VcenterVmToolsInstallerInfo {
	return v.value
}

func (v *NullableVcenterVmToolsInstallerInfo) Set(val *VcenterVmToolsInstallerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmToolsInstallerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmToolsInstallerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmToolsInstallerInfo(val *VcenterVmToolsInstallerInfo) *NullableVcenterVmToolsInstallerInfo {
	return &NullableVcenterVmToolsInstallerInfo{value: val, isSet: true}
}

func (v NullableVcenterVmToolsInstallerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmToolsInstallerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


