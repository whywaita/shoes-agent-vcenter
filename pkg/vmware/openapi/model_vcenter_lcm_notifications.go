/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterLcmNotifications struct for VcenterLcmNotifications
type VcenterLcmNotifications struct {
	// Info notification messages reported. Only set if an info was reported by the appliance task.
	Info *[]VcenterLcmNotification `json:"info,omitempty"`
	// Warning notification messages reported. Only set if an warning was reported by the appliance task.
	Warnings *[]VcenterLcmNotification `json:"warnings,omitempty"`
	// Error notification messages reported. Only set if an error was reported by the appliance task.
	Errors *[]VcenterLcmNotification `json:"errors,omitempty"`
}

// NewVcenterLcmNotifications instantiates a new VcenterLcmNotifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterLcmNotifications() *VcenterLcmNotifications {
	this := VcenterLcmNotifications{}
	return &this
}

// NewVcenterLcmNotificationsWithDefaults instantiates a new VcenterLcmNotifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterLcmNotificationsWithDefaults() *VcenterLcmNotifications {
	this := VcenterLcmNotifications{}
	return &this
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *VcenterLcmNotifications) GetInfo() []VcenterLcmNotification {
	if o == nil || o.Info == nil {
		var ret []VcenterLcmNotification
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterLcmNotifications) GetInfoOk() (*[]VcenterLcmNotification, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *VcenterLcmNotifications) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given []VcenterLcmNotification and assigns it to the Info field.
func (o *VcenterLcmNotifications) SetInfo(v []VcenterLcmNotification) {
	o.Info = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *VcenterLcmNotifications) GetWarnings() []VcenterLcmNotification {
	if o == nil || o.Warnings == nil {
		var ret []VcenterLcmNotification
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterLcmNotifications) GetWarningsOk() (*[]VcenterLcmNotification, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *VcenterLcmNotifications) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []VcenterLcmNotification and assigns it to the Warnings field.
func (o *VcenterLcmNotifications) SetWarnings(v []VcenterLcmNotification) {
	o.Warnings = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *VcenterLcmNotifications) GetErrors() []VcenterLcmNotification {
	if o == nil || o.Errors == nil {
		var ret []VcenterLcmNotification
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterLcmNotifications) GetErrorsOk() (*[]VcenterLcmNotification, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *VcenterLcmNotifications) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []VcenterLcmNotification and assigns it to the Errors field.
func (o *VcenterLcmNotifications) SetErrors(v []VcenterLcmNotification) {
	o.Errors = &v
}

func (o VcenterLcmNotifications) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterLcmNotifications struct {
	value *VcenterLcmNotifications
	isSet bool
}

func (v NullableVcenterLcmNotifications) Get() *VcenterLcmNotifications {
	return v.value
}

func (v *NullableVcenterLcmNotifications) Set(val *VcenterLcmNotifications) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterLcmNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterLcmNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterLcmNotifications(val *VcenterLcmNotifications) *NullableVcenterLcmNotifications {
	return &NullableVcenterLcmNotifications{value: val, isSet: true}
}

func (v NullableVcenterLcmNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterLcmNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


