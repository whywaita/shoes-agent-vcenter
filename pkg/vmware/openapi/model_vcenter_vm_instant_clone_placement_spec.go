/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMInstantClonePlacementSpec struct for VcenterVMInstantClonePlacementSpec
type VcenterVMInstantClonePlacementSpec struct {
	// Virtual machine folder into which the InstantCloned virtual machine should be placed. If field is unset, the system will use the virtual machine folder of the source virtual machine. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.
	Folder *string `json:"folder,omitempty"`
	// Resource pool into which the InstantCloned virtual machine should be placed. If field is unset, the system will use the resource pool of the source virtual machine. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool.
	ResourcePool *string `json:"resource_pool,omitempty"`
	// Datastore on which the InstantCloned virtual machine's configuration state should be stored. This datastore will also be used for any virtual disks that are created as part of the virtual machine InstantClone operation. If field is unset, the system will use the datastore of the source virtual machine. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore.
	Datastore *string `json:"datastore,omitempty"`
}

// NewVcenterVMInstantClonePlacementSpec instantiates a new VcenterVMInstantClonePlacementSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMInstantClonePlacementSpec() *VcenterVMInstantClonePlacementSpec {
	this := VcenterVMInstantClonePlacementSpec{}
	return &this
}

// NewVcenterVMInstantClonePlacementSpecWithDefaults instantiates a new VcenterVMInstantClonePlacementSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMInstantClonePlacementSpecWithDefaults() *VcenterVMInstantClonePlacementSpec {
	this := VcenterVMInstantClonePlacementSpec{}
	return &this
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *VcenterVMInstantClonePlacementSpec) GetFolder() string {
	if o == nil || o.Folder == nil {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantClonePlacementSpec) GetFolderOk() (*string, bool) {
	if o == nil || o.Folder == nil {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *VcenterVMInstantClonePlacementSpec) HasFolder() bool {
	if o != nil && o.Folder != nil {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *VcenterVMInstantClonePlacementSpec) SetFolder(v string) {
	o.Folder = &v
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise.
func (o *VcenterVMInstantClonePlacementSpec) GetResourcePool() string {
	if o == nil || o.ResourcePool == nil {
		var ret string
		return ret
	}
	return *o.ResourcePool
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantClonePlacementSpec) GetResourcePoolOk() (*string, bool) {
	if o == nil || o.ResourcePool == nil {
		return nil, false
	}
	return o.ResourcePool, true
}

// HasResourcePool returns a boolean if a field has been set.
func (o *VcenterVMInstantClonePlacementSpec) HasResourcePool() bool {
	if o != nil && o.ResourcePool != nil {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given string and assigns it to the ResourcePool field.
func (o *VcenterVMInstantClonePlacementSpec) SetResourcePool(v string) {
	o.ResourcePool = &v
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *VcenterVMInstantClonePlacementSpec) GetDatastore() string {
	if o == nil || o.Datastore == nil {
		var ret string
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMInstantClonePlacementSpec) GetDatastoreOk() (*string, bool) {
	if o == nil || o.Datastore == nil {
		return nil, false
	}
	return o.Datastore, true
}

// HasDatastore returns a boolean if a field has been set.
func (o *VcenterVMInstantClonePlacementSpec) HasDatastore() bool {
	if o != nil && o.Datastore != nil {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given string and assigns it to the Datastore field.
func (o *VcenterVMInstantClonePlacementSpec) SetDatastore(v string) {
	o.Datastore = &v
}

func (o VcenterVMInstantClonePlacementSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Folder != nil {
		toSerialize["folder"] = o.Folder
	}
	if o.ResourcePool != nil {
		toSerialize["resource_pool"] = o.ResourcePool
	}
	if o.Datastore != nil {
		toSerialize["datastore"] = o.Datastore
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMInstantClonePlacementSpec struct {
	value *VcenterVMInstantClonePlacementSpec
	isSet bool
}

func (v NullableVcenterVMInstantClonePlacementSpec) Get() *VcenterVMInstantClonePlacementSpec {
	return v.value
}

func (v *NullableVcenterVMInstantClonePlacementSpec) Set(val *VcenterVMInstantClonePlacementSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMInstantClonePlacementSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMInstantClonePlacementSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMInstantClonePlacementSpec(val *VcenterVMInstantClonePlacementSpec) *NullableVcenterVMInstantClonePlacementSpec {
	return &NullableVcenterVMInstantClonePlacementSpec{value: val, isSet: true}
}

func (v NullableVcenterVMInstantClonePlacementSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMInstantClonePlacementSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


