/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterHostCreateSpec struct for VcenterHostCreateSpec
type VcenterHostCreateSpec struct {
	// The IP address or DNS resolvable name of the host.
	Hostname string `json:"hostname"`
	// The port of the host. If unset, port 443 will be used.
	Port *int64 `json:"port,omitempty"`
	// The administrator account on the host.
	UserName string `json:"user_name"`
	// The password for the administrator account on the host.
	Password string `json:"password"`
	// Host and cluster folder in which the new standalone host should be created. This field is currently required. In the future, if this field is unset, the system will attempt to choose a suitable folder for the host; if a folder cannot be chosen, the host creation operation will fail. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder.
	Folder *string `json:"folder,omitempty"`
	ThumbprintVerification VcenterHostCreateSpecThumbprintVerification `json:"thumbprint_verification"`
	// The thumbprint of the SSL certificate, which the host is expected to have. The thumbprint is always computed using the SHA1 hash and is the string representation of that hash in the format: xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx where, 'x' represents a hexadecimal digit. This field is optional and it is only relevant when the value of Host.CreateSpec.thumbprint-verification is THUMBPRINT.
	Thumbprint *string `json:"thumbprint,omitempty"`
	// Whether host should be added to the vCenter Server even if it is being managed by another vCenter Server. The original vCenterServer loses connection to the host. If unset, forceAdd is default to false.
	ForceAdd *bool `json:"force_add,omitempty"`
}

// NewVcenterHostCreateSpec instantiates a new VcenterHostCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterHostCreateSpec(hostname string, userName string, password string, thumbprintVerification VcenterHostCreateSpecThumbprintVerification) *VcenterHostCreateSpec {
	this := VcenterHostCreateSpec{}
	this.Hostname = hostname
	this.UserName = userName
	this.Password = password
	this.ThumbprintVerification = thumbprintVerification
	return &this
}

// NewVcenterHostCreateSpecWithDefaults instantiates a new VcenterHostCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterHostCreateSpecWithDefaults() *VcenterHostCreateSpec {
	this := VcenterHostCreateSpec{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *VcenterHostCreateSpec) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *VcenterHostCreateSpec) GetHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *VcenterHostCreateSpec) SetHostname(v string) {
	o.Hostname = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *VcenterHostCreateSpec) GetPort() int64 {
	if o == nil || o.Port == nil {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostCreateSpec) GetPortOk() (*int64, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *VcenterHostCreateSpec) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *VcenterHostCreateSpec) SetPort(v int64) {
	o.Port = &v
}

// GetUserName returns the UserName field value
func (o *VcenterHostCreateSpec) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *VcenterHostCreateSpec) GetUserNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *VcenterHostCreateSpec) SetUserName(v string) {
	o.UserName = v
}

// GetPassword returns the Password field value
func (o *VcenterHostCreateSpec) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *VcenterHostCreateSpec) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *VcenterHostCreateSpec) SetPassword(v string) {
	o.Password = v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *VcenterHostCreateSpec) GetFolder() string {
	if o == nil || o.Folder == nil {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostCreateSpec) GetFolderOk() (*string, bool) {
	if o == nil || o.Folder == nil {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *VcenterHostCreateSpec) HasFolder() bool {
	if o != nil && o.Folder != nil {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *VcenterHostCreateSpec) SetFolder(v string) {
	o.Folder = &v
}

// GetThumbprintVerification returns the ThumbprintVerification field value
func (o *VcenterHostCreateSpec) GetThumbprintVerification() VcenterHostCreateSpecThumbprintVerification {
	if o == nil {
		var ret VcenterHostCreateSpecThumbprintVerification
		return ret
	}

	return o.ThumbprintVerification
}

// GetThumbprintVerificationOk returns a tuple with the ThumbprintVerification field value
// and a boolean to check if the value has been set.
func (o *VcenterHostCreateSpec) GetThumbprintVerificationOk() (*VcenterHostCreateSpecThumbprintVerification, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ThumbprintVerification, true
}

// SetThumbprintVerification sets field value
func (o *VcenterHostCreateSpec) SetThumbprintVerification(v VcenterHostCreateSpecThumbprintVerification) {
	o.ThumbprintVerification = v
}

// GetThumbprint returns the Thumbprint field value if set, zero value otherwise.
func (o *VcenterHostCreateSpec) GetThumbprint() string {
	if o == nil || o.Thumbprint == nil {
		var ret string
		return ret
	}
	return *o.Thumbprint
}

// GetThumbprintOk returns a tuple with the Thumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostCreateSpec) GetThumbprintOk() (*string, bool) {
	if o == nil || o.Thumbprint == nil {
		return nil, false
	}
	return o.Thumbprint, true
}

// HasThumbprint returns a boolean if a field has been set.
func (o *VcenterHostCreateSpec) HasThumbprint() bool {
	if o != nil && o.Thumbprint != nil {
		return true
	}

	return false
}

// SetThumbprint gets a reference to the given string and assigns it to the Thumbprint field.
func (o *VcenterHostCreateSpec) SetThumbprint(v string) {
	o.Thumbprint = &v
}

// GetForceAdd returns the ForceAdd field value if set, zero value otherwise.
func (o *VcenterHostCreateSpec) GetForceAdd() bool {
	if o == nil || o.ForceAdd == nil {
		var ret bool
		return ret
	}
	return *o.ForceAdd
}

// GetForceAddOk returns a tuple with the ForceAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterHostCreateSpec) GetForceAddOk() (*bool, bool) {
	if o == nil || o.ForceAdd == nil {
		return nil, false
	}
	return o.ForceAdd, true
}

// HasForceAdd returns a boolean if a field has been set.
func (o *VcenterHostCreateSpec) HasForceAdd() bool {
	if o != nil && o.ForceAdd != nil {
		return true
	}

	return false
}

// SetForceAdd gets a reference to the given bool and assigns it to the ForceAdd field.
func (o *VcenterHostCreateSpec) SetForceAdd(v bool) {
	o.ForceAdd = &v
}

func (o VcenterHostCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if true {
		toSerialize["user_name"] = o.UserName
	}
	if true {
		toSerialize["password"] = o.Password
	}
	if o.Folder != nil {
		toSerialize["folder"] = o.Folder
	}
	if true {
		toSerialize["thumbprint_verification"] = o.ThumbprintVerification
	}
	if o.Thumbprint != nil {
		toSerialize["thumbprint"] = o.Thumbprint
	}
	if o.ForceAdd != nil {
		toSerialize["force_add"] = o.ForceAdd
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterHostCreateSpec struct {
	value *VcenterHostCreateSpec
	isSet bool
}

func (v NullableVcenterHostCreateSpec) Get() *VcenterHostCreateSpec {
	return v.value
}

func (v *NullableVcenterHostCreateSpec) Set(val *VcenterHostCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterHostCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterHostCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterHostCreateSpec(val *VcenterHostCreateSpec) *NullableVcenterHostCreateSpec {
	return &NullableVcenterHostCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterHostCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterHostCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


