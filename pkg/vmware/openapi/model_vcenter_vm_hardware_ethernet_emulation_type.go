/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareEthernetEmulationType The Ethernet.EmulationType enumerated type defines the valid emulation types for a virtual Ethernet adapter.
type VcenterVmHardwareEthernetEmulationType string

// List of vcenter.vm.hardware.ethernet.emulation_type
const (
	VCENTERVMHARDWAREETHERNETEMULATIONTYPE_E1000 VcenterVmHardwareEthernetEmulationType = "E1000"
	VCENTERVMHARDWAREETHERNETEMULATIONTYPE_E1000_E VcenterVmHardwareEthernetEmulationType = "E1000E"
	VCENTERVMHARDWAREETHERNETEMULATIONTYPE_PCNET32 VcenterVmHardwareEthernetEmulationType = "PCNET32"
	VCENTERVMHARDWAREETHERNETEMULATIONTYPE_VMXNET VcenterVmHardwareEthernetEmulationType = "VMXNET"
	VCENTERVMHARDWAREETHERNETEMULATIONTYPE_VMXNET2 VcenterVmHardwareEthernetEmulationType = "VMXNET2"
	VCENTERVMHARDWAREETHERNETEMULATIONTYPE_VMXNET3 VcenterVmHardwareEthernetEmulationType = "VMXNET3"
)

// All allowed values of VcenterVmHardwareEthernetEmulationType enum
var AllowedVcenterVmHardwareEthernetEmulationTypeEnumValues = []VcenterVmHardwareEthernetEmulationType{
	"E1000",
	"E1000E",
	"PCNET32",
	"VMXNET",
	"VMXNET2",
	"VMXNET3",
}

func (v *VcenterVmHardwareEthernetEmulationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareEthernetEmulationType(value)
	for _, existing := range AllowedVcenterVmHardwareEthernetEmulationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareEthernetEmulationType", value)
}

// NewVcenterVmHardwareEthernetEmulationTypeFromValue returns a pointer to a valid VcenterVmHardwareEthernetEmulationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareEthernetEmulationTypeFromValue(v string) (*VcenterVmHardwareEthernetEmulationType, error) {
	ev := VcenterVmHardwareEthernetEmulationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareEthernetEmulationType: valid values are %v", v, AllowedVcenterVmHardwareEthernetEmulationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareEthernetEmulationType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareEthernetEmulationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.ethernet.emulation_type value
func (v VcenterVmHardwareEthernetEmulationType) Ptr() *VcenterVmHardwareEthernetEmulationType {
	return &v
}

type NullableVcenterVmHardwareEthernetEmulationType struct {
	value *VcenterVmHardwareEthernetEmulationType
	isSet bool
}

func (v NullableVcenterVmHardwareEthernetEmulationType) Get() *VcenterVmHardwareEthernetEmulationType {
	return v.value
}

func (v *NullableVcenterVmHardwareEthernetEmulationType) Set(val *VcenterVmHardwareEthernetEmulationType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareEthernetEmulationType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareEthernetEmulationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareEthernetEmulationType(val *VcenterVmHardwareEthernetEmulationType) *NullableVcenterVmHardwareEthernetEmulationType {
	return &NullableVcenterVmHardwareEthernetEmulationType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareEthernetEmulationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareEthernetEmulationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

