/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmGuestFilesystemFilesType The Files.Type enumerated type defines the valid types of files.
type VcenterVmGuestFilesystemFilesType string

// List of VcenterVmGuestFilesystemFilesType
const (
	VCENTERVMGUESTFILESYSTEMFILESTYPE_FILE VcenterVmGuestFilesystemFilesType = "FILE"
	VCENTERVMGUESTFILESYSTEMFILESTYPE_DIRECTORY VcenterVmGuestFilesystemFilesType = "DIRECTORY"
	VCENTERVMGUESTFILESYSTEMFILESTYPE_SYMLINK VcenterVmGuestFilesystemFilesType = "SYMLINK"
)

// All allowed values of VcenterVmGuestFilesystemFilesType enum
var AllowedVcenterVmGuestFilesystemFilesTypeEnumValues = []VcenterVmGuestFilesystemFilesType{
	"FILE",
	"DIRECTORY",
	"SYMLINK",
}

func (v *VcenterVmGuestFilesystemFilesType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmGuestFilesystemFilesType(value)
	for _, existing := range AllowedVcenterVmGuestFilesystemFilesTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmGuestFilesystemFilesType", value)
}

// NewVcenterVmGuestFilesystemFilesTypeFromValue returns a pointer to a valid VcenterVmGuestFilesystemFilesType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmGuestFilesystemFilesTypeFromValue(v string) (*VcenterVmGuestFilesystemFilesType, error) {
	ev := VcenterVmGuestFilesystemFilesType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmGuestFilesystemFilesType: valid values are %v", v, AllowedVcenterVmGuestFilesystemFilesTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmGuestFilesystemFilesType) IsValid() bool {
	for _, existing := range AllowedVcenterVmGuestFilesystemFilesTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterVmGuestFilesystemFilesType value
func (v VcenterVmGuestFilesystemFilesType) Ptr() *VcenterVmGuestFilesystemFilesType {
	return &v
}

type NullableVcenterVmGuestFilesystemFilesType struct {
	value *VcenterVmGuestFilesystemFilesType
	isSet bool
}

func (v NullableVcenterVmGuestFilesystemFilesType) Get() *VcenterVmGuestFilesystemFilesType {
	return v.value
}

func (v *NullableVcenterVmGuestFilesystemFilesType) Set(val *VcenterVmGuestFilesystemFilesType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmGuestFilesystemFilesType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmGuestFilesystemFilesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmGuestFilesystemFilesType(val *VcenterVmGuestFilesystemFilesType) *NullableVcenterVmGuestFilesystemFilesType {
	return &NullableVcenterVmGuestFilesystemFilesType{value: val, isSet: true}
}

func (v NullableVcenterVmGuestFilesystemFilesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmGuestFilesystemFilesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

