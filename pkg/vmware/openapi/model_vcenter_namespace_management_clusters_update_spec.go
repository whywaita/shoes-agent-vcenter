/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClustersUpdateSpec struct for VcenterNamespaceManagementClustersUpdateSpec
type VcenterNamespaceManagementClustersUpdateSpec struct {
	SizeHint *VcenterNamespaceManagementSizingHint `json:"size_hint,omitempty"`
	NetworkProvider *VcenterNamespaceManagementClustersNetworkProvider `json:"network_provider,omitempty"`
	NcpClusterNetworkSpec *VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec `json:"ncp_cluster_network_spec,omitempty"`
	// List of DNS server IP addresses to use on Kubernetes API server, specified in order of preference. If set, DNS servers set on Kubernetes API server will be replaced. Otherwise, they will not be modified.
	MasterDNS *[]string `json:"master_DNS,omitempty"`
	// List of DNS server IP addresses to use on the worker nodes, specified in order of preference. If set, DNS servers set on worker nodes will be replaced. Otherwise, they will not be modified.
	WorkerDNS *[]string `json:"worker_DNS,omitempty"`
	// List of domains (for example \"vmware.com\") to be searched when trying to lookup a host name on Kubernetes API server, specified in order of preference. If set, DNS search domains on Kubernetes API server will be replaced. Otherwise, they will not be modified.
	MasterDNSSearchDomains *[]string `json:"master_DNS_search_domains,omitempty"`
	// List of NTP server DNS names or IP addresses to use on Kubernetes API server, specified in order of preference. If set, NTP servers on Kubernetes API server will be replaced. Otherwise, they will not be modified.
	MasterNTPServers *[]string `json:"master_NTP_servers,omitempty"`
	// Identifier of storage policy associated with Kubernetes API server. If unset, storage policy associated with Kubernetes API server will not be modified. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.
	MasterStoragePolicy *string `json:"master_storage_policy,omitempty"`
	// Identifier of storage policy associated with ephemeral disks of all the Kubernetes Pods in the cluster. If unset, storage policy associated with ephemeral disks of all the Kubernetes Pods will not be modified. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile.
	EphemeralStoragePolicy *string `json:"ephemeral_storage_policy,omitempty"`
	CnsFileConfig *VcenterNamespaceManagementCNSFileConfig `json:"cns_file_config,omitempty"`
	// Disclaimer to be displayed prior to login via the Kubectl plugin. If unset, disclaimer to be displayed prior to login via the Kubectl plugin will not be modified.
	LoginBanner *string `json:"login_banner,omitempty"`
	ImageStorage *VcenterNamespaceManagementClustersImageStorageSpec `json:"image_storage,omitempty"`
	DefaultImageRegistry *VcenterNamespaceManagementClustersImageRegistry `json:"default_image_registry,omitempty"`
	// Default image repository to use when Kubernetes Pod container specification does not specify it as part of the container image name. If unset, default image repository will not be modified.
	DefaultImageRepository *string `json:"default_image_repository,omitempty"`
	// Certificate issued for Kubernetes API Server. Certificate used must be created by signing the Certificate Signing Request obtained from vcenter.namespace_management.certificates.Request.create Because a CertificateSigningRequest is created on an existing Namespaces-enabled Cluster, you must use the Clusters.UpdateSpec to specify this tlsEndpointCertificate on an existing Cluster rather than during initially enabling Namespaces on a Cluster. If unset, Kubernetes API Server certificate will not be modified.
	TlsEndpointCertificate *string `json:"tls_endpoint_certificate,omitempty"`
	// Identifier of the Content Library which holds the VM Images for vSphere Kubernetes Service. This Content Library should be subscribed to VMware's hosted vSphere Kubernetes Service Repository. Modifying or clearing the Content Library identifier will not affect existing vSphere Kubernetes Service clusters. However, upgrades or scale-out of existing clusters may be affected if the new Content Library doesn't have the necessary VM Images. If unset, the Content Library identifier will not be modified. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.Library. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.Library.
	DefaultKubernetesServiceContentLibrary *string `json:"default_kubernetes_service_content_library,omitempty"`
	// List of NTP server DNS names or IP addresses to use for workloads such as Tanzu Kubernetes Grid VMs, specified in order of preference. If unset, NTP servers for workloads will be unmodified.
	WorkloadNtpServers *[]string `json:"workload_ntp_servers,omitempty"`
}

// NewVcenterNamespaceManagementClustersUpdateSpec instantiates a new VcenterNamespaceManagementClustersUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClustersUpdateSpec() *VcenterNamespaceManagementClustersUpdateSpec {
	this := VcenterNamespaceManagementClustersUpdateSpec{}
	return &this
}

// NewVcenterNamespaceManagementClustersUpdateSpecWithDefaults instantiates a new VcenterNamespaceManagementClustersUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClustersUpdateSpecWithDefaults() *VcenterNamespaceManagementClustersUpdateSpec {
	this := VcenterNamespaceManagementClustersUpdateSpec{}
	return &this
}

// GetSizeHint returns the SizeHint field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetSizeHint() VcenterNamespaceManagementSizingHint {
	if o == nil || o.SizeHint == nil {
		var ret VcenterNamespaceManagementSizingHint
		return ret
	}
	return *o.SizeHint
}

// GetSizeHintOk returns a tuple with the SizeHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetSizeHintOk() (*VcenterNamespaceManagementSizingHint, bool) {
	if o == nil || o.SizeHint == nil {
		return nil, false
	}
	return o.SizeHint, true
}

// HasSizeHint returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasSizeHint() bool {
	if o != nil && o.SizeHint != nil {
		return true
	}

	return false
}

// SetSizeHint gets a reference to the given VcenterNamespaceManagementSizingHint and assigns it to the SizeHint field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetSizeHint(v VcenterNamespaceManagementSizingHint) {
	o.SizeHint = &v
}

// GetNetworkProvider returns the NetworkProvider field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetNetworkProvider() VcenterNamespaceManagementClustersNetworkProvider {
	if o == nil || o.NetworkProvider == nil {
		var ret VcenterNamespaceManagementClustersNetworkProvider
		return ret
	}
	return *o.NetworkProvider
}

// GetNetworkProviderOk returns a tuple with the NetworkProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetNetworkProviderOk() (*VcenterNamespaceManagementClustersNetworkProvider, bool) {
	if o == nil || o.NetworkProvider == nil {
		return nil, false
	}
	return o.NetworkProvider, true
}

// HasNetworkProvider returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasNetworkProvider() bool {
	if o != nil && o.NetworkProvider != nil {
		return true
	}

	return false
}

// SetNetworkProvider gets a reference to the given VcenterNamespaceManagementClustersNetworkProvider and assigns it to the NetworkProvider field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetNetworkProvider(v VcenterNamespaceManagementClustersNetworkProvider) {
	o.NetworkProvider = &v
}

// GetNcpClusterNetworkSpec returns the NcpClusterNetworkSpec field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetNcpClusterNetworkSpec() VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec {
	if o == nil || o.NcpClusterNetworkSpec == nil {
		var ret VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec
		return ret
	}
	return *o.NcpClusterNetworkSpec
}

// GetNcpClusterNetworkSpecOk returns a tuple with the NcpClusterNetworkSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetNcpClusterNetworkSpecOk() (*VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec, bool) {
	if o == nil || o.NcpClusterNetworkSpec == nil {
		return nil, false
	}
	return o.NcpClusterNetworkSpec, true
}

// HasNcpClusterNetworkSpec returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasNcpClusterNetworkSpec() bool {
	if o != nil && o.NcpClusterNetworkSpec != nil {
		return true
	}

	return false
}

// SetNcpClusterNetworkSpec gets a reference to the given VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec and assigns it to the NcpClusterNetworkSpec field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetNcpClusterNetworkSpec(v VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec) {
	o.NcpClusterNetworkSpec = &v
}

// GetMasterDNS returns the MasterDNS field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetMasterDNS() []string {
	if o == nil || o.MasterDNS == nil {
		var ret []string
		return ret
	}
	return *o.MasterDNS
}

// GetMasterDNSOk returns a tuple with the MasterDNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetMasterDNSOk() (*[]string, bool) {
	if o == nil || o.MasterDNS == nil {
		return nil, false
	}
	return o.MasterDNS, true
}

// HasMasterDNS returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasMasterDNS() bool {
	if o != nil && o.MasterDNS != nil {
		return true
	}

	return false
}

// SetMasterDNS gets a reference to the given []string and assigns it to the MasterDNS field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetMasterDNS(v []string) {
	o.MasterDNS = &v
}

// GetWorkerDNS returns the WorkerDNS field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetWorkerDNS() []string {
	if o == nil || o.WorkerDNS == nil {
		var ret []string
		return ret
	}
	return *o.WorkerDNS
}

// GetWorkerDNSOk returns a tuple with the WorkerDNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetWorkerDNSOk() (*[]string, bool) {
	if o == nil || o.WorkerDNS == nil {
		return nil, false
	}
	return o.WorkerDNS, true
}

// HasWorkerDNS returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasWorkerDNS() bool {
	if o != nil && o.WorkerDNS != nil {
		return true
	}

	return false
}

// SetWorkerDNS gets a reference to the given []string and assigns it to the WorkerDNS field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetWorkerDNS(v []string) {
	o.WorkerDNS = &v
}

// GetMasterDNSSearchDomains returns the MasterDNSSearchDomains field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetMasterDNSSearchDomains() []string {
	if o == nil || o.MasterDNSSearchDomains == nil {
		var ret []string
		return ret
	}
	return *o.MasterDNSSearchDomains
}

// GetMasterDNSSearchDomainsOk returns a tuple with the MasterDNSSearchDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetMasterDNSSearchDomainsOk() (*[]string, bool) {
	if o == nil || o.MasterDNSSearchDomains == nil {
		return nil, false
	}
	return o.MasterDNSSearchDomains, true
}

// HasMasterDNSSearchDomains returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasMasterDNSSearchDomains() bool {
	if o != nil && o.MasterDNSSearchDomains != nil {
		return true
	}

	return false
}

// SetMasterDNSSearchDomains gets a reference to the given []string and assigns it to the MasterDNSSearchDomains field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetMasterDNSSearchDomains(v []string) {
	o.MasterDNSSearchDomains = &v
}

// GetMasterNTPServers returns the MasterNTPServers field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetMasterNTPServers() []string {
	if o == nil || o.MasterNTPServers == nil {
		var ret []string
		return ret
	}
	return *o.MasterNTPServers
}

// GetMasterNTPServersOk returns a tuple with the MasterNTPServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetMasterNTPServersOk() (*[]string, bool) {
	if o == nil || o.MasterNTPServers == nil {
		return nil, false
	}
	return o.MasterNTPServers, true
}

// HasMasterNTPServers returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasMasterNTPServers() bool {
	if o != nil && o.MasterNTPServers != nil {
		return true
	}

	return false
}

// SetMasterNTPServers gets a reference to the given []string and assigns it to the MasterNTPServers field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetMasterNTPServers(v []string) {
	o.MasterNTPServers = &v
}

// GetMasterStoragePolicy returns the MasterStoragePolicy field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetMasterStoragePolicy() string {
	if o == nil || o.MasterStoragePolicy == nil {
		var ret string
		return ret
	}
	return *o.MasterStoragePolicy
}

// GetMasterStoragePolicyOk returns a tuple with the MasterStoragePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetMasterStoragePolicyOk() (*string, bool) {
	if o == nil || o.MasterStoragePolicy == nil {
		return nil, false
	}
	return o.MasterStoragePolicy, true
}

// HasMasterStoragePolicy returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasMasterStoragePolicy() bool {
	if o != nil && o.MasterStoragePolicy != nil {
		return true
	}

	return false
}

// SetMasterStoragePolicy gets a reference to the given string and assigns it to the MasterStoragePolicy field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetMasterStoragePolicy(v string) {
	o.MasterStoragePolicy = &v
}

// GetEphemeralStoragePolicy returns the EphemeralStoragePolicy field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetEphemeralStoragePolicy() string {
	if o == nil || o.EphemeralStoragePolicy == nil {
		var ret string
		return ret
	}
	return *o.EphemeralStoragePolicy
}

// GetEphemeralStoragePolicyOk returns a tuple with the EphemeralStoragePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetEphemeralStoragePolicyOk() (*string, bool) {
	if o == nil || o.EphemeralStoragePolicy == nil {
		return nil, false
	}
	return o.EphemeralStoragePolicy, true
}

// HasEphemeralStoragePolicy returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasEphemeralStoragePolicy() bool {
	if o != nil && o.EphemeralStoragePolicy != nil {
		return true
	}

	return false
}

// SetEphemeralStoragePolicy gets a reference to the given string and assigns it to the EphemeralStoragePolicy field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetEphemeralStoragePolicy(v string) {
	o.EphemeralStoragePolicy = &v
}

// GetCnsFileConfig returns the CnsFileConfig field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetCnsFileConfig() VcenterNamespaceManagementCNSFileConfig {
	if o == nil || o.CnsFileConfig == nil {
		var ret VcenterNamespaceManagementCNSFileConfig
		return ret
	}
	return *o.CnsFileConfig
}

// GetCnsFileConfigOk returns a tuple with the CnsFileConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetCnsFileConfigOk() (*VcenterNamespaceManagementCNSFileConfig, bool) {
	if o == nil || o.CnsFileConfig == nil {
		return nil, false
	}
	return o.CnsFileConfig, true
}

// HasCnsFileConfig returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasCnsFileConfig() bool {
	if o != nil && o.CnsFileConfig != nil {
		return true
	}

	return false
}

// SetCnsFileConfig gets a reference to the given VcenterNamespaceManagementCNSFileConfig and assigns it to the CnsFileConfig field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetCnsFileConfig(v VcenterNamespaceManagementCNSFileConfig) {
	o.CnsFileConfig = &v
}

// GetLoginBanner returns the LoginBanner field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetLoginBanner() string {
	if o == nil || o.LoginBanner == nil {
		var ret string
		return ret
	}
	return *o.LoginBanner
}

// GetLoginBannerOk returns a tuple with the LoginBanner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetLoginBannerOk() (*string, bool) {
	if o == nil || o.LoginBanner == nil {
		return nil, false
	}
	return o.LoginBanner, true
}

// HasLoginBanner returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasLoginBanner() bool {
	if o != nil && o.LoginBanner != nil {
		return true
	}

	return false
}

// SetLoginBanner gets a reference to the given string and assigns it to the LoginBanner field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetLoginBanner(v string) {
	o.LoginBanner = &v
}

// GetImageStorage returns the ImageStorage field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetImageStorage() VcenterNamespaceManagementClustersImageStorageSpec {
	if o == nil || o.ImageStorage == nil {
		var ret VcenterNamespaceManagementClustersImageStorageSpec
		return ret
	}
	return *o.ImageStorage
}

// GetImageStorageOk returns a tuple with the ImageStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetImageStorageOk() (*VcenterNamespaceManagementClustersImageStorageSpec, bool) {
	if o == nil || o.ImageStorage == nil {
		return nil, false
	}
	return o.ImageStorage, true
}

// HasImageStorage returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasImageStorage() bool {
	if o != nil && o.ImageStorage != nil {
		return true
	}

	return false
}

// SetImageStorage gets a reference to the given VcenterNamespaceManagementClustersImageStorageSpec and assigns it to the ImageStorage field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetImageStorage(v VcenterNamespaceManagementClustersImageStorageSpec) {
	o.ImageStorage = &v
}

// GetDefaultImageRegistry returns the DefaultImageRegistry field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetDefaultImageRegistry() VcenterNamespaceManagementClustersImageRegistry {
	if o == nil || o.DefaultImageRegistry == nil {
		var ret VcenterNamespaceManagementClustersImageRegistry
		return ret
	}
	return *o.DefaultImageRegistry
}

// GetDefaultImageRegistryOk returns a tuple with the DefaultImageRegistry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetDefaultImageRegistryOk() (*VcenterNamespaceManagementClustersImageRegistry, bool) {
	if o == nil || o.DefaultImageRegistry == nil {
		return nil, false
	}
	return o.DefaultImageRegistry, true
}

// HasDefaultImageRegistry returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasDefaultImageRegistry() bool {
	if o != nil && o.DefaultImageRegistry != nil {
		return true
	}

	return false
}

// SetDefaultImageRegistry gets a reference to the given VcenterNamespaceManagementClustersImageRegistry and assigns it to the DefaultImageRegistry field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetDefaultImageRegistry(v VcenterNamespaceManagementClustersImageRegistry) {
	o.DefaultImageRegistry = &v
}

// GetDefaultImageRepository returns the DefaultImageRepository field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetDefaultImageRepository() string {
	if o == nil || o.DefaultImageRepository == nil {
		var ret string
		return ret
	}
	return *o.DefaultImageRepository
}

// GetDefaultImageRepositoryOk returns a tuple with the DefaultImageRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetDefaultImageRepositoryOk() (*string, bool) {
	if o == nil || o.DefaultImageRepository == nil {
		return nil, false
	}
	return o.DefaultImageRepository, true
}

// HasDefaultImageRepository returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasDefaultImageRepository() bool {
	if o != nil && o.DefaultImageRepository != nil {
		return true
	}

	return false
}

// SetDefaultImageRepository gets a reference to the given string and assigns it to the DefaultImageRepository field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetDefaultImageRepository(v string) {
	o.DefaultImageRepository = &v
}

// GetTlsEndpointCertificate returns the TlsEndpointCertificate field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetTlsEndpointCertificate() string {
	if o == nil || o.TlsEndpointCertificate == nil {
		var ret string
		return ret
	}
	return *o.TlsEndpointCertificate
}

// GetTlsEndpointCertificateOk returns a tuple with the TlsEndpointCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetTlsEndpointCertificateOk() (*string, bool) {
	if o == nil || o.TlsEndpointCertificate == nil {
		return nil, false
	}
	return o.TlsEndpointCertificate, true
}

// HasTlsEndpointCertificate returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasTlsEndpointCertificate() bool {
	if o != nil && o.TlsEndpointCertificate != nil {
		return true
	}

	return false
}

// SetTlsEndpointCertificate gets a reference to the given string and assigns it to the TlsEndpointCertificate field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetTlsEndpointCertificate(v string) {
	o.TlsEndpointCertificate = &v
}

// GetDefaultKubernetesServiceContentLibrary returns the DefaultKubernetesServiceContentLibrary field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetDefaultKubernetesServiceContentLibrary() string {
	if o == nil || o.DefaultKubernetesServiceContentLibrary == nil {
		var ret string
		return ret
	}
	return *o.DefaultKubernetesServiceContentLibrary
}

// GetDefaultKubernetesServiceContentLibraryOk returns a tuple with the DefaultKubernetesServiceContentLibrary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetDefaultKubernetesServiceContentLibraryOk() (*string, bool) {
	if o == nil || o.DefaultKubernetesServiceContentLibrary == nil {
		return nil, false
	}
	return o.DefaultKubernetesServiceContentLibrary, true
}

// HasDefaultKubernetesServiceContentLibrary returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasDefaultKubernetesServiceContentLibrary() bool {
	if o != nil && o.DefaultKubernetesServiceContentLibrary != nil {
		return true
	}

	return false
}

// SetDefaultKubernetesServiceContentLibrary gets a reference to the given string and assigns it to the DefaultKubernetesServiceContentLibrary field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetDefaultKubernetesServiceContentLibrary(v string) {
	o.DefaultKubernetesServiceContentLibrary = &v
}

// GetWorkloadNtpServers returns the WorkloadNtpServers field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetWorkloadNtpServers() []string {
	if o == nil || o.WorkloadNtpServers == nil {
		var ret []string
		return ret
	}
	return *o.WorkloadNtpServers
}

// GetWorkloadNtpServersOk returns a tuple with the WorkloadNtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) GetWorkloadNtpServersOk() (*[]string, bool) {
	if o == nil || o.WorkloadNtpServers == nil {
		return nil, false
	}
	return o.WorkloadNtpServers, true
}

// HasWorkloadNtpServers returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClustersUpdateSpec) HasWorkloadNtpServers() bool {
	if o != nil && o.WorkloadNtpServers != nil {
		return true
	}

	return false
}

// SetWorkloadNtpServers gets a reference to the given []string and assigns it to the WorkloadNtpServers field.
func (o *VcenterNamespaceManagementClustersUpdateSpec) SetWorkloadNtpServers(v []string) {
	o.WorkloadNtpServers = &v
}

func (o VcenterNamespaceManagementClustersUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SizeHint != nil {
		toSerialize["size_hint"] = o.SizeHint
	}
	if o.NetworkProvider != nil {
		toSerialize["network_provider"] = o.NetworkProvider
	}
	if o.NcpClusterNetworkSpec != nil {
		toSerialize["ncp_cluster_network_spec"] = o.NcpClusterNetworkSpec
	}
	if o.MasterDNS != nil {
		toSerialize["master_DNS"] = o.MasterDNS
	}
	if o.WorkerDNS != nil {
		toSerialize["worker_DNS"] = o.WorkerDNS
	}
	if o.MasterDNSSearchDomains != nil {
		toSerialize["master_DNS_search_domains"] = o.MasterDNSSearchDomains
	}
	if o.MasterNTPServers != nil {
		toSerialize["master_NTP_servers"] = o.MasterNTPServers
	}
	if o.MasterStoragePolicy != nil {
		toSerialize["master_storage_policy"] = o.MasterStoragePolicy
	}
	if o.EphemeralStoragePolicy != nil {
		toSerialize["ephemeral_storage_policy"] = o.EphemeralStoragePolicy
	}
	if o.CnsFileConfig != nil {
		toSerialize["cns_file_config"] = o.CnsFileConfig
	}
	if o.LoginBanner != nil {
		toSerialize["login_banner"] = o.LoginBanner
	}
	if o.ImageStorage != nil {
		toSerialize["image_storage"] = o.ImageStorage
	}
	if o.DefaultImageRegistry != nil {
		toSerialize["default_image_registry"] = o.DefaultImageRegistry
	}
	if o.DefaultImageRepository != nil {
		toSerialize["default_image_repository"] = o.DefaultImageRepository
	}
	if o.TlsEndpointCertificate != nil {
		toSerialize["tls_endpoint_certificate"] = o.TlsEndpointCertificate
	}
	if o.DefaultKubernetesServiceContentLibrary != nil {
		toSerialize["default_kubernetes_service_content_library"] = o.DefaultKubernetesServiceContentLibrary
	}
	if o.WorkloadNtpServers != nil {
		toSerialize["workload_ntp_servers"] = o.WorkloadNtpServers
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClustersUpdateSpec struct {
	value *VcenterNamespaceManagementClustersUpdateSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersUpdateSpec) Get() *VcenterNamespaceManagementClustersUpdateSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersUpdateSpec) Set(val *VcenterNamespaceManagementClustersUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersUpdateSpec(val *VcenterNamespaceManagementClustersUpdateSpec) *NullableVcenterNamespaceManagementClustersUpdateSpec {
	return &NullableVcenterNamespaceManagementClustersUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


