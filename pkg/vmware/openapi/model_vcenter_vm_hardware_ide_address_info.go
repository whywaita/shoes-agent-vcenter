/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareIdeAddressInfo struct for VcenterVmHardwareIdeAddressInfo
type VcenterVmHardwareIdeAddressInfo struct {
	// Flag specifying whether the device is attached to the primary or secondary IDE adapter of the virtual machine.
	Primary bool `json:"primary"`
	// Flag specifying whether the device is the master or slave device on the IDE adapter.
	Master bool `json:"master"`
}

// NewVcenterVmHardwareIdeAddressInfo instantiates a new VcenterVmHardwareIdeAddressInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareIdeAddressInfo(primary bool, master bool) *VcenterVmHardwareIdeAddressInfo {
	this := VcenterVmHardwareIdeAddressInfo{}
	this.Primary = primary
	this.Master = master
	return &this
}

// NewVcenterVmHardwareIdeAddressInfoWithDefaults instantiates a new VcenterVmHardwareIdeAddressInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareIdeAddressInfoWithDefaults() *VcenterVmHardwareIdeAddressInfo {
	this := VcenterVmHardwareIdeAddressInfo{}
	return &this
}

// GetPrimary returns the Primary field value
func (o *VcenterVmHardwareIdeAddressInfo) GetPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareIdeAddressInfo) GetPrimaryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *VcenterVmHardwareIdeAddressInfo) SetPrimary(v bool) {
	o.Primary = v
}

// GetMaster returns the Master field value
func (o *VcenterVmHardwareIdeAddressInfo) GetMaster() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Master
}

// GetMasterOk returns a tuple with the Master field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareIdeAddressInfo) GetMasterOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Master, true
}

// SetMaster sets field value
func (o *VcenterVmHardwareIdeAddressInfo) SetMaster(v bool) {
	o.Master = v
}

func (o VcenterVmHardwareIdeAddressInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["primary"] = o.Primary
	}
	if true {
		toSerialize["master"] = o.Master
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareIdeAddressInfo struct {
	value *VcenterVmHardwareIdeAddressInfo
	isSet bool
}

func (v NullableVcenterVmHardwareIdeAddressInfo) Get() *VcenterVmHardwareIdeAddressInfo {
	return v.value
}

func (v *NullableVcenterVmHardwareIdeAddressInfo) Set(val *VcenterVmHardwareIdeAddressInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareIdeAddressInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareIdeAddressInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareIdeAddressInfo(val *VcenterVmHardwareIdeAddressInfo) *NullableVcenterVmHardwareIdeAddressInfo {
	return &NullableVcenterVmHardwareIdeAddressInfo{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareIdeAddressInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareIdeAddressInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


