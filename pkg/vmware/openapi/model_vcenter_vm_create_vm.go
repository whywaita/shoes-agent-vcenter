/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVMCreateVm struct for VcenterVMCreateVm
type VcenterVMCreateVm struct {
	Spec *VcenterVMCreateSpec `json:"spec,omitempty"`
}

// NewVcenterVMCreateVm instantiates a new VcenterVMCreateVm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVMCreateVm() *VcenterVMCreateVm {
	this := VcenterVMCreateVm{}
	return &this
}

// NewVcenterVMCreateVmWithDefaults instantiates a new VcenterVMCreateVm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVMCreateVmWithDefaults() *VcenterVMCreateVm {
	this := VcenterVMCreateVm{}
	return &this
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *VcenterVMCreateVm) GetSpec() VcenterVMCreateSpec {
	if o == nil || o.Spec == nil {
		var ret VcenterVMCreateSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVMCreateVm) GetSpecOk() (*VcenterVMCreateSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *VcenterVMCreateVm) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given VcenterVMCreateSpec and assigns it to the Spec field.
func (o *VcenterVMCreateVm) SetSpec(v VcenterVMCreateSpec) {
	o.Spec = &v
}

func (o VcenterVMCreateVm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVMCreateVm struct {
	value *VcenterVMCreateVm
	isSet bool
}

func (v NullableVcenterVMCreateVm) Get() *VcenterVMCreateVm {
	return v.value
}

func (v *NullableVcenterVMCreateVm) Set(val *VcenterVMCreateVm) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVMCreateVm) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVMCreateVm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVMCreateVm(val *VcenterVMCreateVm) *NullableVcenterVMCreateVm {
	return &NullableVcenterVMCreateVm{value: val, isSet: true}
}

func (v NullableVcenterVMCreateVm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVMCreateVm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


