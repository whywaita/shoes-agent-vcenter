/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespacesNamespaceTemplatesSubject struct for VcenterNamespacesNamespaceTemplatesSubject
type VcenterNamespacesNamespaceTemplatesSubject struct {
	SubjectType VcenterNamespacesAccessSubjectType `json:"subject_type"`
	// Name of the subject.
	Subject string `json:"subject"`
	// Domain of the subject.
	Domain string `json:"domain"`
}

// NewVcenterNamespacesNamespaceTemplatesSubject instantiates a new VcenterNamespacesNamespaceTemplatesSubject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespacesNamespaceTemplatesSubject(subjectType VcenterNamespacesAccessSubjectType, subject string, domain string) *VcenterNamespacesNamespaceTemplatesSubject {
	this := VcenterNamespacesNamespaceTemplatesSubject{}
	this.SubjectType = subjectType
	this.Subject = subject
	this.Domain = domain
	return &this
}

// NewVcenterNamespacesNamespaceTemplatesSubjectWithDefaults instantiates a new VcenterNamespacesNamespaceTemplatesSubject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespacesNamespaceTemplatesSubjectWithDefaults() *VcenterNamespacesNamespaceTemplatesSubject {
	this := VcenterNamespacesNamespaceTemplatesSubject{}
	return &this
}

// GetSubjectType returns the SubjectType field value
func (o *VcenterNamespacesNamespaceTemplatesSubject) GetSubjectType() VcenterNamespacesAccessSubjectType {
	if o == nil {
		var ret VcenterNamespacesAccessSubjectType
		return ret
	}

	return o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesSubject) GetSubjectTypeOk() (*VcenterNamespacesAccessSubjectType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SubjectType, true
}

// SetSubjectType sets field value
func (o *VcenterNamespacesNamespaceTemplatesSubject) SetSubjectType(v VcenterNamespacesAccessSubjectType) {
	o.SubjectType = v
}

// GetSubject returns the Subject field value
func (o *VcenterNamespacesNamespaceTemplatesSubject) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesSubject) GetSubjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *VcenterNamespacesNamespaceTemplatesSubject) SetSubject(v string) {
	o.Subject = v
}

// GetDomain returns the Domain field value
func (o *VcenterNamespacesNamespaceTemplatesSubject) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespacesNamespaceTemplatesSubject) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *VcenterNamespacesNamespaceTemplatesSubject) SetDomain(v string) {
	o.Domain = v
}

func (o VcenterNamespacesNamespaceTemplatesSubject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subject_type"] = o.SubjectType
	}
	if true {
		toSerialize["subject"] = o.Subject
	}
	if true {
		toSerialize["domain"] = o.Domain
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespacesNamespaceTemplatesSubject struct {
	value *VcenterNamespacesNamespaceTemplatesSubject
	isSet bool
}

func (v NullableVcenterNamespacesNamespaceTemplatesSubject) Get() *VcenterNamespacesNamespaceTemplatesSubject {
	return v.value
}

func (v *NullableVcenterNamespacesNamespaceTemplatesSubject) Set(val *VcenterNamespacesNamespaceTemplatesSubject) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesNamespaceTemplatesSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesNamespaceTemplatesSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesNamespaceTemplatesSubject(val *VcenterNamespacesNamespaceTemplatesSubject) *NullableVcenterNamespacesNamespaceTemplatesSubject {
	return &NullableVcenterNamespacesNamespaceTemplatesSubject{value: val, isSet: true}
}

func (v NullableVcenterNamespacesNamespaceTemplatesSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesNamespaceTemplatesSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


