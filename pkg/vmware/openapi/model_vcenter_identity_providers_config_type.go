/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterIdentityProvidersConfigType The Providers.ConfigType structure contains the possible types of vCenter Server identity providers.
type VcenterIdentityProvidersConfigType string

// List of vcenter.identity.providers.config_type
const (
	VCENTERIDENTITYPROVIDERSCONFIGTYPE_OAUTH2 VcenterIdentityProvidersConfigType = "Oauth2"
	VCENTERIDENTITYPROVIDERSCONFIGTYPE_OIDC VcenterIdentityProvidersConfigType = "Oidc"
)

// All allowed values of VcenterIdentityProvidersConfigType enum
var AllowedVcenterIdentityProvidersConfigTypeEnumValues = []VcenterIdentityProvidersConfigType{
	"Oauth2",
	"Oidc",
}

func (v *VcenterIdentityProvidersConfigType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterIdentityProvidersConfigType(value)
	for _, existing := range AllowedVcenterIdentityProvidersConfigTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterIdentityProvidersConfigType", value)
}

// NewVcenterIdentityProvidersConfigTypeFromValue returns a pointer to a valid VcenterIdentityProvidersConfigType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterIdentityProvidersConfigTypeFromValue(v string) (*VcenterIdentityProvidersConfigType, error) {
	ev := VcenterIdentityProvidersConfigType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterIdentityProvidersConfigType: valid values are %v", v, AllowedVcenterIdentityProvidersConfigTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterIdentityProvidersConfigType) IsValid() bool {
	for _, existing := range AllowedVcenterIdentityProvidersConfigTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.identity.providers.config_type value
func (v VcenterIdentityProvidersConfigType) Ptr() *VcenterIdentityProvidersConfigType {
	return &v
}

type NullableVcenterIdentityProvidersConfigType struct {
	value *VcenterIdentityProvidersConfigType
	isSet bool
}

func (v NullableVcenterIdentityProvidersConfigType) Get() *VcenterIdentityProvidersConfigType {
	return v.value
}

func (v *NullableVcenterIdentityProvidersConfigType) Set(val *VcenterIdentityProvidersConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterIdentityProvidersConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterIdentityProvidersConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterIdentityProvidersConfigType(val *VcenterIdentityProvidersConfigType) *NullableVcenterIdentityProvidersConfigType {
	return &NullableVcenterIdentityProvidersConfigType{value: val, isSet: true}
}

func (v NullableVcenterIdentityProvidersConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterIdentityProvidersConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

