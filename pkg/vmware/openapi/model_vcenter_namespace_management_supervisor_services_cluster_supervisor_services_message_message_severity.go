/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity The ClusterSupervisorServices.Message.MessageSeverity enumerated type represents the severity of the message.
type VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity string

// List of VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity
const (
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESCLUSTERSUPERVISORSERVICESMESSAGEMESSAGESEVERITY_INFO VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity = "INFO"
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESCLUSTERSUPERVISORSERVICESMESSAGEMESSAGESEVERITY_WARNING VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity = "WARNING"
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESCLUSTERSUPERVISORSERVICESMESSAGEMESSAGESEVERITY_ERROR VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity = "ERROR"
)

// All allowed values of VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity enum
var AllowedVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverityEnumValues = []VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity{
	"INFO",
	"WARNING",
	"ERROR",
}

func (v *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity(value)
	for _, existing := range AllowedVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity", value)
}

// NewVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverityFromValue returns a pointer to a valid VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverityFromValue(v string) (*VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity, error) {
	ev := VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity: valid values are %v", v, AllowedVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity value
func (v VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) Ptr() *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity {
	return &v
}

type NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity struct {
	value *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) Get() *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) Set(val *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity(val *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity {
	return &NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesMessageMessageSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

