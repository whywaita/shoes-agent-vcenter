/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterCryptoManagerKmsProvidersCreateSpec struct for VcenterCryptoManagerKmsProvidersCreateSpec
type VcenterCryptoManagerKmsProvidersCreateSpec struct {
	// Provider identifier.   A unique string provided by the client.  When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.crypto_manager.kms.provider. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.crypto_manager.kms.provider.
	Provider string `json:"provider"`
	Constraints *VcenterCryptoManagerKmsProvidersConstraintsSpec `json:"constraints,omitempty"`
	NativeSpec *VcenterCryptoManagerKmsProvidersNativeProviderCreateSpec `json:"native_spec,omitempty"`
}

// NewVcenterCryptoManagerKmsProvidersCreateSpec instantiates a new VcenterCryptoManagerKmsProvidersCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterCryptoManagerKmsProvidersCreateSpec(provider string) *VcenterCryptoManagerKmsProvidersCreateSpec {
	this := VcenterCryptoManagerKmsProvidersCreateSpec{}
	this.Provider = provider
	return &this
}

// NewVcenterCryptoManagerKmsProvidersCreateSpecWithDefaults instantiates a new VcenterCryptoManagerKmsProvidersCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterCryptoManagerKmsProvidersCreateSpecWithDefaults() *VcenterCryptoManagerKmsProvidersCreateSpec {
	this := VcenterCryptoManagerKmsProvidersCreateSpec{}
	return &this
}

// GetProvider returns the Provider field value
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) GetProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) SetProvider(v string) {
	o.Provider = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) GetConstraints() VcenterCryptoManagerKmsProvidersConstraintsSpec {
	if o == nil || o.Constraints == nil {
		var ret VcenterCryptoManagerKmsProvidersConstraintsSpec
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) GetConstraintsOk() (*VcenterCryptoManagerKmsProvidersConstraintsSpec, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given VcenterCryptoManagerKmsProvidersConstraintsSpec and assigns it to the Constraints field.
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) SetConstraints(v VcenterCryptoManagerKmsProvidersConstraintsSpec) {
	o.Constraints = &v
}

// GetNativeSpec returns the NativeSpec field value if set, zero value otherwise.
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) GetNativeSpec() VcenterCryptoManagerKmsProvidersNativeProviderCreateSpec {
	if o == nil || o.NativeSpec == nil {
		var ret VcenterCryptoManagerKmsProvidersNativeProviderCreateSpec
		return ret
	}
	return *o.NativeSpec
}

// GetNativeSpecOk returns a tuple with the NativeSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) GetNativeSpecOk() (*VcenterCryptoManagerKmsProvidersNativeProviderCreateSpec, bool) {
	if o == nil || o.NativeSpec == nil {
		return nil, false
	}
	return o.NativeSpec, true
}

// HasNativeSpec returns a boolean if a field has been set.
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) HasNativeSpec() bool {
	if o != nil && o.NativeSpec != nil {
		return true
	}

	return false
}

// SetNativeSpec gets a reference to the given VcenterCryptoManagerKmsProvidersNativeProviderCreateSpec and assigns it to the NativeSpec field.
func (o *VcenterCryptoManagerKmsProvidersCreateSpec) SetNativeSpec(v VcenterCryptoManagerKmsProvidersNativeProviderCreateSpec) {
	o.NativeSpec = &v
}

func (o VcenterCryptoManagerKmsProvidersCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	if o.NativeSpec != nil {
		toSerialize["native_spec"] = o.NativeSpec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterCryptoManagerKmsProvidersCreateSpec struct {
	value *VcenterCryptoManagerKmsProvidersCreateSpec
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersCreateSpec) Get() *VcenterCryptoManagerKmsProvidersCreateSpec {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersCreateSpec) Set(val *VcenterCryptoManagerKmsProvidersCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersCreateSpec(val *VcenterCryptoManagerKmsProvidersCreateSpec) *NullableVcenterCryptoManagerKmsProvidersCreateSpec {
	return &NullableVcenterCryptoManagerKmsProvidersCreateSpec{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


