/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVchaClusterClusterState The Cluster.ClusterState enumerated type defines the possible for a VCHA Cluster.
type VcenterVchaClusterClusterState string

// List of vcenter.vcha.cluster.cluster_state
const (
	VCENTERVCHACLUSTERCLUSTERSTATE_HEALTHY VcenterVchaClusterClusterState = "HEALTHY"
	VCENTERVCHACLUSTERCLUSTERSTATE_DEGRADED VcenterVchaClusterClusterState = "DEGRADED"
	VCENTERVCHACLUSTERCLUSTERSTATE_ISOLATED VcenterVchaClusterClusterState = "ISOLATED"
)

// All allowed values of VcenterVchaClusterClusterState enum
var AllowedVcenterVchaClusterClusterStateEnumValues = []VcenterVchaClusterClusterState{
	"HEALTHY",
	"DEGRADED",
	"ISOLATED",
}

func (v *VcenterVchaClusterClusterState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVchaClusterClusterState(value)
	for _, existing := range AllowedVcenterVchaClusterClusterStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVchaClusterClusterState", value)
}

// NewVcenterVchaClusterClusterStateFromValue returns a pointer to a valid VcenterVchaClusterClusterState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVchaClusterClusterStateFromValue(v string) (*VcenterVchaClusterClusterState, error) {
	ev := VcenterVchaClusterClusterState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVchaClusterClusterState: valid values are %v", v, AllowedVcenterVchaClusterClusterStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVchaClusterClusterState) IsValid() bool {
	for _, existing := range AllowedVcenterVchaClusterClusterStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vcha.cluster.cluster_state value
func (v VcenterVchaClusterClusterState) Ptr() *VcenterVchaClusterClusterState {
	return &v
}

type NullableVcenterVchaClusterClusterState struct {
	value *VcenterVchaClusterClusterState
	isSet bool
}

func (v NullableVcenterVchaClusterClusterState) Get() *VcenterVchaClusterClusterState {
	return v.value
}

func (v *NullableVcenterVchaClusterClusterState) Set(val *VcenterVchaClusterClusterState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterClusterState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterClusterState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterClusterState(val *VcenterVchaClusterClusterState) *NullableVcenterVchaClusterClusterState {
	return &NullableVcenterVchaClusterClusterState{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterClusterState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterClusterState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

