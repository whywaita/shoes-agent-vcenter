/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareFloppySummary struct for VcenterVmHardwareFloppySummary
type VcenterVmHardwareFloppySummary struct {
	// Identifier of the virtual floppy drive. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.Floppy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.Floppy.
	Floppy string `json:"floppy"`
}

// NewVcenterVmHardwareFloppySummary instantiates a new VcenterVmHardwareFloppySummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareFloppySummary(floppy string) *VcenterVmHardwareFloppySummary {
	this := VcenterVmHardwareFloppySummary{}
	this.Floppy = floppy
	return &this
}

// NewVcenterVmHardwareFloppySummaryWithDefaults instantiates a new VcenterVmHardwareFloppySummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareFloppySummaryWithDefaults() *VcenterVmHardwareFloppySummary {
	this := VcenterVmHardwareFloppySummary{}
	return &this
}

// GetFloppy returns the Floppy field value
func (o *VcenterVmHardwareFloppySummary) GetFloppy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Floppy
}

// GetFloppyOk returns a tuple with the Floppy field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareFloppySummary) GetFloppyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Floppy, true
}

// SetFloppy sets field value
func (o *VcenterVmHardwareFloppySummary) SetFloppy(v string) {
	o.Floppy = v
}

func (o VcenterVmHardwareFloppySummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["floppy"] = o.Floppy
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareFloppySummary struct {
	value *VcenterVmHardwareFloppySummary
	isSet bool
}

func (v NullableVcenterVmHardwareFloppySummary) Get() *VcenterVmHardwareFloppySummary {
	return v.value
}

func (v *NullableVcenterVmHardwareFloppySummary) Set(val *VcenterVmHardwareFloppySummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareFloppySummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareFloppySummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareFloppySummary(val *VcenterVmHardwareFloppySummary) *NullableVcenterVmHardwareFloppySummary {
	return &NullableVcenterVmHardwareFloppySummary{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareFloppySummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareFloppySummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


