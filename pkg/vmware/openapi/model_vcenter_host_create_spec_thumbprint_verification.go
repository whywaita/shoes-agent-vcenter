/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterHostCreateSpecThumbprintVerification The Host.CreateSpec.ThumbprintVerification enumerated type defines the thumbprint verification schemes for a host's SSL certificate.
type VcenterHostCreateSpecThumbprintVerification string

// List of vcenter.host.create_spec.thumbprint_verification
const (
	VCENTERHOSTCREATESPECTHUMBPRINTVERIFICATION_NONE VcenterHostCreateSpecThumbprintVerification = "NONE"
	VCENTERHOSTCREATESPECTHUMBPRINTVERIFICATION_THUMBPRINT VcenterHostCreateSpecThumbprintVerification = "THUMBPRINT"
)

// All allowed values of VcenterHostCreateSpecThumbprintVerification enum
var AllowedVcenterHostCreateSpecThumbprintVerificationEnumValues = []VcenterHostCreateSpecThumbprintVerification{
	"NONE",
	"THUMBPRINT",
}

func (v *VcenterHostCreateSpecThumbprintVerification) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterHostCreateSpecThumbprintVerification(value)
	for _, existing := range AllowedVcenterHostCreateSpecThumbprintVerificationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterHostCreateSpecThumbprintVerification", value)
}

// NewVcenterHostCreateSpecThumbprintVerificationFromValue returns a pointer to a valid VcenterHostCreateSpecThumbprintVerification
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterHostCreateSpecThumbprintVerificationFromValue(v string) (*VcenterHostCreateSpecThumbprintVerification, error) {
	ev := VcenterHostCreateSpecThumbprintVerification(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterHostCreateSpecThumbprintVerification: valid values are %v", v, AllowedVcenterHostCreateSpecThumbprintVerificationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterHostCreateSpecThumbprintVerification) IsValid() bool {
	for _, existing := range AllowedVcenterHostCreateSpecThumbprintVerificationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.host.create_spec.thumbprint_verification value
func (v VcenterHostCreateSpecThumbprintVerification) Ptr() *VcenterHostCreateSpecThumbprintVerification {
	return &v
}

type NullableVcenterHostCreateSpecThumbprintVerification struct {
	value *VcenterHostCreateSpecThumbprintVerification
	isSet bool
}

func (v NullableVcenterHostCreateSpecThumbprintVerification) Get() *VcenterHostCreateSpecThumbprintVerification {
	return v.value
}

func (v *NullableVcenterHostCreateSpecThumbprintVerification) Set(val *VcenterHostCreateSpecThumbprintVerification) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterHostCreateSpecThumbprintVerification) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterHostCreateSpecThumbprintVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterHostCreateSpecThumbprintVerification(val *VcenterHostCreateSpecThumbprintVerification) *NullableVcenterHostCreateSpecThumbprintVerification {
	return &NullableVcenterHostCreateSpecThumbprintVerification{value: val, isSet: true}
}

func (v NullableVcenterHostCreateSpecThumbprintVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterHostCreateSpecThumbprintVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

