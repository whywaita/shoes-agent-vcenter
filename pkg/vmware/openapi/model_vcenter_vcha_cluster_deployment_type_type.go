/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVchaClusterDeploymentTypeType The DeploymentType.Type enumerated type defines the possible deployment types for a VCHA Cluster.
type VcenterVchaClusterDeploymentTypeType string

// List of vcenter.vcha.cluster.deployment_type.type
const (
	VCENTERVCHACLUSTERDEPLOYMENTTYPETYPE_NONE VcenterVchaClusterDeploymentTypeType = "NONE"
	VCENTERVCHACLUSTERDEPLOYMENTTYPETYPE_AUTO VcenterVchaClusterDeploymentTypeType = "AUTO"
	VCENTERVCHACLUSTERDEPLOYMENTTYPETYPE_MANUAL VcenterVchaClusterDeploymentTypeType = "MANUAL"
)

// All allowed values of VcenterVchaClusterDeploymentTypeType enum
var AllowedVcenterVchaClusterDeploymentTypeTypeEnumValues = []VcenterVchaClusterDeploymentTypeType{
	"NONE",
	"AUTO",
	"MANUAL",
}

func (v *VcenterVchaClusterDeploymentTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVchaClusterDeploymentTypeType(value)
	for _, existing := range AllowedVcenterVchaClusterDeploymentTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVchaClusterDeploymentTypeType", value)
}

// NewVcenterVchaClusterDeploymentTypeTypeFromValue returns a pointer to a valid VcenterVchaClusterDeploymentTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVchaClusterDeploymentTypeTypeFromValue(v string) (*VcenterVchaClusterDeploymentTypeType, error) {
	ev := VcenterVchaClusterDeploymentTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVchaClusterDeploymentTypeType: valid values are %v", v, AllowedVcenterVchaClusterDeploymentTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVchaClusterDeploymentTypeType) IsValid() bool {
	for _, existing := range AllowedVcenterVchaClusterDeploymentTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vcha.cluster.deployment_type.type value
func (v VcenterVchaClusterDeploymentTypeType) Ptr() *VcenterVchaClusterDeploymentTypeType {
	return &v
}

type NullableVcenterVchaClusterDeploymentTypeType struct {
	value *VcenterVchaClusterDeploymentTypeType
	isSet bool
}

func (v NullableVcenterVchaClusterDeploymentTypeType) Get() *VcenterVchaClusterDeploymentTypeType {
	return v.value
}

func (v *NullableVcenterVchaClusterDeploymentTypeType) Set(val *VcenterVchaClusterDeploymentTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterDeploymentTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterDeploymentTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterDeploymentTypeType(val *VcenterVchaClusterDeploymentTypeType) *NullableVcenterVchaClusterDeploymentTypeType {
	return &NullableVcenterVchaClusterDeploymentTypeType{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterDeploymentTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterDeploymentTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

