/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterOvfParseIssueCategory The {@name Category} {@term enumerated type} defines the categories of issues that can be found when parsing files inside an OVF package (see {@link ParseIssue}) including OVF descriptor (which is an XML document), manifest and certificate files, or exporting an OVF package.
type VcenterOvfParseIssueCategory string

// List of vcenter.ovf.parse_issue.category
const (
	VCENTEROVFPARSEISSUECATEGORY_VALUE_ILLEGAL VcenterOvfParseIssueCategory = "VALUE_ILLEGAL"
	VCENTEROVFPARSEISSUECATEGORY_ATTRIBUTE_REQUIRED VcenterOvfParseIssueCategory = "ATTRIBUTE_REQUIRED"
	VCENTEROVFPARSEISSUECATEGORY_ATTRIBUTE_ILLEGAL VcenterOvfParseIssueCategory = "ATTRIBUTE_ILLEGAL"
	VCENTEROVFPARSEISSUECATEGORY_ELEMENT_REQUIRED VcenterOvfParseIssueCategory = "ELEMENT_REQUIRED"
	VCENTEROVFPARSEISSUECATEGORY_ELEMENT_ILLEGAL VcenterOvfParseIssueCategory = "ELEMENT_ILLEGAL"
	VCENTEROVFPARSEISSUECATEGORY_ELEMENT_UNKNOWN VcenterOvfParseIssueCategory = "ELEMENT_UNKNOWN"
	VCENTEROVFPARSEISSUECATEGORY_SECTION_UNKNOWN VcenterOvfParseIssueCategory = "SECTION_UNKNOWN"
	VCENTEROVFPARSEISSUECATEGORY_SECTION_RESTRICTION VcenterOvfParseIssueCategory = "SECTION_RESTRICTION"
	VCENTEROVFPARSEISSUECATEGORY_PARSE_ERROR VcenterOvfParseIssueCategory = "PARSE_ERROR"
	VCENTEROVFPARSEISSUECATEGORY_GENERATE_ERROR VcenterOvfParseIssueCategory = "GENERATE_ERROR"
	VCENTEROVFPARSEISSUECATEGORY_VALIDATION_ERROR VcenterOvfParseIssueCategory = "VALIDATION_ERROR"
	VCENTEROVFPARSEISSUECATEGORY_EXPORT_ERROR VcenterOvfParseIssueCategory = "EXPORT_ERROR"
	VCENTEROVFPARSEISSUECATEGORY_INTERNAL_ERROR VcenterOvfParseIssueCategory = "INTERNAL_ERROR"
)

// All allowed values of VcenterOvfParseIssueCategory enum
var AllowedVcenterOvfParseIssueCategoryEnumValues = []VcenterOvfParseIssueCategory{
	"VALUE_ILLEGAL",
	"ATTRIBUTE_REQUIRED",
	"ATTRIBUTE_ILLEGAL",
	"ELEMENT_REQUIRED",
	"ELEMENT_ILLEGAL",
	"ELEMENT_UNKNOWN",
	"SECTION_UNKNOWN",
	"SECTION_RESTRICTION",
	"PARSE_ERROR",
	"GENERATE_ERROR",
	"VALIDATION_ERROR",
	"EXPORT_ERROR",
	"INTERNAL_ERROR",
}

func (v *VcenterOvfParseIssueCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterOvfParseIssueCategory(value)
	for _, existing := range AllowedVcenterOvfParseIssueCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterOvfParseIssueCategory", value)
}

// NewVcenterOvfParseIssueCategoryFromValue returns a pointer to a valid VcenterOvfParseIssueCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterOvfParseIssueCategoryFromValue(v string) (*VcenterOvfParseIssueCategory, error) {
	ev := VcenterOvfParseIssueCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterOvfParseIssueCategory: valid values are %v", v, AllowedVcenterOvfParseIssueCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterOvfParseIssueCategory) IsValid() bool {
	for _, existing := range AllowedVcenterOvfParseIssueCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.ovf.parse_issue.category value
func (v VcenterOvfParseIssueCategory) Ptr() *VcenterOvfParseIssueCategory {
	return &v
}

type NullableVcenterOvfParseIssueCategory struct {
	value *VcenterOvfParseIssueCategory
	isSet bool
}

func (v NullableVcenterOvfParseIssueCategory) Get() *VcenterOvfParseIssueCategory {
	return v.value
}

func (v *NullableVcenterOvfParseIssueCategory) Set(val *VcenterOvfParseIssueCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterOvfParseIssueCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterOvfParseIssueCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterOvfParseIssueCategory(val *VcenterOvfParseIssueCategory) *NullableVcenterOvfParseIssueCategory {
	return &NullableVcenterOvfParseIssueCategory{value: val, isSet: true}
}

func (v NullableVcenterOvfParseIssueCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterOvfParseIssueCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

