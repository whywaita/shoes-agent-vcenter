/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterGuestDomain struct for VcenterGuestDomain
type VcenterGuestDomain struct {
	Type VcenterGuestDomainType `json:"type"`
	// The workgroup that the virtual machine should join. This field is optional and it is only relevant when the value of Domain.type is WORKGROUP.
	Workgroup *string `json:"workgroup,omitempty"`
	// The domain to which the virtual machine should be joined. This field is optional and it is only relevant when the value of Domain.type is DOMAIN.
	Domain *string `json:"domain,omitempty"`
	// The domain user that has permission to join the domain after virtual machine is joined. This field is optional and it is only relevant when the value of Domain.type is DOMAIN.
	DomainUsername *string `json:"domain_username,omitempty"`
	// The domain user password that has permission to join the Domain.domain-username after customization. This field is optional and it is only relevant when the value of Domain.type is DOMAIN.
	DomainPassword *string `json:"domain_password,omitempty"`
}

// NewVcenterGuestDomain instantiates a new VcenterGuestDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterGuestDomain(type_ VcenterGuestDomainType) *VcenterGuestDomain {
	this := VcenterGuestDomain{}
	this.Type = type_
	return &this
}

// NewVcenterGuestDomainWithDefaults instantiates a new VcenterGuestDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterGuestDomainWithDefaults() *VcenterGuestDomain {
	this := VcenterGuestDomain{}
	return &this
}

// GetType returns the Type field value
func (o *VcenterGuestDomain) GetType() VcenterGuestDomainType {
	if o == nil {
		var ret VcenterGuestDomainType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VcenterGuestDomain) GetTypeOk() (*VcenterGuestDomainType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VcenterGuestDomain) SetType(v VcenterGuestDomainType) {
	o.Type = v
}

// GetWorkgroup returns the Workgroup field value if set, zero value otherwise.
func (o *VcenterGuestDomain) GetWorkgroup() string {
	if o == nil || o.Workgroup == nil {
		var ret string
		return ret
	}
	return *o.Workgroup
}

// GetWorkgroupOk returns a tuple with the Workgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestDomain) GetWorkgroupOk() (*string, bool) {
	if o == nil || o.Workgroup == nil {
		return nil, false
	}
	return o.Workgroup, true
}

// HasWorkgroup returns a boolean if a field has been set.
func (o *VcenterGuestDomain) HasWorkgroup() bool {
	if o != nil && o.Workgroup != nil {
		return true
	}

	return false
}

// SetWorkgroup gets a reference to the given string and assigns it to the Workgroup field.
func (o *VcenterGuestDomain) SetWorkgroup(v string) {
	o.Workgroup = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *VcenterGuestDomain) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestDomain) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *VcenterGuestDomain) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *VcenterGuestDomain) SetDomain(v string) {
	o.Domain = &v
}

// GetDomainUsername returns the DomainUsername field value if set, zero value otherwise.
func (o *VcenterGuestDomain) GetDomainUsername() string {
	if o == nil || o.DomainUsername == nil {
		var ret string
		return ret
	}
	return *o.DomainUsername
}

// GetDomainUsernameOk returns a tuple with the DomainUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestDomain) GetDomainUsernameOk() (*string, bool) {
	if o == nil || o.DomainUsername == nil {
		return nil, false
	}
	return o.DomainUsername, true
}

// HasDomainUsername returns a boolean if a field has been set.
func (o *VcenterGuestDomain) HasDomainUsername() bool {
	if o != nil && o.DomainUsername != nil {
		return true
	}

	return false
}

// SetDomainUsername gets a reference to the given string and assigns it to the DomainUsername field.
func (o *VcenterGuestDomain) SetDomainUsername(v string) {
	o.DomainUsername = &v
}

// GetDomainPassword returns the DomainPassword field value if set, zero value otherwise.
func (o *VcenterGuestDomain) GetDomainPassword() string {
	if o == nil || o.DomainPassword == nil {
		var ret string
		return ret
	}
	return *o.DomainPassword
}

// GetDomainPasswordOk returns a tuple with the DomainPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterGuestDomain) GetDomainPasswordOk() (*string, bool) {
	if o == nil || o.DomainPassword == nil {
		return nil, false
	}
	return o.DomainPassword, true
}

// HasDomainPassword returns a boolean if a field has been set.
func (o *VcenterGuestDomain) HasDomainPassword() bool {
	if o != nil && o.DomainPassword != nil {
		return true
	}

	return false
}

// SetDomainPassword gets a reference to the given string and assigns it to the DomainPassword field.
func (o *VcenterGuestDomain) SetDomainPassword(v string) {
	o.DomainPassword = &v
}

func (o VcenterGuestDomain) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Workgroup != nil {
		toSerialize["workgroup"] = o.Workgroup
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.DomainUsername != nil {
		toSerialize["domain_username"] = o.DomainUsername
	}
	if o.DomainPassword != nil {
		toSerialize["domain_password"] = o.DomainPassword
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterGuestDomain struct {
	value *VcenterGuestDomain
	isSet bool
}

func (v NullableVcenterGuestDomain) Get() *VcenterGuestDomain {
	return v.value
}

func (v *NullableVcenterGuestDomain) Set(val *VcenterGuestDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterGuestDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterGuestDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterGuestDomain(val *VcenterGuestDomain) *NullableVcenterGuestDomain {
	return &NullableVcenterGuestDomain{value: val, isSet: true}
}

func (v NullableVcenterGuestDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterGuestDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


