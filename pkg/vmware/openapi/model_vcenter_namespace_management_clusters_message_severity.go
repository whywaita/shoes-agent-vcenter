/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementClustersMessageSeverity The Clusters.Message.Severity enumerated type represents the severity of the message.
type VcenterNamespaceManagementClustersMessageSeverity string

// List of VcenterNamespaceManagementClustersMessageSeverity
const (
	VCENTERNAMESPACEMANAGEMENTCLUSTERSMESSAGESEVERITY_INFO VcenterNamespaceManagementClustersMessageSeverity = "INFO"
	VCENTERNAMESPACEMANAGEMENTCLUSTERSMESSAGESEVERITY_WARNING VcenterNamespaceManagementClustersMessageSeverity = "WARNING"
	VCENTERNAMESPACEMANAGEMENTCLUSTERSMESSAGESEVERITY_ERROR VcenterNamespaceManagementClustersMessageSeverity = "ERROR"
)

// All allowed values of VcenterNamespaceManagementClustersMessageSeverity enum
var AllowedVcenterNamespaceManagementClustersMessageSeverityEnumValues = []VcenterNamespaceManagementClustersMessageSeverity{
	"INFO",
	"WARNING",
	"ERROR",
}

func (v *VcenterNamespaceManagementClustersMessageSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementClustersMessageSeverity(value)
	for _, existing := range AllowedVcenterNamespaceManagementClustersMessageSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementClustersMessageSeverity", value)
}

// NewVcenterNamespaceManagementClustersMessageSeverityFromValue returns a pointer to a valid VcenterNamespaceManagementClustersMessageSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementClustersMessageSeverityFromValue(v string) (*VcenterNamespaceManagementClustersMessageSeverity, error) {
	ev := VcenterNamespaceManagementClustersMessageSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementClustersMessageSeverity: valid values are %v", v, AllowedVcenterNamespaceManagementClustersMessageSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementClustersMessageSeverity) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementClustersMessageSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementClustersMessageSeverity value
func (v VcenterNamespaceManagementClustersMessageSeverity) Ptr() *VcenterNamespaceManagementClustersMessageSeverity {
	return &v
}

type NullableVcenterNamespaceManagementClustersMessageSeverity struct {
	value *VcenterNamespaceManagementClustersMessageSeverity
	isSet bool
}

func (v NullableVcenterNamespaceManagementClustersMessageSeverity) Get() *VcenterNamespaceManagementClustersMessageSeverity {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClustersMessageSeverity) Set(val *VcenterNamespaceManagementClustersMessageSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClustersMessageSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClustersMessageSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClustersMessageSeverity(val *VcenterNamespaceManagementClustersMessageSeverity) *NullableVcenterNamespaceManagementClustersMessageSeverity {
	return &NullableVcenterNamespaceManagementClustersMessageSeverity{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClustersMessageSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClustersMessageSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

