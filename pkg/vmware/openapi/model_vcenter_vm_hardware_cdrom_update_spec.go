/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareCdromUpdateSpec struct for VcenterVmHardwareCdromUpdateSpec
type VcenterVmHardwareCdromUpdateSpec struct {
	Backing *VcenterVmHardwareCdromBackingSpec `json:"backing,omitempty"`
	// Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on. If unset, the value is unchanged.
	StartConnected *bool `json:"start_connected,omitempty"`
	// Flag indicating whether the guest can connect and disconnect the device. If unset, the value is unchanged.
	AllowGuestControl *bool `json:"allow_guest_control,omitempty"`
}

// NewVcenterVmHardwareCdromUpdateSpec instantiates a new VcenterVmHardwareCdromUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareCdromUpdateSpec() *VcenterVmHardwareCdromUpdateSpec {
	this := VcenterVmHardwareCdromUpdateSpec{}
	return &this
}

// NewVcenterVmHardwareCdromUpdateSpecWithDefaults instantiates a new VcenterVmHardwareCdromUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareCdromUpdateSpecWithDefaults() *VcenterVmHardwareCdromUpdateSpec {
	this := VcenterVmHardwareCdromUpdateSpec{}
	return &this
}

// GetBacking returns the Backing field value if set, zero value otherwise.
func (o *VcenterVmHardwareCdromUpdateSpec) GetBacking() VcenterVmHardwareCdromBackingSpec {
	if o == nil || o.Backing == nil {
		var ret VcenterVmHardwareCdromBackingSpec
		return ret
	}
	return *o.Backing
}

// GetBackingOk returns a tuple with the Backing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromUpdateSpec) GetBackingOk() (*VcenterVmHardwareCdromBackingSpec, bool) {
	if o == nil || o.Backing == nil {
		return nil, false
	}
	return o.Backing, true
}

// HasBacking returns a boolean if a field has been set.
func (o *VcenterVmHardwareCdromUpdateSpec) HasBacking() bool {
	if o != nil && o.Backing != nil {
		return true
	}

	return false
}

// SetBacking gets a reference to the given VcenterVmHardwareCdromBackingSpec and assigns it to the Backing field.
func (o *VcenterVmHardwareCdromUpdateSpec) SetBacking(v VcenterVmHardwareCdromBackingSpec) {
	o.Backing = &v
}

// GetStartConnected returns the StartConnected field value if set, zero value otherwise.
func (o *VcenterVmHardwareCdromUpdateSpec) GetStartConnected() bool {
	if o == nil || o.StartConnected == nil {
		var ret bool
		return ret
	}
	return *o.StartConnected
}

// GetStartConnectedOk returns a tuple with the StartConnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromUpdateSpec) GetStartConnectedOk() (*bool, bool) {
	if o == nil || o.StartConnected == nil {
		return nil, false
	}
	return o.StartConnected, true
}

// HasStartConnected returns a boolean if a field has been set.
func (o *VcenterVmHardwareCdromUpdateSpec) HasStartConnected() bool {
	if o != nil && o.StartConnected != nil {
		return true
	}

	return false
}

// SetStartConnected gets a reference to the given bool and assigns it to the StartConnected field.
func (o *VcenterVmHardwareCdromUpdateSpec) SetStartConnected(v bool) {
	o.StartConnected = &v
}

// GetAllowGuestControl returns the AllowGuestControl field value if set, zero value otherwise.
func (o *VcenterVmHardwareCdromUpdateSpec) GetAllowGuestControl() bool {
	if o == nil || o.AllowGuestControl == nil {
		var ret bool
		return ret
	}
	return *o.AllowGuestControl
}

// GetAllowGuestControlOk returns a tuple with the AllowGuestControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareCdromUpdateSpec) GetAllowGuestControlOk() (*bool, bool) {
	if o == nil || o.AllowGuestControl == nil {
		return nil, false
	}
	return o.AllowGuestControl, true
}

// HasAllowGuestControl returns a boolean if a field has been set.
func (o *VcenterVmHardwareCdromUpdateSpec) HasAllowGuestControl() bool {
	if o != nil && o.AllowGuestControl != nil {
		return true
	}

	return false
}

// SetAllowGuestControl gets a reference to the given bool and assigns it to the AllowGuestControl field.
func (o *VcenterVmHardwareCdromUpdateSpec) SetAllowGuestControl(v bool) {
	o.AllowGuestControl = &v
}

func (o VcenterVmHardwareCdromUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Backing != nil {
		toSerialize["backing"] = o.Backing
	}
	if o.StartConnected != nil {
		toSerialize["start_connected"] = o.StartConnected
	}
	if o.AllowGuestControl != nil {
		toSerialize["allow_guest_control"] = o.AllowGuestControl
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareCdromUpdateSpec struct {
	value *VcenterVmHardwareCdromUpdateSpec
	isSet bool
}

func (v NullableVcenterVmHardwareCdromUpdateSpec) Get() *VcenterVmHardwareCdromUpdateSpec {
	return v.value
}

func (v *NullableVcenterVmHardwareCdromUpdateSpec) Set(val *VcenterVmHardwareCdromUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareCdromUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareCdromUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareCdromUpdateSpec(val *VcenterVmHardwareCdromUpdateSpec) *NullableVcenterVmHardwareCdromUpdateSpec {
	return &NullableVcenterVmHardwareCdromUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareCdromUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareCdromUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


