/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementSupervisorServicesState The SupervisorServices.State enumerated type defines the state of a Supervisor Service.
type VcenterNamespaceManagementSupervisorServicesState string

// List of VcenterNamespaceManagementSupervisorServicesState
const (
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESSTATE_ACTIVATED VcenterNamespaceManagementSupervisorServicesState = "ACTIVATED"
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESSTATE_DEACTIVATED VcenterNamespaceManagementSupervisorServicesState = "DEACTIVATED"
)

// All allowed values of VcenterNamespaceManagementSupervisorServicesState enum
var AllowedVcenterNamespaceManagementSupervisorServicesStateEnumValues = []VcenterNamespaceManagementSupervisorServicesState{
	"ACTIVATED",
	"DEACTIVATED",
}

func (v *VcenterNamespaceManagementSupervisorServicesState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementSupervisorServicesState(value)
	for _, existing := range AllowedVcenterNamespaceManagementSupervisorServicesStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementSupervisorServicesState", value)
}

// NewVcenterNamespaceManagementSupervisorServicesStateFromValue returns a pointer to a valid VcenterNamespaceManagementSupervisorServicesState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementSupervisorServicesStateFromValue(v string) (*VcenterNamespaceManagementSupervisorServicesState, error) {
	ev := VcenterNamespaceManagementSupervisorServicesState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementSupervisorServicesState: valid values are %v", v, AllowedVcenterNamespaceManagementSupervisorServicesStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementSupervisorServicesState) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementSupervisorServicesStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementSupervisorServicesState value
func (v VcenterNamespaceManagementSupervisorServicesState) Ptr() *VcenterNamespaceManagementSupervisorServicesState {
	return &v
}

type NullableVcenterNamespaceManagementSupervisorServicesState struct {
	value *VcenterNamespaceManagementSupervisorServicesState
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesState) Get() *VcenterNamespaceManagementSupervisorServicesState {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesState) Set(val *VcenterNamespaceManagementSupervisorServicesState) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesState) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesState(val *VcenterNamespaceManagementSupervisorServicesState) *NullableVcenterNamespaceManagementSupervisorServicesState {
	return &NullableVcenterNamespaceManagementSupervisorServicesState{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

