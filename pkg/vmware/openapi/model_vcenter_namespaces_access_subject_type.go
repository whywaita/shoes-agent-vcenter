/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespacesAccessSubjectType The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace.
type VcenterNamespacesAccessSubjectType string

// List of vcenter.namespaces.access.subject_type
const (
	VCENTERNAMESPACESACCESSSUBJECTTYPE_USER VcenterNamespacesAccessSubjectType = "USER"
	VCENTERNAMESPACESACCESSSUBJECTTYPE_GROUP VcenterNamespacesAccessSubjectType = "GROUP"
)

// All allowed values of VcenterNamespacesAccessSubjectType enum
var AllowedVcenterNamespacesAccessSubjectTypeEnumValues = []VcenterNamespacesAccessSubjectType{
	"USER",
	"GROUP",
}

func (v *VcenterNamespacesAccessSubjectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespacesAccessSubjectType(value)
	for _, existing := range AllowedVcenterNamespacesAccessSubjectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespacesAccessSubjectType", value)
}

// NewVcenterNamespacesAccessSubjectTypeFromValue returns a pointer to a valid VcenterNamespacesAccessSubjectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespacesAccessSubjectTypeFromValue(v string) (*VcenterNamespacesAccessSubjectType, error) {
	ev := VcenterNamespacesAccessSubjectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespacesAccessSubjectType: valid values are %v", v, AllowedVcenterNamespacesAccessSubjectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespacesAccessSubjectType) IsValid() bool {
	for _, existing := range AllowedVcenterNamespacesAccessSubjectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.namespaces.access.subject_type value
func (v VcenterNamespacesAccessSubjectType) Ptr() *VcenterNamespacesAccessSubjectType {
	return &v
}

type NullableVcenterNamespacesAccessSubjectType struct {
	value *VcenterNamespacesAccessSubjectType
	isSet bool
}

func (v NullableVcenterNamespacesAccessSubjectType) Get() *VcenterNamespacesAccessSubjectType {
	return v.value
}

func (v *NullableVcenterNamespacesAccessSubjectType) Set(val *VcenterNamespacesAccessSubjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespacesAccessSubjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespacesAccessSubjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespacesAccessSubjectType(val *VcenterNamespacesAccessSubjectType) *NullableVcenterNamespacesAccessSubjectType {
	return &NullableVcenterNamespacesAccessSubjectType{value: val, isSet: true}
}

func (v NullableVcenterNamespacesAccessSubjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespacesAccessSubjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

