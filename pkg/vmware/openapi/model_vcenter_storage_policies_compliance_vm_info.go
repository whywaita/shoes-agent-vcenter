/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterStoragePoliciesComplianceVMInfo struct for VcenterStoragePoliciesComplianceVMInfo
type VcenterStoragePoliciesComplianceVMInfo struct {
	VmHome *VcenterStoragePoliciesComplianceVMStatus `json:"vm_home,omitempty"`
	// A Map of virtual disks and their compliance status If empty, the virtual machine does not have any disks or its disks are not associated with a storage policy. When clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: vcenter.vm.hardware.Disk.
	Disks []VcenterStoragePoliciesComplianceVMInfoDisks `json:"disks"`
}

// NewVcenterStoragePoliciesComplianceVMInfo instantiates a new VcenterStoragePoliciesComplianceVMInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterStoragePoliciesComplianceVMInfo(disks []VcenterStoragePoliciesComplianceVMInfoDisks) *VcenterStoragePoliciesComplianceVMInfo {
	this := VcenterStoragePoliciesComplianceVMInfo{}
	this.Disks = disks
	return &this
}

// NewVcenterStoragePoliciesComplianceVMInfoWithDefaults instantiates a new VcenterStoragePoliciesComplianceVMInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterStoragePoliciesComplianceVMInfoWithDefaults() *VcenterStoragePoliciesComplianceVMInfo {
	this := VcenterStoragePoliciesComplianceVMInfo{}
	return &this
}

// GetVmHome returns the VmHome field value if set, zero value otherwise.
func (o *VcenterStoragePoliciesComplianceVMInfo) GetVmHome() VcenterStoragePoliciesComplianceVMStatus {
	if o == nil || o.VmHome == nil {
		var ret VcenterStoragePoliciesComplianceVMStatus
		return ret
	}
	return *o.VmHome
}

// GetVmHomeOk returns a tuple with the VmHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterStoragePoliciesComplianceVMInfo) GetVmHomeOk() (*VcenterStoragePoliciesComplianceVMStatus, bool) {
	if o == nil || o.VmHome == nil {
		return nil, false
	}
	return o.VmHome, true
}

// HasVmHome returns a boolean if a field has been set.
func (o *VcenterStoragePoliciesComplianceVMInfo) HasVmHome() bool {
	if o != nil && o.VmHome != nil {
		return true
	}

	return false
}

// SetVmHome gets a reference to the given VcenterStoragePoliciesComplianceVMStatus and assigns it to the VmHome field.
func (o *VcenterStoragePoliciesComplianceVMInfo) SetVmHome(v VcenterStoragePoliciesComplianceVMStatus) {
	o.VmHome = &v
}

// GetDisks returns the Disks field value
func (o *VcenterStoragePoliciesComplianceVMInfo) GetDisks() []VcenterStoragePoliciesComplianceVMInfoDisks {
	if o == nil {
		var ret []VcenterStoragePoliciesComplianceVMInfoDisks
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *VcenterStoragePoliciesComplianceVMInfo) GetDisksOk() (*[]VcenterStoragePoliciesComplianceVMInfoDisks, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Disks, true
}

// SetDisks sets field value
func (o *VcenterStoragePoliciesComplianceVMInfo) SetDisks(v []VcenterStoragePoliciesComplianceVMInfoDisks) {
	o.Disks = v
}

func (o VcenterStoragePoliciesComplianceVMInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VmHome != nil {
		toSerialize["vm_home"] = o.VmHome
	}
	if true {
		toSerialize["disks"] = o.Disks
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterStoragePoliciesComplianceVMInfo struct {
	value *VcenterStoragePoliciesComplianceVMInfo
	isSet bool
}

func (v NullableVcenterStoragePoliciesComplianceVMInfo) Get() *VcenterStoragePoliciesComplianceVMInfo {
	return v.value
}

func (v *NullableVcenterStoragePoliciesComplianceVMInfo) Set(val *VcenterStoragePoliciesComplianceVMInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterStoragePoliciesComplianceVMInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterStoragePoliciesComplianceVMInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterStoragePoliciesComplianceVMInfo(val *VcenterStoragePoliciesComplianceVMInfo) *NullableVcenterStoragePoliciesComplianceVMInfo {
	return &NullableVcenterStoragePoliciesComplianceVMInfo{value: val, isSet: true}
}

func (v NullableVcenterStoragePoliciesComplianceVMInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterStoragePoliciesComplianceVMInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


