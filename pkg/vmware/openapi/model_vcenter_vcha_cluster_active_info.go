/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterActiveInfo struct for VcenterVchaClusterActiveInfo
type VcenterVchaClusterActiveInfo struct {
	Management VcenterVchaIpSpec `json:"management"`
	Ha *VcenterVchaIpSpec `json:"ha,omitempty"`
	Placement *VcenterVchaPlacementInfo `json:"placement,omitempty"`
}

// NewVcenterVchaClusterActiveInfo instantiates a new VcenterVchaClusterActiveInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterActiveInfo(management VcenterVchaIpSpec) *VcenterVchaClusterActiveInfo {
	this := VcenterVchaClusterActiveInfo{}
	this.Management = management
	return &this
}

// NewVcenterVchaClusterActiveInfoWithDefaults instantiates a new VcenterVchaClusterActiveInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterActiveInfoWithDefaults() *VcenterVchaClusterActiveInfo {
	this := VcenterVchaClusterActiveInfo{}
	return &this
}

// GetManagement returns the Management field value
func (o *VcenterVchaClusterActiveInfo) GetManagement() VcenterVchaIpSpec {
	if o == nil {
		var ret VcenterVchaIpSpec
		return ret
	}

	return o.Management
}

// GetManagementOk returns a tuple with the Management field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterActiveInfo) GetManagementOk() (*VcenterVchaIpSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Management, true
}

// SetManagement sets field value
func (o *VcenterVchaClusterActiveInfo) SetManagement(v VcenterVchaIpSpec) {
	o.Management = v
}

// GetHa returns the Ha field value if set, zero value otherwise.
func (o *VcenterVchaClusterActiveInfo) GetHa() VcenterVchaIpSpec {
	if o == nil || o.Ha == nil {
		var ret VcenterVchaIpSpec
		return ret
	}
	return *o.Ha
}

// GetHaOk returns a tuple with the Ha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterActiveInfo) GetHaOk() (*VcenterVchaIpSpec, bool) {
	if o == nil || o.Ha == nil {
		return nil, false
	}
	return o.Ha, true
}

// HasHa returns a boolean if a field has been set.
func (o *VcenterVchaClusterActiveInfo) HasHa() bool {
	if o != nil && o.Ha != nil {
		return true
	}

	return false
}

// SetHa gets a reference to the given VcenterVchaIpSpec and assigns it to the Ha field.
func (o *VcenterVchaClusterActiveInfo) SetHa(v VcenterVchaIpSpec) {
	o.Ha = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *VcenterVchaClusterActiveInfo) GetPlacement() VcenterVchaPlacementInfo {
	if o == nil || o.Placement == nil {
		var ret VcenterVchaPlacementInfo
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterActiveInfo) GetPlacementOk() (*VcenterVchaPlacementInfo, bool) {
	if o == nil || o.Placement == nil {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *VcenterVchaClusterActiveInfo) HasPlacement() bool {
	if o != nil && o.Placement != nil {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given VcenterVchaPlacementInfo and assigns it to the Placement field.
func (o *VcenterVchaClusterActiveInfo) SetPlacement(v VcenterVchaPlacementInfo) {
	o.Placement = &v
}

func (o VcenterVchaClusterActiveInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["management"] = o.Management
	}
	if o.Ha != nil {
		toSerialize["ha"] = o.Ha
	}
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterActiveInfo struct {
	value *VcenterVchaClusterActiveInfo
	isSet bool
}

func (v NullableVcenterVchaClusterActiveInfo) Get() *VcenterVchaClusterActiveInfo {
	return v.value
}

func (v *NullableVcenterVchaClusterActiveInfo) Set(val *VcenterVchaClusterActiveInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterActiveInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterActiveInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterActiveInfo(val *VcenterVchaClusterActiveInfo) *NullableVcenterVchaClusterActiveInfo {
	return &NullableVcenterVchaClusterActiveInfo{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterActiveInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterActiveInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


