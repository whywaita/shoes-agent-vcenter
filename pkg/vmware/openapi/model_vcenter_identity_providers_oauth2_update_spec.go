/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterIdentityProvidersOauth2UpdateSpec struct for VcenterIdentityProvidersOauth2UpdateSpec
type VcenterIdentityProvidersOauth2UpdateSpec struct {
	// Authentication/authorization endpoint of the provider If unset, leaves value unchanged.
	AuthEndpoint *string `json:"auth_endpoint,omitempty"`
	// Token endpoint of the provider. If unset, leaves value unchanged.
	TokenEndpoint *string `json:"token_endpoint,omitempty"`
	// Endpoint to retrieve the provider public key for validation If unset, leaves value unchanged.
	PublicKeyUri *string `json:"public_key_uri,omitempty"`
	// Client identifier to connect to the provider If unset, leaves value unchanged.
	ClientId *string `json:"client_id,omitempty"`
	// Shared secret between identity provider and client If unset, leaves value unchanged.
	ClientSecret *string `json:"client_secret,omitempty"`
	// The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \"perms\" is supported. The key \"perms\" is used for mapping the \"perms\" claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value. If unset, leaves value unchanged.
	ClaimMap *[]VcenterIdentityProvidersOauth2CreateSpecClaimMap `json:"claim_map,omitempty"`
	// The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token If unset, leaves value unchanged.
	Issuer *string `json:"issuer,omitempty"`
	AuthenticationMethod *VcenterIdentityProvidersOauth2AuthenticationMethod `json:"authentication_method,omitempty"`
	// key/value pairs that are to be appended to the authEndpoint request. How to append to authEndpoint request: If the map is not empty, a \"?\" is added to the endpoint URL, and combination of each k and each string in the v is added with an \"&\" delimiter. Details: If the value contains only one string, then the key is added with \"k=v\". If the value is an empty list, then the key is added without a \"=v\". If the value contains multiple strings, then the key is repeated in the query-string for each string in the value. If the map is empty, deletes all params. If unset, leaves value unchanged.
	AuthQueryParams *[]VcenterIdentityProvidersCreateSpecAuthQueryParams `json:"auth_query_params,omitempty"`
}

// NewVcenterIdentityProvidersOauth2UpdateSpec instantiates a new VcenterIdentityProvidersOauth2UpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterIdentityProvidersOauth2UpdateSpec() *VcenterIdentityProvidersOauth2UpdateSpec {
	this := VcenterIdentityProvidersOauth2UpdateSpec{}
	return &this
}

// NewVcenterIdentityProvidersOauth2UpdateSpecWithDefaults instantiates a new VcenterIdentityProvidersOauth2UpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterIdentityProvidersOauth2UpdateSpecWithDefaults() *VcenterIdentityProvidersOauth2UpdateSpec {
	this := VcenterIdentityProvidersOauth2UpdateSpec{}
	return &this
}

// GetAuthEndpoint returns the AuthEndpoint field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetAuthEndpoint() string {
	if o == nil || o.AuthEndpoint == nil {
		var ret string
		return ret
	}
	return *o.AuthEndpoint
}

// GetAuthEndpointOk returns a tuple with the AuthEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetAuthEndpointOk() (*string, bool) {
	if o == nil || o.AuthEndpoint == nil {
		return nil, false
	}
	return o.AuthEndpoint, true
}

// HasAuthEndpoint returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) HasAuthEndpoint() bool {
	if o != nil && o.AuthEndpoint != nil {
		return true
	}

	return false
}

// SetAuthEndpoint gets a reference to the given string and assigns it to the AuthEndpoint field.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) SetAuthEndpoint(v string) {
	o.AuthEndpoint = &v
}

// GetTokenEndpoint returns the TokenEndpoint field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetTokenEndpoint() string {
	if o == nil || o.TokenEndpoint == nil {
		var ret string
		return ret
	}
	return *o.TokenEndpoint
}

// GetTokenEndpointOk returns a tuple with the TokenEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetTokenEndpointOk() (*string, bool) {
	if o == nil || o.TokenEndpoint == nil {
		return nil, false
	}
	return o.TokenEndpoint, true
}

// HasTokenEndpoint returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) HasTokenEndpoint() bool {
	if o != nil && o.TokenEndpoint != nil {
		return true
	}

	return false
}

// SetTokenEndpoint gets a reference to the given string and assigns it to the TokenEndpoint field.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) SetTokenEndpoint(v string) {
	o.TokenEndpoint = &v
}

// GetPublicKeyUri returns the PublicKeyUri field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetPublicKeyUri() string {
	if o == nil || o.PublicKeyUri == nil {
		var ret string
		return ret
	}
	return *o.PublicKeyUri
}

// GetPublicKeyUriOk returns a tuple with the PublicKeyUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetPublicKeyUriOk() (*string, bool) {
	if o == nil || o.PublicKeyUri == nil {
		return nil, false
	}
	return o.PublicKeyUri, true
}

// HasPublicKeyUri returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) HasPublicKeyUri() bool {
	if o != nil && o.PublicKeyUri != nil {
		return true
	}

	return false
}

// SetPublicKeyUri gets a reference to the given string and assigns it to the PublicKeyUri field.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) SetPublicKeyUri(v string) {
	o.PublicKeyUri = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetClientSecret() string {
	if o == nil || o.ClientSecret == nil {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetClientSecretOk() (*string, bool) {
	if o == nil || o.ClientSecret == nil {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) HasClientSecret() bool {
	if o != nil && o.ClientSecret != nil {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetClaimMap returns the ClaimMap field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetClaimMap() []VcenterIdentityProvidersOauth2CreateSpecClaimMap {
	if o == nil || o.ClaimMap == nil {
		var ret []VcenterIdentityProvidersOauth2CreateSpecClaimMap
		return ret
	}
	return *o.ClaimMap
}

// GetClaimMapOk returns a tuple with the ClaimMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetClaimMapOk() (*[]VcenterIdentityProvidersOauth2CreateSpecClaimMap, bool) {
	if o == nil || o.ClaimMap == nil {
		return nil, false
	}
	return o.ClaimMap, true
}

// HasClaimMap returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) HasClaimMap() bool {
	if o != nil && o.ClaimMap != nil {
		return true
	}

	return false
}

// SetClaimMap gets a reference to the given []VcenterIdentityProvidersOauth2CreateSpecClaimMap and assigns it to the ClaimMap field.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) SetClaimMap(v []VcenterIdentityProvidersOauth2CreateSpecClaimMap) {
	o.ClaimMap = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetIssuer() string {
	if o == nil || o.Issuer == nil {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetIssuerOk() (*string, bool) {
	if o == nil || o.Issuer == nil {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) HasIssuer() bool {
	if o != nil && o.Issuer != nil {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) SetIssuer(v string) {
	o.Issuer = &v
}

// GetAuthenticationMethod returns the AuthenticationMethod field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetAuthenticationMethod() VcenterIdentityProvidersOauth2AuthenticationMethod {
	if o == nil || o.AuthenticationMethod == nil {
		var ret VcenterIdentityProvidersOauth2AuthenticationMethod
		return ret
	}
	return *o.AuthenticationMethod
}

// GetAuthenticationMethodOk returns a tuple with the AuthenticationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetAuthenticationMethodOk() (*VcenterIdentityProvidersOauth2AuthenticationMethod, bool) {
	if o == nil || o.AuthenticationMethod == nil {
		return nil, false
	}
	return o.AuthenticationMethod, true
}

// HasAuthenticationMethod returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) HasAuthenticationMethod() bool {
	if o != nil && o.AuthenticationMethod != nil {
		return true
	}

	return false
}

// SetAuthenticationMethod gets a reference to the given VcenterIdentityProvidersOauth2AuthenticationMethod and assigns it to the AuthenticationMethod field.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) SetAuthenticationMethod(v VcenterIdentityProvidersOauth2AuthenticationMethod) {
	o.AuthenticationMethod = &v
}

// GetAuthQueryParams returns the AuthQueryParams field value if set, zero value otherwise.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetAuthQueryParams() []VcenterIdentityProvidersCreateSpecAuthQueryParams {
	if o == nil || o.AuthQueryParams == nil {
		var ret []VcenterIdentityProvidersCreateSpecAuthQueryParams
		return ret
	}
	return *o.AuthQueryParams
}

// GetAuthQueryParamsOk returns a tuple with the AuthQueryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) GetAuthQueryParamsOk() (*[]VcenterIdentityProvidersCreateSpecAuthQueryParams, bool) {
	if o == nil || o.AuthQueryParams == nil {
		return nil, false
	}
	return o.AuthQueryParams, true
}

// HasAuthQueryParams returns a boolean if a field has been set.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) HasAuthQueryParams() bool {
	if o != nil && o.AuthQueryParams != nil {
		return true
	}

	return false
}

// SetAuthQueryParams gets a reference to the given []VcenterIdentityProvidersCreateSpecAuthQueryParams and assigns it to the AuthQueryParams field.
func (o *VcenterIdentityProvidersOauth2UpdateSpec) SetAuthQueryParams(v []VcenterIdentityProvidersCreateSpecAuthQueryParams) {
	o.AuthQueryParams = &v
}

func (o VcenterIdentityProvidersOauth2UpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthEndpoint != nil {
		toSerialize["auth_endpoint"] = o.AuthEndpoint
	}
	if o.TokenEndpoint != nil {
		toSerialize["token_endpoint"] = o.TokenEndpoint
	}
	if o.PublicKeyUri != nil {
		toSerialize["public_key_uri"] = o.PublicKeyUri
	}
	if o.ClientId != nil {
		toSerialize["client_id"] = o.ClientId
	}
	if o.ClientSecret != nil {
		toSerialize["client_secret"] = o.ClientSecret
	}
	if o.ClaimMap != nil {
		toSerialize["claim_map"] = o.ClaimMap
	}
	if o.Issuer != nil {
		toSerialize["issuer"] = o.Issuer
	}
	if o.AuthenticationMethod != nil {
		toSerialize["authentication_method"] = o.AuthenticationMethod
	}
	if o.AuthQueryParams != nil {
		toSerialize["auth_query_params"] = o.AuthQueryParams
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterIdentityProvidersOauth2UpdateSpec struct {
	value *VcenterIdentityProvidersOauth2UpdateSpec
	isSet bool
}

func (v NullableVcenterIdentityProvidersOauth2UpdateSpec) Get() *VcenterIdentityProvidersOauth2UpdateSpec {
	return v.value
}

func (v *NullableVcenterIdentityProvidersOauth2UpdateSpec) Set(val *VcenterIdentityProvidersOauth2UpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterIdentityProvidersOauth2UpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterIdentityProvidersOauth2UpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterIdentityProvidersOauth2UpdateSpec(val *VcenterIdentityProvidersOauth2UpdateSpec) *NullableVcenterIdentityProvidersOauth2UpdateSpec {
	return &NullableVcenterIdentityProvidersOauth2UpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterIdentityProvidersOauth2UpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterIdentityProvidersOauth2UpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


