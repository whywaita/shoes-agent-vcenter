/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterTokenserviceTokenExchangeInfo struct for VcenterTokenserviceTokenExchangeInfo
type VcenterTokenserviceTokenExchangeInfo struct {
	// The security token issued by the server in response to the token exchange request. Token is base64-encoded.
	AccessToken string `json:"access_token"`
	// An identifier, that indicates the type of the security token in the {@link Info#access_token} parameter.
	IssuedTokenType string `json:"issued_token_type"`
	// A case-insensitive value specifying the method of using the access token issued.
	TokenType string `json:"token_type"`
	// The validity lifetime, in seconds, of the token issued by the server.
	ExpiresIn *int64 `json:"expires_in,omitempty"`
	// Scope of the issued security token.
	Scope *string `json:"scope,omitempty"`
	// A refresh token can be issued in cases where the client of the token exchange needs the ability to access a resource even when the original credential is no longer valid.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// NewVcenterTokenserviceTokenExchangeInfo instantiates a new VcenterTokenserviceTokenExchangeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterTokenserviceTokenExchangeInfo(accessToken string, issuedTokenType string, tokenType string) *VcenterTokenserviceTokenExchangeInfo {
	this := VcenterTokenserviceTokenExchangeInfo{}
	this.AccessToken = accessToken
	this.IssuedTokenType = issuedTokenType
	this.TokenType = tokenType
	return &this
}

// NewVcenterTokenserviceTokenExchangeInfoWithDefaults instantiates a new VcenterTokenserviceTokenExchangeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterTokenserviceTokenExchangeInfoWithDefaults() *VcenterTokenserviceTokenExchangeInfo {
	this := VcenterTokenserviceTokenExchangeInfo{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *VcenterTokenserviceTokenExchangeInfo) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *VcenterTokenserviceTokenExchangeInfo) GetAccessTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *VcenterTokenserviceTokenExchangeInfo) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetIssuedTokenType returns the IssuedTokenType field value
func (o *VcenterTokenserviceTokenExchangeInfo) GetIssuedTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuedTokenType
}

// GetIssuedTokenTypeOk returns a tuple with the IssuedTokenType field value
// and a boolean to check if the value has been set.
func (o *VcenterTokenserviceTokenExchangeInfo) GetIssuedTokenTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IssuedTokenType, true
}

// SetIssuedTokenType sets field value
func (o *VcenterTokenserviceTokenExchangeInfo) SetIssuedTokenType(v string) {
	o.IssuedTokenType = v
}

// GetTokenType returns the TokenType field value
func (o *VcenterTokenserviceTokenExchangeInfo) GetTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value
// and a boolean to check if the value has been set.
func (o *VcenterTokenserviceTokenExchangeInfo) GetTokenTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TokenType, true
}

// SetTokenType sets field value
func (o *VcenterTokenserviceTokenExchangeInfo) SetTokenType(v string) {
	o.TokenType = v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *VcenterTokenserviceTokenExchangeInfo) GetExpiresIn() int64 {
	if o == nil || o.ExpiresIn == nil {
		var ret int64
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTokenserviceTokenExchangeInfo) GetExpiresInOk() (*int64, bool) {
	if o == nil || o.ExpiresIn == nil {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *VcenterTokenserviceTokenExchangeInfo) HasExpiresIn() bool {
	if o != nil && o.ExpiresIn != nil {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int64 and assigns it to the ExpiresIn field.
func (o *VcenterTokenserviceTokenExchangeInfo) SetExpiresIn(v int64) {
	o.ExpiresIn = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *VcenterTokenserviceTokenExchangeInfo) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTokenserviceTokenExchangeInfo) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *VcenterTokenserviceTokenExchangeInfo) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *VcenterTokenserviceTokenExchangeInfo) SetScope(v string) {
	o.Scope = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *VcenterTokenserviceTokenExchangeInfo) GetRefreshToken() string {
	if o == nil || o.RefreshToken == nil {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterTokenserviceTokenExchangeInfo) GetRefreshTokenOk() (*string, bool) {
	if o == nil || o.RefreshToken == nil {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *VcenterTokenserviceTokenExchangeInfo) HasRefreshToken() bool {
	if o != nil && o.RefreshToken != nil {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *VcenterTokenserviceTokenExchangeInfo) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

func (o VcenterTokenserviceTokenExchangeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["access_token"] = o.AccessToken
	}
	if true {
		toSerialize["issued_token_type"] = o.IssuedTokenType
	}
	if true {
		toSerialize["token_type"] = o.TokenType
	}
	if o.ExpiresIn != nil {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.RefreshToken != nil {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterTokenserviceTokenExchangeInfo struct {
	value *VcenterTokenserviceTokenExchangeInfo
	isSet bool
}

func (v NullableVcenterTokenserviceTokenExchangeInfo) Get() *VcenterTokenserviceTokenExchangeInfo {
	return v.value
}

func (v *NullableVcenterTokenserviceTokenExchangeInfo) Set(val *VcenterTokenserviceTokenExchangeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterTokenserviceTokenExchangeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterTokenserviceTokenExchangeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterTokenserviceTokenExchangeInfo(val *VcenterTokenserviceTokenExchangeInfo) *NullableVcenterTokenserviceTokenExchangeInfo {
	return &NullableVcenterTokenserviceTokenExchangeInfo{value: val, isSet: true}
}

func (v NullableVcenterTokenserviceTokenExchangeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterTokenserviceTokenExchangeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


