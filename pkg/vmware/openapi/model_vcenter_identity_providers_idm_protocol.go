/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterIdentityProvidersIdmProtocol The Providers.IdmProtocol structure contains the possible types of communication protocols to the identity management endpoints.
type VcenterIdentityProvidersIdmProtocol string

// List of vcenter.identity.providers.idm_protocol
const (
	VCENTERIDENTITYPROVIDERSIDMPROTOCOL_REST VcenterIdentityProvidersIdmProtocol = "REST"
	VCENTERIDENTITYPROVIDERSIDMPROTOCOL_SCIM VcenterIdentityProvidersIdmProtocol = "SCIM"
	VCENTERIDENTITYPROVIDERSIDMPROTOCOL_SCIM2_0 VcenterIdentityProvidersIdmProtocol = "SCIM2_0"
	VCENTERIDENTITYPROVIDERSIDMPROTOCOL_LDAP VcenterIdentityProvidersIdmProtocol = "LDAP"
)

// All allowed values of VcenterIdentityProvidersIdmProtocol enum
var AllowedVcenterIdentityProvidersIdmProtocolEnumValues = []VcenterIdentityProvidersIdmProtocol{
	"REST",
	"SCIM",
	"SCIM2_0",
	"LDAP",
}

func (v *VcenterIdentityProvidersIdmProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterIdentityProvidersIdmProtocol(value)
	for _, existing := range AllowedVcenterIdentityProvidersIdmProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterIdentityProvidersIdmProtocol", value)
}

// NewVcenterIdentityProvidersIdmProtocolFromValue returns a pointer to a valid VcenterIdentityProvidersIdmProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterIdentityProvidersIdmProtocolFromValue(v string) (*VcenterIdentityProvidersIdmProtocol, error) {
	ev := VcenterIdentityProvidersIdmProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterIdentityProvidersIdmProtocol: valid values are %v", v, AllowedVcenterIdentityProvidersIdmProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterIdentityProvidersIdmProtocol) IsValid() bool {
	for _, existing := range AllowedVcenterIdentityProvidersIdmProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.identity.providers.idm_protocol value
func (v VcenterIdentityProvidersIdmProtocol) Ptr() *VcenterIdentityProvidersIdmProtocol {
	return &v
}

type NullableVcenterIdentityProvidersIdmProtocol struct {
	value *VcenterIdentityProvidersIdmProtocol
	isSet bool
}

func (v NullableVcenterIdentityProvidersIdmProtocol) Get() *VcenterIdentityProvidersIdmProtocol {
	return v.value
}

func (v *NullableVcenterIdentityProvidersIdmProtocol) Set(val *VcenterIdentityProvidersIdmProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterIdentityProvidersIdmProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterIdentityProvidersIdmProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterIdentityProvidersIdmProtocol(val *VcenterIdentityProvidersIdmProtocol) *NullableVcenterIdentityProvidersIdmProtocol {
	return &NullableVcenterIdentityProvidersIdmProtocol{value: val, isSet: true}
}

func (v NullableVcenterIdentityProvidersIdmProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterIdentityProvidersIdmProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

