/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementLoadBalancersConfigSpec struct for VcenterNamespaceManagementLoadBalancersConfigSpec
type VcenterNamespaceManagementLoadBalancersConfigSpec struct {
	// An identifier that identifies a load balancer and can be used to query or configure load balancer properties via these resources. The identifier has DNS_LABEL restrictions as specified in . This must be an alphanumeric (a-z and 0-9) string, with a maximum length of 63 characters and with the '-' character allowed anywhere except the first or last character. This name is unique across all Namespaces in this vCenter server. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig.
	Id string `json:"id"`
	// List of address ranges that will be used to derive frontend IP addresses for L4 virtual servers. At least one range must be provided.
	AddressRanges []VcenterNamespaceManagementIPRange `json:"address_ranges"`
	Provider VcenterNamespaceManagementLoadBalancersProvider `json:"provider"`
	HaProxyConfigCreateSpec *VcenterNamespaceManagementLoadBalancersHAProxyConfigCreateSpec `json:"ha_proxy_config_create_spec,omitempty"`
	AviConfigCreateSpec *VcenterNamespaceManagementLoadBalancersAviConfigCreateSpec `json:"avi_config_create_spec,omitempty"`
}

// NewVcenterNamespaceManagementLoadBalancersConfigSpec instantiates a new VcenterNamespaceManagementLoadBalancersConfigSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementLoadBalancersConfigSpec(id string, addressRanges []VcenterNamespaceManagementIPRange, provider VcenterNamespaceManagementLoadBalancersProvider) *VcenterNamespaceManagementLoadBalancersConfigSpec {
	this := VcenterNamespaceManagementLoadBalancersConfigSpec{}
	this.Id = id
	this.AddressRanges = addressRanges
	this.Provider = provider
	return &this
}

// NewVcenterNamespaceManagementLoadBalancersConfigSpecWithDefaults instantiates a new VcenterNamespaceManagementLoadBalancersConfigSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementLoadBalancersConfigSpecWithDefaults() *VcenterNamespaceManagementLoadBalancersConfigSpec {
	this := VcenterNamespaceManagementLoadBalancersConfigSpec{}
	return &this
}

// GetId returns the Id field value
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) SetId(v string) {
	o.Id = v
}

// GetAddressRanges returns the AddressRanges field value
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) GetAddressRanges() []VcenterNamespaceManagementIPRange {
	if o == nil {
		var ret []VcenterNamespaceManagementIPRange
		return ret
	}

	return o.AddressRanges
}

// GetAddressRangesOk returns a tuple with the AddressRanges field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) GetAddressRangesOk() (*[]VcenterNamespaceManagementIPRange, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AddressRanges, true
}

// SetAddressRanges sets field value
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) SetAddressRanges(v []VcenterNamespaceManagementIPRange) {
	o.AddressRanges = v
}

// GetProvider returns the Provider field value
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) GetProvider() VcenterNamespaceManagementLoadBalancersProvider {
	if o == nil {
		var ret VcenterNamespaceManagementLoadBalancersProvider
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) GetProviderOk() (*VcenterNamespaceManagementLoadBalancersProvider, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) SetProvider(v VcenterNamespaceManagementLoadBalancersProvider) {
	o.Provider = v
}

// GetHaProxyConfigCreateSpec returns the HaProxyConfigCreateSpec field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) GetHaProxyConfigCreateSpec() VcenterNamespaceManagementLoadBalancersHAProxyConfigCreateSpec {
	if o == nil || o.HaProxyConfigCreateSpec == nil {
		var ret VcenterNamespaceManagementLoadBalancersHAProxyConfigCreateSpec
		return ret
	}
	return *o.HaProxyConfigCreateSpec
}

// GetHaProxyConfigCreateSpecOk returns a tuple with the HaProxyConfigCreateSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) GetHaProxyConfigCreateSpecOk() (*VcenterNamespaceManagementLoadBalancersHAProxyConfigCreateSpec, bool) {
	if o == nil || o.HaProxyConfigCreateSpec == nil {
		return nil, false
	}
	return o.HaProxyConfigCreateSpec, true
}

// HasHaProxyConfigCreateSpec returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) HasHaProxyConfigCreateSpec() bool {
	if o != nil && o.HaProxyConfigCreateSpec != nil {
		return true
	}

	return false
}

// SetHaProxyConfigCreateSpec gets a reference to the given VcenterNamespaceManagementLoadBalancersHAProxyConfigCreateSpec and assigns it to the HaProxyConfigCreateSpec field.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) SetHaProxyConfigCreateSpec(v VcenterNamespaceManagementLoadBalancersHAProxyConfigCreateSpec) {
	o.HaProxyConfigCreateSpec = &v
}

// GetAviConfigCreateSpec returns the AviConfigCreateSpec field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) GetAviConfigCreateSpec() VcenterNamespaceManagementLoadBalancersAviConfigCreateSpec {
	if o == nil || o.AviConfigCreateSpec == nil {
		var ret VcenterNamespaceManagementLoadBalancersAviConfigCreateSpec
		return ret
	}
	return *o.AviConfigCreateSpec
}

// GetAviConfigCreateSpecOk returns a tuple with the AviConfigCreateSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) GetAviConfigCreateSpecOk() (*VcenterNamespaceManagementLoadBalancersAviConfigCreateSpec, bool) {
	if o == nil || o.AviConfigCreateSpec == nil {
		return nil, false
	}
	return o.AviConfigCreateSpec, true
}

// HasAviConfigCreateSpec returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) HasAviConfigCreateSpec() bool {
	if o != nil && o.AviConfigCreateSpec != nil {
		return true
	}

	return false
}

// SetAviConfigCreateSpec gets a reference to the given VcenterNamespaceManagementLoadBalancersAviConfigCreateSpec and assigns it to the AviConfigCreateSpec field.
func (o *VcenterNamespaceManagementLoadBalancersConfigSpec) SetAviConfigCreateSpec(v VcenterNamespaceManagementLoadBalancersAviConfigCreateSpec) {
	o.AviConfigCreateSpec = &v
}

func (o VcenterNamespaceManagementLoadBalancersConfigSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["address_ranges"] = o.AddressRanges
	}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if o.HaProxyConfigCreateSpec != nil {
		toSerialize["ha_proxy_config_create_spec"] = o.HaProxyConfigCreateSpec
	}
	if o.AviConfigCreateSpec != nil {
		toSerialize["avi_config_create_spec"] = o.AviConfigCreateSpec
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementLoadBalancersConfigSpec struct {
	value *VcenterNamespaceManagementLoadBalancersConfigSpec
	isSet bool
}

func (v NullableVcenterNamespaceManagementLoadBalancersConfigSpec) Get() *VcenterNamespaceManagementLoadBalancersConfigSpec {
	return v.value
}

func (v *NullableVcenterNamespaceManagementLoadBalancersConfigSpec) Set(val *VcenterNamespaceManagementLoadBalancersConfigSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementLoadBalancersConfigSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementLoadBalancersConfigSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementLoadBalancersConfigSpec(val *VcenterNamespaceManagementLoadBalancersConfigSpec) *NullableVcenterNamespaceManagementLoadBalancersConfigSpec {
	return &NullableVcenterNamespaceManagementLoadBalancersConfigSpec{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementLoadBalancersConfigSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementLoadBalancersConfigSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


