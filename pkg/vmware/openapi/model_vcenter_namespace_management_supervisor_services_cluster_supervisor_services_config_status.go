/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus The ClusterSupervisorServices.ConfigStatus enumerated type describes the status of reaching the desired state configuration for the Supervisor Service.
type VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus string

// List of VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus
const (
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESCLUSTERSUPERVISORSERVICESCONFIGSTATUS_CONFIGURING VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus = "CONFIGURING"
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESCLUSTERSUPERVISORSERVICESCONFIGSTATUS_REMOVING VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus = "REMOVING"
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESCLUSTERSUPERVISORSERVICESCONFIGSTATUS_CONFIGURED VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus = "CONFIGURED"
	VCENTERNAMESPACEMANAGEMENTSUPERVISORSERVICESCLUSTERSUPERVISORSERVICESCONFIGSTATUS_ERROR VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus = "ERROR"
)

// All allowed values of VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus enum
var AllowedVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatusEnumValues = []VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus{
	"CONFIGURING",
	"REMOVING",
	"CONFIGURED",
	"ERROR",
}

func (v *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus(value)
	for _, existing := range AllowedVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus", value)
}

// NewVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatusFromValue returns a pointer to a valid VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatusFromValue(v string) (*VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus, error) {
	ev := VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus: valid values are %v", v, AllowedVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) IsValid() bool {
	for _, existing := range AllowedVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus value
func (v VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) Ptr() *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus {
	return &v
}

type NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus struct {
	value *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus
	isSet bool
}

func (v NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) Get() *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus {
	return v.value
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) Set(val *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus(val *VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus {
	return &NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesConfigStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

