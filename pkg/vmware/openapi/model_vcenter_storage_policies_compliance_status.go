/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterStoragePoliciesComplianceStatus the model 'VcenterStoragePoliciesComplianceStatus'
type VcenterStoragePoliciesComplianceStatus string

// List of vcenter.storage.policies.compliance.status
const (
	VCENTERSTORAGEPOLICIESCOMPLIANCESTATUS_COMPLIANT VcenterStoragePoliciesComplianceStatus = "COMPLIANT"
	VCENTERSTORAGEPOLICIESCOMPLIANCESTATUS_NON_COMPLIANT VcenterStoragePoliciesComplianceStatus = "NON_COMPLIANT"
	VCENTERSTORAGEPOLICIESCOMPLIANCESTATUS_UNKNOWN VcenterStoragePoliciesComplianceStatus = "UNKNOWN"
	VCENTERSTORAGEPOLICIESCOMPLIANCESTATUS_NOT_APPLICABLE VcenterStoragePoliciesComplianceStatus = "NOT_APPLICABLE"
	VCENTERSTORAGEPOLICIESCOMPLIANCESTATUS_OUT_OF_DATE VcenterStoragePoliciesComplianceStatus = "OUT_OF_DATE"
)

// All allowed values of VcenterStoragePoliciesComplianceStatus enum
var AllowedVcenterStoragePoliciesComplianceStatusEnumValues = []VcenterStoragePoliciesComplianceStatus{
	"COMPLIANT",
	"NON_COMPLIANT",
	"UNKNOWN",
	"NOT_APPLICABLE",
	"OUT_OF_DATE",
}

func (v *VcenterStoragePoliciesComplianceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterStoragePoliciesComplianceStatus(value)
	for _, existing := range AllowedVcenterStoragePoliciesComplianceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterStoragePoliciesComplianceStatus", value)
}

// NewVcenterStoragePoliciesComplianceStatusFromValue returns a pointer to a valid VcenterStoragePoliciesComplianceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterStoragePoliciesComplianceStatusFromValue(v string) (*VcenterStoragePoliciesComplianceStatus, error) {
	ev := VcenterStoragePoliciesComplianceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterStoragePoliciesComplianceStatus: valid values are %v", v, AllowedVcenterStoragePoliciesComplianceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterStoragePoliciesComplianceStatus) IsValid() bool {
	for _, existing := range AllowedVcenterStoragePoliciesComplianceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.storage.policies.compliance.status value
func (v VcenterStoragePoliciesComplianceStatus) Ptr() *VcenterStoragePoliciesComplianceStatus {
	return &v
}

type NullableVcenterStoragePoliciesComplianceStatus struct {
	value *VcenterStoragePoliciesComplianceStatus
	isSet bool
}

func (v NullableVcenterStoragePoliciesComplianceStatus) Get() *VcenterStoragePoliciesComplianceStatus {
	return v.value
}

func (v *NullableVcenterStoragePoliciesComplianceStatus) Set(val *VcenterStoragePoliciesComplianceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterStoragePoliciesComplianceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterStoragePoliciesComplianceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterStoragePoliciesComplianceStatus(val *VcenterStoragePoliciesComplianceStatus) *NullableVcenterStoragePoliciesComplianceStatus {
	return &NullableVcenterStoragePoliciesComplianceStatus{value: val, isSet: true}
}

func (v NullableVcenterStoragePoliciesComplianceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterStoragePoliciesComplianceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

