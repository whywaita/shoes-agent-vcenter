/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareAdapterNvmeSummary struct for VcenterVmHardwareAdapterNvmeSummary
type VcenterVmHardwareAdapterNvmeSummary struct {
	// Identifier of the virtual NVMe adapter. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.vm.hardware.NvmeAdapter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.vm.hardware.NvmeAdapter.
	Adapter string `json:"adapter"`
}

// NewVcenterVmHardwareAdapterNvmeSummary instantiates a new VcenterVmHardwareAdapterNvmeSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareAdapterNvmeSummary(adapter string) *VcenterVmHardwareAdapterNvmeSummary {
	this := VcenterVmHardwareAdapterNvmeSummary{}
	this.Adapter = adapter
	return &this
}

// NewVcenterVmHardwareAdapterNvmeSummaryWithDefaults instantiates a new VcenterVmHardwareAdapterNvmeSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareAdapterNvmeSummaryWithDefaults() *VcenterVmHardwareAdapterNvmeSummary {
	this := VcenterVmHardwareAdapterNvmeSummary{}
	return &this
}

// GetAdapter returns the Adapter field value
func (o *VcenterVmHardwareAdapterNvmeSummary) GetAdapter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Adapter
}

// GetAdapterOk returns a tuple with the Adapter field value
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareAdapterNvmeSummary) GetAdapterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Adapter, true
}

// SetAdapter sets field value
func (o *VcenterVmHardwareAdapterNvmeSummary) SetAdapter(v string) {
	o.Adapter = v
}

func (o VcenterVmHardwareAdapterNvmeSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["adapter"] = o.Adapter
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareAdapterNvmeSummary struct {
	value *VcenterVmHardwareAdapterNvmeSummary
	isSet bool
}

func (v NullableVcenterVmHardwareAdapterNvmeSummary) Get() *VcenterVmHardwareAdapterNvmeSummary {
	return v.value
}

func (v *NullableVcenterVmHardwareAdapterNvmeSummary) Set(val *VcenterVmHardwareAdapterNvmeSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareAdapterNvmeSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareAdapterNvmeSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareAdapterNvmeSummary(val *VcenterVmHardwareAdapterNvmeSummary) *NullableVcenterVmHardwareAdapterNvmeSummary {
	return &NullableVcenterVmHardwareAdapterNvmeSummary{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareAdapterNvmeSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareAdapterNvmeSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


