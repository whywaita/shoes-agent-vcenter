/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVmHardwareMemoryUpdateSpec struct for VcenterVmHardwareMemoryUpdateSpec
type VcenterVmHardwareMemoryUpdateSpec struct {
	// New memory size in mebibytes.   The supported range of memory sizes is constrained by the configured guest operating system and virtual hardware version of the virtual machine.    If the virtual machine is running, this value may only be changed if Memory.Info.hot-add-enabled is true, and the new memory size must satisfy the constraints specified by Memory.Info.hot-add-increment-size-mib and Memory.Info.hot-add-limit-mib.  If unset, the value is unchanged.
	SizeMiB *int64 `json:"size_MiB,omitempty"`
	// Flag indicating whether adding memory while the virtual machine is running should be enabled.   Some guest operating systems may consume more resources or perform less efficiently when they run on hardware that supports adding memory while the machine is running.    This field may only be modified if the virtual machine is not powered on.  If unset, the value is unchanged.
	HotAddEnabled *bool `json:"hot_add_enabled,omitempty"`
}

// NewVcenterVmHardwareMemoryUpdateSpec instantiates a new VcenterVmHardwareMemoryUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVmHardwareMemoryUpdateSpec() *VcenterVmHardwareMemoryUpdateSpec {
	this := VcenterVmHardwareMemoryUpdateSpec{}
	return &this
}

// NewVcenterVmHardwareMemoryUpdateSpecWithDefaults instantiates a new VcenterVmHardwareMemoryUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVmHardwareMemoryUpdateSpecWithDefaults() *VcenterVmHardwareMemoryUpdateSpec {
	this := VcenterVmHardwareMemoryUpdateSpec{}
	return &this
}

// GetSizeMiB returns the SizeMiB field value if set, zero value otherwise.
func (o *VcenterVmHardwareMemoryUpdateSpec) GetSizeMiB() int64 {
	if o == nil || o.SizeMiB == nil {
		var ret int64
		return ret
	}
	return *o.SizeMiB
}

// GetSizeMiBOk returns a tuple with the SizeMiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareMemoryUpdateSpec) GetSizeMiBOk() (*int64, bool) {
	if o == nil || o.SizeMiB == nil {
		return nil, false
	}
	return o.SizeMiB, true
}

// HasSizeMiB returns a boolean if a field has been set.
func (o *VcenterVmHardwareMemoryUpdateSpec) HasSizeMiB() bool {
	if o != nil && o.SizeMiB != nil {
		return true
	}

	return false
}

// SetSizeMiB gets a reference to the given int64 and assigns it to the SizeMiB field.
func (o *VcenterVmHardwareMemoryUpdateSpec) SetSizeMiB(v int64) {
	o.SizeMiB = &v
}

// GetHotAddEnabled returns the HotAddEnabled field value if set, zero value otherwise.
func (o *VcenterVmHardwareMemoryUpdateSpec) GetHotAddEnabled() bool {
	if o == nil || o.HotAddEnabled == nil {
		var ret bool
		return ret
	}
	return *o.HotAddEnabled
}

// GetHotAddEnabledOk returns a tuple with the HotAddEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVmHardwareMemoryUpdateSpec) GetHotAddEnabledOk() (*bool, bool) {
	if o == nil || o.HotAddEnabled == nil {
		return nil, false
	}
	return o.HotAddEnabled, true
}

// HasHotAddEnabled returns a boolean if a field has been set.
func (o *VcenterVmHardwareMemoryUpdateSpec) HasHotAddEnabled() bool {
	if o != nil && o.HotAddEnabled != nil {
		return true
	}

	return false
}

// SetHotAddEnabled gets a reference to the given bool and assigns it to the HotAddEnabled field.
func (o *VcenterVmHardwareMemoryUpdateSpec) SetHotAddEnabled(v bool) {
	o.HotAddEnabled = &v
}

func (o VcenterVmHardwareMemoryUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SizeMiB != nil {
		toSerialize["size_MiB"] = o.SizeMiB
	}
	if o.HotAddEnabled != nil {
		toSerialize["hot_add_enabled"] = o.HotAddEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVmHardwareMemoryUpdateSpec struct {
	value *VcenterVmHardwareMemoryUpdateSpec
	isSet bool
}

func (v NullableVcenterVmHardwareMemoryUpdateSpec) Get() *VcenterVmHardwareMemoryUpdateSpec {
	return v.value
}

func (v *NullableVcenterVmHardwareMemoryUpdateSpec) Set(val *VcenterVmHardwareMemoryUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareMemoryUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareMemoryUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareMemoryUpdateSpec(val *VcenterVmHardwareMemoryUpdateSpec) *NullableVcenterVmHardwareMemoryUpdateSpec {
	return &NullableVcenterVmHardwareMemoryUpdateSpec{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareMemoryUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareMemoryUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


