/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterDeploySpec struct for VcenterVchaClusterDeploySpec
type VcenterVchaClusterDeploySpec struct {
	VcSpec *VcenterVchaCredentialsSpec `json:"vc_spec,omitempty"`
	Deployment VcenterVchaClusterType `json:"deployment"`
	Active VcenterVchaClusterActiveSpec `json:"active"`
	Passive VcenterVchaClusterPassiveSpec `json:"passive"`
	Witness VcenterVchaClusterWitnessSpec `json:"witness"`
}

// NewVcenterVchaClusterDeploySpec instantiates a new VcenterVchaClusterDeploySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterDeploySpec(deployment VcenterVchaClusterType, active VcenterVchaClusterActiveSpec, passive VcenterVchaClusterPassiveSpec, witness VcenterVchaClusterWitnessSpec) *VcenterVchaClusterDeploySpec {
	this := VcenterVchaClusterDeploySpec{}
	this.Deployment = deployment
	this.Active = active
	this.Passive = passive
	this.Witness = witness
	return &this
}

// NewVcenterVchaClusterDeploySpecWithDefaults instantiates a new VcenterVchaClusterDeploySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterDeploySpecWithDefaults() *VcenterVchaClusterDeploySpec {
	this := VcenterVchaClusterDeploySpec{}
	return &this
}

// GetVcSpec returns the VcSpec field value if set, zero value otherwise.
func (o *VcenterVchaClusterDeploySpec) GetVcSpec() VcenterVchaCredentialsSpec {
	if o == nil || o.VcSpec == nil {
		var ret VcenterVchaCredentialsSpec
		return ret
	}
	return *o.VcSpec
}

// GetVcSpecOk returns a tuple with the VcSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterDeploySpec) GetVcSpecOk() (*VcenterVchaCredentialsSpec, bool) {
	if o == nil || o.VcSpec == nil {
		return nil, false
	}
	return o.VcSpec, true
}

// HasVcSpec returns a boolean if a field has been set.
func (o *VcenterVchaClusterDeploySpec) HasVcSpec() bool {
	if o != nil && o.VcSpec != nil {
		return true
	}

	return false
}

// SetVcSpec gets a reference to the given VcenterVchaCredentialsSpec and assigns it to the VcSpec field.
func (o *VcenterVchaClusterDeploySpec) SetVcSpec(v VcenterVchaCredentialsSpec) {
	o.VcSpec = &v
}

// GetDeployment returns the Deployment field value
func (o *VcenterVchaClusterDeploySpec) GetDeployment() VcenterVchaClusterType {
	if o == nil {
		var ret VcenterVchaClusterType
		return ret
	}

	return o.Deployment
}

// GetDeploymentOk returns a tuple with the Deployment field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterDeploySpec) GetDeploymentOk() (*VcenterVchaClusterType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Deployment, true
}

// SetDeployment sets field value
func (o *VcenterVchaClusterDeploySpec) SetDeployment(v VcenterVchaClusterType) {
	o.Deployment = v
}

// GetActive returns the Active field value
func (o *VcenterVchaClusterDeploySpec) GetActive() VcenterVchaClusterActiveSpec {
	if o == nil {
		var ret VcenterVchaClusterActiveSpec
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterDeploySpec) GetActiveOk() (*VcenterVchaClusterActiveSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *VcenterVchaClusterDeploySpec) SetActive(v VcenterVchaClusterActiveSpec) {
	o.Active = v
}

// GetPassive returns the Passive field value
func (o *VcenterVchaClusterDeploySpec) GetPassive() VcenterVchaClusterPassiveSpec {
	if o == nil {
		var ret VcenterVchaClusterPassiveSpec
		return ret
	}

	return o.Passive
}

// GetPassiveOk returns a tuple with the Passive field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterDeploySpec) GetPassiveOk() (*VcenterVchaClusterPassiveSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Passive, true
}

// SetPassive sets field value
func (o *VcenterVchaClusterDeploySpec) SetPassive(v VcenterVchaClusterPassiveSpec) {
	o.Passive = v
}

// GetWitness returns the Witness field value
func (o *VcenterVchaClusterDeploySpec) GetWitness() VcenterVchaClusterWitnessSpec {
	if o == nil {
		var ret VcenterVchaClusterWitnessSpec
		return ret
	}

	return o.Witness
}

// GetWitnessOk returns a tuple with the Witness field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterDeploySpec) GetWitnessOk() (*VcenterVchaClusterWitnessSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Witness, true
}

// SetWitness sets field value
func (o *VcenterVchaClusterDeploySpec) SetWitness(v VcenterVchaClusterWitnessSpec) {
	o.Witness = v
}

func (o VcenterVchaClusterDeploySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VcSpec != nil {
		toSerialize["vc_spec"] = o.VcSpec
	}
	if true {
		toSerialize["deployment"] = o.Deployment
	}
	if true {
		toSerialize["active"] = o.Active
	}
	if true {
		toSerialize["passive"] = o.Passive
	}
	if true {
		toSerialize["witness"] = o.Witness
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterDeploySpec struct {
	value *VcenterVchaClusterDeploySpec
	isSet bool
}

func (v NullableVcenterVchaClusterDeploySpec) Get() *VcenterVchaClusterDeploySpec {
	return v.value
}

func (v *NullableVcenterVchaClusterDeploySpec) Set(val *VcenterVchaClusterDeploySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterDeploySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterDeploySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterDeploySpec(val *VcenterVchaClusterDeploySpec) *NullableVcenterVchaClusterDeploySpec {
	return &NullableVcenterVchaClusterDeploySpec{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterDeploySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterDeploySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


