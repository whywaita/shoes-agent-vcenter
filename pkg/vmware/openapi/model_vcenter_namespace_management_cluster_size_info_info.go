/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementClusterSizeInfoInfo struct for VcenterNamespaceManagementClusterSizeInfoInfo
type VcenterNamespaceManagementClusterSizeInfoInfo struct {
	// The maximum number of supported pods.
	NumSupportedPods int64 `json:"num_supported_pods"`
	// The maximum number of supported services.
	NumSupportedServices int64 `json:"num_supported_services"`
	DefaultServiceCidr VcenterNamespaceManagementIpv4Cidr `json:"default_service_cidr"`
	DefaultPodCidr VcenterNamespaceManagementIpv4Cidr `json:"default_pod_cidr"`
	MasterVmInfo VcenterNamespaceManagementClusterSizeInfoVmInfo `json:"master_vm_info"`
	WorkerVmInfo *VcenterNamespaceManagementClusterSizeInfoVmInfo `json:"worker_vm_info,omitempty"`
}

// NewVcenterNamespaceManagementClusterSizeInfoInfo instantiates a new VcenterNamespaceManagementClusterSizeInfoInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementClusterSizeInfoInfo(numSupportedPods int64, numSupportedServices int64, defaultServiceCidr VcenterNamespaceManagementIpv4Cidr, defaultPodCidr VcenterNamespaceManagementIpv4Cidr, masterVmInfo VcenterNamespaceManagementClusterSizeInfoVmInfo) *VcenterNamespaceManagementClusterSizeInfoInfo {
	this := VcenterNamespaceManagementClusterSizeInfoInfo{}
	this.NumSupportedPods = numSupportedPods
	this.NumSupportedServices = numSupportedServices
	this.DefaultServiceCidr = defaultServiceCidr
	this.DefaultPodCidr = defaultPodCidr
	this.MasterVmInfo = masterVmInfo
	return &this
}

// NewVcenterNamespaceManagementClusterSizeInfoInfoWithDefaults instantiates a new VcenterNamespaceManagementClusterSizeInfoInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementClusterSizeInfoInfoWithDefaults() *VcenterNamespaceManagementClusterSizeInfoInfo {
	this := VcenterNamespaceManagementClusterSizeInfoInfo{}
	return &this
}

// GetNumSupportedPods returns the NumSupportedPods field value
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetNumSupportedPods() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumSupportedPods
}

// GetNumSupportedPodsOk returns a tuple with the NumSupportedPods field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetNumSupportedPodsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NumSupportedPods, true
}

// SetNumSupportedPods sets field value
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) SetNumSupportedPods(v int64) {
	o.NumSupportedPods = v
}

// GetNumSupportedServices returns the NumSupportedServices field value
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetNumSupportedServices() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumSupportedServices
}

// GetNumSupportedServicesOk returns a tuple with the NumSupportedServices field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetNumSupportedServicesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NumSupportedServices, true
}

// SetNumSupportedServices sets field value
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) SetNumSupportedServices(v int64) {
	o.NumSupportedServices = v
}

// GetDefaultServiceCidr returns the DefaultServiceCidr field value
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetDefaultServiceCidr() VcenterNamespaceManagementIpv4Cidr {
	if o == nil {
		var ret VcenterNamespaceManagementIpv4Cidr
		return ret
	}

	return o.DefaultServiceCidr
}

// GetDefaultServiceCidrOk returns a tuple with the DefaultServiceCidr field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetDefaultServiceCidrOk() (*VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DefaultServiceCidr, true
}

// SetDefaultServiceCidr sets field value
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) SetDefaultServiceCidr(v VcenterNamespaceManagementIpv4Cidr) {
	o.DefaultServiceCidr = v
}

// GetDefaultPodCidr returns the DefaultPodCidr field value
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetDefaultPodCidr() VcenterNamespaceManagementIpv4Cidr {
	if o == nil {
		var ret VcenterNamespaceManagementIpv4Cidr
		return ret
	}

	return o.DefaultPodCidr
}

// GetDefaultPodCidrOk returns a tuple with the DefaultPodCidr field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetDefaultPodCidrOk() (*VcenterNamespaceManagementIpv4Cidr, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DefaultPodCidr, true
}

// SetDefaultPodCidr sets field value
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) SetDefaultPodCidr(v VcenterNamespaceManagementIpv4Cidr) {
	o.DefaultPodCidr = v
}

// GetMasterVmInfo returns the MasterVmInfo field value
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetMasterVmInfo() VcenterNamespaceManagementClusterSizeInfoVmInfo {
	if o == nil {
		var ret VcenterNamespaceManagementClusterSizeInfoVmInfo
		return ret
	}

	return o.MasterVmInfo
}

// GetMasterVmInfoOk returns a tuple with the MasterVmInfo field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetMasterVmInfoOk() (*VcenterNamespaceManagementClusterSizeInfoVmInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MasterVmInfo, true
}

// SetMasterVmInfo sets field value
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) SetMasterVmInfo(v VcenterNamespaceManagementClusterSizeInfoVmInfo) {
	o.MasterVmInfo = v
}

// GetWorkerVmInfo returns the WorkerVmInfo field value if set, zero value otherwise.
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetWorkerVmInfo() VcenterNamespaceManagementClusterSizeInfoVmInfo {
	if o == nil || o.WorkerVmInfo == nil {
		var ret VcenterNamespaceManagementClusterSizeInfoVmInfo
		return ret
	}
	return *o.WorkerVmInfo
}

// GetWorkerVmInfoOk returns a tuple with the WorkerVmInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) GetWorkerVmInfoOk() (*VcenterNamespaceManagementClusterSizeInfoVmInfo, bool) {
	if o == nil || o.WorkerVmInfo == nil {
		return nil, false
	}
	return o.WorkerVmInfo, true
}

// HasWorkerVmInfo returns a boolean if a field has been set.
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) HasWorkerVmInfo() bool {
	if o != nil && o.WorkerVmInfo != nil {
		return true
	}

	return false
}

// SetWorkerVmInfo gets a reference to the given VcenterNamespaceManagementClusterSizeInfoVmInfo and assigns it to the WorkerVmInfo field.
func (o *VcenterNamespaceManagementClusterSizeInfoInfo) SetWorkerVmInfo(v VcenterNamespaceManagementClusterSizeInfoVmInfo) {
	o.WorkerVmInfo = &v
}

func (o VcenterNamespaceManagementClusterSizeInfoInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["num_supported_pods"] = o.NumSupportedPods
	}
	if true {
		toSerialize["num_supported_services"] = o.NumSupportedServices
	}
	if true {
		toSerialize["default_service_cidr"] = o.DefaultServiceCidr
	}
	if true {
		toSerialize["default_pod_cidr"] = o.DefaultPodCidr
	}
	if true {
		toSerialize["master_vm_info"] = o.MasterVmInfo
	}
	if o.WorkerVmInfo != nil {
		toSerialize["worker_vm_info"] = o.WorkerVmInfo
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementClusterSizeInfoInfo struct {
	value *VcenterNamespaceManagementClusterSizeInfoInfo
	isSet bool
}

func (v NullableVcenterNamespaceManagementClusterSizeInfoInfo) Get() *VcenterNamespaceManagementClusterSizeInfoInfo {
	return v.value
}

func (v *NullableVcenterNamespaceManagementClusterSizeInfoInfo) Set(val *VcenterNamespaceManagementClusterSizeInfoInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementClusterSizeInfoInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementClusterSizeInfoInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementClusterSizeInfoInfo(val *VcenterNamespaceManagementClusterSizeInfoInfo) *NullableVcenterNamespaceManagementClusterSizeInfoInfo {
	return &NullableVcenterNamespaceManagementClusterSizeInfoInfo{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementClusterSizeInfoInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementClusterSizeInfoInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


