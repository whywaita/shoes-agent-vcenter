/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterCryptoManagerKmsProvidersExportType The Providers.ExportType enumerated type identifies the type of result that is returned when a provider is exported.
type VcenterCryptoManagerKmsProvidersExportType string

// List of VcenterCryptoManagerKmsProvidersExportType
const (
	VCENTERCRYPTOMANAGERKMSPROVIDERSEXPORTTYPE_LOCATION VcenterCryptoManagerKmsProvidersExportType = "LOCATION"
)

// All allowed values of VcenterCryptoManagerKmsProvidersExportType enum
var AllowedVcenterCryptoManagerKmsProvidersExportTypeEnumValues = []VcenterCryptoManagerKmsProvidersExportType{
	"LOCATION",
}

func (v *VcenterCryptoManagerKmsProvidersExportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterCryptoManagerKmsProvidersExportType(value)
	for _, existing := range AllowedVcenterCryptoManagerKmsProvidersExportTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterCryptoManagerKmsProvidersExportType", value)
}

// NewVcenterCryptoManagerKmsProvidersExportTypeFromValue returns a pointer to a valid VcenterCryptoManagerKmsProvidersExportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterCryptoManagerKmsProvidersExportTypeFromValue(v string) (*VcenterCryptoManagerKmsProvidersExportType, error) {
	ev := VcenterCryptoManagerKmsProvidersExportType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterCryptoManagerKmsProvidersExportType: valid values are %v", v, AllowedVcenterCryptoManagerKmsProvidersExportTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterCryptoManagerKmsProvidersExportType) IsValid() bool {
	for _, existing := range AllowedVcenterCryptoManagerKmsProvidersExportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterCryptoManagerKmsProvidersExportType value
func (v VcenterCryptoManagerKmsProvidersExportType) Ptr() *VcenterCryptoManagerKmsProvidersExportType {
	return &v
}

type NullableVcenterCryptoManagerKmsProvidersExportType struct {
	value *VcenterCryptoManagerKmsProvidersExportType
	isSet bool
}

func (v NullableVcenterCryptoManagerKmsProvidersExportType) Get() *VcenterCryptoManagerKmsProvidersExportType {
	return v.value
}

func (v *NullableVcenterCryptoManagerKmsProvidersExportType) Set(val *VcenterCryptoManagerKmsProvidersExportType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterCryptoManagerKmsProvidersExportType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterCryptoManagerKmsProvidersExportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterCryptoManagerKmsProvidersExportType(val *VcenterCryptoManagerKmsProvidersExportType) *NullableVcenterCryptoManagerKmsProvidersExportType {
	return &NullableVcenterCryptoManagerKmsProvidersExportType{value: val, isSet: true}
}

func (v NullableVcenterCryptoManagerKmsProvidersExportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterCryptoManagerKmsProvidersExportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

