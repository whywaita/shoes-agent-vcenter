/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaClusterWitnessSpec struct for VcenterVchaClusterWitnessSpec
type VcenterVchaClusterWitnessSpec struct {
	Placement *VcenterVchaPlacementSpec `json:"placement,omitempty"`
	HaIp VcenterVchaIpSpec `json:"ha_ip"`
}

// NewVcenterVchaClusterWitnessSpec instantiates a new VcenterVchaClusterWitnessSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaClusterWitnessSpec(haIp VcenterVchaIpSpec) *VcenterVchaClusterWitnessSpec {
	this := VcenterVchaClusterWitnessSpec{}
	this.HaIp = haIp
	return &this
}

// NewVcenterVchaClusterWitnessSpecWithDefaults instantiates a new VcenterVchaClusterWitnessSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaClusterWitnessSpecWithDefaults() *VcenterVchaClusterWitnessSpec {
	this := VcenterVchaClusterWitnessSpec{}
	return &this
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *VcenterVchaClusterWitnessSpec) GetPlacement() VcenterVchaPlacementSpec {
	if o == nil || o.Placement == nil {
		var ret VcenterVchaPlacementSpec
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterWitnessSpec) GetPlacementOk() (*VcenterVchaPlacementSpec, bool) {
	if o == nil || o.Placement == nil {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *VcenterVchaClusterWitnessSpec) HasPlacement() bool {
	if o != nil && o.Placement != nil {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given VcenterVchaPlacementSpec and assigns it to the Placement field.
func (o *VcenterVchaClusterWitnessSpec) SetPlacement(v VcenterVchaPlacementSpec) {
	o.Placement = &v
}

// GetHaIp returns the HaIp field value
func (o *VcenterVchaClusterWitnessSpec) GetHaIp() VcenterVchaIpSpec {
	if o == nil {
		var ret VcenterVchaIpSpec
		return ret
	}

	return o.HaIp
}

// GetHaIpOk returns a tuple with the HaIp field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaClusterWitnessSpec) GetHaIpOk() (*VcenterVchaIpSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HaIp, true
}

// SetHaIp sets field value
func (o *VcenterVchaClusterWitnessSpec) SetHaIp(v VcenterVchaIpSpec) {
	o.HaIp = v
}

func (o VcenterVchaClusterWitnessSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	if true {
		toSerialize["ha_ip"] = o.HaIp
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaClusterWitnessSpec struct {
	value *VcenterVchaClusterWitnessSpec
	isSet bool
}

func (v NullableVcenterVchaClusterWitnessSpec) Get() *VcenterVchaClusterWitnessSpec {
	return v.value
}

func (v *NullableVcenterVchaClusterWitnessSpec) Set(val *VcenterVchaClusterWitnessSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaClusterWitnessSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaClusterWitnessSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaClusterWitnessSpec(val *VcenterVchaClusterWitnessSpec) *NullableVcenterVchaClusterWitnessSpec {
	return &NullableVcenterVchaClusterWitnessSpec{value: val, isSet: true}
}

func (v NullableVcenterVchaClusterWitnessSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaClusterWitnessSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


