/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterVchaConnectionSpec struct for VcenterVchaConnectionSpec
type VcenterVchaConnectionSpec struct {
	// IP Address or DNS of the vCenter.
	Hostname string `json:"hostname"`
	// Port number. If unset, port 443 will be used.
	Port *int64 `json:"port,omitempty"`
	// SHA1 hash of the server SSL certificate. If unset, empty ssl thumbprint is assumed.
	SslThumbprint *string `json:"ssl_thumbprint,omitempty"`
	// Username to access the server. This field is currently required. If unset, an error is returned. In the future, if this field is unset, the system will attempt to identify the user. If a user cannot be identified, then the requested operation will fail.
	Username *string `json:"username,omitempty"`
	// Password for the specified user. This field is currently required. If unset, an empty password is assumed. In the future, if this field is unset, the system will attempt to authenticate the user. If a user cannot be identified, then the requested operation will fail.
	Password *string `json:"password,omitempty"`
}

// NewVcenterVchaConnectionSpec instantiates a new VcenterVchaConnectionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterVchaConnectionSpec(hostname string) *VcenterVchaConnectionSpec {
	this := VcenterVchaConnectionSpec{}
	this.Hostname = hostname
	return &this
}

// NewVcenterVchaConnectionSpecWithDefaults instantiates a new VcenterVchaConnectionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterVchaConnectionSpecWithDefaults() *VcenterVchaConnectionSpec {
	this := VcenterVchaConnectionSpec{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *VcenterVchaConnectionSpec) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *VcenterVchaConnectionSpec) GetHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *VcenterVchaConnectionSpec) SetHostname(v string) {
	o.Hostname = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *VcenterVchaConnectionSpec) GetPort() int64 {
	if o == nil || o.Port == nil {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaConnectionSpec) GetPortOk() (*int64, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *VcenterVchaConnectionSpec) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *VcenterVchaConnectionSpec) SetPort(v int64) {
	o.Port = &v
}

// GetSslThumbprint returns the SslThumbprint field value if set, zero value otherwise.
func (o *VcenterVchaConnectionSpec) GetSslThumbprint() string {
	if o == nil || o.SslThumbprint == nil {
		var ret string
		return ret
	}
	return *o.SslThumbprint
}

// GetSslThumbprintOk returns a tuple with the SslThumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaConnectionSpec) GetSslThumbprintOk() (*string, bool) {
	if o == nil || o.SslThumbprint == nil {
		return nil, false
	}
	return o.SslThumbprint, true
}

// HasSslThumbprint returns a boolean if a field has been set.
func (o *VcenterVchaConnectionSpec) HasSslThumbprint() bool {
	if o != nil && o.SslThumbprint != nil {
		return true
	}

	return false
}

// SetSslThumbprint gets a reference to the given string and assigns it to the SslThumbprint field.
func (o *VcenterVchaConnectionSpec) SetSslThumbprint(v string) {
	o.SslThumbprint = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *VcenterVchaConnectionSpec) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaConnectionSpec) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *VcenterVchaConnectionSpec) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *VcenterVchaConnectionSpec) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *VcenterVchaConnectionSpec) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterVchaConnectionSpec) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *VcenterVchaConnectionSpec) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *VcenterVchaConnectionSpec) SetPassword(v string) {
	o.Password = &v
}

func (o VcenterVchaConnectionSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.SslThumbprint != nil {
		toSerialize["ssl_thumbprint"] = o.SslThumbprint
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterVchaConnectionSpec struct {
	value *VcenterVchaConnectionSpec
	isSet bool
}

func (v NullableVcenterVchaConnectionSpec) Get() *VcenterVchaConnectionSpec {
	return v.value
}

func (v *NullableVcenterVchaConnectionSpec) Set(val *VcenterVchaConnectionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVchaConnectionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVchaConnectionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVchaConnectionSpec(val *VcenterVchaConnectionSpec) *NullableVcenterVchaConnectionSpec {
	return &NullableVcenterVchaConnectionSpec{value: val, isSet: true}
}

func (v NullableVcenterVchaConnectionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVchaConnectionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


