/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VcenterNamespaceManagementLoadBalancersSummary struct for VcenterNamespaceManagementLoadBalancersSummary
type VcenterNamespaceManagementLoadBalancersSummary struct {
	// An DNS compliant identifier for a load balancer, which can be used to query or configure the load balancer properties. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig.
	Id string `json:"id"`
	Provider VcenterNamespaceManagementLoadBalancersProvider `json:"provider"`
}

// NewVcenterNamespaceManagementLoadBalancersSummary instantiates a new VcenterNamespaceManagementLoadBalancersSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterNamespaceManagementLoadBalancersSummary(id string, provider VcenterNamespaceManagementLoadBalancersProvider) *VcenterNamespaceManagementLoadBalancersSummary {
	this := VcenterNamespaceManagementLoadBalancersSummary{}
	this.Id = id
	this.Provider = provider
	return &this
}

// NewVcenterNamespaceManagementLoadBalancersSummaryWithDefaults instantiates a new VcenterNamespaceManagementLoadBalancersSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterNamespaceManagementLoadBalancersSummaryWithDefaults() *VcenterNamespaceManagementLoadBalancersSummary {
	this := VcenterNamespaceManagementLoadBalancersSummary{}
	return &this
}

// GetId returns the Id field value
func (o *VcenterNamespaceManagementLoadBalancersSummary) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersSummary) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VcenterNamespaceManagementLoadBalancersSummary) SetId(v string) {
	o.Id = v
}

// GetProvider returns the Provider field value
func (o *VcenterNamespaceManagementLoadBalancersSummary) GetProvider() VcenterNamespaceManagementLoadBalancersProvider {
	if o == nil {
		var ret VcenterNamespaceManagementLoadBalancersProvider
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *VcenterNamespaceManagementLoadBalancersSummary) GetProviderOk() (*VcenterNamespaceManagementLoadBalancersProvider, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *VcenterNamespaceManagementLoadBalancersSummary) SetProvider(v VcenterNamespaceManagementLoadBalancersProvider) {
	o.Provider = v
}

func (o VcenterNamespaceManagementLoadBalancersSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["provider"] = o.Provider
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterNamespaceManagementLoadBalancersSummary struct {
	value *VcenterNamespaceManagementLoadBalancersSummary
	isSet bool
}

func (v NullableVcenterNamespaceManagementLoadBalancersSummary) Get() *VcenterNamespaceManagementLoadBalancersSummary {
	return v.value
}

func (v *NullableVcenterNamespaceManagementLoadBalancersSummary) Set(val *VcenterNamespaceManagementLoadBalancersSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterNamespaceManagementLoadBalancersSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterNamespaceManagementLoadBalancersSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterNamespaceManagementLoadBalancersSummary(val *VcenterNamespaceManagementLoadBalancersSummary) *NullableVcenterNamespaceManagementLoadBalancersSummary {
	return &NullableVcenterNamespaceManagementLoadBalancersSummary{value: val, isSet: true}
}

func (v NullableVcenterNamespaceManagementLoadBalancersSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterNamespaceManagementLoadBalancersSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


