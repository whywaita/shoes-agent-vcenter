/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterVmHardwareEthernetMacAddressType The Ethernet.MacAddressType enumerated type defines the valid MAC address origins for a virtual Ethernet adapter.
type VcenterVmHardwareEthernetMacAddressType string

// List of vcenter.vm.hardware.ethernet.mac_address_type
const (
	VCENTERVMHARDWAREETHERNETMACADDRESSTYPE_MANUAL VcenterVmHardwareEthernetMacAddressType = "MANUAL"
	VCENTERVMHARDWAREETHERNETMACADDRESSTYPE_GENERATED VcenterVmHardwareEthernetMacAddressType = "GENERATED"
	VCENTERVMHARDWAREETHERNETMACADDRESSTYPE_ASSIGNED VcenterVmHardwareEthernetMacAddressType = "ASSIGNED"
)

// All allowed values of VcenterVmHardwareEthernetMacAddressType enum
var AllowedVcenterVmHardwareEthernetMacAddressTypeEnumValues = []VcenterVmHardwareEthernetMacAddressType{
	"MANUAL",
	"GENERATED",
	"ASSIGNED",
}

func (v *VcenterVmHardwareEthernetMacAddressType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterVmHardwareEthernetMacAddressType(value)
	for _, existing := range AllowedVcenterVmHardwareEthernetMacAddressTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterVmHardwareEthernetMacAddressType", value)
}

// NewVcenterVmHardwareEthernetMacAddressTypeFromValue returns a pointer to a valid VcenterVmHardwareEthernetMacAddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterVmHardwareEthernetMacAddressTypeFromValue(v string) (*VcenterVmHardwareEthernetMacAddressType, error) {
	ev := VcenterVmHardwareEthernetMacAddressType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterVmHardwareEthernetMacAddressType: valid values are %v", v, AllowedVcenterVmHardwareEthernetMacAddressTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterVmHardwareEthernetMacAddressType) IsValid() bool {
	for _, existing := range AllowedVcenterVmHardwareEthernetMacAddressTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vcenter.vm.hardware.ethernet.mac_address_type value
func (v VcenterVmHardwareEthernetMacAddressType) Ptr() *VcenterVmHardwareEthernetMacAddressType {
	return &v
}

type NullableVcenterVmHardwareEthernetMacAddressType struct {
	value *VcenterVmHardwareEthernetMacAddressType
	isSet bool
}

func (v NullableVcenterVmHardwareEthernetMacAddressType) Get() *VcenterVmHardwareEthernetMacAddressType {
	return v.value
}

func (v *NullableVcenterVmHardwareEthernetMacAddressType) Set(val *VcenterVmHardwareEthernetMacAddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterVmHardwareEthernetMacAddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterVmHardwareEthernetMacAddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterVmHardwareEthernetMacAddressType(val *VcenterVmHardwareEthernetMacAddressType) *NullableVcenterVmHardwareEthernetMacAddressType {
	return &NullableVcenterVmHardwareEthernetMacAddressType{value: val, isSet: true}
}

func (v NullableVcenterVmHardwareEthernetMacAddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterVmHardwareEthernetMacAddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

