/*
vcenter

VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth The ServicesAppliedConfig.Health enumerated type is an indicator for the consistency of the applied Key Provider Service configuration in a cluster with respect to the desired state.
type VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth string

// List of VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth
const (
	VCENTERTRUSTEDINFRASTRUCTURETRUSTEDCLUSTERSKMSSERVICESAPPLIEDCONFIGHEALTH_NONE VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth = "NONE"
	VCENTERTRUSTEDINFRASTRUCTURETRUSTEDCLUSTERSKMSSERVICESAPPLIEDCONFIGHEALTH_OK VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth = "OK"
	VCENTERTRUSTEDINFRASTRUCTURETRUSTEDCLUSTERSKMSSERVICESAPPLIEDCONFIGHEALTH_ERROR VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth = "ERROR"
)

// All allowed values of VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth enum
var AllowedVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealthEnumValues = []VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth{
	"NONE",
	"OK",
	"ERROR",
}

func (v *VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth(value)
	for _, existing := range AllowedVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth", value)
}

// NewVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealthFromValue returns a pointer to a valid VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealthFromValue(v string) (*VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth, error) {
	ev := VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth: valid values are %v", v, AllowedVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) IsValid() bool {
	for _, existing := range AllowedVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth value
func (v VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) Ptr() *VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth {
	return &v
}

type NullableVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth struct {
	value *VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth
	isSet bool
}

func (v NullableVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) Get() *VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth {
	return v.value
}

func (v *NullableVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) Set(val *VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth(val *VcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) *NullableVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth {
	return &NullableVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth{value: val, isSet: true}
}

func (v NullableVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterTrustedInfrastructureTrustedClustersKmsServicesAppliedConfigHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

